{
  "magicNumber": 1635018093,
  "version": 14,
  "types": [
    {
      "id": 0,
      "path": [
        "sp_core",
        "crypto",
        "AccountId32"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 1,
              "typeName": "[u8; 32]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 1,
      "path": [],
      "params": [],
      "type": {
        "tag": "SizedVec",
        "value": {
          "len": 32,
          "typeParam": 2
        }
      },
      "docs": []
    },
    {
      "id": 2,
      "path": [],
      "params": [],
      "type": {
        "tag": "Primitive",
        "value": {
          "kind": "u8"
        }
      },
      "docs": []
    },
    {
      "id": 3,
      "path": [
        "frame_system",
        "AccountInfo"
      ],
      "params": [
        {
          "name": "Index",
          "typeId": 4
        },
        {
          "name": "AccountData",
          "typeId": 5
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "nonce",
              "typeId": 4,
              "typeName": "Index",
              "docs": []
            },
            {
              "name": "consumers",
              "typeId": 4,
              "typeName": "RefCount",
              "docs": []
            },
            {
              "name": "providers",
              "typeId": 4,
              "typeName": "RefCount",
              "docs": []
            },
            {
              "name": "sufficients",
              "typeId": 4,
              "typeName": "RefCount",
              "docs": []
            },
            {
              "name": "data",
              "typeId": 5,
              "typeName": "AccountData",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 4,
      "path": [],
      "params": [],
      "type": {
        "tag": "Primitive",
        "value": {
          "kind": "u32"
        }
      },
      "docs": []
    },
    {
      "id": 5,
      "path": [
        "pallet_balances",
        "types",
        "AccountData"
      ],
      "params": [
        {
          "name": "Balance",
          "typeId": 6
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "free",
              "typeId": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "reserved",
              "typeId": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "frozen",
              "typeId": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "flags",
              "typeId": 7,
              "typeName": "ExtraFlags",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 6,
      "path": [],
      "params": [],
      "type": {
        "tag": "Primitive",
        "value": {
          "kind": "u128"
        }
      },
      "docs": []
    },
    {
      "id": 7,
      "path": [
        "pallet_balances",
        "types",
        "ExtraFlags"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 6,
              "typeName": "u128",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 8,
      "path": [
        "frame_support",
        "dispatch",
        "PerDispatchClass"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 9
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "normal",
              "typeId": 9,
              "typeName": "T",
              "docs": []
            },
            {
              "name": "operational",
              "typeId": 9,
              "typeName": "T",
              "docs": []
            },
            {
              "name": "mandatory",
              "typeId": 9,
              "typeName": "T",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 9,
      "path": [
        "sp_weights",
        "weight_v2",
        "Weight"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "ref_time",
              "typeId": 10,
              "typeName": "u64",
              "docs": []
            },
            {
              "name": "proof_size",
              "typeId": 10,
              "typeName": "u64",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 10,
      "path": [],
      "params": [],
      "type": {
        "tag": "Compact",
        "value": {
          "typeParam": 11
        }
      },
      "docs": []
    },
    {
      "id": 11,
      "path": [],
      "params": [],
      "type": {
        "tag": "Primitive",
        "value": {
          "kind": "u64"
        }
      },
      "docs": []
    },
    {
      "id": 12,
      "path": [
        "primitive_types",
        "H256"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 1,
              "typeName": "[u8; 32]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 13,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 2
        }
      },
      "docs": []
    },
    {
      "id": 14,
      "path": [
        "sp_runtime",
        "generic",
        "digest",
        "Digest"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "logs",
              "typeId": 15,
              "typeName": "Vec<DigestItem>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 15,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 16
        }
      },
      "docs": []
    },
    {
      "id": 16,
      "path": [
        "sp_runtime",
        "generic",
        "digest",
        "DigestItem"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "PreRuntime",
              "fields": [
                {
                  "typeId": 17,
                  "typeName": "ConsensusEngineId",
                  "docs": []
                },
                {
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "Consensus",
              "fields": [
                {
                  "typeId": 17,
                  "typeName": "ConsensusEngineId",
                  "docs": []
                },
                {
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "Seal",
              "fields": [
                {
                  "typeId": 17,
                  "typeName": "ConsensusEngineId",
                  "docs": []
                },
                {
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "Other",
              "fields": [
                {
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "RuntimeEnvironmentUpdated",
              "fields": [],
              "index": 8,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 17,
      "path": [],
      "params": [],
      "type": {
        "tag": "SizedVec",
        "value": {
          "len": 4,
          "typeParam": 2
        }
      },
      "docs": []
    },
    {
      "id": 18,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 19
        }
      },
      "docs": []
    },
    {
      "id": 19,
      "path": [
        "frame_system",
        "EventRecord"
      ],
      "params": [
        {
          "name": "E",
          "typeId": 20
        },
        {
          "name": "T",
          "typeId": 12
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "phase",
              "typeId": 142,
              "typeName": "Phase",
              "docs": []
            },
            {
              "name": "event",
              "typeId": 20,
              "typeName": "E",
              "docs": []
            },
            {
              "name": "topics",
              "typeId": 122,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 20,
      "path": [
        "astar_runtime",
        "RuntimeEvent"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "System",
              "fields": [
                {
                  "typeId": 21,
                  "typeName": "frame_system::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": []
            },
            {
              "name": "Utility",
              "fields": [
                {
                  "typeId": 30,
                  "typeName": "pallet_utility::Event",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": []
            },
            {
              "name": "Identity",
              "fields": [
                {
                  "typeId": 33,
                  "typeName": "pallet_identity::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": []
            },
            {
              "name": "Multisig",
              "fields": [
                {
                  "typeId": 34,
                  "typeName": "pallet_multisig::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": []
            },
            {
              "name": "Proxy",
              "fields": [
                {
                  "typeId": 36,
                  "typeName": "pallet_proxy::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": []
            },
            {
              "name": "ParachainSystem",
              "fields": [
                {
                  "typeId": 39,
                  "typeName": "cumulus_pallet_parachain_system::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 20,
              "docs": []
            },
            {
              "name": "TransactionPayment",
              "fields": [
                {
                  "typeId": 41,
                  "typeName": "pallet_transaction_payment::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 30,
              "docs": []
            },
            {
              "name": "Balances",
              "fields": [
                {
                  "typeId": 42,
                  "typeName": "pallet_balances::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 31,
              "docs": []
            },
            {
              "name": "Vesting",
              "fields": [
                {
                  "typeId": 44,
                  "typeName": "pallet_vesting::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 32,
              "docs": []
            },
            {
              "name": "DappsStaking",
              "fields": [
                {
                  "typeId": 45,
                  "typeName": "pallet_dapps_staking::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 34,
              "docs": []
            },
            {
              "name": "BlockReward",
              "fields": [
                {
                  "typeId": 51,
                  "typeName": "pallet_block_reward::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 35,
              "docs": []
            },
            {
              "name": "Assets",
              "fields": [
                {
                  "typeId": 55,
                  "typeName": "pallet_assets::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 36,
              "docs": []
            },
            {
              "name": "CollatorSelection",
              "fields": [
                {
                  "typeId": 56,
                  "typeName": "pallet_collator_selection::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 41,
              "docs": []
            },
            {
              "name": "Session",
              "fields": [
                {
                  "typeId": 58,
                  "typeName": "pallet_session::Event",
                  "docs": []
                }
              ],
              "index": 42,
              "docs": []
            },
            {
              "name": "XcmpQueue",
              "fields": [
                {
                  "typeId": 59,
                  "typeName": "cumulus_pallet_xcmp_queue::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 50,
              "docs": []
            },
            {
              "name": "PolkadotXcm",
              "fields": [
                {
                  "typeId": 62,
                  "typeName": "pallet_xcm::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 51,
              "docs": []
            },
            {
              "name": "CumulusXcm",
              "fields": [
                {
                  "typeId": 116,
                  "typeName": "cumulus_pallet_xcm::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 52,
              "docs": []
            },
            {
              "name": "DmpQueue",
              "fields": [
                {
                  "typeId": 117,
                  "typeName": "cumulus_pallet_dmp_queue::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 53,
              "docs": []
            },
            {
              "name": "XcAssetConfig",
              "fields": [
                {
                  "typeId": 118,
                  "typeName": "pallet_xc_asset_config::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 54,
              "docs": []
            },
            {
              "name": "Xtokens",
              "fields": [
                {
                  "typeId": 119,
                  "typeName": "orml_xtokens::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 55,
              "docs": []
            },
            {
              "name": "EVM",
              "fields": [
                {
                  "typeId": 120,
                  "typeName": "pallet_evm::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 60,
              "docs": []
            },
            {
              "name": "Ethereum",
              "fields": [
                {
                  "typeId": 123,
                  "typeName": "pallet_ethereum::Event",
                  "docs": []
                }
              ],
              "index": 61,
              "docs": []
            },
            {
              "name": "EthCall",
              "fields": [
                {
                  "typeId": 132,
                  "typeName": "pallet_custom_signatures::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 62,
              "docs": []
            },
            {
              "name": "BaseFee",
              "fields": [
                {
                  "typeId": 133,
                  "typeName": "pallet_base_fee::Event",
                  "docs": []
                }
              ],
              "index": 63,
              "docs": []
            },
            {
              "name": "Contracts",
              "fields": [
                {
                  "typeId": 137,
                  "typeName": "pallet_contracts::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 70,
              "docs": []
            },
            {
              "name": "Sudo",
              "fields": [
                {
                  "typeId": 140,
                  "typeName": "pallet_sudo::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 99,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 21,
      "path": [
        "frame_system",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "ExtrinsicSuccess",
              "fields": [
                {
                  "name": "dispatch_info",
                  "typeId": 22,
                  "typeName": "DispatchInfo",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "An extrinsic completed successfully."
              ]
            },
            {
              "name": "ExtrinsicFailed",
              "fields": [
                {
                  "name": "dispatch_error",
                  "typeId": 25,
                  "typeName": "DispatchError",
                  "docs": []
                },
                {
                  "name": "dispatch_info",
                  "typeId": 22,
                  "typeName": "DispatchInfo",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "An extrinsic failed."
              ]
            },
            {
              "name": "CodeUpdated",
              "fields": [],
              "index": 2,
              "docs": [
                "`:code` was updated."
              ]
            },
            {
              "name": "NewAccount",
              "fields": [
                {
                  "name": "account",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "A new account was created."
              ]
            },
            {
              "name": "KilledAccount",
              "fields": [
                {
                  "name": "account",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "An account was reaped."
              ]
            },
            {
              "name": "Remarked",
              "fields": [
                {
                  "name": "sender",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "hash",
                  "typeId": 12,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "On on-chain remark happened."
              ]
            }
          ]
        }
      },
      "docs": [
        "Event for the System pallet."
      ]
    },
    {
      "id": 22,
      "path": [
        "frame_support",
        "dispatch",
        "DispatchInfo"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "weight",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "class",
              "typeId": 23,
              "typeName": "DispatchClass",
              "docs": []
            },
            {
              "name": "pays_fee",
              "typeId": 24,
              "typeName": "Pays",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 23,
      "path": [
        "frame_support",
        "dispatch",
        "DispatchClass"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Normal",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Operational",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Mandatory",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 24,
      "path": [
        "frame_support",
        "dispatch",
        "Pays"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Yes",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "No",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 25,
      "path": [
        "sp_runtime",
        "DispatchError"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Other",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "CannotLookup",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "BadOrigin",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "Module",
              "fields": [
                {
                  "typeId": 26,
                  "typeName": "ModuleError",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "ConsumerRemaining",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "NoProviders",
              "fields": [],
              "index": 5,
              "docs": []
            },
            {
              "name": "TooManyConsumers",
              "fields": [],
              "index": 6,
              "docs": []
            },
            {
              "name": "Token",
              "fields": [
                {
                  "typeId": 27,
                  "typeName": "TokenError",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "Arithmetic",
              "fields": [
                {
                  "typeId": 28,
                  "typeName": "ArithmeticError",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            },
            {
              "name": "Transactional",
              "fields": [
                {
                  "typeId": 29,
                  "typeName": "TransactionalError",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": []
            },
            {
              "name": "Exhausted",
              "fields": [],
              "index": 10,
              "docs": []
            },
            {
              "name": "Corruption",
              "fields": [],
              "index": 11,
              "docs": []
            },
            {
              "name": "Unavailable",
              "fields": [],
              "index": 12,
              "docs": []
            },
            {
              "name": "RootNotAllowed",
              "fields": [],
              "index": 13,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 26,
      "path": [
        "sp_runtime",
        "ModuleError"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "index",
              "typeId": 2,
              "typeName": "u8",
              "docs": []
            },
            {
              "name": "error",
              "typeId": 17,
              "typeName": "[u8; MAX_MODULE_ERROR_ENCODED_SIZE]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 27,
      "path": [
        "sp_runtime",
        "TokenError"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "FundsUnavailable",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "OnlyProvider",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "BelowMinimum",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "CannotCreate",
              "fields": [],
              "index": 3,
              "docs": []
            },
            {
              "name": "UnknownAsset",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "Frozen",
              "fields": [],
              "index": 5,
              "docs": []
            },
            {
              "name": "Unsupported",
              "fields": [],
              "index": 6,
              "docs": []
            },
            {
              "name": "CannotCreateHold",
              "fields": [],
              "index": 7,
              "docs": []
            },
            {
              "name": "NotExpendable",
              "fields": [],
              "index": 8,
              "docs": []
            },
            {
              "name": "Blocked",
              "fields": [],
              "index": 9,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 28,
      "path": [
        "sp_arithmetic",
        "ArithmeticError"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Underflow",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Overflow",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "DivisionByZero",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 29,
      "path": [
        "sp_runtime",
        "TransactionalError"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "LimitReached",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "NoLayer",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 30,
      "path": [
        "pallet_utility",
        "pallet",
        "Event"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "BatchInterrupted",
              "fields": [
                {
                  "name": "index",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "error",
                  "typeId": 25,
                  "typeName": "DispatchError",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
                "well as the error."
              ]
            },
            {
              "name": "BatchCompleted",
              "fields": [],
              "index": 1,
              "docs": [
                "Batch of dispatches completed fully with no error."
              ]
            },
            {
              "name": "BatchCompletedWithErrors",
              "fields": [],
              "index": 2,
              "docs": [
                "Batch of dispatches completed but has errors."
              ]
            },
            {
              "name": "ItemCompleted",
              "fields": [],
              "index": 3,
              "docs": [
                "A single item within a Batch of dispatches has completed with no error."
              ]
            },
            {
              "name": "ItemFailed",
              "fields": [
                {
                  "name": "error",
                  "typeId": 25,
                  "typeName": "DispatchError",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "A single item within a Batch of dispatches has completed with error."
              ]
            },
            {
              "name": "DispatchedAs",
              "fields": [
                {
                  "name": "result",
                  "typeId": 31,
                  "typeName": "DispatchResult",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "A call was dispatched."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 31,
      "path": [
        "Result"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 32
        },
        {
          "name": "E",
          "typeId": 25
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Ok",
              "fields": [
                {
                  "typeId": 32,
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Err",
              "fields": [
                {
                  "typeId": 25,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 32,
      "path": [],
      "params": [],
      "type": {
        "tag": "Tuple",
        "value": {
          "fields": []
        }
      },
      "docs": []
    },
    {
      "id": 33,
      "path": [
        "pallet_identity",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "IdentitySet",
              "fields": [
                {
                  "name": "who",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A name was set or reset (which will remove all judgements)."
              ]
            },
            {
              "name": "IdentityCleared",
              "fields": [
                {
                  "name": "who",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "deposit",
                  "typeId": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "A name was cleared, and the given balance returned."
              ]
            },
            {
              "name": "IdentityKilled",
              "fields": [
                {
                  "name": "who",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "deposit",
                  "typeId": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "A name was removed and the given balance slashed."
              ]
            },
            {
              "name": "JudgementRequested",
              "fields": [
                {
                  "name": "who",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "registrar_index",
                  "typeId": 4,
                  "typeName": "RegistrarIndex",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "A judgement was asked from a registrar."
              ]
            },
            {
              "name": "JudgementUnrequested",
              "fields": [
                {
                  "name": "who",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "registrar_index",
                  "typeId": 4,
                  "typeName": "RegistrarIndex",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "A judgement request was retracted."
              ]
            },
            {
              "name": "JudgementGiven",
              "fields": [
                {
                  "name": "target",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "registrar_index",
                  "typeId": 4,
                  "typeName": "RegistrarIndex",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "A judgement was given by a registrar."
              ]
            },
            {
              "name": "RegistrarAdded",
              "fields": [
                {
                  "name": "registrar_index",
                  "typeId": 4,
                  "typeName": "RegistrarIndex",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "A registrar was added."
              ]
            },
            {
              "name": "SubIdentityAdded",
              "fields": [
                {
                  "name": "sub",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "main",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "deposit",
                  "typeId": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "A sub-identity was added to an identity and the deposit paid."
              ]
            },
            {
              "name": "SubIdentityRemoved",
              "fields": [
                {
                  "name": "sub",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "main",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "deposit",
                  "typeId": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "A sub-identity was removed from an identity and the deposit freed."
              ]
            },
            {
              "name": "SubIdentityRevoked",
              "fields": [
                {
                  "name": "sub",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "main",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "deposit",
                  "typeId": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "A sub-identity was cleared, and the given deposit repatriated from the",
                "main identity account to the sub-identity account."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 34,
      "path": [
        "pallet_multisig",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "NewMultisig",
              "fields": [
                {
                  "name": "approving",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "multisig",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "typeId": 1,
                  "typeName": "CallHash",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A new multisig operation has begun."
              ]
            },
            {
              "name": "MultisigApproval",
              "fields": [
                {
                  "name": "approving",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "timepoint",
                  "typeId": 35,
                  "typeName": "Timepoint<T::BlockNumber>",
                  "docs": []
                },
                {
                  "name": "multisig",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "typeId": 1,
                  "typeName": "CallHash",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "A multisig operation has been approved by someone."
              ]
            },
            {
              "name": "MultisigExecuted",
              "fields": [
                {
                  "name": "approving",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "timepoint",
                  "typeId": 35,
                  "typeName": "Timepoint<T::BlockNumber>",
                  "docs": []
                },
                {
                  "name": "multisig",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "typeId": 1,
                  "typeName": "CallHash",
                  "docs": []
                },
                {
                  "name": "result",
                  "typeId": 31,
                  "typeName": "DispatchResult",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "A multisig operation has been executed."
              ]
            },
            {
              "name": "MultisigCancelled",
              "fields": [
                {
                  "name": "cancelling",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "timepoint",
                  "typeId": 35,
                  "typeName": "Timepoint<T::BlockNumber>",
                  "docs": []
                },
                {
                  "name": "multisig",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "typeId": 1,
                  "typeName": "CallHash",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "A multisig operation has been cancelled."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 35,
      "path": [
        "pallet_multisig",
        "Timepoint"
      ],
      "params": [
        {
          "name": "BlockNumber",
          "typeId": 4
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "height",
              "typeId": 4,
              "typeName": "BlockNumber",
              "docs": []
            },
            {
              "name": "index",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 36,
      "path": [
        "pallet_proxy",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "ProxyExecuted",
              "fields": [
                {
                  "name": "result",
                  "typeId": 31,
                  "typeName": "DispatchResult",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A proxy was executed correctly, with the given."
              ]
            },
            {
              "name": "PureCreated",
              "fields": [
                {
                  "name": "pure",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "who",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "proxy_type",
                  "typeId": 37,
                  "typeName": "T::ProxyType",
                  "docs": []
                },
                {
                  "name": "disambiguation_index",
                  "typeId": 38,
                  "typeName": "u16",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "A pure account has been created by new proxy with given",
                "disambiguation index and proxy type."
              ]
            },
            {
              "name": "Announced",
              "fields": [
                {
                  "name": "real",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "proxy",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "typeId": 12,
                  "typeName": "CallHashOf<T>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "An announcement was placed to make a call in the future."
              ]
            },
            {
              "name": "ProxyAdded",
              "fields": [
                {
                  "name": "delegator",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "delegatee",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "proxy_type",
                  "typeId": 37,
                  "typeName": "T::ProxyType",
                  "docs": []
                },
                {
                  "name": "delay",
                  "typeId": 4,
                  "typeName": "T::BlockNumber",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "A proxy was added."
              ]
            },
            {
              "name": "ProxyRemoved",
              "fields": [
                {
                  "name": "delegator",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "delegatee",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "proxy_type",
                  "typeId": 37,
                  "typeName": "T::ProxyType",
                  "docs": []
                },
                {
                  "name": "delay",
                  "typeId": 4,
                  "typeName": "T::BlockNumber",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "A proxy was removed."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 37,
      "path": [
        "astar_runtime",
        "ProxyType"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Any",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "NonTransfer",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Balances",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "Assets",
              "fields": [],
              "index": 3,
              "docs": []
            },
            {
              "name": "IdentityJudgement",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "CancelProxy",
              "fields": [],
              "index": 5,
              "docs": []
            },
            {
              "name": "DappsStaking",
              "fields": [],
              "index": 6,
              "docs": []
            },
            {
              "name": "StakerRewardClaim",
              "fields": [],
              "index": 7,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 38,
      "path": [],
      "params": [],
      "type": {
        "tag": "Primitive",
        "value": {
          "kind": "u16"
        }
      },
      "docs": []
    },
    {
      "id": 39,
      "path": [
        "cumulus_pallet_parachain_system",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "ValidationFunctionStored",
              "fields": [],
              "index": 0,
              "docs": [
                "The validation function has been scheduled to apply."
              ]
            },
            {
              "name": "ValidationFunctionApplied",
              "fields": [
                {
                  "name": "relay_chain_block_num",
                  "typeId": 4,
                  "typeName": "RelayChainBlockNumber",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "The validation function was applied as of the contained relay chain block number."
              ]
            },
            {
              "name": "ValidationFunctionDiscarded",
              "fields": [],
              "index": 2,
              "docs": [
                "The relay-chain aborted the upgrade process."
              ]
            },
            {
              "name": "UpgradeAuthorized",
              "fields": [
                {
                  "name": "code_hash",
                  "typeId": 12,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "An upgrade has been authorized."
              ]
            },
            {
              "name": "DownwardMessagesReceived",
              "fields": [
                {
                  "name": "count",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Some downward messages have been received and will be processed."
              ]
            },
            {
              "name": "DownwardMessagesProcessed",
              "fields": [
                {
                  "name": "weight_used",
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "dmq_head",
                  "typeId": 12,
                  "typeName": "relay_chain::Hash",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Downward messages were processed using the given weight."
              ]
            },
            {
              "name": "UpwardMessageSent",
              "fields": [
                {
                  "name": "message_hash",
                  "typeId": 40,
                  "typeName": "Option<XcmHash>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "An upward message was sent to the relay chain."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 40,
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 1
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "typeId": 1,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 41,
      "path": [
        "pallet_transaction_payment",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "TransactionFeePaid",
              "fields": [
                {
                  "name": "who",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "actual_fee",
                  "typeId": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "tip",
                  "typeId": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
                "has been paid by `who`."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 42,
      "path": [
        "pallet_balances",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T"
        },
        {
          "name": "I"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Endowed",
              "fields": [
                {
                  "name": "account",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "free_balance",
                  "typeId": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "An account was created with some free balance."
              ]
            },
            {
              "name": "DustLost",
              "fields": [
                {
                  "name": "account",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "An account was removed whose balance was non-zero but below ExistentialDeposit,",
                "resulting in an outright loss."
              ]
            },
            {
              "name": "Transfer",
              "fields": [
                {
                  "name": "from",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "to",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Transfer succeeded."
              ]
            },
            {
              "name": "BalanceSet",
              "fields": [
                {
                  "name": "who",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "free",
                  "typeId": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "A balance was set by root."
              ]
            },
            {
              "name": "Reserved",
              "fields": [
                {
                  "name": "who",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Some balance was reserved (moved from free to reserved)."
              ]
            },
            {
              "name": "Unreserved",
              "fields": [
                {
                  "name": "who",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Some balance was unreserved (moved from reserved to free)."
              ]
            },
            {
              "name": "ReserveRepatriated",
              "fields": [
                {
                  "name": "from",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "to",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "T::Balance",
                  "docs": []
                },
                {
                  "name": "destination_status",
                  "typeId": 43,
                  "typeName": "Status",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Some balance was moved from the reserve of the first account to the second account.",
                "Final argument indicates the destination balance type."
              ]
            },
            {
              "name": "Deposit",
              "fields": [
                {
                  "name": "who",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Some amount was deposited (e.g. for transaction fees)."
              ]
            },
            {
              "name": "Withdraw",
              "fields": [
                {
                  "name": "who",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Some amount was withdrawn from the account (e.g. for transaction fees)."
              ]
            },
            {
              "name": "Slashed",
              "fields": [
                {
                  "name": "who",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Some amount was removed from the account (e.g. for misbehavior)."
              ]
            },
            {
              "name": "Minted",
              "fields": [
                {
                  "name": "who",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "Some amount was minted into an account."
              ]
            },
            {
              "name": "Burned",
              "fields": [
                {
                  "name": "who",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": [
                "Some amount was burned from an account."
              ]
            },
            {
              "name": "Suspended",
              "fields": [
                {
                  "name": "who",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": [
                "Some amount was suspended from an account (it can be restored later)."
              ]
            },
            {
              "name": "Restored",
              "fields": [
                {
                  "name": "who",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": [
                "Some amount was restored into an account."
              ]
            },
            {
              "name": "Upgraded",
              "fields": [
                {
                  "name": "who",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": [
                "An account was upgraded."
              ]
            },
            {
              "name": "Issued",
              "fields": [
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": [
                "Total issuance was increased by `amount`, creating a credit to be balanced."
              ]
            },
            {
              "name": "Rescinded",
              "fields": [
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": [
                "Total issuance was decreased by `amount`, creating a debt to be balanced."
              ]
            },
            {
              "name": "Locked",
              "fields": [
                {
                  "name": "who",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": [
                "Some balance was locked."
              ]
            },
            {
              "name": "Unlocked",
              "fields": [
                {
                  "name": "who",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 18,
              "docs": [
                "Some balance was unlocked."
              ]
            },
            {
              "name": "Frozen",
              "fields": [
                {
                  "name": "who",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": [
                "Some balance was frozen."
              ]
            },
            {
              "name": "Thawed",
              "fields": [
                {
                  "name": "who",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 20,
              "docs": [
                "Some balance was thawed."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 43,
      "path": [
        "frame_support",
        "traits",
        "tokens",
        "misc",
        "BalanceStatus"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Free",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Reserved",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 44,
      "path": [
        "pallet_vesting",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "VestingUpdated",
              "fields": [
                {
                  "name": "account",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "unvested",
                  "typeId": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "The amount vested has been updated. This could indicate a change in funds available.",
                "The balance given is the amount which is left unvested (and thus locked)."
              ]
            },
            {
              "name": "VestingCompleted",
              "fields": [
                {
                  "name": "account",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "An \\[account\\] has become fully vested."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 45,
      "path": [
        "pallet_dapps_staking",
        "pallet",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "BondAndStake",
              "fields": [
                {
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "typeId": 46,
                  "typeName": "T::SmartContract",
                  "docs": []
                },
                {
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Account has bonded and staked funds on a smart contract."
              ]
            },
            {
              "name": "UnbondAndUnstake",
              "fields": [
                {
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "typeId": 46,
                  "typeName": "T::SmartContract",
                  "docs": []
                },
                {
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Account has unbonded & unstaked some funds. Unbonding process begins."
              ]
            },
            {
              "name": "WithdrawFromUnregistered",
              "fields": [
                {
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "typeId": 46,
                  "typeName": "T::SmartContract",
                  "docs": []
                },
                {
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Account has fully withdrawn all staked amount from an unregistered contract."
              ]
            },
            {
              "name": "Withdrawn",
              "fields": [
                {
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Account has withdrawn unbonded funds."
              ]
            },
            {
              "name": "NewContract",
              "fields": [
                {
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "typeId": 46,
                  "typeName": "T::SmartContract",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "New contract added for staking."
              ]
            },
            {
              "name": "ContractRemoved",
              "fields": [
                {
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "typeId": 46,
                  "typeName": "T::SmartContract",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Contract removed from dapps staking."
              ]
            },
            {
              "name": "NewDappStakingEra",
              "fields": [
                {
                  "typeId": 4,
                  "typeName": "EraIndex",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "New dapps staking era. Distribute era rewards to contracts."
              ]
            },
            {
              "name": "Reward",
              "fields": [
                {
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "typeId": 46,
                  "typeName": "T::SmartContract",
                  "docs": []
                },
                {
                  "typeId": 4,
                  "typeName": "EraIndex",
                  "docs": []
                },
                {
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Reward paid to staker or developer."
              ]
            },
            {
              "name": "MaintenanceMode",
              "fields": [
                {
                  "typeId": 49,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Maintenance mode has been enabled or disabled"
              ]
            },
            {
              "name": "RewardDestination",
              "fields": [
                {
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "typeId": 50,
                  "typeName": "RewardDestination",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Reward handling modified"
              ]
            },
            {
              "name": "NominationTransfer",
              "fields": [
                {
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "typeId": 46,
                  "typeName": "T::SmartContract",
                  "docs": []
                },
                {
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "typeId": 46,
                  "typeName": "T::SmartContract",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "Nomination part has been transfered from one contract to another.",
                "",
                "\\(staker account, origin smart contract, amount, target smart contract\\)"
              ]
            },
            {
              "name": "StaleRewardBurned",
              "fields": [
                {
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "typeId": 46,
                  "typeName": "T::SmartContract",
                  "docs": []
                },
                {
                  "typeId": 4,
                  "typeName": "EraIndex",
                  "docs": []
                },
                {
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": [
                "Stale, unclaimed reward from an unregistered contract has been burned.",
                "",
                "\\(developer account, smart contract, era, amount burned\\)"
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 46,
      "path": [
        "astar_runtime",
        "SmartContract"
      ],
      "params": [
        {
          "name": "AccountId",
          "typeId": 0
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Evm",
              "fields": [
                {
                  "typeId": 47,
                  "typeName": "sp_core::H160",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Wasm",
              "fields": [
                {
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 47,
      "path": [
        "primitive_types",
        "H160"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 48,
              "typeName": "[u8; 20]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 48,
      "path": [],
      "params": [],
      "type": {
        "tag": "SizedVec",
        "value": {
          "len": 20,
          "typeParam": 2
        }
      },
      "docs": []
    },
    {
      "id": 49,
      "path": [],
      "params": [],
      "type": {
        "tag": "Primitive",
        "value": {
          "kind": "bool"
        }
      },
      "docs": []
    },
    {
      "id": 50,
      "path": [
        "pallet_dapps_staking",
        "RewardDestination"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "FreeBalance",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "StakeBalance",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 51,
      "path": [
        "pallet_block_reward",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "DistributionConfigurationChanged",
              "fields": [
                {
                  "typeId": 52,
                  "typeName": "RewardDistributionConfig",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Distribution configuration has been updated."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 52,
      "path": [
        "pallet_block_reward",
        "RewardDistributionConfig"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "base_treasury_percent",
              "typeId": 53,
              "typeName": "Perbill",
              "docs": []
            },
            {
              "name": "base_staker_percent",
              "typeId": 53,
              "typeName": "Perbill",
              "docs": []
            },
            {
              "name": "dapps_percent",
              "typeId": 53,
              "typeName": "Perbill",
              "docs": []
            },
            {
              "name": "collators_percent",
              "typeId": 53,
              "typeName": "Perbill",
              "docs": []
            },
            {
              "name": "adjustable_percent",
              "typeId": 53,
              "typeName": "Perbill",
              "docs": []
            },
            {
              "name": "ideal_dapps_staking_tvl",
              "typeId": 53,
              "typeName": "Perbill",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 53,
      "path": [],
      "params": [],
      "type": {
        "tag": "Compact",
        "value": {
          "typeParam": 54
        }
      },
      "docs": []
    },
    {
      "id": 54,
      "path": [
        "sp_arithmetic",
        "per_things",
        "Perbill"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 55,
      "path": [
        "pallet_assets",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T"
        },
        {
          "name": "I"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Created",
              "fields": [
                {
                  "name": "asset_id",
                  "typeId": 6,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "creator",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Some asset class was created."
              ]
            },
            {
              "name": "Issued",
              "fields": [
                {
                  "name": "asset_id",
                  "typeId": 6,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Some assets were issued."
              ]
            },
            {
              "name": "Transferred",
              "fields": [
                {
                  "name": "asset_id",
                  "typeId": 6,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "from",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "to",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Some assets were transferred."
              ]
            },
            {
              "name": "Burned",
              "fields": [
                {
                  "name": "asset_id",
                  "typeId": 6,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "balance",
                  "typeId": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Some assets were destroyed."
              ]
            },
            {
              "name": "TeamChanged",
              "fields": [
                {
                  "name": "asset_id",
                  "typeId": 6,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "issuer",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "admin",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "freezer",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "The management team changed."
              ]
            },
            {
              "name": "OwnerChanged",
              "fields": [
                {
                  "name": "asset_id",
                  "typeId": 6,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "The owner changed."
              ]
            },
            {
              "name": "Frozen",
              "fields": [
                {
                  "name": "asset_id",
                  "typeId": 6,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "who",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Some account `who` was frozen."
              ]
            },
            {
              "name": "Thawed",
              "fields": [
                {
                  "name": "asset_id",
                  "typeId": 6,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "who",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Some account `who` was thawed."
              ]
            },
            {
              "name": "AssetFrozen",
              "fields": [
                {
                  "name": "asset_id",
                  "typeId": 6,
                  "typeName": "T::AssetId",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Some asset `asset_id` was frozen."
              ]
            },
            {
              "name": "AssetThawed",
              "fields": [
                {
                  "name": "asset_id",
                  "typeId": 6,
                  "typeName": "T::AssetId",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Some asset `asset_id` was thawed."
              ]
            },
            {
              "name": "AccountsDestroyed",
              "fields": [
                {
                  "name": "asset_id",
                  "typeId": 6,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "accounts_destroyed",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "accounts_remaining",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "Accounts were destroyed for given asset."
              ]
            },
            {
              "name": "ApprovalsDestroyed",
              "fields": [
                {
                  "name": "asset_id",
                  "typeId": 6,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "approvals_destroyed",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "approvals_remaining",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": [
                "Approvals were destroyed for given asset."
              ]
            },
            {
              "name": "DestructionStarted",
              "fields": [
                {
                  "name": "asset_id",
                  "typeId": 6,
                  "typeName": "T::AssetId",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": [
                "An asset class is in the process of being destroyed."
              ]
            },
            {
              "name": "Destroyed",
              "fields": [
                {
                  "name": "asset_id",
                  "typeId": 6,
                  "typeName": "T::AssetId",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": [
                "An asset class was destroyed."
              ]
            },
            {
              "name": "ForceCreated",
              "fields": [
                {
                  "name": "asset_id",
                  "typeId": 6,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": [
                "Some asset class was force-created."
              ]
            },
            {
              "name": "MetadataSet",
              "fields": [
                {
                  "name": "asset_id",
                  "typeId": 6,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "name",
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "symbol",
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "decimals",
                  "typeId": 2,
                  "typeName": "u8",
                  "docs": []
                },
                {
                  "name": "is_frozen",
                  "typeId": 49,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": [
                "New metadata has been set for an asset."
              ]
            },
            {
              "name": "MetadataCleared",
              "fields": [
                {
                  "name": "asset_id",
                  "typeId": 6,
                  "typeName": "T::AssetId",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": [
                "Metadata has been cleared for an asset."
              ]
            },
            {
              "name": "ApprovedTransfer",
              "fields": [
                {
                  "name": "asset_id",
                  "typeId": 6,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "source",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "delegate",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": [
                "(Additional) funds have been approved for transfer to a destination account."
              ]
            },
            {
              "name": "ApprovalCancelled",
              "fields": [
                {
                  "name": "asset_id",
                  "typeId": 6,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "delegate",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 18,
              "docs": [
                "An approval for account `delegate` was cancelled by `owner`."
              ]
            },
            {
              "name": "TransferredApproved",
              "fields": [
                {
                  "name": "asset_id",
                  "typeId": 6,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "delegate",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "destination",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": [
                "An `amount` was transferred in its entirety from `owner` to `destination` by",
                "the approved `delegate`."
              ]
            },
            {
              "name": "AssetStatusChanged",
              "fields": [
                {
                  "name": "asset_id",
                  "typeId": 6,
                  "typeName": "T::AssetId",
                  "docs": []
                }
              ],
              "index": 20,
              "docs": [
                "An asset has had its attributes changed by the `Force` origin."
              ]
            },
            {
              "name": "AssetMinBalanceChanged",
              "fields": [
                {
                  "name": "asset_id",
                  "typeId": 6,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "new_min_balance",
                  "typeId": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": [
                "The min_balance of an asset has been updated by the asset owner."
              ]
            },
            {
              "name": "Touched",
              "fields": [
                {
                  "name": "asset_id",
                  "typeId": 6,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "who",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "depositor",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 22,
              "docs": [
                "Some account `who` was created with a deposit from `depositor`."
              ]
            },
            {
              "name": "Blocked",
              "fields": [
                {
                  "name": "asset_id",
                  "typeId": 6,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "who",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 23,
              "docs": [
                "Some account `who` was blocked."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 56,
      "path": [
        "pallet_collator_selection",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "NewInvulnerables",
              "fields": [
                {
                  "typeId": 57,
                  "typeName": "Vec<T::AccountId>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "NewDesiredCandidates",
              "fields": [
                {
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "NewCandidacyBond",
              "fields": [
                {
                  "typeId": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "CandidateAdded",
              "fields": [
                {
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "typeId": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "CandidateRemoved",
              "fields": [
                {
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "CandidateSlashed",
              "fields": [
                {
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 57,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 0
        }
      },
      "docs": []
    },
    {
      "id": 58,
      "path": [
        "pallet_session",
        "pallet",
        "Event"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "NewSession",
              "fields": [
                {
                  "name": "session_index",
                  "typeId": 4,
                  "typeName": "SessionIndex",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "New session has happened. Note that the argument is the session index, not the",
                "block number as the type might suggest."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 59,
      "path": [
        "cumulus_pallet_xcmp_queue",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Success",
              "fields": [
                {
                  "name": "message_hash",
                  "typeId": 40,
                  "typeName": "Option<XcmHash>",
                  "docs": []
                },
                {
                  "name": "weight",
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Some XCM was executed ok."
              ]
            },
            {
              "name": "Fail",
              "fields": [
                {
                  "name": "message_hash",
                  "typeId": 40,
                  "typeName": "Option<XcmHash>",
                  "docs": []
                },
                {
                  "name": "error",
                  "typeId": 60,
                  "typeName": "XcmError",
                  "docs": []
                },
                {
                  "name": "weight",
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Some XCM failed."
              ]
            },
            {
              "name": "BadVersion",
              "fields": [
                {
                  "name": "message_hash",
                  "typeId": 40,
                  "typeName": "Option<XcmHash>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Bad XCM version used."
              ]
            },
            {
              "name": "BadFormat",
              "fields": [
                {
                  "name": "message_hash",
                  "typeId": 40,
                  "typeName": "Option<XcmHash>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Bad XCM format used."
              ]
            },
            {
              "name": "XcmpMessageSent",
              "fields": [
                {
                  "name": "message_hash",
                  "typeId": 40,
                  "typeName": "Option<XcmHash>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "An HRMP message was sent to a sibling parachain."
              ]
            },
            {
              "name": "OverweightEnqueued",
              "fields": [
                {
                  "name": "sender",
                  "typeId": 61,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "sent_at",
                  "typeId": 4,
                  "typeName": "RelayBlockNumber",
                  "docs": []
                },
                {
                  "name": "index",
                  "typeId": 11,
                  "typeName": "OverweightIndex",
                  "docs": []
                },
                {
                  "name": "required",
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "An XCM exceeded the individual message weight budget."
              ]
            },
            {
              "name": "OverweightServiced",
              "fields": [
                {
                  "name": "index",
                  "typeId": 11,
                  "typeName": "OverweightIndex",
                  "docs": []
                },
                {
                  "name": "used",
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "An XCM from the overweight queue was executed with the given actual weight used."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 60,
      "path": [
        "xcm",
        "v3",
        "traits",
        "Error"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Overflow",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Unimplemented",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "UntrustedReserveLocation",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "UntrustedTeleportLocation",
              "fields": [],
              "index": 3,
              "docs": []
            },
            {
              "name": "LocationFull",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "LocationNotInvertible",
              "fields": [],
              "index": 5,
              "docs": []
            },
            {
              "name": "BadOrigin",
              "fields": [],
              "index": 6,
              "docs": []
            },
            {
              "name": "InvalidLocation",
              "fields": [],
              "index": 7,
              "docs": []
            },
            {
              "name": "AssetNotFound",
              "fields": [],
              "index": 8,
              "docs": []
            },
            {
              "name": "FailedToTransactAsset",
              "fields": [],
              "index": 9,
              "docs": []
            },
            {
              "name": "NotWithdrawable",
              "fields": [],
              "index": 10,
              "docs": []
            },
            {
              "name": "LocationCannotHold",
              "fields": [],
              "index": 11,
              "docs": []
            },
            {
              "name": "ExceedsMaxMessageSize",
              "fields": [],
              "index": 12,
              "docs": []
            },
            {
              "name": "DestinationUnsupported",
              "fields": [],
              "index": 13,
              "docs": []
            },
            {
              "name": "Transport",
              "fields": [],
              "index": 14,
              "docs": []
            },
            {
              "name": "Unroutable",
              "fields": [],
              "index": 15,
              "docs": []
            },
            {
              "name": "UnknownClaim",
              "fields": [],
              "index": 16,
              "docs": []
            },
            {
              "name": "FailedToDecode",
              "fields": [],
              "index": 17,
              "docs": []
            },
            {
              "name": "MaxWeightInvalid",
              "fields": [],
              "index": 18,
              "docs": []
            },
            {
              "name": "NotHoldingFees",
              "fields": [],
              "index": 19,
              "docs": []
            },
            {
              "name": "TooExpensive",
              "fields": [],
              "index": 20,
              "docs": []
            },
            {
              "name": "Trap",
              "fields": [
                {
                  "typeId": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": []
            },
            {
              "name": "ExpectationFalse",
              "fields": [],
              "index": 22,
              "docs": []
            },
            {
              "name": "PalletNotFound",
              "fields": [],
              "index": 23,
              "docs": []
            },
            {
              "name": "NameMismatch",
              "fields": [],
              "index": 24,
              "docs": []
            },
            {
              "name": "VersionIncompatible",
              "fields": [],
              "index": 25,
              "docs": []
            },
            {
              "name": "HoldingWouldOverflow",
              "fields": [],
              "index": 26,
              "docs": []
            },
            {
              "name": "ExportError",
              "fields": [],
              "index": 27,
              "docs": []
            },
            {
              "name": "ReanchorFailed",
              "fields": [],
              "index": 28,
              "docs": []
            },
            {
              "name": "NoDeal",
              "fields": [],
              "index": 29,
              "docs": []
            },
            {
              "name": "FeesNotMet",
              "fields": [],
              "index": 30,
              "docs": []
            },
            {
              "name": "LockError",
              "fields": [],
              "index": 31,
              "docs": []
            },
            {
              "name": "NoPermission",
              "fields": [],
              "index": 32,
              "docs": []
            },
            {
              "name": "Unanchored",
              "fields": [],
              "index": 33,
              "docs": []
            },
            {
              "name": "NotDepositable",
              "fields": [],
              "index": 34,
              "docs": []
            },
            {
              "name": "UnhandledXcmVersion",
              "fields": [],
              "index": 35,
              "docs": []
            },
            {
              "name": "WeightLimitReached",
              "fields": [
                {
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 36,
              "docs": []
            },
            {
              "name": "Barrier",
              "fields": [],
              "index": 37,
              "docs": []
            },
            {
              "name": "WeightNotComputable",
              "fields": [],
              "index": 38,
              "docs": []
            },
            {
              "name": "ExceedsStackLimit",
              "fields": [],
              "index": 39,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 61,
      "path": [
        "polkadot_parachain",
        "primitives",
        "Id"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 62,
      "path": [
        "pallet_xcm",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Attempted",
              "fields": [
                {
                  "typeId": 63,
                  "typeName": "xcm::latest::Outcome",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Execution of an XCM message was attempted.",
                "",
                "\\[ outcome \\]"
              ]
            },
            {
              "name": "Sent",
              "fields": [
                {
                  "typeId": 64,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "typeId": 64,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "typeId": 73,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "A XCM message was sent.",
                "",
                "\\[ origin, destination, message \\]"
              ]
            },
            {
              "name": "UnexpectedResponse",
              "fields": [
                {
                  "typeId": 64,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "typeId": 11,
                  "typeName": "QueryId",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Query response received which does not match a registered query. This may be because a",
                "matching query was never registered, it may be because it is a duplicate response, or",
                "because the query timed out.",
                "",
                "\\[ origin location, id \\]"
              ]
            },
            {
              "name": "ResponseReady",
              "fields": [
                {
                  "typeId": 11,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "typeId": 84,
                  "typeName": "Response",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Query response has been received and is ready for taking with `take_response`. There is",
                "no registered notification call.",
                "",
                "\\[ id, response \\]"
              ]
            },
            {
              "name": "Notified",
              "fields": [
                {
                  "typeId": 11,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "typeId": 2,
                  "typeName": "u8",
                  "docs": []
                },
                {
                  "typeId": 2,
                  "typeName": "u8",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Query response has been received and query is removed. The registered notification has",
                "been dispatched and executed successfully.",
                "",
                "\\[ id, pallet index, call index \\]"
              ]
            },
            {
              "name": "NotifyOverweight",
              "fields": [
                {
                  "typeId": 11,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "typeId": 2,
                  "typeName": "u8",
                  "docs": []
                },
                {
                  "typeId": 2,
                  "typeName": "u8",
                  "docs": []
                },
                {
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Query response has been received and query is removed. The registered notification could",
                "not be dispatched because the dispatch weight is greater than the maximum weight",
                "originally budgeted by this runtime for the query result.",
                "",
                "\\[ id, pallet index, call index, actual weight, max budgeted weight \\]"
              ]
            },
            {
              "name": "NotifyDispatchError",
              "fields": [
                {
                  "typeId": 11,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "typeId": 2,
                  "typeName": "u8",
                  "docs": []
                },
                {
                  "typeId": 2,
                  "typeName": "u8",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Query response has been received and query is removed. There was a general error with",
                "dispatching the notification call.",
                "",
                "\\[ id, pallet index, call index \\]"
              ]
            },
            {
              "name": "NotifyDecodeFailed",
              "fields": [
                {
                  "typeId": 11,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "typeId": 2,
                  "typeName": "u8",
                  "docs": []
                },
                {
                  "typeId": 2,
                  "typeName": "u8",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Query response has been received and query is removed. The dispatch was unable to be",
                "decoded into a `Call`; this might be due to dispatch function having a signature which",
                "is not `(origin, QueryId, Response)`.",
                "",
                "\\[ id, pallet index, call index \\]"
              ]
            },
            {
              "name": "InvalidResponder",
              "fields": [
                {
                  "typeId": 64,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "typeId": 11,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "typeId": 93,
                  "typeName": "Option<MultiLocation>",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Expected query response has been received but the origin location of the response does",
                "not match that expected. The query remains registered for a later, valid, response to",
                "be received and acted upon.",
                "",
                "\\[ origin location, id, expected location \\]"
              ]
            },
            {
              "name": "InvalidResponderVersion",
              "fields": [
                {
                  "typeId": 64,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "typeId": 11,
                  "typeName": "QueryId",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Expected query response has been received but the expected origin location placed in",
                "storage by this runtime previously cannot be decoded. The query remains registered.",
                "",
                "This is unexpected (since a location placed in storage in a previously executing",
                "runtime should be readable prior to query timeout) and dangerous since the possibly",
                "valid response will be dropped. Manual governance intervention is probably going to be",
                "needed.",
                "",
                "\\[ origin location, id \\]"
              ]
            },
            {
              "name": "ResponseTaken",
              "fields": [
                {
                  "typeId": 11,
                  "typeName": "QueryId",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "Received query response has been read and removed.",
                "",
                "\\[ id \\]"
              ]
            },
            {
              "name": "AssetsTrapped",
              "fields": [
                {
                  "typeId": 12,
                  "typeName": "H256",
                  "docs": []
                },
                {
                  "typeId": 64,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "typeId": 101,
                  "typeName": "VersionedMultiAssets",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": [
                "Some assets have been placed in an asset trap.",
                "",
                "\\[ hash, origin, assets \\]"
              ]
            },
            {
              "name": "VersionChangeNotified",
              "fields": [
                {
                  "typeId": 64,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "typeId": 4,
                  "typeName": "XcmVersion",
                  "docs": []
                },
                {
                  "typeId": 76,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": [
                "An XCM version change notification message has been attempted to be sent.",
                "",
                "The cost of sending it (borne by the chain) is included.",
                "",
                "\\[ destination, result, cost \\]"
              ]
            },
            {
              "name": "SupportedVersionChanged",
              "fields": [
                {
                  "typeId": 64,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "typeId": 4,
                  "typeName": "XcmVersion",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": [
                "The supported version of a location has been changed. This might be through an",
                "automatic notification or a manual intervention.",
                "",
                "\\[ location, XCM version \\]"
              ]
            },
            {
              "name": "NotifyTargetSendFail",
              "fields": [
                {
                  "typeId": 64,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "typeId": 11,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "typeId": 60,
                  "typeName": "XcmError",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": [
                "A given location which had a version change subscription was dropped owing to an error",
                "sending the notification to it.",
                "",
                "\\[ location, query ID, error \\]"
              ]
            },
            {
              "name": "NotifyTargetMigrationFail",
              "fields": [
                {
                  "typeId": 115,
                  "typeName": "VersionedMultiLocation",
                  "docs": []
                },
                {
                  "typeId": 11,
                  "typeName": "QueryId",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": [
                "A given location which had a version change subscription was dropped owing to an error",
                "migrating the location to our new XCM format.",
                "",
                "\\[ location, query ID \\]"
              ]
            },
            {
              "name": "InvalidQuerierVersion",
              "fields": [
                {
                  "typeId": 64,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "typeId": 11,
                  "typeName": "QueryId",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": [
                "Expected query response has been received but the expected querier location placed in",
                "storage by this runtime previously cannot be decoded. The query remains registered.",
                "",
                "This is unexpected (since a location placed in storage in a previously executing",
                "runtime should be readable prior to query timeout) and dangerous since the possibly",
                "valid response will be dropped. Manual governance intervention is probably going to be",
                "needed.",
                "",
                "\\[ origin location, id \\]"
              ]
            },
            {
              "name": "InvalidQuerier",
              "fields": [
                {
                  "typeId": 64,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "typeId": 11,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "typeId": 64,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "typeId": 93,
                  "typeName": "Option<MultiLocation>",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": [
                "Expected query response has been received but the querier location of the response does",
                "not match the expected. The query remains registered for a later, valid, response to",
                "be received and acted upon.",
                "",
                "\\[ origin location, id, expected querier, maybe actual querier \\]"
              ]
            },
            {
              "name": "VersionNotifyStarted",
              "fields": [
                {
                  "typeId": 64,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "typeId": 76,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 18,
              "docs": [
                "A remote has requested XCM version change notification from us and we have honored it.",
                "A version information message is sent to them and its cost is included.",
                "",
                "\\[ destination location, cost \\]"
              ]
            },
            {
              "name": "VersionNotifyRequested",
              "fields": [
                {
                  "typeId": 64,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "typeId": 76,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": [
                "We have requested that a remote chain sends us XCM version change notifications.",
                "",
                "\\[ destination location, cost \\]"
              ]
            },
            {
              "name": "VersionNotifyUnrequested",
              "fields": [
                {
                  "typeId": 64,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "typeId": 76,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 20,
              "docs": [
                "We have requested that a remote chain stops sending us XCM version change notifications.",
                "",
                "\\[ destination location, cost \\]"
              ]
            },
            {
              "name": "FeesPaid",
              "fields": [
                {
                  "typeId": 64,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "typeId": 76,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": [
                "Fees were paid from a location for an operation (often for using `SendXcm`).",
                "",
                "\\[ paying location, fees \\]"
              ]
            },
            {
              "name": "AssetsClaimed",
              "fields": [
                {
                  "typeId": 12,
                  "typeName": "H256",
                  "docs": []
                },
                {
                  "typeId": 64,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "typeId": 101,
                  "typeName": "VersionedMultiAssets",
                  "docs": []
                }
              ],
              "index": 22,
              "docs": [
                "Some assets have been claimed from an asset trap",
                "",
                "\\[ hash, origin, assets \\]"
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 63,
      "path": [
        "xcm",
        "v3",
        "traits",
        "Outcome"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Complete",
              "fields": [
                {
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Incomplete",
              "fields": [
                {
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "typeId": 60,
                  "typeName": "Error",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Error",
              "fields": [
                {
                  "typeId": 60,
                  "typeName": "Error",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 64,
      "path": [
        "xcm",
        "v3",
        "multilocation",
        "MultiLocation"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "parents",
              "typeId": 2,
              "typeName": "u8",
              "docs": []
            },
            {
              "name": "interior",
              "typeId": 65,
              "typeName": "Junctions",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 65,
      "path": [
        "xcm",
        "v3",
        "junctions",
        "Junctions"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Here",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "X1",
              "fields": [
                {
                  "typeId": 66,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "X2",
              "fields": [
                {
                  "typeId": 66,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 66,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "X3",
              "fields": [
                {
                  "typeId": 66,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 66,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 66,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "X4",
              "fields": [
                {
                  "typeId": 66,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 66,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 66,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 66,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "X5",
              "fields": [
                {
                  "typeId": 66,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 66,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 66,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 66,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 66,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "X6",
              "fields": [
                {
                  "typeId": 66,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 66,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 66,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 66,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 66,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 66,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "X7",
              "fields": [
                {
                  "typeId": 66,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 66,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 66,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 66,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 66,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 66,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 66,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "X8",
              "fields": [
                {
                  "typeId": 66,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 66,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 66,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 66,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 66,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 66,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 66,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 66,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 66,
      "path": [
        "xcm",
        "v3",
        "junction",
        "Junction"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Parachain",
              "fields": [
                {
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "AccountId32",
              "fields": [
                {
                  "name": "network",
                  "typeId": 68,
                  "typeName": "Option<NetworkId>",
                  "docs": []
                },
                {
                  "name": "id",
                  "typeId": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "AccountIndex64",
              "fields": [
                {
                  "name": "network",
                  "typeId": 68,
                  "typeName": "Option<NetworkId>",
                  "docs": []
                },
                {
                  "name": "index",
                  "typeId": 10,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "AccountKey20",
              "fields": [
                {
                  "name": "network",
                  "typeId": 68,
                  "typeName": "Option<NetworkId>",
                  "docs": []
                },
                {
                  "name": "key",
                  "typeId": 48,
                  "typeName": "[u8; 20]",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "PalletInstance",
              "fields": [
                {
                  "typeId": 2,
                  "typeName": "u8",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "GeneralIndex",
              "fields": [
                {
                  "typeId": 70,
                  "typeName": "u128",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "GeneralKey",
              "fields": [
                {
                  "name": "length",
                  "typeId": 2,
                  "typeName": "u8",
                  "docs": []
                },
                {
                  "name": "data",
                  "typeId": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "OnlyChild",
              "fields": [],
              "index": 7,
              "docs": []
            },
            {
              "name": "Plurality",
              "fields": [
                {
                  "name": "id",
                  "typeId": 71,
                  "typeName": "BodyId",
                  "docs": []
                },
                {
                  "name": "part",
                  "typeId": 72,
                  "typeName": "BodyPart",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            },
            {
              "name": "GlobalConsensus",
              "fields": [
                {
                  "typeId": 69,
                  "typeName": "NetworkId",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 67,
      "path": [],
      "params": [],
      "type": {
        "tag": "Compact",
        "value": {
          "typeParam": 4
        }
      },
      "docs": []
    },
    {
      "id": 68,
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 69
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "typeId": 69,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 69,
      "path": [
        "xcm",
        "v3",
        "junction",
        "NetworkId"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "ByGenesis",
              "fields": [
                {
                  "typeId": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "ByFork",
              "fields": [
                {
                  "name": "block_number",
                  "typeId": 11,
                  "typeName": "u64",
                  "docs": []
                },
                {
                  "name": "block_hash",
                  "typeId": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Polkadot",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "Kusama",
              "fields": [],
              "index": 3,
              "docs": []
            },
            {
              "name": "Westend",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "Rococo",
              "fields": [],
              "index": 5,
              "docs": []
            },
            {
              "name": "Wococo",
              "fields": [],
              "index": 6,
              "docs": []
            },
            {
              "name": "Ethereum",
              "fields": [
                {
                  "name": "chain_id",
                  "typeId": 10,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "BitcoinCore",
              "fields": [],
              "index": 8,
              "docs": []
            },
            {
              "name": "BitcoinCash",
              "fields": [],
              "index": 9,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 70,
      "path": [],
      "params": [],
      "type": {
        "tag": "Compact",
        "value": {
          "typeParam": 6
        }
      },
      "docs": []
    },
    {
      "id": 71,
      "path": [
        "xcm",
        "v3",
        "junction",
        "BodyId"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Unit",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Moniker",
              "fields": [
                {
                  "typeId": 17,
                  "typeName": "[u8; 4]",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Index",
              "fields": [
                {
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Executive",
              "fields": [],
              "index": 3,
              "docs": []
            },
            {
              "name": "Technical",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "Legislative",
              "fields": [],
              "index": 5,
              "docs": []
            },
            {
              "name": "Judicial",
              "fields": [],
              "index": 6,
              "docs": []
            },
            {
              "name": "Defense",
              "fields": [],
              "index": 7,
              "docs": []
            },
            {
              "name": "Administration",
              "fields": [],
              "index": 8,
              "docs": []
            },
            {
              "name": "Treasury",
              "fields": [],
              "index": 9,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 72,
      "path": [
        "xcm",
        "v3",
        "junction",
        "BodyPart"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Voice",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Members",
              "fields": [
                {
                  "name": "count",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Fraction",
              "fields": [
                {
                  "name": "nom",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "denom",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "AtLeastProportion",
              "fields": [
                {
                  "name": "nom",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "denom",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "MoreThanProportion",
              "fields": [
                {
                  "name": "nom",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "denom",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 73,
      "path": [
        "xcm",
        "v3",
        "Xcm"
      ],
      "params": [
        {
          "name": "Call"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 74,
              "typeName": "Vec<Instruction<Call>>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 74,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 75
        }
      },
      "docs": []
    },
    {
      "id": 75,
      "path": [
        "xcm",
        "v3",
        "Instruction"
      ],
      "params": [
        {
          "name": "Call"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "WithdrawAsset",
              "fields": [
                {
                  "typeId": 76,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "ReserveAssetDeposited",
              "fields": [
                {
                  "typeId": 76,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "ReceiveTeleportedAsset",
              "fields": [
                {
                  "typeId": 76,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "QueryResponse",
              "fields": [
                {
                  "name": "query_id",
                  "typeId": 10,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "response",
                  "typeId": 84,
                  "typeName": "Response",
                  "docs": []
                },
                {
                  "name": "max_weight",
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "querier",
                  "typeId": 93,
                  "typeName": "Option<MultiLocation>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "TransferAsset",
              "fields": [
                {
                  "name": "assets",
                  "typeId": 76,
                  "typeName": "MultiAssets",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "typeId": 64,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "TransferReserveAsset",
              "fields": [
                {
                  "name": "assets",
                  "typeId": 76,
                  "typeName": "MultiAssets",
                  "docs": []
                },
                {
                  "name": "dest",
                  "typeId": 64,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "typeId": 73,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "Transact",
              "fields": [
                {
                  "name": "origin_kind",
                  "typeId": 94,
                  "typeName": "OriginKind",
                  "docs": []
                },
                {
                  "name": "require_weight_at_most",
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "call",
                  "typeId": 95,
                  "typeName": "DoubleEncoded<Call>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "HrmpNewChannelOpenRequest",
              "fields": [
                {
                  "name": "sender",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_message_size",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_capacity",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "HrmpChannelAccepted",
              "fields": [
                {
                  "name": "recipient",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            },
            {
              "name": "HrmpChannelClosing",
              "fields": [
                {
                  "name": "initiator",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "sender",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "recipient",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": []
            },
            {
              "name": "ClearOrigin",
              "fields": [],
              "index": 10,
              "docs": []
            },
            {
              "name": "DescendOrigin",
              "fields": [
                {
                  "typeId": 65,
                  "typeName": "InteriorMultiLocation",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": []
            },
            {
              "name": "ReportError",
              "fields": [
                {
                  "typeId": 96,
                  "typeName": "QueryResponseInfo",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": []
            },
            {
              "name": "DepositAsset",
              "fields": [
                {
                  "name": "assets",
                  "typeId": 97,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "typeId": 64,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": []
            },
            {
              "name": "DepositReserveAsset",
              "fields": [
                {
                  "name": "assets",
                  "typeId": 97,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "dest",
                  "typeId": 64,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "typeId": 73,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": []
            },
            {
              "name": "ExchangeAsset",
              "fields": [
                {
                  "name": "give",
                  "typeId": 97,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "want",
                  "typeId": 76,
                  "typeName": "MultiAssets",
                  "docs": []
                },
                {
                  "name": "maximal",
                  "typeId": 49,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": []
            },
            {
              "name": "InitiateReserveWithdraw",
              "fields": [
                {
                  "name": "assets",
                  "typeId": 97,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "reserve",
                  "typeId": 64,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "typeId": 73,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": []
            },
            {
              "name": "InitiateTeleport",
              "fields": [
                {
                  "name": "assets",
                  "typeId": 97,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "dest",
                  "typeId": 64,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "typeId": 73,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": []
            },
            {
              "name": "ReportHolding",
              "fields": [
                {
                  "name": "response_info",
                  "typeId": 96,
                  "typeName": "QueryResponseInfo",
                  "docs": []
                },
                {
                  "name": "assets",
                  "typeId": 97,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                }
              ],
              "index": 18,
              "docs": []
            },
            {
              "name": "BuyExecution",
              "fields": [
                {
                  "name": "fees",
                  "typeId": 78,
                  "typeName": "MultiAsset",
                  "docs": []
                },
                {
                  "name": "weight_limit",
                  "typeId": 100,
                  "typeName": "WeightLimit",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": []
            },
            {
              "name": "RefundSurplus",
              "fields": [],
              "index": 20,
              "docs": []
            },
            {
              "name": "SetErrorHandler",
              "fields": [
                {
                  "typeId": 73,
                  "typeName": "Xcm<Call>",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": []
            },
            {
              "name": "SetAppendix",
              "fields": [
                {
                  "typeId": 73,
                  "typeName": "Xcm<Call>",
                  "docs": []
                }
              ],
              "index": 22,
              "docs": []
            },
            {
              "name": "ClearError",
              "fields": [],
              "index": 23,
              "docs": []
            },
            {
              "name": "ClaimAsset",
              "fields": [
                {
                  "name": "assets",
                  "typeId": 76,
                  "typeName": "MultiAssets",
                  "docs": []
                },
                {
                  "name": "ticket",
                  "typeId": 64,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 24,
              "docs": []
            },
            {
              "name": "Trap",
              "fields": [
                {
                  "typeId": 10,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 25,
              "docs": []
            },
            {
              "name": "SubscribeVersion",
              "fields": [
                {
                  "name": "query_id",
                  "typeId": 10,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "max_response_weight",
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 26,
              "docs": []
            },
            {
              "name": "UnsubscribeVersion",
              "fields": [],
              "index": 27,
              "docs": []
            },
            {
              "name": "BurnAsset",
              "fields": [
                {
                  "typeId": 76,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 28,
              "docs": []
            },
            {
              "name": "ExpectAsset",
              "fields": [
                {
                  "typeId": 76,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 29,
              "docs": []
            },
            {
              "name": "ExpectOrigin",
              "fields": [
                {
                  "typeId": 93,
                  "typeName": "Option<MultiLocation>",
                  "docs": []
                }
              ],
              "index": 30,
              "docs": []
            },
            {
              "name": "ExpectError",
              "fields": [
                {
                  "typeId": 85,
                  "typeName": "Option<(u32, Error)>",
                  "docs": []
                }
              ],
              "index": 31,
              "docs": []
            },
            {
              "name": "ExpectTransactStatus",
              "fields": [
                {
                  "typeId": 91,
                  "typeName": "MaybeErrorCode",
                  "docs": []
                }
              ],
              "index": 32,
              "docs": []
            },
            {
              "name": "QueryPallet",
              "fields": [
                {
                  "name": "module_name",
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "response_info",
                  "typeId": 96,
                  "typeName": "QueryResponseInfo",
                  "docs": []
                }
              ],
              "index": 33,
              "docs": []
            },
            {
              "name": "ExpectPallet",
              "fields": [
                {
                  "name": "index",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "name",
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "module_name",
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "crate_major",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "min_crate_minor",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 34,
              "docs": []
            },
            {
              "name": "ReportTransactStatus",
              "fields": [
                {
                  "typeId": 96,
                  "typeName": "QueryResponseInfo",
                  "docs": []
                }
              ],
              "index": 35,
              "docs": []
            },
            {
              "name": "ClearTransactStatus",
              "fields": [],
              "index": 36,
              "docs": []
            },
            {
              "name": "UniversalOrigin",
              "fields": [
                {
                  "typeId": 66,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 37,
              "docs": []
            },
            {
              "name": "ExportMessage",
              "fields": [
                {
                  "name": "network",
                  "typeId": 69,
                  "typeName": "NetworkId",
                  "docs": []
                },
                {
                  "name": "destination",
                  "typeId": 65,
                  "typeName": "InteriorMultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "typeId": 73,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 38,
              "docs": []
            },
            {
              "name": "LockAsset",
              "fields": [
                {
                  "name": "asset",
                  "typeId": 78,
                  "typeName": "MultiAsset",
                  "docs": []
                },
                {
                  "name": "unlocker",
                  "typeId": 64,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 39,
              "docs": []
            },
            {
              "name": "UnlockAsset",
              "fields": [
                {
                  "name": "asset",
                  "typeId": 78,
                  "typeName": "MultiAsset",
                  "docs": []
                },
                {
                  "name": "target",
                  "typeId": 64,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 40,
              "docs": []
            },
            {
              "name": "NoteUnlockable",
              "fields": [
                {
                  "name": "asset",
                  "typeId": 78,
                  "typeName": "MultiAsset",
                  "docs": []
                },
                {
                  "name": "owner",
                  "typeId": 64,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 41,
              "docs": []
            },
            {
              "name": "RequestUnlock",
              "fields": [
                {
                  "name": "asset",
                  "typeId": 78,
                  "typeName": "MultiAsset",
                  "docs": []
                },
                {
                  "name": "locker",
                  "typeId": 64,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 42,
              "docs": []
            },
            {
              "name": "SetFeesMode",
              "fields": [
                {
                  "name": "jit_withdraw",
                  "typeId": 49,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 43,
              "docs": []
            },
            {
              "name": "SetTopic",
              "fields": [
                {
                  "typeId": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 44,
              "docs": []
            },
            {
              "name": "ClearTopic",
              "fields": [],
              "index": 45,
              "docs": []
            },
            {
              "name": "AliasOrigin",
              "fields": [
                {
                  "typeId": 64,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 46,
              "docs": []
            },
            {
              "name": "UnpaidExecution",
              "fields": [
                {
                  "name": "weight_limit",
                  "typeId": 100,
                  "typeName": "WeightLimit",
                  "docs": []
                },
                {
                  "name": "check_origin",
                  "typeId": 93,
                  "typeName": "Option<MultiLocation>",
                  "docs": []
                }
              ],
              "index": 47,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 76,
      "path": [
        "xcm",
        "v3",
        "multiasset",
        "MultiAssets"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 77,
              "typeName": "Vec<MultiAsset>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 77,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 78
        }
      },
      "docs": []
    },
    {
      "id": 78,
      "path": [
        "xcm",
        "v3",
        "multiasset",
        "MultiAsset"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "id",
              "typeId": 79,
              "typeName": "AssetId",
              "docs": []
            },
            {
              "name": "fun",
              "typeId": 80,
              "typeName": "Fungibility",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 79,
      "path": [
        "xcm",
        "v3",
        "multiasset",
        "AssetId"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Concrete",
              "fields": [
                {
                  "typeId": 64,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Abstract",
              "fields": [
                {
                  "typeId": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 80,
      "path": [
        "xcm",
        "v3",
        "multiasset",
        "Fungibility"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Fungible",
              "fields": [
                {
                  "typeId": 70,
                  "typeName": "u128",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "NonFungible",
              "fields": [
                {
                  "typeId": 81,
                  "typeName": "AssetInstance",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 81,
      "path": [
        "xcm",
        "v3",
        "multiasset",
        "AssetInstance"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Undefined",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Index",
              "fields": [
                {
                  "typeId": 70,
                  "typeName": "u128",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Array4",
              "fields": [
                {
                  "typeId": 17,
                  "typeName": "[u8; 4]",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Array8",
              "fields": [
                {
                  "typeId": 82,
                  "typeName": "[u8; 8]",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "Array16",
              "fields": [
                {
                  "typeId": 83,
                  "typeName": "[u8; 16]",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "Array32",
              "fields": [
                {
                  "typeId": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 82,
      "path": [],
      "params": [],
      "type": {
        "tag": "SizedVec",
        "value": {
          "len": 8,
          "typeParam": 2
        }
      },
      "docs": []
    },
    {
      "id": 83,
      "path": [],
      "params": [],
      "type": {
        "tag": "SizedVec",
        "value": {
          "len": 16,
          "typeParam": 2
        }
      },
      "docs": []
    },
    {
      "id": 84,
      "path": [
        "xcm",
        "v3",
        "Response"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Null",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Assets",
              "fields": [
                {
                  "typeId": 76,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "ExecutionResult",
              "fields": [
                {
                  "typeId": 85,
                  "typeName": "Option<(u32, Error)>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Version",
              "fields": [
                {
                  "typeId": 4,
                  "typeName": "super::Version",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "PalletsInfo",
              "fields": [
                {
                  "typeId": 87,
                  "typeName": "BoundedVec<PalletInfo, MaxPalletsInfo>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "DispatchResult",
              "fields": [
                {
                  "typeId": 91,
                  "typeName": "MaybeErrorCode",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 85,
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 86
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "typeId": 86,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 86,
      "path": [],
      "params": [],
      "type": {
        "tag": "Tuple",
        "value": {
          "fields": [
            4,
            60
          ]
        }
      },
      "docs": []
    },
    {
      "id": 87,
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 88
        },
        {
          "name": "S"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 90,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 88,
      "path": [
        "xcm",
        "v3",
        "PalletInfo"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "index",
              "typeId": 67,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "name",
              "typeId": 89,
              "typeName": "BoundedVec<u8, MaxPalletNameLen>",
              "docs": []
            },
            {
              "name": "module_name",
              "typeId": 89,
              "typeName": "BoundedVec<u8, MaxPalletNameLen>",
              "docs": []
            },
            {
              "name": "major",
              "typeId": 67,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "minor",
              "typeId": 67,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "patch",
              "typeId": 67,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 89,
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 2
        },
        {
          "name": "S"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 13,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 90,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 88
        }
      },
      "docs": []
    },
    {
      "id": 91,
      "path": [
        "xcm",
        "v3",
        "MaybeErrorCode"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Success",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Error",
              "fields": [
                {
                  "typeId": 92,
                  "typeName": "BoundedVec<u8, MaxDispatchErrorLen>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "TruncatedError",
              "fields": [
                {
                  "typeId": 92,
                  "typeName": "BoundedVec<u8, MaxDispatchErrorLen>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 92,
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 2
        },
        {
          "name": "S"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 13,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 93,
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 64
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "typeId": 64,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 94,
      "path": [
        "xcm",
        "v2",
        "OriginKind"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Native",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "SovereignAccount",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Superuser",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "Xcm",
              "fields": [],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 95,
      "path": [
        "xcm",
        "double_encoded",
        "DoubleEncoded"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "encoded",
              "typeId": 13,
              "typeName": "Vec<u8>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 96,
      "path": [
        "xcm",
        "v3",
        "QueryResponseInfo"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "destination",
              "typeId": 64,
              "typeName": "MultiLocation",
              "docs": []
            },
            {
              "name": "query_id",
              "typeId": 10,
              "typeName": "QueryId",
              "docs": []
            },
            {
              "name": "max_weight",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 97,
      "path": [
        "xcm",
        "v3",
        "multiasset",
        "MultiAssetFilter"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Definite",
              "fields": [
                {
                  "typeId": 76,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Wild",
              "fields": [
                {
                  "typeId": 98,
                  "typeName": "WildMultiAsset",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 98,
      "path": [
        "xcm",
        "v3",
        "multiasset",
        "WildMultiAsset"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "All",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "AllOf",
              "fields": [
                {
                  "name": "id",
                  "typeId": 79,
                  "typeName": "AssetId",
                  "docs": []
                },
                {
                  "name": "fun",
                  "typeId": 99,
                  "typeName": "WildFungibility",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "AllCounted",
              "fields": [
                {
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "AllOfCounted",
              "fields": [
                {
                  "name": "id",
                  "typeId": 79,
                  "typeName": "AssetId",
                  "docs": []
                },
                {
                  "name": "fun",
                  "typeId": 99,
                  "typeName": "WildFungibility",
                  "docs": []
                },
                {
                  "name": "count",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 99,
      "path": [
        "xcm",
        "v3",
        "multiasset",
        "WildFungibility"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Fungible",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "NonFungible",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 100,
      "path": [
        "xcm",
        "v3",
        "WeightLimit"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Unlimited",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Limited",
              "fields": [
                {
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 101,
      "path": [
        "xcm",
        "VersionedMultiAssets"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "V2",
              "fields": [
                {
                  "typeId": 102,
                  "typeName": "v2::MultiAssets",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "V3",
              "fields": [
                {
                  "typeId": 76,
                  "typeName": "v3::MultiAssets",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 102,
      "path": [
        "xcm",
        "v2",
        "multiasset",
        "MultiAssets"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 103,
              "typeName": "Vec<MultiAsset>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 103,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 104
        }
      },
      "docs": []
    },
    {
      "id": 104,
      "path": [
        "xcm",
        "v2",
        "multiasset",
        "MultiAsset"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "id",
              "typeId": 105,
              "typeName": "AssetId",
              "docs": []
            },
            {
              "name": "fun",
              "typeId": 113,
              "typeName": "Fungibility",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 105,
      "path": [
        "xcm",
        "v2",
        "multiasset",
        "AssetId"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Concrete",
              "fields": [
                {
                  "typeId": 106,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Abstract",
              "fields": [
                {
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 106,
      "path": [
        "xcm",
        "v2",
        "multilocation",
        "MultiLocation"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "parents",
              "typeId": 2,
              "typeName": "u8",
              "docs": []
            },
            {
              "name": "interior",
              "typeId": 107,
              "typeName": "Junctions",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 107,
      "path": [
        "xcm",
        "v2",
        "multilocation",
        "Junctions"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Here",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "X1",
              "fields": [
                {
                  "typeId": 108,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "X2",
              "fields": [
                {
                  "typeId": 108,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 108,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "X3",
              "fields": [
                {
                  "typeId": 108,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 108,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 108,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "X4",
              "fields": [
                {
                  "typeId": 108,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 108,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 108,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 108,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "X5",
              "fields": [
                {
                  "typeId": 108,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 108,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 108,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 108,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 108,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "X6",
              "fields": [
                {
                  "typeId": 108,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 108,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 108,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 108,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 108,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 108,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "X7",
              "fields": [
                {
                  "typeId": 108,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 108,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 108,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 108,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 108,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 108,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 108,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "X8",
              "fields": [
                {
                  "typeId": 108,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 108,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 108,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 108,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 108,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 108,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 108,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "typeId": 108,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 108,
      "path": [
        "xcm",
        "v2",
        "junction",
        "Junction"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Parachain",
              "fields": [
                {
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "AccountId32",
              "fields": [
                {
                  "name": "network",
                  "typeId": 109,
                  "typeName": "NetworkId",
                  "docs": []
                },
                {
                  "name": "id",
                  "typeId": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "AccountIndex64",
              "fields": [
                {
                  "name": "network",
                  "typeId": 109,
                  "typeName": "NetworkId",
                  "docs": []
                },
                {
                  "name": "index",
                  "typeId": 10,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "AccountKey20",
              "fields": [
                {
                  "name": "network",
                  "typeId": 109,
                  "typeName": "NetworkId",
                  "docs": []
                },
                {
                  "name": "key",
                  "typeId": 48,
                  "typeName": "[u8; 20]",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "PalletInstance",
              "fields": [
                {
                  "typeId": 2,
                  "typeName": "u8",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "GeneralIndex",
              "fields": [
                {
                  "typeId": 70,
                  "typeName": "u128",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "GeneralKey",
              "fields": [
                {
                  "typeId": 110,
                  "typeName": "WeakBoundedVec<u8, ConstU32<32>>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "OnlyChild",
              "fields": [],
              "index": 7,
              "docs": []
            },
            {
              "name": "Plurality",
              "fields": [
                {
                  "name": "id",
                  "typeId": 111,
                  "typeName": "BodyId",
                  "docs": []
                },
                {
                  "name": "part",
                  "typeId": 112,
                  "typeName": "BodyPart",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 109,
      "path": [
        "xcm",
        "v2",
        "NetworkId"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Any",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Named",
              "fields": [
                {
                  "typeId": 110,
                  "typeName": "WeakBoundedVec<u8, ConstU32<32>>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Polkadot",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "Kusama",
              "fields": [],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 110,
      "path": [
        "bounded_collections",
        "weak_bounded_vec",
        "WeakBoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 2
        },
        {
          "name": "S"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 13,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 111,
      "path": [
        "xcm",
        "v2",
        "BodyId"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Unit",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Named",
              "fields": [
                {
                  "typeId": 110,
                  "typeName": "WeakBoundedVec<u8, ConstU32<32>>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Index",
              "fields": [
                {
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Executive",
              "fields": [],
              "index": 3,
              "docs": []
            },
            {
              "name": "Technical",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "Legislative",
              "fields": [],
              "index": 5,
              "docs": []
            },
            {
              "name": "Judicial",
              "fields": [],
              "index": 6,
              "docs": []
            },
            {
              "name": "Defense",
              "fields": [],
              "index": 7,
              "docs": []
            },
            {
              "name": "Administration",
              "fields": [],
              "index": 8,
              "docs": []
            },
            {
              "name": "Treasury",
              "fields": [],
              "index": 9,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 112,
      "path": [
        "xcm",
        "v2",
        "BodyPart"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Voice",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Members",
              "fields": [
                {
                  "name": "count",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Fraction",
              "fields": [
                {
                  "name": "nom",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "denom",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "AtLeastProportion",
              "fields": [
                {
                  "name": "nom",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "denom",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "MoreThanProportion",
              "fields": [
                {
                  "name": "nom",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "denom",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 113,
      "path": [
        "xcm",
        "v2",
        "multiasset",
        "Fungibility"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Fungible",
              "fields": [
                {
                  "typeId": 70,
                  "typeName": "u128",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "NonFungible",
              "fields": [
                {
                  "typeId": 114,
                  "typeName": "AssetInstance",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 114,
      "path": [
        "xcm",
        "v2",
        "multiasset",
        "AssetInstance"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Undefined",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Index",
              "fields": [
                {
                  "typeId": 70,
                  "typeName": "u128",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Array4",
              "fields": [
                {
                  "typeId": 17,
                  "typeName": "[u8; 4]",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Array8",
              "fields": [
                {
                  "typeId": 82,
                  "typeName": "[u8; 8]",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "Array16",
              "fields": [
                {
                  "typeId": 83,
                  "typeName": "[u8; 16]",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "Array32",
              "fields": [
                {
                  "typeId": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "Blob",
              "fields": [
                {
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 115,
      "path": [
        "xcm",
        "VersionedMultiLocation"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "V2",
              "fields": [
                {
                  "typeId": 106,
                  "typeName": "v2::MultiLocation",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "V3",
              "fields": [
                {
                  "typeId": 64,
                  "typeName": "v3::MultiLocation",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 116,
      "path": [
        "cumulus_pallet_xcm",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "InvalidFormat",
              "fields": [
                {
                  "typeId": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Downward message is invalid XCM.",
                "\\[ id \\]"
              ]
            },
            {
              "name": "UnsupportedVersion",
              "fields": [
                {
                  "typeId": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Downward message is unsupported version of XCM.",
                "\\[ id \\]"
              ]
            },
            {
              "name": "ExecutedDownward",
              "fields": [
                {
                  "typeId": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                },
                {
                  "typeId": 63,
                  "typeName": "Outcome",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Downward message executed with the given outcome.",
                "\\[ id, outcome \\]"
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 117,
      "path": [
        "cumulus_pallet_dmp_queue",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "InvalidFormat",
              "fields": [
                {
                  "name": "message_id",
                  "typeId": 1,
                  "typeName": "MessageId",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Downward message is invalid XCM."
              ]
            },
            {
              "name": "UnsupportedVersion",
              "fields": [
                {
                  "name": "message_id",
                  "typeId": 1,
                  "typeName": "MessageId",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Downward message is unsupported version of XCM."
              ]
            },
            {
              "name": "ExecutedDownward",
              "fields": [
                {
                  "name": "message_id",
                  "typeId": 1,
                  "typeName": "MessageId",
                  "docs": []
                },
                {
                  "name": "outcome",
                  "typeId": 63,
                  "typeName": "Outcome",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Downward message executed with the given outcome."
              ]
            },
            {
              "name": "WeightExhausted",
              "fields": [
                {
                  "name": "message_id",
                  "typeId": 1,
                  "typeName": "MessageId",
                  "docs": []
                },
                {
                  "name": "remaining_weight",
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "required_weight",
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "The weight limit for handling downward messages was reached."
              ]
            },
            {
              "name": "OverweightEnqueued",
              "fields": [
                {
                  "name": "message_id",
                  "typeId": 1,
                  "typeName": "MessageId",
                  "docs": []
                },
                {
                  "name": "overweight_index",
                  "typeId": 11,
                  "typeName": "OverweightIndex",
                  "docs": []
                },
                {
                  "name": "required_weight",
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Downward message is overweight and was placed in the overweight queue."
              ]
            },
            {
              "name": "OverweightServiced",
              "fields": [
                {
                  "name": "overweight_index",
                  "typeId": 11,
                  "typeName": "OverweightIndex",
                  "docs": []
                },
                {
                  "name": "weight_used",
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Downward message from the overweight queue was executed."
              ]
            },
            {
              "name": "MaxMessagesExhausted",
              "fields": [
                {
                  "name": "message_id",
                  "typeId": 1,
                  "typeName": "MessageId",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "The maximum number of downward messages was."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 118,
      "path": [
        "pallet_xc_asset_config",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "AssetRegistered",
              "fields": [
                {
                  "name": "asset_location",
                  "typeId": 115,
                  "typeName": "VersionedMultiLocation",
                  "docs": []
                },
                {
                  "name": "asset_id",
                  "typeId": 6,
                  "typeName": "T::AssetId",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Registed mapping between asset type and asset Id."
              ]
            },
            {
              "name": "UnitsPerSecondChanged",
              "fields": [
                {
                  "name": "asset_location",
                  "typeId": 115,
                  "typeName": "VersionedMultiLocation",
                  "docs": []
                },
                {
                  "name": "units_per_second",
                  "typeId": 6,
                  "typeName": "u128",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Changed the amount of units we are charging per execution second for an asset"
              ]
            },
            {
              "name": "AssetLocationChanged",
              "fields": [
                {
                  "name": "previous_asset_location",
                  "typeId": 115,
                  "typeName": "VersionedMultiLocation",
                  "docs": []
                },
                {
                  "name": "asset_id",
                  "typeId": 6,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "new_asset_location",
                  "typeId": 115,
                  "typeName": "VersionedMultiLocation",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Changed the asset type mapping for a given asset id"
              ]
            },
            {
              "name": "SupportedAssetRemoved",
              "fields": [
                {
                  "name": "asset_location",
                  "typeId": 115,
                  "typeName": "VersionedMultiLocation",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Supported asset type for fee payment removed."
              ]
            },
            {
              "name": "AssetRemoved",
              "fields": [
                {
                  "name": "asset_location",
                  "typeId": 115,
                  "typeName": "VersionedMultiLocation",
                  "docs": []
                },
                {
                  "name": "asset_id",
                  "typeId": 6,
                  "typeName": "T::AssetId",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Removed all information related to an asset Id"
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 119,
      "path": [
        "orml_xtokens",
        "module",
        "Event"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "TransferredMultiAssets",
              "fields": [
                {
                  "name": "sender",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "assets",
                  "typeId": 76,
                  "typeName": "MultiAssets",
                  "docs": []
                },
                {
                  "name": "fee",
                  "typeId": 78,
                  "typeName": "MultiAsset",
                  "docs": []
                },
                {
                  "name": "dest",
                  "typeId": 64,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Transferred `MultiAsset` with fee."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 120,
      "path": [
        "pallet_evm",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Log",
              "fields": [
                {
                  "name": "log",
                  "typeId": 121,
                  "typeName": "Log",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Ethereum events from contracts."
              ]
            },
            {
              "name": "Created",
              "fields": [
                {
                  "name": "address",
                  "typeId": 47,
                  "typeName": "H160",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "A contract has been created at given address."
              ]
            },
            {
              "name": "CreatedFailed",
              "fields": [
                {
                  "name": "address",
                  "typeId": 47,
                  "typeName": "H160",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "A contract was attempted to be created, but the execution failed."
              ]
            },
            {
              "name": "Executed",
              "fields": [
                {
                  "name": "address",
                  "typeId": 47,
                  "typeName": "H160",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "A contract has been executed successfully with states applied."
              ]
            },
            {
              "name": "ExecutedFailed",
              "fields": [
                {
                  "name": "address",
                  "typeId": 47,
                  "typeName": "H160",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "A contract has been executed with errors. States are reverted with only gas fees applied."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 121,
      "path": [
        "ethereum",
        "log",
        "Log"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "address",
              "typeId": 47,
              "typeName": "H160",
              "docs": []
            },
            {
              "name": "topics",
              "typeId": 122,
              "typeName": "Vec<H256>",
              "docs": []
            },
            {
              "name": "data",
              "typeId": 13,
              "typeName": "Bytes",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 122,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 12
        }
      },
      "docs": []
    },
    {
      "id": 123,
      "path": [
        "pallet_ethereum",
        "pallet",
        "Event"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Executed",
              "fields": [
                {
                  "name": "from",
                  "typeId": 47,
                  "typeName": "H160",
                  "docs": []
                },
                {
                  "name": "to",
                  "typeId": 47,
                  "typeName": "H160",
                  "docs": []
                },
                {
                  "name": "transaction_hash",
                  "typeId": 12,
                  "typeName": "H256",
                  "docs": []
                },
                {
                  "name": "exit_reason",
                  "typeId": 124,
                  "typeName": "ExitReason",
                  "docs": []
                },
                {
                  "name": "extra_data",
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "An ethereum transaction was successfully executed."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 124,
      "path": [
        "evm_core",
        "error",
        "ExitReason"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Succeed",
              "fields": [
                {
                  "typeId": 125,
                  "typeName": "ExitSucceed",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Error",
              "fields": [
                {
                  "typeId": 126,
                  "typeName": "ExitError",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Revert",
              "fields": [
                {
                  "typeId": 130,
                  "typeName": "ExitRevert",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Fatal",
              "fields": [
                {
                  "typeId": 131,
                  "typeName": "ExitFatal",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 125,
      "path": [
        "evm_core",
        "error",
        "ExitSucceed"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Stopped",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Returned",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Suicided",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 126,
      "path": [
        "evm_core",
        "error",
        "ExitError"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "StackUnderflow",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "StackOverflow",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "InvalidJump",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "InvalidRange",
              "fields": [],
              "index": 3,
              "docs": []
            },
            {
              "name": "DesignatedInvalid",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "CallTooDeep",
              "fields": [],
              "index": 5,
              "docs": []
            },
            {
              "name": "CreateCollision",
              "fields": [],
              "index": 6,
              "docs": []
            },
            {
              "name": "CreateContractLimit",
              "fields": [],
              "index": 7,
              "docs": []
            },
            {
              "name": "InvalidCode",
              "fields": [
                {
                  "typeId": 127,
                  "typeName": "Opcode",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": []
            },
            {
              "name": "OutOfOffset",
              "fields": [],
              "index": 8,
              "docs": []
            },
            {
              "name": "OutOfGas",
              "fields": [],
              "index": 9,
              "docs": []
            },
            {
              "name": "OutOfFund",
              "fields": [],
              "index": 10,
              "docs": []
            },
            {
              "name": "PCUnderflow",
              "fields": [],
              "index": 11,
              "docs": []
            },
            {
              "name": "CreateEmpty",
              "fields": [],
              "index": 12,
              "docs": []
            },
            {
              "name": "Other",
              "fields": [
                {
                  "typeId": 128,
                  "typeName": "Cow<'static, str>",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": []
            },
            {
              "name": "MaxNonce",
              "fields": [],
              "index": 14,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 127,
      "path": [
        "evm_core",
        "opcode",
        "Opcode"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 2,
              "typeName": "u8",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 128,
      "path": [
        "Cow"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 129
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 129,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 129,
      "path": [],
      "params": [],
      "type": {
        "tag": "Primitive",
        "value": {
          "kind": "str"
        }
      },
      "docs": []
    },
    {
      "id": 130,
      "path": [
        "evm_core",
        "error",
        "ExitRevert"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Reverted",
              "fields": [],
              "index": 0,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 131,
      "path": [
        "evm_core",
        "error",
        "ExitFatal"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "NotSupported",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "UnhandledInterrupt",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "CallErrorAsFatal",
              "fields": [
                {
                  "typeId": 126,
                  "typeName": "ExitError",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Other",
              "fields": [
                {
                  "typeId": 128,
                  "typeName": "Cow<'static, str>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 132,
      "path": [
        "pallet_custom_signatures",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Executed",
              "fields": [
                {
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "typeId": 31,
                  "typeName": "DispatchResult",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A call just executed. \\[result\\]"
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 133,
      "path": [
        "pallet_base_fee",
        "pallet",
        "Event"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "NewBaseFeePerGas",
              "fields": [
                {
                  "name": "fee",
                  "typeId": 134,
                  "typeName": "U256",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "BaseFeeOverflow",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "NewElasticity",
              "fields": [
                {
                  "name": "elasticity",
                  "typeId": 136,
                  "typeName": "Permill",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 134,
      "path": [
        "primitive_types",
        "U256"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 135,
              "typeName": "[u64; 4]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 135,
      "path": [],
      "params": [],
      "type": {
        "tag": "SizedVec",
        "value": {
          "len": 4,
          "typeParam": 11
        }
      },
      "docs": []
    },
    {
      "id": 136,
      "path": [
        "sp_arithmetic",
        "per_things",
        "Permill"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 137,
      "path": [
        "pallet_contracts",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Instantiated",
              "fields": [
                {
                  "name": "deployer",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "contract",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Contract deployed by address at the specified address."
              ]
            },
            {
              "name": "Terminated",
              "fields": [
                {
                  "name": "contract",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": [
                    "The contract that was terminated."
                  ]
                },
                {
                  "name": "beneficiary",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": [
                    "The account that received the contracts remaining balance"
                  ]
                }
              ],
              "index": 1,
              "docs": [
                "Contract has been removed.",
                "",
                "# Note",
                "",
                "The only way for a contract to be removed and emitting this event is by calling",
                "`seal_terminate`."
              ]
            },
            {
              "name": "CodeStored",
              "fields": [
                {
                  "name": "code_hash",
                  "typeId": 12,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Code with the specified hash has been stored."
              ]
            },
            {
              "name": "ContractEmitted",
              "fields": [
                {
                  "name": "contract",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": [
                    "The contract that emitted the event."
                  ]
                },
                {
                  "name": "data",
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": [
                    "Data supplied by the contract. Metadata generated during contract compilation",
                    "is needed to decode it."
                  ]
                }
              ],
              "index": 3,
              "docs": [
                "A custom event emitted by the contract."
              ]
            },
            {
              "name": "CodeRemoved",
              "fields": [
                {
                  "name": "code_hash",
                  "typeId": 12,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "A code with the specified hash was removed."
              ]
            },
            {
              "name": "ContractCodeUpdated",
              "fields": [
                {
                  "name": "contract",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": [
                    "The contract that has been updated."
                  ]
                },
                {
                  "name": "new_code_hash",
                  "typeId": 12,
                  "typeName": "T::Hash",
                  "docs": [
                    "New code hash that was set for the contract."
                  ]
                },
                {
                  "name": "old_code_hash",
                  "typeId": 12,
                  "typeName": "T::Hash",
                  "docs": [
                    "Previous code hash of the contract."
                  ]
                }
              ],
              "index": 5,
              "docs": [
                "A contract's code was updated."
              ]
            },
            {
              "name": "Called",
              "fields": [
                {
                  "name": "caller",
                  "typeId": 138,
                  "typeName": "Origin<T>",
                  "docs": [
                    "The caller of the `contract`."
                  ]
                },
                {
                  "name": "contract",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": [
                    "The contract that was called."
                  ]
                }
              ],
              "index": 6,
              "docs": [
                "A contract was called either by a plain account or another contract.",
                "",
                "# Note",
                "",
                "Please keep in mind that like all events this is only emitted for successful",
                "calls. This is because on failure all storage changes including events are",
                "rolled back."
              ]
            },
            {
              "name": "DelegateCalled",
              "fields": [
                {
                  "name": "contract",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": [
                    "The contract that performed the delegate call and hence in whose context",
                    "the `code_hash` is executed."
                  ]
                },
                {
                  "name": "code_hash",
                  "typeId": 12,
                  "typeName": "CodeHash<T>",
                  "docs": [
                    "The code hash that was delegate called."
                  ]
                }
              ],
              "index": 7,
              "docs": [
                "A contract delegate called a code hash.",
                "",
                "# Note",
                "",
                "Please keep in mind that like all events this is only emitted for successful",
                "calls. This is because on failure all storage changes including events are",
                "rolled back."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 138,
      "path": [
        "pallet_contracts",
        "Origin"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 139
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Root",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Signed",
              "fields": [
                {
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 139,
      "path": [
        "astar_runtime",
        "Runtime"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": []
        }
      },
      "docs": []
    },
    {
      "id": 140,
      "path": [
        "pallet_sudo",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Sudid",
              "fields": [
                {
                  "name": "sudo_result",
                  "typeId": 31,
                  "typeName": "DispatchResult",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A sudo just took place. \\[result\\]"
              ]
            },
            {
              "name": "KeyChanged",
              "fields": [
                {
                  "name": "old_sudoer",
                  "typeId": 141,
                  "typeName": "Option<T::AccountId>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "The \\[sudoer\\] just switched identity; the old key is supplied if one existed."
              ]
            },
            {
              "name": "SudoAsDone",
              "fields": [
                {
                  "name": "sudo_result",
                  "typeId": 31,
                  "typeName": "DispatchResult",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "A sudo just took place. \\[result\\]"
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 141,
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 0
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "typeId": 0,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 142,
      "path": [
        "frame_system",
        "Phase"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "ApplyExtrinsic",
              "fields": [
                {
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Finalization",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Initialization",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 143,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 144
        }
      },
      "docs": []
    },
    {
      "id": 144,
      "path": [],
      "params": [],
      "type": {
        "tag": "Tuple",
        "value": {
          "fields": [
            4,
            4
          ]
        }
      },
      "docs": []
    },
    {
      "id": 145,
      "path": [
        "frame_system",
        "LastRuntimeUpgradeInfo"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "spec_version",
              "typeId": 67,
              "typeName": "codec::Compact<u32>",
              "docs": []
            },
            {
              "name": "spec_name",
              "typeId": 129,
              "typeName": "sp_runtime::RuntimeString",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 146,
      "path": [
        "frame_system",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "remark",
              "fields": [
                {
                  "name": "remark",
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Make some on-chain remark.",
                "",
                "- `O(1)`"
              ]
            },
            {
              "name": "set_heap_pages",
              "fields": [
                {
                  "name": "pages",
                  "typeId": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Set the number of pages in the WebAssembly environment's heap."
              ]
            },
            {
              "name": "set_code",
              "fields": [
                {
                  "name": "code",
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Set the new runtime code."
              ]
            },
            {
              "name": "set_code_without_checks",
              "fields": [
                {
                  "name": "code",
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Set the new runtime code without doing any checks of the given `code`."
              ]
            },
            {
              "name": "set_storage",
              "fields": [
                {
                  "name": "items",
                  "typeId": 147,
                  "typeName": "Vec<KeyValue>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Set some items of storage."
              ]
            },
            {
              "name": "kill_storage",
              "fields": [
                {
                  "name": "keys",
                  "typeId": 149,
                  "typeName": "Vec<Key>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Kill some items from storage."
              ]
            },
            {
              "name": "kill_prefix",
              "fields": [
                {
                  "name": "prefix",
                  "typeId": 13,
                  "typeName": "Key",
                  "docs": []
                },
                {
                  "name": "subkeys",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Kill all storage items with a key that starts with the given prefix.",
                "",
                "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
                "the prefix we are removing to accurately calculate the weight of this function."
              ]
            },
            {
              "name": "remark_with_event",
              "fields": [
                {
                  "name": "remark",
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Make some on-chain remark and emit event."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    },
    {
      "id": 147,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 148
        }
      },
      "docs": []
    },
    {
      "id": 148,
      "path": [],
      "params": [],
      "type": {
        "tag": "Tuple",
        "value": {
          "fields": [
            13,
            13
          ]
        }
      },
      "docs": []
    },
    {
      "id": 149,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 13
        }
      },
      "docs": []
    },
    {
      "id": 150,
      "path": [
        "frame_system",
        "limits",
        "BlockWeights"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "base_block",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "max_block",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "per_class",
              "typeId": 151,
              "typeName": "PerDispatchClass<WeightsPerClass>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 151,
      "path": [
        "frame_support",
        "dispatch",
        "PerDispatchClass"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 152
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "normal",
              "typeId": 152,
              "typeName": "T",
              "docs": []
            },
            {
              "name": "operational",
              "typeId": 152,
              "typeName": "T",
              "docs": []
            },
            {
              "name": "mandatory",
              "typeId": 152,
              "typeName": "T",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 152,
      "path": [
        "frame_system",
        "limits",
        "WeightsPerClass"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "base_extrinsic",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "max_extrinsic",
              "typeId": 153,
              "typeName": "Option<Weight>",
              "docs": []
            },
            {
              "name": "max_total",
              "typeId": 153,
              "typeName": "Option<Weight>",
              "docs": []
            },
            {
              "name": "reserved",
              "typeId": 153,
              "typeName": "Option<Weight>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 153,
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 9
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "typeId": 9,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 154,
      "path": [
        "frame_system",
        "limits",
        "BlockLength"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "max",
              "typeId": 155,
              "typeName": "PerDispatchClass<u32>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 155,
      "path": [
        "frame_support",
        "dispatch",
        "PerDispatchClass"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 4
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "normal",
              "typeId": 4,
              "typeName": "T",
              "docs": []
            },
            {
              "name": "operational",
              "typeId": 4,
              "typeName": "T",
              "docs": []
            },
            {
              "name": "mandatory",
              "typeId": 4,
              "typeName": "T",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 156,
      "path": [
        "sp_weights",
        "RuntimeDbWeight"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "read",
              "typeId": 11,
              "typeName": "u64",
              "docs": []
            },
            {
              "name": "write",
              "typeId": 11,
              "typeName": "u64",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 157,
      "path": [
        "sp_version",
        "RuntimeVersion"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "spec_name",
              "typeId": 129,
              "typeName": "RuntimeString",
              "docs": []
            },
            {
              "name": "impl_name",
              "typeId": 129,
              "typeName": "RuntimeString",
              "docs": []
            },
            {
              "name": "authoring_version",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "spec_version",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "impl_version",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "apis",
              "typeId": 158,
              "typeName": "ApisVec",
              "docs": []
            },
            {
              "name": "transaction_version",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "state_version",
              "typeId": 2,
              "typeName": "u8",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 158,
      "path": [
        "Cow"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 159
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 159,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 159,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 160
        }
      },
      "docs": []
    },
    {
      "id": 160,
      "path": [],
      "params": [],
      "type": {
        "tag": "Tuple",
        "value": {
          "fields": [
            82,
            4
          ]
        }
      },
      "docs": []
    },
    {
      "id": 161,
      "path": [
        "frame_system",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "InvalidSpecName",
              "fields": [],
              "index": 0,
              "docs": [
                "The name of specification does not match between the current runtime",
                "and the new runtime."
              ]
            },
            {
              "name": "SpecVersionNeedsToIncrease",
              "fields": [],
              "index": 1,
              "docs": [
                "The specification version is not allowed to decrease between the current runtime",
                "and the new runtime."
              ]
            },
            {
              "name": "FailedToExtractRuntimeVersion",
              "fields": [],
              "index": 2,
              "docs": [
                "Failed to extract the runtime version from the new runtime.",
                "",
                "Either calling `Core_version` or decoding `RuntimeVersion` failed."
              ]
            },
            {
              "name": "NonDefaultComposite",
              "fields": [],
              "index": 3,
              "docs": [
                "Suicide called when the account has non-default composite data."
              ]
            },
            {
              "name": "NonZeroRefCount",
              "fields": [],
              "index": 4,
              "docs": [
                "There is a non-zero reference count preventing the account from being purged."
              ]
            },
            {
              "name": "CallFiltered",
              "fields": [],
              "index": 5,
              "docs": [
                "The origin filter prevent the call to be dispatched."
              ]
            }
          ]
        }
      },
      "docs": [
        "Error for the System pallet"
      ]
    },
    {
      "id": 162,
      "path": [
        "pallet_utility",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "batch",
              "fields": [
                {
                  "name": "calls",
                  "typeId": 163,
                  "typeName": "Vec<<T as Config>::RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Send a batch of dispatch calls.",
                "",
                "May be called from any origin except `None`.",
                "",
                "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                "",
                "If origin is root then the calls are dispatched without checking origin filter. (This",
                "includes bypassing `frame_system::Config::BaseCallFilter`).",
                "",
                "## Complexity",
                "- O(C) where C is the number of calls to be batched.",
                "",
                "This will return `Ok` in all circumstances. To determine the success of the batch, an",
                "event is deposited. If a call failed and the batch was interrupted, then the",
                "`BatchInterrupted` event is deposited, along with the number of successful calls made",
                "and the error of the failed call. If all were successful, then the `BatchCompleted`",
                "event is deposited."
              ]
            },
            {
              "name": "as_derivative",
              "fields": [
                {
                  "name": "index",
                  "typeId": 38,
                  "typeName": "u16",
                  "docs": []
                },
                {
                  "name": "call",
                  "typeId": 164,
                  "typeName": "Box<<T as Config>::RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Send a call through an indexed pseudonym of the sender.",
                "",
                "Filter from origin are passed along. The call will be dispatched with an origin which",
                "use the same filter as the origin of this call.",
                "",
                "NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
                "because you expect `proxy` to have been used prior in the call stack and you do not want",
                "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
                "in the Multisig pallet instead.",
                "",
                "NOTE: Prior to version *12, this was called `as_limited_sub`.",
                "",
                "The dispatch origin for this call must be _Signed_."
              ]
            },
            {
              "name": "batch_all",
              "fields": [
                {
                  "name": "calls",
                  "typeId": 163,
                  "typeName": "Vec<<T as Config>::RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Send a batch of dispatch calls and atomically execute them.",
                "The whole transaction will rollback and fail if any of the calls failed.",
                "",
                "May be called from any origin except `None`.",
                "",
                "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                "",
                "If origin is root then the calls are dispatched without checking origin filter. (This",
                "includes bypassing `frame_system::Config::BaseCallFilter`).",
                "",
                "## Complexity",
                "- O(C) where C is the number of calls to be batched."
              ]
            },
            {
              "name": "dispatch_as",
              "fields": [
                {
                  "name": "as_origin",
                  "typeId": 288,
                  "typeName": "Box<T::PalletsOrigin>",
                  "docs": []
                },
                {
                  "name": "call",
                  "typeId": 164,
                  "typeName": "Box<<T as Config>::RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Dispatches a function call with a provided origin.",
                "",
                "The dispatch origin for this call must be _Root_.",
                "",
                "## Complexity",
                "- O(1)."
              ]
            },
            {
              "name": "force_batch",
              "fields": [
                {
                  "name": "calls",
                  "typeId": 163,
                  "typeName": "Vec<<T as Config>::RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Send a batch of dispatch calls.",
                "Unlike `batch`, it allows errors and won't interrupt.",
                "",
                "May be called from any origin except `None`.",
                "",
                "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                "",
                "If origin is root then the calls are dispatch without checking origin filter. (This",
                "includes bypassing `frame_system::Config::BaseCallFilter`).",
                "",
                "## Complexity",
                "- O(C) where C is the number of calls to be batched."
              ]
            },
            {
              "name": "with_weight",
              "fields": [
                {
                  "name": "call",
                  "typeId": 164,
                  "typeName": "Box<<T as Config>::RuntimeCall>",
                  "docs": []
                },
                {
                  "name": "weight",
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Dispatch a function call with a specified weight.",
                "",
                "This function does not check the weight of the call, and instead allows the",
                "Root origin to specify the weight of the call.",
                "",
                "The dispatch origin for this call must be _Root_."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    },
    {
      "id": 163,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 164
        }
      },
      "docs": []
    },
    {
      "id": 164,
      "path": [
        "astar_runtime",
        "RuntimeCall"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "System",
              "fields": [
                {
                  "typeId": 146,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": []
            },
            {
              "name": "Utility",
              "fields": [
                {
                  "typeId": 162,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": []
            },
            {
              "name": "Identity",
              "fields": [
                {
                  "typeId": 165,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Identity, Runtime>",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": []
            },
            {
              "name": "Timestamp",
              "fields": [
                {
                  "typeId": 207,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": []
            },
            {
              "name": "Multisig",
              "fields": [
                {
                  "typeId": 208,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Multisig, Runtime>",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": []
            },
            {
              "name": "Proxy",
              "fields": [
                {
                  "typeId": 210,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Proxy, Runtime>",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": []
            },
            {
              "name": "ParachainSystem",
              "fields": [
                {
                  "typeId": 212,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParachainSystem, Runtime>",
                  "docs": []
                }
              ],
              "index": 20,
              "docs": []
            },
            {
              "name": "ParachainInfo",
              "fields": [
                {
                  "typeId": 225,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParachainInfo, Runtime>",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": []
            },
            {
              "name": "Balances",
              "fields": [
                {
                  "typeId": 226,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>",
                  "docs": []
                }
              ],
              "index": 31,
              "docs": []
            },
            {
              "name": "Vesting",
              "fields": [
                {
                  "typeId": 227,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Vesting, Runtime>",
                  "docs": []
                }
              ],
              "index": 32,
              "docs": []
            },
            {
              "name": "DappsStaking",
              "fields": [
                {
                  "typeId": 229,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<DappsStaking, Runtime>",
                  "docs": []
                }
              ],
              "index": 34,
              "docs": []
            },
            {
              "name": "BlockReward",
              "fields": [
                {
                  "typeId": 231,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<BlockReward, Runtime>",
                  "docs": []
                }
              ],
              "index": 35,
              "docs": []
            },
            {
              "name": "Assets",
              "fields": [
                {
                  "typeId": 232,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Assets, Runtime>",
                  "docs": []
                }
              ],
              "index": 36,
              "docs": []
            },
            {
              "name": "CollatorSelection",
              "fields": [
                {
                  "typeId": 233,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CollatorSelection, Runtime>",
                  "docs": []
                }
              ],
              "index": 41,
              "docs": []
            },
            {
              "name": "Session",
              "fields": [
                {
                  "typeId": 234,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Session, Runtime>",
                  "docs": []
                }
              ],
              "index": 42,
              "docs": []
            },
            {
              "name": "XcmpQueue",
              "fields": [
                {
                  "typeId": 238,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XcmpQueue, Runtime>",
                  "docs": []
                }
              ],
              "index": 50,
              "docs": []
            },
            {
              "name": "PolkadotXcm",
              "fields": [
                {
                  "typeId": 239,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<PolkadotXcm, Runtime>",
                  "docs": []
                }
              ],
              "index": 51,
              "docs": []
            },
            {
              "name": "CumulusXcm",
              "fields": [
                {
                  "typeId": 261,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CumulusXcm, Runtime>",
                  "docs": []
                }
              ],
              "index": 52,
              "docs": []
            },
            {
              "name": "DmpQueue",
              "fields": [
                {
                  "typeId": 262,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<DmpQueue, Runtime>",
                  "docs": []
                }
              ],
              "index": 53,
              "docs": []
            },
            {
              "name": "XcAssetConfig",
              "fields": [
                {
                  "typeId": 263,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XcAssetConfig, Runtime>",
                  "docs": []
                }
              ],
              "index": 54,
              "docs": []
            },
            {
              "name": "Xtokens",
              "fields": [
                {
                  "typeId": 264,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Xtokens, Runtime>",
                  "docs": []
                }
              ],
              "index": 55,
              "docs": []
            },
            {
              "name": "EVM",
              "fields": [
                {
                  "typeId": 268,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<EVM, Runtime>",
                  "docs": []
                }
              ],
              "index": 60,
              "docs": []
            },
            {
              "name": "Ethereum",
              "fields": [
                {
                  "typeId": 272,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Ethereum, Runtime>",
                  "docs": []
                }
              ],
              "index": 61,
              "docs": []
            },
            {
              "name": "EthCall",
              "fields": [
                {
                  "typeId": 282,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<EthCall, Runtime>",
                  "docs": []
                }
              ],
              "index": 62,
              "docs": []
            },
            {
              "name": "BaseFee",
              "fields": [
                {
                  "typeId": 283,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<BaseFee, Runtime>",
                  "docs": []
                }
              ],
              "index": 63,
              "docs": []
            },
            {
              "name": "Contracts",
              "fields": [
                {
                  "typeId": 284,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Contracts, Runtime>",
                  "docs": []
                }
              ],
              "index": 70,
              "docs": []
            },
            {
              "name": "Sudo",
              "fields": [
                {
                  "typeId": 287,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Sudo, Runtime>",
                  "docs": []
                }
              ],
              "index": 99,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 165,
      "path": [
        "pallet_identity",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "add_registrar",
              "fields": [
                {
                  "name": "account",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Add a registrar to the system.",
                "",
                "The dispatch origin for this call must be `T::RegistrarOrigin`.",
                "",
                "- `account`: the account of the registrar.",
                "",
                "Emits `RegistrarAdded` if successful.",
                "",
                "## Complexity",
                "- `O(R)` where `R` registrar-count (governance-bounded and code-bounded)."
              ]
            },
            {
              "name": "set_identity",
              "fields": [
                {
                  "name": "info",
                  "typeId": 168,
                  "typeName": "Box<IdentityInfo<T::MaxAdditionalFields>>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Set an account's identity information and reserve the appropriate deposit.",
                "",
                "If the account already has identity information, the deposit is taken as part payment",
                "for the new deposit.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "- `info`: The identity information.",
                "",
                "Emits `IdentitySet` if successful.",
                "",
                "## Complexity",
                "- `O(X + X' + R)`",
                "  - where `X` additional-field-count (deposit-bounded and code-bounded)",
                "  - where `R` judgements-count (registrar-count-bounded)"
              ]
            },
            {
              "name": "set_subs",
              "fields": [
                {
                  "name": "subs",
                  "typeId": 202,
                  "typeName": "Vec<(T::AccountId, Data)>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Set the sub-accounts of the sender.",
                "",
                "Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned",
                "and an amount `SubAccountDeposit` will be reserved for each item in `subs`.",
                "",
                "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                "identity.",
                "",
                "- `subs`: The identity's (new) sub-accounts.",
                "",
                "## Complexity",
                "- `O(P + S)`",
                "  - where `P` old-subs-count (hard- and deposit-bounded).",
                "  - where `S` subs-count (hard- and deposit-bounded)."
              ]
            },
            {
              "name": "clear_identity",
              "fields": [],
              "index": 3,
              "docs": [
                "Clear an account's identity info and all sub-accounts and return all deposits.",
                "",
                "Payment: All reserved balances on the account are returned.",
                "",
                "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                "identity.",
                "",
                "Emits `IdentityCleared` if successful.",
                "",
                "## Complexity",
                "- `O(R + S + X)`",
                "  - where `R` registrar-count (governance-bounded).",
                "  - where `S` subs-count (hard- and deposit-bounded).",
                "  - where `X` additional-field-count (deposit-bounded and code-bounded)."
              ]
            },
            {
              "name": "request_judgement",
              "fields": [
                {
                  "name": "reg_index",
                  "typeId": 67,
                  "typeName": "RegistrarIndex",
                  "docs": []
                },
                {
                  "name": "max_fee",
                  "typeId": 70,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Request a judgement from a registrar.",
                "",
                "Payment: At most `max_fee` will be reserved for payment to the registrar if judgement",
                "given.",
                "",
                "The dispatch origin for this call must be _Signed_ and the sender must have a",
                "registered identity.",
                "",
                "- `reg_index`: The index of the registrar whose judgement is requested.",
                "- `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:",
                "",
                "```nocompile",
                "Self::registrars().get(reg_index).unwrap().fee",
                "```",
                "",
                "Emits `JudgementRequested` if successful.",
                "",
                "## Complexity",
                "- `O(R + X)`.",
                "  - where `R` registrar-count (governance-bounded).",
                "  - where `X` additional-field-count (deposit-bounded and code-bounded)."
              ]
            },
            {
              "name": "cancel_request",
              "fields": [
                {
                  "name": "reg_index",
                  "typeId": 4,
                  "typeName": "RegistrarIndex",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Cancel a previous request.",
                "",
                "Payment: A previously reserved deposit is returned on success.",
                "",
                "The dispatch origin for this call must be _Signed_ and the sender must have a",
                "registered identity.",
                "",
                "- `reg_index`: The index of the registrar whose judgement is no longer requested.",
                "",
                "Emits `JudgementUnrequested` if successful.",
                "",
                "## Complexity",
                "- `O(R + X)`.",
                "  - where `R` registrar-count (governance-bounded).",
                "  - where `X` additional-field-count (deposit-bounded and code-bounded)."
              ]
            },
            {
              "name": "set_fee",
              "fields": [
                {
                  "name": "index",
                  "typeId": 67,
                  "typeName": "RegistrarIndex",
                  "docs": []
                },
                {
                  "name": "fee",
                  "typeId": 70,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Set the fee required for a judgement to be requested from a registrar.",
                "",
                "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                "of the registrar whose index is `index`.",
                "",
                "- `index`: the index of the registrar whose fee is to be set.",
                "- `fee`: the new fee.",
                "",
                "## Complexity",
                "- `O(R)`.",
                "  - where `R` registrar-count (governance-bounded)."
              ]
            },
            {
              "name": "set_account_id",
              "fields": [
                {
                  "name": "index",
                  "typeId": 67,
                  "typeName": "RegistrarIndex",
                  "docs": []
                },
                {
                  "name": "new",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Change the account associated with a registrar.",
                "",
                "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                "of the registrar whose index is `index`.",
                "",
                "- `index`: the index of the registrar whose fee is to be set.",
                "- `new`: the new account ID.",
                "",
                "## Complexity",
                "- `O(R)`.",
                "  - where `R` registrar-count (governance-bounded)."
              ]
            },
            {
              "name": "set_fields",
              "fields": [
                {
                  "name": "index",
                  "typeId": 67,
                  "typeName": "RegistrarIndex",
                  "docs": []
                },
                {
                  "name": "fields",
                  "typeId": 204,
                  "typeName": "IdentityFields",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Set the field information for a registrar.",
                "",
                "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                "of the registrar whose index is `index`.",
                "",
                "- `index`: the index of the registrar whose fee is to be set.",
                "- `fields`: the fields that the registrar concerns themselves with.",
                "",
                "## Complexity",
                "- `O(R)`.",
                "  - where `R` registrar-count (governance-bounded)."
              ]
            },
            {
              "name": "provide_judgement",
              "fields": [
                {
                  "name": "reg_index",
                  "typeId": 67,
                  "typeName": "RegistrarIndex",
                  "docs": []
                },
                {
                  "name": "target",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "judgement",
                  "typeId": 206,
                  "typeName": "Judgement<BalanceOf<T>>",
                  "docs": []
                },
                {
                  "name": "identity",
                  "typeId": 12,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Provide a judgement for an account's identity.",
                "",
                "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                "of the registrar whose index is `reg_index`.",
                "",
                "- `reg_index`: the index of the registrar whose judgement is being made.",
                "- `target`: the account whose identity the judgement is upon. This must be an account",
                "  with a registered identity.",
                "- `judgement`: the judgement of the registrar of index `reg_index` about `target`.",
                "- `identity`: The hash of the [`IdentityInfo`] for that the judgement is provided.",
                "",
                "Emits `JudgementGiven` if successful.",
                "",
                "## Complexity",
                "- `O(R + X)`.",
                "  - where `R` registrar-count (governance-bounded).",
                "  - where `X` additional-field-count (deposit-bounded and code-bounded)."
              ]
            },
            {
              "name": "kill_identity",
              "fields": [
                {
                  "name": "target",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "Remove an account's identity and sub-account information and slash the deposits.",
                "",
                "Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by",
                "`Slash`. Verification request deposits are not returned; they should be cancelled",
                "manually using `cancel_request`.",
                "",
                "The dispatch origin for this call must match `T::ForceOrigin`.",
                "",
                "- `target`: the account whose identity the judgement is upon. This must be an account",
                "  with a registered identity.",
                "",
                "Emits `IdentityKilled` if successful.",
                "",
                "## Complexity",
                "- `O(R + S + X)`",
                "  - where `R` registrar-count (governance-bounded).",
                "  - where `S` subs-count (hard- and deposit-bounded).",
                "  - where `X` additional-field-count (deposit-bounded and code-bounded)."
              ]
            },
            {
              "name": "add_sub",
              "fields": [
                {
                  "name": "sub",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "data",
                  "typeId": 171,
                  "typeName": "Data",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": [
                "Add the given account to the sender's subs.",
                "",
                "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                "to the sender.",
                "",
                "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                "sub identity of `sub`."
              ]
            },
            {
              "name": "rename_sub",
              "fields": [
                {
                  "name": "sub",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "data",
                  "typeId": 171,
                  "typeName": "Data",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": [
                "Alter the associated name of the given sub-account.",
                "",
                "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                "sub identity of `sub`."
              ]
            },
            {
              "name": "remove_sub",
              "fields": [
                {
                  "name": "sub",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": [
                "Remove the given account from the sender's subs.",
                "",
                "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                "to the sender.",
                "",
                "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                "sub identity of `sub`."
              ]
            },
            {
              "name": "quit_sub",
              "fields": [],
              "index": 14,
              "docs": [
                "Remove the sender as a sub-account.",
                "",
                "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                "to the sender (*not* the original depositor).",
                "",
                "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                "super-identity.",
                "",
                "NOTE: This should not normally be used, but is provided in the case that the non-",
                "controller of an account is maliciously registered as a sub-account."
              ]
            }
          ]
        }
      },
      "docs": [
        "Identity pallet declaration."
      ]
    },
    {
      "id": 166,
      "path": [
        "sp_runtime",
        "multiaddress",
        "MultiAddress"
      ],
      "params": [
        {
          "name": "AccountId",
          "typeId": 0
        },
        {
          "name": "AccountIndex",
          "typeId": 32
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Id",
              "fields": [
                {
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Index",
              "fields": [
                {
                  "typeId": 167,
                  "typeName": "AccountIndex",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Raw",
              "fields": [
                {
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Address32",
              "fields": [
                {
                  "typeId": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "Address20",
              "fields": [
                {
                  "typeId": 48,
                  "typeName": "[u8; 20]",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 167,
      "path": [],
      "params": [],
      "type": {
        "tag": "Compact",
        "value": {
          "typeParam": 32
        }
      },
      "docs": []
    },
    {
      "id": 168,
      "path": [
        "pallet_identity",
        "types",
        "IdentityInfo"
      ],
      "params": [
        {
          "name": "FieldLimit"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "additional",
              "typeId": 169,
              "typeName": "BoundedVec<(Data, Data), FieldLimit>",
              "docs": []
            },
            {
              "name": "display",
              "typeId": 171,
              "typeName": "Data",
              "docs": []
            },
            {
              "name": "legal",
              "typeId": 171,
              "typeName": "Data",
              "docs": []
            },
            {
              "name": "web",
              "typeId": 171,
              "typeName": "Data",
              "docs": []
            },
            {
              "name": "riot",
              "typeId": 171,
              "typeName": "Data",
              "docs": []
            },
            {
              "name": "email",
              "typeId": 171,
              "typeName": "Data",
              "docs": []
            },
            {
              "name": "pgp_fingerprint",
              "typeId": 201,
              "typeName": "Option<[u8; 20]>",
              "docs": []
            },
            {
              "name": "image",
              "typeId": 171,
              "typeName": "Data",
              "docs": []
            },
            {
              "name": "twitter",
              "typeId": 171,
              "typeName": "Data",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 169,
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 170
        },
        {
          "name": "S"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 200,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 170,
      "path": [],
      "params": [],
      "type": {
        "tag": "Tuple",
        "value": {
          "fields": [
            171,
            171
          ]
        }
      },
      "docs": []
    },
    {
      "id": 171,
      "path": [
        "pallet_identity",
        "types",
        "Data"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Raw0",
              "fields": [
                {
                  "typeId": 172,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Raw1",
              "fields": [
                {
                  "typeId": 173,
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Raw2",
              "fields": [
                {
                  "typeId": 174,
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "Raw3",
              "fields": [
                {
                  "typeId": 175,
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "Raw4",
              "fields": [
                {
                  "typeId": 17,
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "Raw5",
              "fields": [
                {
                  "typeId": 176,
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "Raw6",
              "fields": [
                {
                  "typeId": 177,
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "Raw7",
              "fields": [
                {
                  "typeId": 178,
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            },
            {
              "name": "Raw8",
              "fields": [
                {
                  "typeId": 82,
                  "docs": []
                }
              ],
              "index": 9,
              "docs": []
            },
            {
              "name": "Raw9",
              "fields": [
                {
                  "typeId": 179,
                  "docs": []
                }
              ],
              "index": 10,
              "docs": []
            },
            {
              "name": "Raw10",
              "fields": [
                {
                  "typeId": 180,
                  "docs": []
                }
              ],
              "index": 11,
              "docs": []
            },
            {
              "name": "Raw11",
              "fields": [
                {
                  "typeId": 181,
                  "docs": []
                }
              ],
              "index": 12,
              "docs": []
            },
            {
              "name": "Raw12",
              "fields": [
                {
                  "typeId": 182,
                  "docs": []
                }
              ],
              "index": 13,
              "docs": []
            },
            {
              "name": "Raw13",
              "fields": [
                {
                  "typeId": 183,
                  "docs": []
                }
              ],
              "index": 14,
              "docs": []
            },
            {
              "name": "Raw14",
              "fields": [
                {
                  "typeId": 184,
                  "docs": []
                }
              ],
              "index": 15,
              "docs": []
            },
            {
              "name": "Raw15",
              "fields": [
                {
                  "typeId": 185,
                  "docs": []
                }
              ],
              "index": 16,
              "docs": []
            },
            {
              "name": "Raw16",
              "fields": [
                {
                  "typeId": 83,
                  "docs": []
                }
              ],
              "index": 17,
              "docs": []
            },
            {
              "name": "Raw17",
              "fields": [
                {
                  "typeId": 186,
                  "docs": []
                }
              ],
              "index": 18,
              "docs": []
            },
            {
              "name": "Raw18",
              "fields": [
                {
                  "typeId": 187,
                  "docs": []
                }
              ],
              "index": 19,
              "docs": []
            },
            {
              "name": "Raw19",
              "fields": [
                {
                  "typeId": 188,
                  "docs": []
                }
              ],
              "index": 20,
              "docs": []
            },
            {
              "name": "Raw20",
              "fields": [
                {
                  "typeId": 48,
                  "docs": []
                }
              ],
              "index": 21,
              "docs": []
            },
            {
              "name": "Raw21",
              "fields": [
                {
                  "typeId": 189,
                  "docs": []
                }
              ],
              "index": 22,
              "docs": []
            },
            {
              "name": "Raw22",
              "fields": [
                {
                  "typeId": 190,
                  "docs": []
                }
              ],
              "index": 23,
              "docs": []
            },
            {
              "name": "Raw23",
              "fields": [
                {
                  "typeId": 191,
                  "docs": []
                }
              ],
              "index": 24,
              "docs": []
            },
            {
              "name": "Raw24",
              "fields": [
                {
                  "typeId": 192,
                  "docs": []
                }
              ],
              "index": 25,
              "docs": []
            },
            {
              "name": "Raw25",
              "fields": [
                {
                  "typeId": 193,
                  "docs": []
                }
              ],
              "index": 26,
              "docs": []
            },
            {
              "name": "Raw26",
              "fields": [
                {
                  "typeId": 194,
                  "docs": []
                }
              ],
              "index": 27,
              "docs": []
            },
            {
              "name": "Raw27",
              "fields": [
                {
                  "typeId": 195,
                  "docs": []
                }
              ],
              "index": 28,
              "docs": []
            },
            {
              "name": "Raw28",
              "fields": [
                {
                  "typeId": 196,
                  "docs": []
                }
              ],
              "index": 29,
              "docs": []
            },
            {
              "name": "Raw29",
              "fields": [
                {
                  "typeId": 197,
                  "docs": []
                }
              ],
              "index": 30,
              "docs": []
            },
            {
              "name": "Raw30",
              "fields": [
                {
                  "typeId": 198,
                  "docs": []
                }
              ],
              "index": 31,
              "docs": []
            },
            {
              "name": "Raw31",
              "fields": [
                {
                  "typeId": 199,
                  "docs": []
                }
              ],
              "index": 32,
              "docs": []
            },
            {
              "name": "Raw32",
              "fields": [
                {
                  "typeId": 1,
                  "docs": []
                }
              ],
              "index": 33,
              "docs": []
            },
            {
              "name": "BlakeTwo256",
              "fields": [
                {
                  "typeId": 1,
                  "docs": []
                }
              ],
              "index": 34,
              "docs": []
            },
            {
              "name": "Sha256",
              "fields": [
                {
                  "typeId": 1,
                  "docs": []
                }
              ],
              "index": 35,
              "docs": []
            },
            {
              "name": "Keccak256",
              "fields": [
                {
                  "typeId": 1,
                  "docs": []
                }
              ],
              "index": 36,
              "docs": []
            },
            {
              "name": "ShaThree256",
              "fields": [
                {
                  "typeId": 1,
                  "docs": []
                }
              ],
              "index": 37,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 172,
      "path": [],
      "params": [],
      "type": {
        "tag": "SizedVec",
        "value": {
          "len": 0,
          "typeParam": 2
        }
      },
      "docs": []
    },
    {
      "id": 173,
      "path": [],
      "params": [],
      "type": {
        "tag": "SizedVec",
        "value": {
          "len": 1,
          "typeParam": 2
        }
      },
      "docs": []
    },
    {
      "id": 174,
      "path": [],
      "params": [],
      "type": {
        "tag": "SizedVec",
        "value": {
          "len": 2,
          "typeParam": 2
        }
      },
      "docs": []
    },
    {
      "id": 175,
      "path": [],
      "params": [],
      "type": {
        "tag": "SizedVec",
        "value": {
          "len": 3,
          "typeParam": 2
        }
      },
      "docs": []
    },
    {
      "id": 176,
      "path": [],
      "params": [],
      "type": {
        "tag": "SizedVec",
        "value": {
          "len": 5,
          "typeParam": 2
        }
      },
      "docs": []
    },
    {
      "id": 177,
      "path": [],
      "params": [],
      "type": {
        "tag": "SizedVec",
        "value": {
          "len": 6,
          "typeParam": 2
        }
      },
      "docs": []
    },
    {
      "id": 178,
      "path": [],
      "params": [],
      "type": {
        "tag": "SizedVec",
        "value": {
          "len": 7,
          "typeParam": 2
        }
      },
      "docs": []
    },
    {
      "id": 179,
      "path": [],
      "params": [],
      "type": {
        "tag": "SizedVec",
        "value": {
          "len": 9,
          "typeParam": 2
        }
      },
      "docs": []
    },
    {
      "id": 180,
      "path": [],
      "params": [],
      "type": {
        "tag": "SizedVec",
        "value": {
          "len": 10,
          "typeParam": 2
        }
      },
      "docs": []
    },
    {
      "id": 181,
      "path": [],
      "params": [],
      "type": {
        "tag": "SizedVec",
        "value": {
          "len": 11,
          "typeParam": 2
        }
      },
      "docs": []
    },
    {
      "id": 182,
      "path": [],
      "params": [],
      "type": {
        "tag": "SizedVec",
        "value": {
          "len": 12,
          "typeParam": 2
        }
      },
      "docs": []
    },
    {
      "id": 183,
      "path": [],
      "params": [],
      "type": {
        "tag": "SizedVec",
        "value": {
          "len": 13,
          "typeParam": 2
        }
      },
      "docs": []
    },
    {
      "id": 184,
      "path": [],
      "params": [],
      "type": {
        "tag": "SizedVec",
        "value": {
          "len": 14,
          "typeParam": 2
        }
      },
      "docs": []
    },
    {
      "id": 185,
      "path": [],
      "params": [],
      "type": {
        "tag": "SizedVec",
        "value": {
          "len": 15,
          "typeParam": 2
        }
      },
      "docs": []
    },
    {
      "id": 186,
      "path": [],
      "params": [],
      "type": {
        "tag": "SizedVec",
        "value": {
          "len": 17,
          "typeParam": 2
        }
      },
      "docs": []
    },
    {
      "id": 187,
      "path": [],
      "params": [],
      "type": {
        "tag": "SizedVec",
        "value": {
          "len": 18,
          "typeParam": 2
        }
      },
      "docs": []
    },
    {
      "id": 188,
      "path": [],
      "params": [],
      "type": {
        "tag": "SizedVec",
        "value": {
          "len": 19,
          "typeParam": 2
        }
      },
      "docs": []
    },
    {
      "id": 189,
      "path": [],
      "params": [],
      "type": {
        "tag": "SizedVec",
        "value": {
          "len": 21,
          "typeParam": 2
        }
      },
      "docs": []
    },
    {
      "id": 190,
      "path": [],
      "params": [],
      "type": {
        "tag": "SizedVec",
        "value": {
          "len": 22,
          "typeParam": 2
        }
      },
      "docs": []
    },
    {
      "id": 191,
      "path": [],
      "params": [],
      "type": {
        "tag": "SizedVec",
        "value": {
          "len": 23,
          "typeParam": 2
        }
      },
      "docs": []
    },
    {
      "id": 192,
      "path": [],
      "params": [],
      "type": {
        "tag": "SizedVec",
        "value": {
          "len": 24,
          "typeParam": 2
        }
      },
      "docs": []
    },
    {
      "id": 193,
      "path": [],
      "params": [],
      "type": {
        "tag": "SizedVec",
        "value": {
          "len": 25,
          "typeParam": 2
        }
      },
      "docs": []
    },
    {
      "id": 194,
      "path": [],
      "params": [],
      "type": {
        "tag": "SizedVec",
        "value": {
          "len": 26,
          "typeParam": 2
        }
      },
      "docs": []
    },
    {
      "id": 195,
      "path": [],
      "params": [],
      "type": {
        "tag": "SizedVec",
        "value": {
          "len": 27,
          "typeParam": 2
        }
      },
      "docs": []
    },
    {
      "id": 196,
      "path": [],
      "params": [],
      "type": {
        "tag": "SizedVec",
        "value": {
          "len": 28,
          "typeParam": 2
        }
      },
      "docs": []
    },
    {
      "id": 197,
      "path": [],
      "params": [],
      "type": {
        "tag": "SizedVec",
        "value": {
          "len": 29,
          "typeParam": 2
        }
      },
      "docs": []
    },
    {
      "id": 198,
      "path": [],
      "params": [],
      "type": {
        "tag": "SizedVec",
        "value": {
          "len": 30,
          "typeParam": 2
        }
      },
      "docs": []
    },
    {
      "id": 199,
      "path": [],
      "params": [],
      "type": {
        "tag": "SizedVec",
        "value": {
          "len": 31,
          "typeParam": 2
        }
      },
      "docs": []
    },
    {
      "id": 200,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 170
        }
      },
      "docs": []
    },
    {
      "id": 201,
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 48
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "typeId": 48,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 202,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 203
        }
      },
      "docs": []
    },
    {
      "id": 203,
      "path": [],
      "params": [],
      "type": {
        "tag": "Tuple",
        "value": {
          "fields": [
            0,
            171
          ]
        }
      },
      "docs": []
    },
    {
      "id": 204,
      "path": [
        "pallet_identity",
        "types",
        "BitFlags"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 205
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 11,
              "typeName": "IdentityField",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 205,
      "path": [
        "pallet_identity",
        "types",
        "IdentityField"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Display",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Legal",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "Web",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "Riot",
              "fields": [],
              "index": 8,
              "docs": []
            },
            {
              "name": "Email",
              "fields": [],
              "index": 16,
              "docs": []
            },
            {
              "name": "PgpFingerprint",
              "fields": [],
              "index": 32,
              "docs": []
            },
            {
              "name": "Image",
              "fields": [],
              "index": 64,
              "docs": []
            },
            {
              "name": "Twitter",
              "fields": [],
              "index": 128,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 206,
      "path": [
        "pallet_identity",
        "types",
        "Judgement"
      ],
      "params": [
        {
          "name": "Balance",
          "typeId": 6
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Unknown",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "FeePaid",
              "fields": [
                {
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Reasonable",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "KnownGood",
              "fields": [],
              "index": 3,
              "docs": []
            },
            {
              "name": "OutOfDate",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "LowQuality",
              "fields": [],
              "index": 5,
              "docs": []
            },
            {
              "name": "Erroneous",
              "fields": [],
              "index": 6,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 207,
      "path": [
        "pallet_timestamp",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "set",
              "fields": [
                {
                  "name": "now",
                  "typeId": 10,
                  "typeName": "T::Moment",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Set the current time.",
                "",
                "This call should be invoked exactly once per block. It will panic at the finalization",
                "phase, if this call hasn't been invoked by that time.",
                "",
                "The timestamp should be greater than the previous one by the amount specified by",
                "`MinimumPeriod`.",
                "",
                "The dispatch origin for this call must be `Inherent`.",
                "",
                "## Complexity",
                "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
                "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in",
                "  `on_finalize`)",
                "- 1 event handler `on_timestamp_set`. Must be `O(1)`."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    },
    {
      "id": 208,
      "path": [
        "pallet_multisig",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "as_multi_threshold_1",
              "fields": [
                {
                  "name": "other_signatories",
                  "typeId": 57,
                  "typeName": "Vec<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "call",
                  "typeId": 164,
                  "typeName": "Box<<T as Config>::RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Immediately dispatch a multi-signature call using a single approval from the caller.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "- `other_signatories`: The accounts (other than the sender) who are part of the",
                "multi-signature, but do not participate in the approval process.",
                "- `call`: The call to be executed.",
                "",
                "Result is equivalent to the dispatched result.",
                "",
                "## Complexity",
                "O(Z + C) where Z is the length of the call and C its execution weight."
              ]
            },
            {
              "name": "as_multi",
              "fields": [
                {
                  "name": "threshold",
                  "typeId": 38,
                  "typeName": "u16",
                  "docs": []
                },
                {
                  "name": "other_signatories",
                  "typeId": 57,
                  "typeName": "Vec<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "maybe_timepoint",
                  "typeId": 209,
                  "typeName": "Option<Timepoint<T::BlockNumber>>",
                  "docs": []
                },
                {
                  "name": "call",
                  "typeId": 164,
                  "typeName": "Box<<T as Config>::RuntimeCall>",
                  "docs": []
                },
                {
                  "name": "max_weight",
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Register approval for a dispatch to be made from a deterministic composite account if",
                "approved by a total of `threshold - 1` of `other_signatories`.",
                "",
                "If there are enough, then dispatch the call.",
                "",
                "Payment: `DepositBase` will be reserved if this is the first approval, plus",
                "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                "is cancelled.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                "- `other_signatories`: The accounts (other than the sender) who can approve this",
                "dispatch. May not be empty.",
                "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                "not the first approval, then it must be `Some`, with the timepoint (block number and",
                "transaction index) of the first approval transaction.",
                "- `call`: The call to be executed.",
                "",
                "NOTE: Unless this is the final approval, you will generally want to use",
                "`approve_as_multi` instead, since it only requires a hash of the call.",
                "",
                "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise",
                "on success, result is `Ok` and the result from the interior call, if it was executed,",
                "may be found in the deposited `MultisigExecuted` event.",
                "",
                "## Complexity",
                "- `O(S + Z + Call)`.",
                "- Up to one balance-reserve or unreserve operation.",
                "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.",
                "- One encode & hash, both of complexity `O(S)`.",
                "- Up to one binary search and insert (`O(logS + S)`).",
                "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                "- One event.",
                "- The weight of the `call`.",
                "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
                "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
              ]
            },
            {
              "name": "approve_as_multi",
              "fields": [
                {
                  "name": "threshold",
                  "typeId": 38,
                  "typeName": "u16",
                  "docs": []
                },
                {
                  "name": "other_signatories",
                  "typeId": 57,
                  "typeName": "Vec<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "maybe_timepoint",
                  "typeId": 209,
                  "typeName": "Option<Timepoint<T::BlockNumber>>",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "typeId": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                },
                {
                  "name": "max_weight",
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Register approval for a dispatch to be made from a deterministic composite account if",
                "approved by a total of `threshold - 1` of `other_signatories`.",
                "",
                "Payment: `DepositBase` will be reserved if this is the first approval, plus",
                "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                "is cancelled.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                "- `other_signatories`: The accounts (other than the sender) who can approve this",
                "dispatch. May not be empty.",
                "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                "not the first approval, then it must be `Some`, with the timepoint (block number and",
                "transaction index) of the first approval transaction.",
                "- `call_hash`: The hash of the call to be executed.",
                "",
                "NOTE: If this is the final approval, you will want to use `as_multi` instead.",
                "",
                "## Complexity",
                "- `O(S)`.",
                "- Up to one balance-reserve or unreserve operation.",
                "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                "- One encode & hash, both of complexity `O(S)`.",
                "- Up to one binary search and insert (`O(logS + S)`).",
                "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                "- One event.",
                "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
                "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
              ]
            },
            {
              "name": "cancel_as_multi",
              "fields": [
                {
                  "name": "threshold",
                  "typeId": 38,
                  "typeName": "u16",
                  "docs": []
                },
                {
                  "name": "other_signatories",
                  "typeId": 57,
                  "typeName": "Vec<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "timepoint",
                  "typeId": 35,
                  "typeName": "Timepoint<T::BlockNumber>",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "typeId": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously",
                "for this operation will be unreserved on success.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                "- `other_signatories`: The accounts (other than the sender) who can approve this",
                "dispatch. May not be empty.",
                "- `timepoint`: The timepoint (block number and transaction index) of the first approval",
                "transaction for this dispatch.",
                "- `call_hash`: The hash of the call to be executed.",
                "",
                "## Complexity",
                "- `O(S)`.",
                "- Up to one balance-reserve or unreserve operation.",
                "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                "- One encode & hash, both of complexity `O(S)`.",
                "- One event.",
                "- I/O: 1 read `O(S)`, one remove.",
                "- Storage: removes one item."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    },
    {
      "id": 209,
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 35
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "typeId": 35,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 210,
      "path": [
        "pallet_proxy",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "proxy",
              "fields": [
                {
                  "name": "real",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "force_proxy_type",
                  "typeId": 211,
                  "typeName": "Option<T::ProxyType>",
                  "docs": []
                },
                {
                  "name": "call",
                  "typeId": 164,
                  "typeName": "Box<<T as Config>::RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Dispatch the given `call` from an account that the sender is authorised for through",
                "`add_proxy`.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "Parameters:",
                "- `real`: The account that the proxy will make a call on behalf of.",
                "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                "- `call`: The call to be made by the `real` account."
              ]
            },
            {
              "name": "add_proxy",
              "fields": [
                {
                  "name": "delegate",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "proxy_type",
                  "typeId": 37,
                  "typeName": "T::ProxyType",
                  "docs": []
                },
                {
                  "name": "delay",
                  "typeId": 4,
                  "typeName": "T::BlockNumber",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Register a proxy account for the sender that is able to make calls on its behalf.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "Parameters:",
                "- `proxy`: The account that the `caller` would like to make a proxy.",
                "- `proxy_type`: The permissions allowed for this proxy account.",
                "- `delay`: The announcement period required of the initial proxy. Will generally be",
                "zero."
              ]
            },
            {
              "name": "remove_proxy",
              "fields": [
                {
                  "name": "delegate",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "proxy_type",
                  "typeId": 37,
                  "typeName": "T::ProxyType",
                  "docs": []
                },
                {
                  "name": "delay",
                  "typeId": 4,
                  "typeName": "T::BlockNumber",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Unregister a proxy account for the sender.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "Parameters:",
                "- `proxy`: The account that the `caller` would like to remove as a proxy.",
                "- `proxy_type`: The permissions currently enabled for the removed proxy account."
              ]
            },
            {
              "name": "remove_proxies",
              "fields": [],
              "index": 3,
              "docs": [
                "Unregister all proxy accounts for the sender.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "WARNING: This may be called on accounts created by `pure`, however if done, then",
                "the unreserved fees will be inaccessible. **All access to this account will be lost.**"
              ]
            },
            {
              "name": "create_pure",
              "fields": [
                {
                  "name": "proxy_type",
                  "typeId": 37,
                  "typeName": "T::ProxyType",
                  "docs": []
                },
                {
                  "name": "delay",
                  "typeId": 4,
                  "typeName": "T::BlockNumber",
                  "docs": []
                },
                {
                  "name": "index",
                  "typeId": 38,
                  "typeName": "u16",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and",
                "initialize it with a proxy of `proxy_type` for `origin` sender.",
                "",
                "Requires a `Signed` origin.",
                "",
                "- `proxy_type`: The type of the proxy that the sender will be registered as over the",
                "new account. This will almost always be the most permissive `ProxyType` possible to",
                "allow for maximum flexibility.",
                "- `index`: A disambiguation index, in case this is called multiple times in the same",
                "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just",
                "want to use `0`.",
                "- `delay`: The announcement period required of the initial proxy. Will generally be",
                "zero.",
                "",
                "Fails with `Duplicate` if this has already been called in this transaction, from the",
                "same sender, with the same parameters.",
                "",
                "Fails if there are insufficient funds to pay for deposit."
              ]
            },
            {
              "name": "kill_pure",
              "fields": [
                {
                  "name": "spawner",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "proxy_type",
                  "typeId": 37,
                  "typeName": "T::ProxyType",
                  "docs": []
                },
                {
                  "name": "index",
                  "typeId": 38,
                  "typeName": "u16",
                  "docs": []
                },
                {
                  "name": "height",
                  "typeId": 67,
                  "typeName": "T::BlockNumber",
                  "docs": []
                },
                {
                  "name": "ext_index",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Removes a previously spawned pure proxy.",
                "",
                "WARNING: **All access to this account will be lost.** Any funds held in it will be",
                "inaccessible.",
                "",
                "Requires a `Signed` origin, and the sender account must have been created by a call to",
                "`pure` with corresponding parameters.",
                "",
                "- `spawner`: The account that originally called `pure` to create this account.",
                "- `index`: The disambiguation index originally passed to `pure`. Probably `0`.",
                "- `proxy_type`: The proxy type originally passed to `pure`.",
                "- `height`: The height of the chain when the call to `pure` was processed.",
                "- `ext_index`: The extrinsic index in which the call to `pure` was processed.",
                "",
                "Fails with `NoPermission` in case the caller is not a previously created pure",
                "account whose `pure` call has corresponding parameters."
              ]
            },
            {
              "name": "announce",
              "fields": [
                {
                  "name": "real",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "typeId": 12,
                  "typeName": "CallHashOf<T>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Publish the hash of a proxy-call that will be made in the future.",
                "",
                "This must be called some number of blocks before the corresponding `proxy` is attempted",
                "if the delay associated with the proxy relationship is greater than zero.",
                "",
                "No more than `MaxPending` announcements may be made at any one time.",
                "",
                "This will take a deposit of `AnnouncementDepositFactor` as well as",
                "`AnnouncementDepositBase` if there are no other pending announcements.",
                "",
                "The dispatch origin for this call must be _Signed_ and a proxy of `real`.",
                "",
                "Parameters:",
                "- `real`: The account that the proxy will make a call on behalf of.",
                "- `call_hash`: The hash of the call to be made by the `real` account."
              ]
            },
            {
              "name": "remove_announcement",
              "fields": [
                {
                  "name": "real",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "typeId": 12,
                  "typeName": "CallHashOf<T>",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Remove a given announcement.",
                "",
                "May be called by a proxy account to remove a call they previously announced and return",
                "the deposit.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "Parameters:",
                "- `real`: The account that the proxy will make a call on behalf of.",
                "- `call_hash`: The hash of the call to be made by the `real` account."
              ]
            },
            {
              "name": "reject_announcement",
              "fields": [
                {
                  "name": "delegate",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "typeId": 12,
                  "typeName": "CallHashOf<T>",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Remove the given announcement of a delegate.",
                "",
                "May be called by a target (proxied) account to remove a call that one of their delegates",
                "(`delegate`) has announced they want to execute. The deposit is returned.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "Parameters:",
                "- `delegate`: The account that previously announced the call.",
                "- `call_hash`: The hash of the call to be made."
              ]
            },
            {
              "name": "proxy_announced",
              "fields": [
                {
                  "name": "delegate",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "real",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "force_proxy_type",
                  "typeId": 211,
                  "typeName": "Option<T::ProxyType>",
                  "docs": []
                },
                {
                  "name": "call",
                  "typeId": 164,
                  "typeName": "Box<<T as Config>::RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Dispatch the given `call` from an account that the sender is authorized for through",
                "`add_proxy`.",
                "",
                "Removes any corresponding announcement(s).",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "Parameters:",
                "- `real`: The account that the proxy will make a call on behalf of.",
                "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                "- `call`: The call to be made by the `real` account."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    },
    {
      "id": 211,
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 37
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "typeId": 37,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 212,
      "path": [
        "cumulus_pallet_parachain_system",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "set_validation_data",
              "fields": [
                {
                  "name": "data",
                  "typeId": 213,
                  "typeName": "ParachainInherentData",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Set the current validation data.",
                "",
                "This should be invoked exactly once per block. It will panic at the finalization",
                "phase if the call was not invoked.",
                "",
                "The dispatch origin for this call must be `Inherent`",
                "",
                "As a side effect, this function upgrades the current validation function",
                "if the appropriate time has come."
              ]
            },
            {
              "name": "sudo_send_upward_message",
              "fields": [
                {
                  "name": "message",
                  "typeId": 13,
                  "typeName": "UpwardMessage",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "authorize_upgrade",
              "fields": [
                {
                  "name": "code_hash",
                  "typeId": 12,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": "check_version",
                  "typeId": 49,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied",
                "later.",
                "",
                "The `check_version` parameter sets a boolean flag for whether or not the runtime's spec",
                "version and name should be verified on upgrade. Since the authorization only has a hash,",
                "it cannot actually perform the verification.",
                "",
                "This call requires Root origin."
              ]
            },
            {
              "name": "enact_authorized_upgrade",
              "fields": [
                {
                  "name": "code",
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Provide the preimage (runtime binary) `code` for an upgrade that has been authorized.",
                "",
                "If the authorization required a version check, this call will ensure the spec name",
                "remains unchanged and that the spec version has increased.",
                "",
                "Note that this function will not apply the new `code`, but only attempt to schedule the",
                "upgrade with the Relay Chain.",
                "",
                "All origins are allowed."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    },
    {
      "id": 213,
      "path": [
        "cumulus_primitives_parachain_inherent",
        "ParachainInherentData"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "validation_data",
              "typeId": 214,
              "typeName": "PersistedValidationData",
              "docs": []
            },
            {
              "name": "relay_chain_state",
              "typeId": 216,
              "typeName": "sp_trie::StorageProof",
              "docs": []
            },
            {
              "name": "downward_messages",
              "typeId": 218,
              "typeName": "Vec<InboundDownwardMessage>",
              "docs": []
            },
            {
              "name": "horizontal_messages",
              "typeId": 220,
              "typeName": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 214,
      "path": [
        "polkadot_primitives",
        "v4",
        "PersistedValidationData"
      ],
      "params": [
        {
          "name": "H",
          "typeId": 12
        },
        {
          "name": "N",
          "typeId": 4
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "parent_head",
              "typeId": 215,
              "typeName": "HeadData",
              "docs": []
            },
            {
              "name": "relay_parent_number",
              "typeId": 4,
              "typeName": "N",
              "docs": []
            },
            {
              "name": "relay_parent_storage_root",
              "typeId": 12,
              "typeName": "H",
              "docs": []
            },
            {
              "name": "max_pov_size",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 215,
      "path": [
        "polkadot_parachain",
        "primitives",
        "HeadData"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 13,
              "typeName": "Vec<u8>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 216,
      "path": [
        "sp_trie",
        "storage_proof",
        "StorageProof"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "trie_nodes",
              "typeId": 217,
              "typeName": "BTreeSet<Vec<u8>>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 217,
      "path": [
        "BTreeSet"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 13
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 149,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 218,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 219
        }
      },
      "docs": []
    },
    {
      "id": 219,
      "path": [
        "polkadot_core_primitives",
        "InboundDownwardMessage"
      ],
      "params": [
        {
          "name": "BlockNumber",
          "typeId": 4
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "sent_at",
              "typeId": 4,
              "typeName": "BlockNumber",
              "docs": []
            },
            {
              "name": "msg",
              "typeId": 13,
              "typeName": "DownwardMessage",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 220,
      "path": [
        "BTreeMap"
      ],
      "params": [
        {
          "name": "K",
          "typeId": 61
        },
        {
          "name": "V",
          "typeId": 221
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 223,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 221,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 222
        }
      },
      "docs": []
    },
    {
      "id": 222,
      "path": [
        "polkadot_core_primitives",
        "InboundHrmpMessage"
      ],
      "params": [
        {
          "name": "BlockNumber",
          "typeId": 4
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "sent_at",
              "typeId": 4,
              "typeName": "BlockNumber",
              "docs": []
            },
            {
              "name": "data",
              "typeId": 13,
              "typeName": "sp_std::vec::Vec<u8>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 223,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 224
        }
      },
      "docs": []
    },
    {
      "id": 224,
      "path": [],
      "params": [],
      "type": {
        "tag": "Tuple",
        "value": {
          "fields": [
            61,
            221
          ]
        }
      },
      "docs": []
    },
    {
      "id": 225,
      "path": [
        "parachain_info",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": []
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    },
    {
      "id": 226,
      "path": [
        "pallet_balances",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T"
        },
        {
          "name": "I"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "transfer_allow_death",
              "fields": [
                {
                  "name": "dest",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "value",
                  "typeId": 70,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Transfer some liquid free balance to another account.",
                "",
                "`transfer_allow_death` will set the `FreeBalance` of the sender and receiver.",
                "If the sender's account is below the existential deposit as a result",
                "of the transfer, the account will be reaped.",
                "",
                "The dispatch origin for this call must be `Signed` by the transactor."
              ]
            },
            {
              "name": "set_balance_deprecated",
              "fields": [
                {
                  "name": "who",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "new_free",
                  "typeId": 70,
                  "typeName": "T::Balance",
                  "docs": []
                },
                {
                  "name": "old_reserved",
                  "typeId": 70,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Set the regular balance of a given account; it also takes a reserved balance but this",
                "must be the same as the account's current reserved balance.",
                "",
                "The dispatch origin for this call is `root`.",
                "",
                "WARNING: This call is DEPRECATED! Use `force_set_balance` instead."
              ]
            },
            {
              "name": "force_transfer",
              "fields": [
                {
                  "name": "source",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "dest",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "value",
                  "typeId": 70,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Exactly as `transfer_allow_death`, except the origin must be root and the source account",
                "may be specified."
              ]
            },
            {
              "name": "transfer_keep_alive",
              "fields": [
                {
                  "name": "dest",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "value",
                  "typeId": 70,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Same as the [`transfer_allow_death`] call, but with a check that the transfer will not",
                "kill the origin account.",
                "",
                "99% of the time you want [`transfer_allow_death`] instead.",
                "",
                "[`transfer_allow_death`]: struct.Pallet.html#method.transfer"
              ]
            },
            {
              "name": "transfer_all",
              "fields": [
                {
                  "name": "dest",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "keep_alive",
                  "typeId": 49,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Transfer the entire transferable balance from the caller account.",
                "",
                "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
                "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
                "transferred by this function. To ensure that this function results in a killed account,",
                "you might need to prepare the account by removing any reference counters, storage",
                "deposits, etc...",
                "",
                "The dispatch origin of this call must be Signed.",
                "",
                "- `dest`: The recipient of the transfer.",
                "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
                "  of the funds the account has, causing the sender account to be killed (false), or",
                "  transfer everything except at least the existential deposit, which will guarantee to",
                "  keep the sender account alive (true)."
              ]
            },
            {
              "name": "force_unreserve",
              "fields": [
                {
                  "name": "who",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Unreserve some balance from a user by force.",
                "",
                "Can only be called by ROOT."
              ]
            },
            {
              "name": "upgrade_accounts",
              "fields": [
                {
                  "name": "who",
                  "typeId": 57,
                  "typeName": "Vec<T::AccountId>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Upgrade a specified account.",
                "",
                "- `origin`: Must be `Signed`.",
                "- `who`: The account to be upgraded.",
                "",
                "This will waive the transaction fee if at least all but 10% of the accounts needed to",
                "be upgraded. (We let some not have to be upgraded just in order to allow for the",
                "possibililty of churn)."
              ]
            },
            {
              "name": "transfer",
              "fields": [
                {
                  "name": "dest",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "value",
                  "typeId": 70,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Alias for `transfer_allow_death`, provided only for name-wise compatibility.",
                "",
                "WARNING: DEPRECATED! Will be released in approximately 3 months."
              ]
            },
            {
              "name": "force_set_balance",
              "fields": [
                {
                  "name": "who",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "new_free",
                  "typeId": 70,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Set the regular balance of a given account.",
                "",
                "The dispatch origin for this call is `root`."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    },
    {
      "id": 227,
      "path": [
        "pallet_vesting",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "vest",
              "fields": [],
              "index": 0,
              "docs": [
                "Unlock any vested funds of the sender account.",
                "",
                "The dispatch origin for this call must be _Signed_ and the sender must have funds still",
                "locked under this pallet.",
                "",
                "Emits either `VestingCompleted` or `VestingUpdated`.",
                "",
                "## Complexity",
                "- `O(1)`."
              ]
            },
            {
              "name": "vest_other",
              "fields": [
                {
                  "name": "target",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Unlock any vested funds of a `target` account.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "- `target`: The account whose vested funds should be unlocked. Must have funds still",
                "locked under this pallet.",
                "",
                "Emits either `VestingCompleted` or `VestingUpdated`.",
                "",
                "## Complexity",
                "- `O(1)`."
              ]
            },
            {
              "name": "vested_transfer",
              "fields": [
                {
                  "name": "target",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "schedule",
                  "typeId": 228,
                  "typeName": "VestingInfo<BalanceOf<T>, T::BlockNumber>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Create a vested transfer.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "- `target`: The account receiving the vested funds.",
                "- `schedule`: The vesting schedule attached to the transfer.",
                "",
                "Emits `VestingCreated`.",
                "",
                "NOTE: This will unlock all schedules through the current block.",
                "",
                "## Complexity",
                "- `O(1)`."
              ]
            },
            {
              "name": "force_vested_transfer",
              "fields": [
                {
                  "name": "source",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "target",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "schedule",
                  "typeId": 228,
                  "typeName": "VestingInfo<BalanceOf<T>, T::BlockNumber>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Force a vested transfer.",
                "",
                "The dispatch origin for this call must be _Root_.",
                "",
                "- `source`: The account whose funds should be transferred.",
                "- `target`: The account that should be transferred the vested funds.",
                "- `schedule`: The vesting schedule attached to the transfer.",
                "",
                "Emits `VestingCreated`.",
                "",
                "NOTE: This will unlock all schedules through the current block.",
                "",
                "## Complexity",
                "- `O(1)`."
              ]
            },
            {
              "name": "merge_schedules",
              "fields": [
                {
                  "name": "schedule1_index",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "schedule2_index",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Merge two vesting schedules together, creating a new vesting schedule that unlocks over",
                "the highest possible start and end blocks. If both schedules have already started the",
                "current block will be used as the schedule start; with the caveat that if one schedule",
                "is finished by the current block, the other will be treated as the new merged schedule,",
                "unmodified.",
                "",
                "NOTE: If `schedule1_index == schedule2_index` this is a no-op.",
                "NOTE: This will unlock all schedules through the current block prior to merging.",
                "NOTE: If both schedules have ended by the current block, no new schedule will be created",
                "and both will be removed.",
                "",
                "Merged schedule attributes:",
                "- `starting_block`: `MAX(schedule1.starting_block, scheduled2.starting_block,",
                "  current_block)`.",
                "- `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`.",
                "- `locked`: `schedule1.locked_at(current_block) + schedule2.locked_at(current_block)`.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "- `schedule1_index`: index of the first schedule to merge.",
                "- `schedule2_index`: index of the second schedule to merge."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    },
    {
      "id": 228,
      "path": [
        "pallet_vesting",
        "vesting_info",
        "VestingInfo"
      ],
      "params": [
        {
          "name": "Balance",
          "typeId": 6
        },
        {
          "name": "BlockNumber",
          "typeId": 4
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "locked",
              "typeId": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "per_block",
              "typeId": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "starting_block",
              "typeId": 4,
              "typeName": "BlockNumber",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 229,
      "path": [
        "pallet_dapps_staking",
        "pallet",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "register",
              "fields": [
                {
                  "name": "developer",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "contract_id",
                  "typeId": 46,
                  "typeName": "T::SmartContract",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Used to register contract for dapps staking.",
                "The origin account used is treated as the `developer` account.",
                "",
                "Depending on the pallet configuration/state it is possible that developer needs to be whitelisted prior to registration.",
                "",
                "As part of this call, `RegisterDeposit` will be reserved from devs account."
              ]
            },
            {
              "name": "unregister",
              "fields": [
                {
                  "name": "contract_id",
                  "typeId": 46,
                  "typeName": "T::SmartContract",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Unregister existing contract from dapps staking, making it ineligible for rewards from current era onwards.",
                "This must be called by the root (at the moment).",
                "",
                "Deposit is returned to the developer but existing stakers should manually call `withdraw_from_unregistered` if they wish to to unstake.",
                "",
                "**Warning**: After this action ,contract can not be registered for dapps staking again."
              ]
            },
            {
              "name": "withdraw_from_unregistered",
              "fields": [
                {
                  "name": "contract_id",
                  "typeId": 46,
                  "typeName": "T::SmartContract",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Withdraw locked funds from a contract that was unregistered.",
                "",
                "Funds don't need to undergo the unbonding period - they are returned immediately to the staker's free balance."
              ]
            },
            {
              "name": "bond_and_stake",
              "fields": [
                {
                  "name": "contract_id",
                  "typeId": 46,
                  "typeName": "T::SmartContract",
                  "docs": []
                },
                {
                  "name": "value",
                  "typeId": 70,
                  "typeName": "Balance",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Lock up and stake balance of the origin account.",
                "",
                "`value` must be more than the `minimum_balance` specified by `MinimumStakingAmount`",
                "unless account already has bonded value equal or more than 'minimum_balance'.",
                "",
                "The dispatch origin for this call must be _Signed_ by the staker's account."
              ]
            },
            {
              "name": "unbond_and_unstake",
              "fields": [
                {
                  "name": "contract_id",
                  "typeId": 46,
                  "typeName": "T::SmartContract",
                  "docs": []
                },
                {
                  "name": "value",
                  "typeId": 70,
                  "typeName": "Balance",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Start unbonding process and unstake balance from the contract.",
                "",
                "The unstaked amount will no longer be eligible for rewards but still won't be unlocked.",
                "User needs to wait for the unbonding period to finish before being able to withdraw",
                "the funds via `withdraw_unbonded` call.",
                "",
                "In case remaining staked balance on contract is below minimum staking amount,",
                "entire stake for that contract will be unstaked."
              ]
            },
            {
              "name": "withdraw_unbonded",
              "fields": [],
              "index": 5,
              "docs": [
                "Withdraw all funds that have completed the unbonding process.",
                "",
                "If there are unbonding chunks which will be fully unbonded in future eras,",
                "they will remain and can be withdrawn later."
              ]
            },
            {
              "name": "nomination_transfer",
              "fields": [
                {
                  "name": "origin_contract_id",
                  "typeId": 46,
                  "typeName": "T::SmartContract",
                  "docs": []
                },
                {
                  "name": "value",
                  "typeId": 70,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "target_contract_id",
                  "typeId": 46,
                  "typeName": "T::SmartContract",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Transfer nomination from one contract to another.",
                "",
                "Same rules as for `bond_and_stake` and `unbond_and_unstake` apply.",
                "Minor difference is that there is no unbonding period so this call won't",
                "check whether max number of unbonding chunks is exceeded.",
                ""
              ]
            },
            {
              "name": "claim_staker",
              "fields": [
                {
                  "name": "contract_id",
                  "typeId": 46,
                  "typeName": "T::SmartContract",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Claim earned staker rewards for the oldest unclaimed era.",
                "In order to claim multiple eras, this call has to be called multiple times.",
                "",
                "The rewards are always added to the staker's free balance (account) but depending on the reward destination configuration,",
                "they might be immediately re-staked."
              ]
            },
            {
              "name": "claim_dapp",
              "fields": [
                {
                  "name": "contract_id",
                  "typeId": 46,
                  "typeName": "T::SmartContract",
                  "docs": []
                },
                {
                  "name": "era",
                  "typeId": 67,
                  "typeName": "EraIndex",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Claim earned dapp rewards for the specified era.",
                "",
                "Call must ensure that the specified era is eligible for reward payout and that it hasn't already been paid out for the dapp."
              ]
            },
            {
              "name": "force_new_era",
              "fields": [],
              "index": 9,
              "docs": [
                "Force a new era at the start of the next block.",
                "",
                "The dispatch origin must be Root."
              ]
            },
            {
              "name": "maintenance_mode",
              "fields": [
                {
                  "name": "enable_maintenance",
                  "typeId": 49,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "`true` will disable pallet, enabling maintenance mode. `false` will do the opposite.",
                "",
                "The dispatch origin must be Root."
              ]
            },
            {
              "name": "set_reward_destination",
              "fields": [
                {
                  "name": "reward_destination",
                  "typeId": 50,
                  "typeName": "RewardDestination",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": [
                "Used to set reward destination for staker rewards.",
                "",
                "User must be an active staker in order to use this call.",
                "This will apply to all existing unclaimed rewards."
              ]
            },
            {
              "name": "set_contract_stake_info",
              "fields": [
                {
                  "name": "contract",
                  "typeId": 46,
                  "typeName": "T::SmartContract",
                  "docs": []
                },
                {
                  "name": "era",
                  "typeId": 4,
                  "typeName": "EraIndex",
                  "docs": []
                },
                {
                  "name": "contract_stake_info",
                  "typeId": 230,
                  "typeName": "ContractStakeInfo",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": [
                "Used to force set `ContractEraStake` storage values.",
                "The purpose of this call is only for fixing one of the issues detected with dapps-staking.",
                "",
                "The dispatch origin must be Root."
              ]
            },
            {
              "name": "burn_stale_reward",
              "fields": [
                {
                  "name": "contract_id",
                  "typeId": 46,
                  "typeName": "T::SmartContract",
                  "docs": []
                },
                {
                  "name": "era",
                  "typeId": 67,
                  "typeName": "EraIndex",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": [
                "Used to burn unclaimed & stale rewards from an unregistered contract."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    },
    {
      "id": 230,
      "path": [
        "pallet_dapps_staking",
        "ContractStakeInfo"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "total",
              "typeId": 70,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "number_of_stakers",
              "typeId": 67,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "contract_reward_claimed",
              "typeId": 49,
              "typeName": "bool",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 231,
      "path": [
        "pallet_block_reward",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "set_configuration",
              "fields": [
                {
                  "name": "reward_distro_params",
                  "typeId": 52,
                  "typeName": "RewardDistributionConfig",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Sets the reward distribution configuration parameters which will be used from next block reward distribution.",
                "",
                "It is mandatory that all components of configuration sum up to one whole (**100%**),",
                "otherwise an error `InvalidDistributionConfiguration` will be raised.",
                "",
                "- `reward_distro_params` - reward distribution params",
                "",
                "Emits `DistributionConfigurationChanged` with config embeded into event itself.",
                ""
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    },
    {
      "id": 232,
      "path": [
        "pallet_assets",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T"
        },
        {
          "name": "I"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "create",
              "fields": [
                {
                  "name": "id",
                  "typeId": 70,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "admin",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "min_balance",
                  "typeId": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Issue a new class of fungible assets from a public origin.",
                "",
                "This new asset class has no assets initially and its owner is the origin.",
                "",
                "The origin must conform to the configured `CreateOrigin` and have sufficient funds free.",
                "",
                "Funds of sender are reserved by `AssetDeposit`.",
                "",
                "Parameters:",
                "- `id`: The identifier of the new asset. This must not be currently in use to identify",
                "an existing asset.",
                "- `admin`: The admin of this class of assets. The admin is the initial address of each",
                "member of the asset class's admin team.",
                "- `min_balance`: The minimum balance of this new asset that any single account must",
                "have. If an account's balance is reduced below this, then it collapses to zero.",
                "",
                "Emits `Created` event when successful.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "force_create",
              "fields": [
                {
                  "name": "id",
                  "typeId": 70,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "owner",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "is_sufficient",
                  "typeId": 49,
                  "typeName": "bool",
                  "docs": []
                },
                {
                  "name": "min_balance",
                  "typeId": 70,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Issue a new class of fungible assets from a privileged origin.",
                "",
                "This new asset class has no assets initially.",
                "",
                "The origin must conform to `ForceOrigin`.",
                "",
                "Unlike `create`, no funds are reserved.",
                "",
                "- `id`: The identifier of the new asset. This must not be currently in use to identify",
                "an existing asset.",
                "- `owner`: The owner of this class of assets. The owner has full superuser permissions",
                "over this asset, but may later change and configure the permissions using",
                "`transfer_ownership` and `set_team`.",
                "- `min_balance`: The minimum balance of this new asset that any single account must",
                "have. If an account's balance is reduced below this, then it collapses to zero.",
                "",
                "Emits `ForceCreated` event when successful.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "start_destroy",
              "fields": [
                {
                  "name": "id",
                  "typeId": 70,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Start the process of destroying a fungible asset class.",
                "",
                "`start_destroy` is the first in a series of extrinsics that should be called, to allow",
                "destruction of an asset class.",
                "",
                "The origin must conform to `ForceOrigin` or must be `Signed` by the asset's `owner`.",
                "",
                "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                "  asset.",
                "",
                "The asset class must be frozen before calling `start_destroy`."
              ]
            },
            {
              "name": "destroy_accounts",
              "fields": [
                {
                  "name": "id",
                  "typeId": 70,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Destroy all accounts associated with a given asset.",
                "",
                "`destroy_accounts` should only be called after `start_destroy` has been called, and the",
                "asset is in a `Destroying` state.",
                "",
                "Due to weight restrictions, this function may need to be called multiple times to fully",
                "destroy all accounts. It will destroy `RemoveItemsLimit` accounts at a time.",
                "",
                "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                "  asset.",
                "",
                "Each call emits the `Event::DestroyedAccounts` event."
              ]
            },
            {
              "name": "destroy_approvals",
              "fields": [
                {
                  "name": "id",
                  "typeId": 70,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Destroy all approvals associated with a given asset up to the max (T::RemoveItemsLimit).",
                "",
                "`destroy_approvals` should only be called after `start_destroy` has been called, and the",
                "asset is in a `Destroying` state.",
                "",
                "Due to weight restrictions, this function may need to be called multiple times to fully",
                "destroy all approvals. It will destroy `RemoveItemsLimit` approvals at a time.",
                "",
                "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                "  asset.",
                "",
                "Each call emits the `Event::DestroyedApprovals` event."
              ]
            },
            {
              "name": "finish_destroy",
              "fields": [
                {
                  "name": "id",
                  "typeId": 70,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Complete destroying asset and unreserve currency.",
                "",
                "`finish_destroy` should only be called after `start_destroy` has been called, and the",
                "asset is in a `Destroying` state. All accounts or approvals should be destroyed before",
                "hand.",
                "",
                "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                "  asset.",
                "",
                "Each successful call emits the `Event::Destroyed` event."
              ]
            },
            {
              "name": "mint",
              "fields": [
                {
                  "name": "id",
                  "typeId": 70,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 70,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Mint assets of a particular class.",
                "",
                "The origin must be Signed and the sender must be the Issuer of the asset `id`.",
                "",
                "- `id`: The identifier of the asset to have some amount minted.",
                "- `beneficiary`: The account to be credited with the minted assets.",
                "- `amount`: The amount of the asset to be minted.",
                "",
                "Emits `Issued` event when successful.",
                "",
                "Weight: `O(1)`",
                "Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`."
              ]
            },
            {
              "name": "burn",
              "fields": [
                {
                  "name": "id",
                  "typeId": 70,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "who",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 70,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Reduce the balance of `who` by as much as possible up to `amount` assets of `id`.",
                "",
                "Origin must be Signed and the sender should be the Manager of the asset `id`.",
                "",
                "Bails with `NoAccount` if the `who` is already dead.",
                "",
                "- `id`: The identifier of the asset to have some amount burned.",
                "- `who`: The account to be debited from.",
                "- `amount`: The maximum amount by which `who`'s balance should be reduced.",
                "",
                "Emits `Burned` with the actual amount burned. If this takes the balance to below the",
                "minimum for the asset, then the amount burned is increased to take it to zero.",
                "",
                "Weight: `O(1)`",
                "Modes: Post-existence of `who`; Pre & post Zombie-status of `who`."
              ]
            },
            {
              "name": "transfer",
              "fields": [
                {
                  "name": "id",
                  "typeId": 70,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "target",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 70,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Move some assets from the sender account to another.",
                "",
                "Origin must be Signed.",
                "",
                "- `id`: The identifier of the asset to have some amount transferred.",
                "- `target`: The account to be credited.",
                "- `amount`: The amount by which the sender's balance of assets should be reduced and",
                "`target`'s balance increased. The amount actually transferred may be slightly greater in",
                "the case that the transfer would otherwise take the sender balance above zero but below",
                "the minimum balance. Must be greater than zero.",
                "",
                "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                "to below the minimum for the asset, then the amount transferred is increased to take it",
                "to zero.",
                "",
                "Weight: `O(1)`",
                "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
                "`target`."
              ]
            },
            {
              "name": "transfer_keep_alive",
              "fields": [
                {
                  "name": "id",
                  "typeId": 70,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "target",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 70,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Move some assets from the sender account to another, keeping the sender account alive.",
                "",
                "Origin must be Signed.",
                "",
                "- `id`: The identifier of the asset to have some amount transferred.",
                "- `target`: The account to be credited.",
                "- `amount`: The amount by which the sender's balance of assets should be reduced and",
                "`target`'s balance increased. The amount actually transferred may be slightly greater in",
                "the case that the transfer would otherwise take the sender balance above zero but below",
                "the minimum balance. Must be greater than zero.",
                "",
                "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                "to below the minimum for the asset, then the amount transferred is increased to take it",
                "to zero.",
                "",
                "Weight: `O(1)`",
                "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
                "`target`."
              ]
            },
            {
              "name": "force_transfer",
              "fields": [
                {
                  "name": "id",
                  "typeId": 70,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "source",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "dest",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 70,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "Move some assets from one account to another.",
                "",
                "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                "",
                "- `id`: The identifier of the asset to have some amount transferred.",
                "- `source`: The account to be debited.",
                "- `dest`: The account to be credited.",
                "- `amount`: The amount by which the `source`'s balance of assets should be reduced and",
                "`dest`'s balance increased. The amount actually transferred may be slightly greater in",
                "the case that the transfer would otherwise take the `source` balance above zero but",
                "below the minimum balance. Must be greater than zero.",
                "",
                "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                "to below the minimum for the asset, then the amount transferred is increased to take it",
                "to zero.",
                "",
                "Weight: `O(1)`",
                "Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of",
                "`dest`."
              ]
            },
            {
              "name": "freeze",
              "fields": [
                {
                  "name": "id",
                  "typeId": 70,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "who",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": [
                "Disallow further unprivileged transfers of an asset `id` from an account `who`. `who`",
                "must already exist as an entry in `Account`s of the asset. If you want to freeze an",
                "account that does not have an entry, use `touch_other` first.",
                "",
                "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
                "",
                "- `id`: The identifier of the asset to be frozen.",
                "- `who`: The account to be frozen.",
                "",
                "Emits `Frozen`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "thaw",
              "fields": [
                {
                  "name": "id",
                  "typeId": 70,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "who",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": [
                "Allow unprivileged transfers to and from an account again.",
                "",
                "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                "",
                "- `id`: The identifier of the asset to be frozen.",
                "- `who`: The account to be unfrozen.",
                "",
                "Emits `Thawed`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "freeze_asset",
              "fields": [
                {
                  "name": "id",
                  "typeId": 70,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": [
                "Disallow further unprivileged transfers for the asset class.",
                "",
                "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
                "",
                "- `id`: The identifier of the asset to be frozen.",
                "",
                "Emits `Frozen`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "thaw_asset",
              "fields": [
                {
                  "name": "id",
                  "typeId": 70,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": [
                "Allow unprivileged transfers for the asset again.",
                "",
                "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                "",
                "- `id`: The identifier of the asset to be thawed.",
                "",
                "Emits `Thawed`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "transfer_ownership",
              "fields": [
                {
                  "name": "id",
                  "typeId": 70,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "owner",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": [
                "Change the Owner of an asset.",
                "",
                "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                "",
                "- `id`: The identifier of the asset.",
                "- `owner`: The new Owner of this asset.",
                "",
                "Emits `OwnerChanged`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "set_team",
              "fields": [
                {
                  "name": "id",
                  "typeId": 70,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "issuer",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "admin",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "freezer",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": [
                "Change the Issuer, Admin and Freezer of an asset.",
                "",
                "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                "",
                "- `id`: The identifier of the asset to be frozen.",
                "- `issuer`: The new Issuer of this asset.",
                "- `admin`: The new Admin of this asset.",
                "- `freezer`: The new Freezer of this asset.",
                "",
                "Emits `TeamChanged`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "set_metadata",
              "fields": [
                {
                  "name": "id",
                  "typeId": 70,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "name",
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "symbol",
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "decimals",
                  "typeId": 2,
                  "typeName": "u8",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": [
                "Set the metadata for an asset.",
                "",
                "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                "",
                "Funds of sender are reserved according to the formula:",
                "`MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into",
                "account any already reserved funds.",
                "",
                "- `id`: The identifier of the asset to update.",
                "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
                "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
                "- `decimals`: The number of decimals this asset uses to represent one unit.",
                "",
                "Emits `MetadataSet`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "clear_metadata",
              "fields": [
                {
                  "name": "id",
                  "typeId": 70,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                }
              ],
              "index": 18,
              "docs": [
                "Clear the metadata for an asset.",
                "",
                "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                "",
                "Any deposit is freed for the asset owner.",
                "",
                "- `id`: The identifier of the asset to clear.",
                "",
                "Emits `MetadataCleared`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "force_set_metadata",
              "fields": [
                {
                  "name": "id",
                  "typeId": 70,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "name",
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "symbol",
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "decimals",
                  "typeId": 2,
                  "typeName": "u8",
                  "docs": []
                },
                {
                  "name": "is_frozen",
                  "typeId": 49,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": [
                "Force the metadata for an asset to some value.",
                "",
                "Origin must be ForceOrigin.",
                "",
                "Any deposit is left alone.",
                "",
                "- `id`: The identifier of the asset to update.",
                "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
                "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
                "- `decimals`: The number of decimals this asset uses to represent one unit.",
                "",
                "Emits `MetadataSet`.",
                "",
                "Weight: `O(N + S)` where N and S are the length of the name and symbol respectively."
              ]
            },
            {
              "name": "force_clear_metadata",
              "fields": [
                {
                  "name": "id",
                  "typeId": 70,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                }
              ],
              "index": 20,
              "docs": [
                "Clear the metadata for an asset.",
                "",
                "Origin must be ForceOrigin.",
                "",
                "Any deposit is returned.",
                "",
                "- `id`: The identifier of the asset to clear.",
                "",
                "Emits `MetadataCleared`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "force_asset_status",
              "fields": [
                {
                  "name": "id",
                  "typeId": 70,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "owner",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "issuer",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "admin",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "freezer",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "min_balance",
                  "typeId": 70,
                  "typeName": "T::Balance",
                  "docs": []
                },
                {
                  "name": "is_sufficient",
                  "typeId": 49,
                  "typeName": "bool",
                  "docs": []
                },
                {
                  "name": "is_frozen",
                  "typeId": 49,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": [
                "Alter the attributes of a given asset.",
                "",
                "Origin must be `ForceOrigin`.",
                "",
                "- `id`: The identifier of the asset.",
                "- `owner`: The new Owner of this asset.",
                "- `issuer`: The new Issuer of this asset.",
                "- `admin`: The new Admin of this asset.",
                "- `freezer`: The new Freezer of this asset.",
                "- `min_balance`: The minimum balance of this new asset that any single account must",
                "have. If an account's balance is reduced below this, then it collapses to zero.",
                "- `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient",
                "value to account for the state bloat associated with its balance storage. If set to",
                "`true`, then non-zero balances may be stored without a `consumer` reference (and thus",
                "an ED in the Balances pallet or whatever else is used to control user-account state",
                "growth).",
                "- `is_frozen`: Whether this asset class is frozen except for permissioned/admin",
                "instructions.",
                "",
                "Emits `AssetStatusChanged` with the identity of the asset.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "approve_transfer",
              "fields": [
                {
                  "name": "id",
                  "typeId": 70,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "delegate",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 70,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 22,
              "docs": [
                "Approve an amount of asset for transfer by a delegated third-party account.",
                "",
                "Origin must be Signed.",
                "",
                "Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account",
                "for the purpose of holding the approval. If some non-zero amount of assets is already",
                "approved from signing account to `delegate`, then it is topped up or unreserved to",
                "meet the right value.",
                "",
                "NOTE: The signing account does not need to own `amount` of assets at the point of",
                "making this call.",
                "",
                "- `id`: The identifier of the asset.",
                "- `delegate`: The account to delegate permission to transfer asset.",
                "- `amount`: The amount of asset that may be transferred by `delegate`. If there is",
                "already an approval in place, then this acts additively.",
                "",
                "Emits `ApprovedTransfer` on success.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "cancel_approval",
              "fields": [
                {
                  "name": "id",
                  "typeId": 70,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "delegate",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 23,
              "docs": [
                "Cancel all of some asset approved for delegated transfer by a third-party account.",
                "",
                "Origin must be Signed and there must be an approval in place between signer and",
                "`delegate`.",
                "",
                "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
                "",
                "- `id`: The identifier of the asset.",
                "- `delegate`: The account delegated permission to transfer asset.",
                "",
                "Emits `ApprovalCancelled` on success.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "force_cancel_approval",
              "fields": [
                {
                  "name": "id",
                  "typeId": 70,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "owner",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "delegate",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 24,
              "docs": [
                "Cancel all of some asset approved for delegated transfer by a third-party account.",
                "",
                "Origin must be either ForceOrigin or Signed origin with the signer being the Admin",
                "account of the asset `id`.",
                "",
                "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
                "",
                "- `id`: The identifier of the asset.",
                "- `delegate`: The account delegated permission to transfer asset.",
                "",
                "Emits `ApprovalCancelled` on success.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "transfer_approved",
              "fields": [
                {
                  "name": "id",
                  "typeId": 70,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "owner",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "destination",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 70,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 25,
              "docs": [
                "Transfer some asset balance from a previously delegated account to some third-party",
                "account.",
                "",
                "Origin must be Signed and there must be an approval in place by the `owner` to the",
                "signer.",
                "",
                "If the entire amount approved for transfer is transferred, then any deposit previously",
                "reserved by `approve_transfer` is unreserved.",
                "",
                "- `id`: The identifier of the asset.",
                "- `owner`: The account which previously approved for a transfer of at least `amount` and",
                "from which the asset balance will be withdrawn.",
                "- `destination`: The account to which the asset balance of `amount` will be transferred.",
                "- `amount`: The amount of assets to transfer.",
                "",
                "Emits `TransferredApproved` on success.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "touch",
              "fields": [
                {
                  "name": "id",
                  "typeId": 70,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                }
              ],
              "index": 26,
              "docs": [
                "Create an asset account for non-provider assets.",
                "",
                "A deposit will be taken from the signer account.",
                "",
                "- `origin`: Must be Signed; the signer account must have sufficient funds for a deposit",
                "  to be taken.",
                "- `id`: The identifier of the asset for the account to be created.",
                "",
                "Emits `Touched` event when successful."
              ]
            },
            {
              "name": "refund",
              "fields": [
                {
                  "name": "id",
                  "typeId": 70,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "allow_burn",
                  "typeId": 49,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 27,
              "docs": [
                "Return the deposit (if any) of an asset account or a consumer reference (if any) of an",
                "account.",
                "",
                "The origin must be Signed.",
                "",
                "- `id`: The identifier of the asset for which the caller would like the deposit",
                "  refunded.",
                "- `allow_burn`: If `true` then assets may be destroyed in order to complete the refund.",
                "",
                "Emits `Refunded` event when successful."
              ]
            },
            {
              "name": "set_min_balance",
              "fields": [
                {
                  "name": "id",
                  "typeId": 70,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "min_balance",
                  "typeId": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 28,
              "docs": [
                "Sets the minimum balance of an asset.",
                "",
                "Only works if there aren't any accounts that are holding the asset or if",
                "the new value of `min_balance` is less than the old one.",
                "",
                "Origin must be Signed and the sender has to be the Owner of the",
                "asset `id`.",
                "",
                "- `id`: The identifier of the asset.",
                "- `min_balance`: The new value of `min_balance`.",
                "",
                "Emits `AssetMinBalanceChanged` event when successful."
              ]
            },
            {
              "name": "touch_other",
              "fields": [
                {
                  "name": "id",
                  "typeId": 70,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "who",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 29,
              "docs": [
                "Create an asset account for `who`.",
                "",
                "A deposit will be taken from the signer account.",
                "",
                "- `origin`: Must be Signed by `Freezer` or `Admin` of the asset `id`; the signer account",
                "  must have sufficient funds for a deposit to be taken.",
                "- `id`: The identifier of the asset for the account to be created.",
                "- `who`: The account to be created.",
                "",
                "Emits `Touched` event when successful."
              ]
            },
            {
              "name": "refund_other",
              "fields": [
                {
                  "name": "id",
                  "typeId": 70,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "who",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 30,
              "docs": [
                "Return the deposit (if any) of a target asset account. Useful if you are the depositor.",
                "",
                "The origin must be Signed and either the account owner, depositor, or asset `Admin`. In",
                "order to burn a non-zero balance of the asset, the caller must be the account and should",
                "use `refund`.",
                "",
                "- `id`: The identifier of the asset for the account holding a deposit.",
                "- `who`: The account to refund.",
                "",
                "Emits `Refunded` event when successful."
              ]
            },
            {
              "name": "block",
              "fields": [
                {
                  "name": "id",
                  "typeId": 70,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "who",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 31,
              "docs": [
                "Disallow further unprivileged transfers of an asset `id` to and from an account `who`.",
                "",
                "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
                "",
                "- `id`: The identifier of the account's asset.",
                "- `who`: The account to be unblocked.",
                "",
                "Emits `Blocked`.",
                "",
                "Weight: `O(1)`"
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    },
    {
      "id": 233,
      "path": [
        "pallet_collator_selection",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "set_invulnerables",
              "fields": [
                {
                  "name": "new",
                  "typeId": 57,
                  "typeName": "Vec<T::AccountId>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Set the list of invulnerable (fixed) collators."
              ]
            },
            {
              "name": "set_desired_candidates",
              "fields": [
                {
                  "name": "max",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Set the ideal number of collators (not including the invulnerables).",
                "If lowering this number, then the number of running collators could be higher than this figure.",
                "Aside from that edge case, there should be no other way to have more collators than the desired number."
              ]
            },
            {
              "name": "set_candidacy_bond",
              "fields": [
                {
                  "name": "bond",
                  "typeId": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Set the candidacy bond amount."
              ]
            },
            {
              "name": "register_as_candidate",
              "fields": [],
              "index": 3,
              "docs": [
                "Register this account as a collator candidate. The account must (a) already have",
                "registered session keys and (b) be able to reserve the `CandidacyBond`.",
                "",
                "This call is not available to `Invulnerable` collators."
              ]
            },
            {
              "name": "leave_intent",
              "fields": [],
              "index": 4,
              "docs": [
                "Deregister `origin` as a collator candidate. Note that the collator can only leave on",
                "session change. The `CandidacyBond` will be unreserved immediately.",
                "",
                "This call will fail if the total number of candidates would drop below `MinCandidates`.",
                "",
                "This call is not available to `Invulnerable` collators."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    },
    {
      "id": 234,
      "path": [
        "pallet_session",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "set_keys",
              "fields": [
                {
                  "name": "keys",
                  "typeId": 235,
                  "typeName": "T::Keys",
                  "docs": []
                },
                {
                  "name": "proof",
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Sets the session key(s) of the function caller to `keys`.",
                "Allows an account to set its session key prior to becoming a validator.",
                "This doesn't take effect until the next session.",
                "",
                "The dispatch origin of this function must be signed.",
                "",
                "## Complexity",
                "- `O(1)`. Actual cost depends on the number of length of `T::Keys::key_ids()` which is",
                "  fixed."
              ]
            },
            {
              "name": "purge_keys",
              "fields": [],
              "index": 1,
              "docs": [
                "Removes any session key(s) of the function caller.",
                "",
                "This doesn't take effect until the next session.",
                "",
                "The dispatch origin of this function must be Signed and the account must be either be",
                "convertible to a validator ID using the chain's typical addressing system (this usually",
                "means being a controller account) or directly convertible into a validator ID (which",
                "usually means being a stash account).",
                "",
                "## Complexity",
                "- `O(1)` in number of key types. Actual cost depends on the number of length of",
                "  `T::Keys::key_ids()` which is fixed."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    },
    {
      "id": 235,
      "path": [
        "astar_runtime",
        "SessionKeys"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "aura",
              "typeId": 236,
              "typeName": "<Aura as $crate::BoundToRuntimeAppPublic>::Public",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 236,
      "path": [
        "sp_consensus_aura",
        "sr25519",
        "app_sr25519",
        "Public"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 237,
              "typeName": "sr25519::Public",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 237,
      "path": [
        "sp_core",
        "sr25519",
        "Public"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 1,
              "typeName": "[u8; 32]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 238,
      "path": [
        "cumulus_pallet_xcmp_queue",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "service_overweight",
              "fields": [
                {
                  "name": "index",
                  "typeId": 11,
                  "typeName": "OverweightIndex",
                  "docs": []
                },
                {
                  "name": "weight_limit",
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Services a single overweight XCM.",
                "",
                "- `origin`: Must pass `ExecuteOverweightOrigin`.",
                "- `index`: The index of the overweight XCM to service",
                "- `weight_limit`: The amount of weight that XCM execution may take.",
                "",
                "Errors:",
                "- `BadOverweightIndex`: XCM under `index` is not found in the `Overweight` storage map.",
                "- `BadXcm`: XCM under `index` cannot be properly decoded into a valid XCM format.",
                "- `WeightOverLimit`: XCM execution may use greater `weight_limit`.",
                "",
                "Events:",
                "- `OverweightServiced`: On success."
              ]
            },
            {
              "name": "suspend_xcm_execution",
              "fields": [],
              "index": 1,
              "docs": [
                "Suspends all XCM executions for the XCMP queue, regardless of the sender's origin.",
                "",
                "- `origin`: Must pass `ControllerOrigin`."
              ]
            },
            {
              "name": "resume_xcm_execution",
              "fields": [],
              "index": 2,
              "docs": [
                "Resumes all XCM executions for the XCMP queue.",
                "",
                "Note that this function doesn't change the status of the in/out bound channels.",
                "",
                "- `origin`: Must pass `ControllerOrigin`."
              ]
            },
            {
              "name": "update_suspend_threshold",
              "fields": [
                {
                  "name": "new",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Overwrites the number of pages of messages which must be in the queue for the other side to be told to",
                "suspend their sending.",
                "",
                "- `origin`: Must pass `Root`.",
                "- `new`: Desired value for `QueueConfigData.suspend_value`"
              ]
            },
            {
              "name": "update_drop_threshold",
              "fields": [
                {
                  "name": "new",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Overwrites the number of pages of messages which must be in the queue after which we drop any further",
                "messages from the channel.",
                "",
                "- `origin`: Must pass `Root`.",
                "- `new`: Desired value for `QueueConfigData.drop_threshold`"
              ]
            },
            {
              "name": "update_resume_threshold",
              "fields": [
                {
                  "name": "new",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Overwrites the number of pages of messages which the queue must be reduced to before it signals that",
                "message sending may recommence after it has been suspended.",
                "",
                "- `origin`: Must pass `Root`.",
                "- `new`: Desired value for `QueueConfigData.resume_threshold`"
              ]
            },
            {
              "name": "update_threshold_weight",
              "fields": [
                {
                  "name": "new",
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Overwrites the amount of remaining weight under which we stop processing messages.",
                "",
                "- `origin`: Must pass `Root`.",
                "- `new`: Desired value for `QueueConfigData.threshold_weight`"
              ]
            },
            {
              "name": "update_weight_restrict_decay",
              "fields": [
                {
                  "name": "new",
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Overwrites the speed to which the available weight approaches the maximum weight.",
                "A lower number results in a faster progression. A value of 1 makes the entire weight available initially.",
                "",
                "- `origin`: Must pass `Root`.",
                "- `new`: Desired value for `QueueConfigData.weight_restrict_decay`."
              ]
            },
            {
              "name": "update_xcmp_max_individual_weight",
              "fields": [
                {
                  "name": "new",
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Overwrite the maximum amount of weight any individual message may consume.",
                "Messages above this weight go into the overweight queue and may only be serviced explicitly.",
                "",
                "- `origin`: Must pass `Root`.",
                "- `new`: Desired value for `QueueConfigData.xcmp_max_individual_weight`."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    },
    {
      "id": 239,
      "path": [
        "pallet_xcm",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "send",
              "fields": [
                {
                  "name": "dest",
                  "typeId": 115,
                  "typeName": "Box<VersionedMultiLocation>",
                  "docs": []
                },
                {
                  "name": "message",
                  "typeId": 240,
                  "typeName": "Box<VersionedXcm<()>>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "teleport_assets",
              "fields": [
                {
                  "name": "dest",
                  "typeId": 115,
                  "typeName": "Box<VersionedMultiLocation>",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "typeId": 115,
                  "typeName": "Box<VersionedMultiLocation>",
                  "docs": []
                },
                {
                  "name": "assets",
                  "typeId": 101,
                  "typeName": "Box<VersionedMultiAssets>",
                  "docs": []
                },
                {
                  "name": "fee_asset_item",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Teleport some assets from the local chain to some destination chain.",
                "",
                "Fee payment on the destination side is made from the asset in the `assets` vector of",
                "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
                "with all fees taken as needed from the asset.",
                "",
                "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                "  an `AccountId32` value.",
                "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the",
                "  `dest` side. May not be empty.",
                "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                "  fees."
              ]
            },
            {
              "name": "reserve_transfer_assets",
              "fields": [
                {
                  "name": "dest",
                  "typeId": 115,
                  "typeName": "Box<VersionedMultiLocation>",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "typeId": 115,
                  "typeName": "Box<VersionedMultiLocation>",
                  "docs": []
                },
                {
                  "name": "assets",
                  "typeId": 101,
                  "typeName": "Box<VersionedMultiAssets>",
                  "docs": []
                },
                {
                  "name": "fee_asset_item",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Transfer some assets from the local chain to the sovereign account of a destination",
                "chain and forward a notification XCM.",
                "",
                "Fee payment on the destination side is made from the asset in the `assets` vector of",
                "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
                "with all fees taken as needed from the asset.",
                "",
                "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                "  an `AccountId32` value.",
                "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
                "  `dest` side.",
                "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                "  fees."
              ]
            },
            {
              "name": "execute",
              "fields": [
                {
                  "name": "message",
                  "typeId": 252,
                  "typeName": "Box<VersionedXcm<<T as SysConfig>::RuntimeCall>>",
                  "docs": []
                },
                {
                  "name": "max_weight",
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Execute an XCM message from a local, signed, origin.",
                "",
                "An event is deposited indicating whether `msg` could be executed completely or only",
                "partially.",
                "",
                "No more than `max_weight` will be used in its attempted execution. If this is less than the",
                "maximum amount of weight that the message could take to be executed, then no execution",
                "attempt will be made.",
                "",
                "NOTE: A successful return to this does *not* imply that the `msg` was executed successfully",
                "to completion; only that *some* of it was executed."
              ]
            },
            {
              "name": "force_xcm_version",
              "fields": [
                {
                  "name": "location",
                  "typeId": 64,
                  "typeName": "Box<MultiLocation>",
                  "docs": []
                },
                {
                  "name": "xcm_version",
                  "typeId": 4,
                  "typeName": "XcmVersion",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Extoll that a particular destination can be communicated with through a particular",
                "version of XCM.",
                "",
                "- `origin`: Must be Root.",
                "- `location`: The destination that is being described.",
                "- `xcm_version`: The latest version of XCM that `location` supports."
              ]
            },
            {
              "name": "force_default_xcm_version",
              "fields": [
                {
                  "name": "maybe_xcm_version",
                  "typeId": 260,
                  "typeName": "Option<XcmVersion>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Set a safe XCM version (the version that XCM should be encoded with if the most recent",
                "version a destination can accept is unknown).",
                "",
                "- `origin`: Must be Root.",
                "- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable."
              ]
            },
            {
              "name": "force_subscribe_version_notify",
              "fields": [
                {
                  "name": "location",
                  "typeId": 115,
                  "typeName": "Box<VersionedMultiLocation>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Ask a location to notify us regarding their XCM version and any changes to it.",
                "",
                "- `origin`: Must be Root.",
                "- `location`: The location to which we should subscribe for XCM version notifications."
              ]
            },
            {
              "name": "force_unsubscribe_version_notify",
              "fields": [
                {
                  "name": "location",
                  "typeId": 115,
                  "typeName": "Box<VersionedMultiLocation>",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Require that a particular destination should no longer notify us regarding any XCM",
                "version changes.",
                "",
                "- `origin`: Must be Root.",
                "- `location`: The location to which we are currently subscribed for XCM version",
                "  notifications which we no longer desire."
              ]
            },
            {
              "name": "limited_reserve_transfer_assets",
              "fields": [
                {
                  "name": "dest",
                  "typeId": 115,
                  "typeName": "Box<VersionedMultiLocation>",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "typeId": 115,
                  "typeName": "Box<VersionedMultiLocation>",
                  "docs": []
                },
                {
                  "name": "assets",
                  "typeId": 101,
                  "typeName": "Box<VersionedMultiAssets>",
                  "docs": []
                },
                {
                  "name": "fee_asset_item",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "weight_limit",
                  "typeId": 100,
                  "typeName": "WeightLimit",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Transfer some assets from the local chain to the sovereign account of a destination",
                "chain and forward a notification XCM.",
                "",
                "Fee payment on the destination side is made from the asset in the `assets` vector of",
                "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
                "is needed than `weight_limit`, then the operation will fail and the assets send may be",
                "at risk.",
                "",
                "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                "  an `AccountId32` value.",
                "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
                "  `dest` side.",
                "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                "  fees.",
                "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
              ]
            },
            {
              "name": "limited_teleport_assets",
              "fields": [
                {
                  "name": "dest",
                  "typeId": 115,
                  "typeName": "Box<VersionedMultiLocation>",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "typeId": 115,
                  "typeName": "Box<VersionedMultiLocation>",
                  "docs": []
                },
                {
                  "name": "assets",
                  "typeId": 101,
                  "typeName": "Box<VersionedMultiAssets>",
                  "docs": []
                },
                {
                  "name": "fee_asset_item",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "weight_limit",
                  "typeId": 100,
                  "typeName": "WeightLimit",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Teleport some assets from the local chain to some destination chain.",
                "",
                "Fee payment on the destination side is made from the asset in the `assets` vector of",
                "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
                "is needed than `weight_limit`, then the operation will fail and the assets send may be",
                "at risk.",
                "",
                "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                "  an `AccountId32` value.",
                "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the",
                "  `dest` side. May not be empty.",
                "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                "  fees.",
                "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
              ]
            },
            {
              "name": "force_suspension",
              "fields": [
                {
                  "name": "suspended",
                  "typeId": 49,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "Set or unset the global suspension state of the XCM executor.",
                "",
                "- `origin`: Must be an origin specified by AdminOrigin.",
                "- `suspended`: `true` to suspend, `false` to resume."
              ]
            },
            {
              "name": "reserve_withdraw_assets",
              "fields": [
                {
                  "name": "dest",
                  "typeId": 115,
                  "typeName": "Box<VersionedMultiLocation>",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "typeId": 115,
                  "typeName": "Box<VersionedMultiLocation>",
                  "docs": []
                },
                {
                  "name": "assets",
                  "typeId": 101,
                  "typeName": "Box<VersionedMultiAssets>",
                  "docs": []
                },
                {
                  "name": "fee_asset_item",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 200,
              "docs": [
                "Transfer some assets from sovereign account to reserve holder chain and",
                "forward a notification XCM.",
                "",
                "Fee payment on the destination side is made from the asset in the `assets` vector of",
                "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
                "with all fees taken as needed from the asset.",
                "",
                "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                "  an `AccountId32` value.",
                "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
                "  `dest` side.",
                "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                "  fees."
              ]
            },
            {
              "name": "limited_reserve_withdraw_assets",
              "fields": [
                {
                  "name": "dest",
                  "typeId": 115,
                  "typeName": "Box<VersionedMultiLocation>",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "typeId": 115,
                  "typeName": "Box<VersionedMultiLocation>",
                  "docs": []
                },
                {
                  "name": "assets",
                  "typeId": 101,
                  "typeName": "Box<VersionedMultiAssets>",
                  "docs": []
                },
                {
                  "name": "fee_asset_item",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "weight_limit",
                  "typeId": 100,
                  "typeName": "WeightLimit",
                  "docs": []
                }
              ],
              "index": 201,
              "docs": [
                "Transfer some assets from sovereign account to reserve holder chain and",
                "forward a notification XCM.",
                "",
                "Fee payment on the destination side is made from the asset in the `assets` vector of",
                "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
                "with all fees taken as needed from the asset.",
                "",
                "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                "  an `AccountId32` value.",
                "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
                "  `dest` side.",
                "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                "  fees.",
                "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    },
    {
      "id": 240,
      "path": [
        "xcm",
        "VersionedXcm"
      ],
      "params": [
        {
          "name": "RuntimeCall"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "V2",
              "fields": [
                {
                  "typeId": 241,
                  "typeName": "v2::Xcm<RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "V3",
              "fields": [
                {
                  "typeId": 73,
                  "typeName": "v3::Xcm<RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 241,
      "path": [
        "xcm",
        "v2",
        "Xcm"
      ],
      "params": [
        {
          "name": "RuntimeCall"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 242,
              "typeName": "Vec<Instruction<RuntimeCall>>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 242,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 243
        }
      },
      "docs": []
    },
    {
      "id": 243,
      "path": [
        "xcm",
        "v2",
        "Instruction"
      ],
      "params": [
        {
          "name": "RuntimeCall"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "WithdrawAsset",
              "fields": [
                {
                  "typeId": 102,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "ReserveAssetDeposited",
              "fields": [
                {
                  "typeId": 102,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "ReceiveTeleportedAsset",
              "fields": [
                {
                  "typeId": 102,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "QueryResponse",
              "fields": [
                {
                  "name": "query_id",
                  "typeId": 10,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "response",
                  "typeId": 244,
                  "typeName": "Response",
                  "docs": []
                },
                {
                  "name": "max_weight",
                  "typeId": 10,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "TransferAsset",
              "fields": [
                {
                  "name": "assets",
                  "typeId": 102,
                  "typeName": "MultiAssets",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "typeId": 106,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "TransferReserveAsset",
              "fields": [
                {
                  "name": "assets",
                  "typeId": 102,
                  "typeName": "MultiAssets",
                  "docs": []
                },
                {
                  "name": "dest",
                  "typeId": 106,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "typeId": 241,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "Transact",
              "fields": [
                {
                  "name": "origin_type",
                  "typeId": 94,
                  "typeName": "OriginKind",
                  "docs": []
                },
                {
                  "name": "require_weight_at_most",
                  "typeId": 10,
                  "typeName": "u64",
                  "docs": []
                },
                {
                  "name": "call",
                  "typeId": 95,
                  "typeName": "DoubleEncoded<RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "HrmpNewChannelOpenRequest",
              "fields": [
                {
                  "name": "sender",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_message_size",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_capacity",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "HrmpChannelAccepted",
              "fields": [
                {
                  "name": "recipient",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            },
            {
              "name": "HrmpChannelClosing",
              "fields": [
                {
                  "name": "initiator",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "sender",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "recipient",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": []
            },
            {
              "name": "ClearOrigin",
              "fields": [],
              "index": 10,
              "docs": []
            },
            {
              "name": "DescendOrigin",
              "fields": [
                {
                  "typeId": 107,
                  "typeName": "InteriorMultiLocation",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": []
            },
            {
              "name": "ReportError",
              "fields": [
                {
                  "name": "query_id",
                  "typeId": 10,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "dest",
                  "typeId": 106,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "max_response_weight",
                  "typeId": 10,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": []
            },
            {
              "name": "DepositAsset",
              "fields": [
                {
                  "name": "assets",
                  "typeId": 248,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "max_assets",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "typeId": 106,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": []
            },
            {
              "name": "DepositReserveAsset",
              "fields": [
                {
                  "name": "assets",
                  "typeId": 248,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "max_assets",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "dest",
                  "typeId": 106,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "typeId": 241,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": []
            },
            {
              "name": "ExchangeAsset",
              "fields": [
                {
                  "name": "give",
                  "typeId": 248,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "receive",
                  "typeId": 102,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": []
            },
            {
              "name": "InitiateReserveWithdraw",
              "fields": [
                {
                  "name": "assets",
                  "typeId": 248,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "reserve",
                  "typeId": 106,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "typeId": 241,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": []
            },
            {
              "name": "InitiateTeleport",
              "fields": [
                {
                  "name": "assets",
                  "typeId": 248,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "dest",
                  "typeId": 106,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "typeId": 241,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": []
            },
            {
              "name": "QueryHolding",
              "fields": [
                {
                  "name": "query_id",
                  "typeId": 10,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "dest",
                  "typeId": 106,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "assets",
                  "typeId": 248,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "max_response_weight",
                  "typeId": 10,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 18,
              "docs": []
            },
            {
              "name": "BuyExecution",
              "fields": [
                {
                  "name": "fees",
                  "typeId": 104,
                  "typeName": "MultiAsset",
                  "docs": []
                },
                {
                  "name": "weight_limit",
                  "typeId": 251,
                  "typeName": "WeightLimit",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": []
            },
            {
              "name": "RefundSurplus",
              "fields": [],
              "index": 20,
              "docs": []
            },
            {
              "name": "SetErrorHandler",
              "fields": [
                {
                  "typeId": 241,
                  "typeName": "Xcm<RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": []
            },
            {
              "name": "SetAppendix",
              "fields": [
                {
                  "typeId": 241,
                  "typeName": "Xcm<RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 22,
              "docs": []
            },
            {
              "name": "ClearError",
              "fields": [],
              "index": 23,
              "docs": []
            },
            {
              "name": "ClaimAsset",
              "fields": [
                {
                  "name": "assets",
                  "typeId": 102,
                  "typeName": "MultiAssets",
                  "docs": []
                },
                {
                  "name": "ticket",
                  "typeId": 106,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 24,
              "docs": []
            },
            {
              "name": "Trap",
              "fields": [
                {
                  "typeId": 10,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 25,
              "docs": []
            },
            {
              "name": "SubscribeVersion",
              "fields": [
                {
                  "name": "query_id",
                  "typeId": 10,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "max_response_weight",
                  "typeId": 10,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 26,
              "docs": []
            },
            {
              "name": "UnsubscribeVersion",
              "fields": [],
              "index": 27,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 244,
      "path": [
        "xcm",
        "v2",
        "Response"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Null",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Assets",
              "fields": [
                {
                  "typeId": 102,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "ExecutionResult",
              "fields": [
                {
                  "typeId": 245,
                  "typeName": "Option<(u32, Error)>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Version",
              "fields": [
                {
                  "typeId": 4,
                  "typeName": "super::Version",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 245,
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 246
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "typeId": 246,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 246,
      "path": [],
      "params": [],
      "type": {
        "tag": "Tuple",
        "value": {
          "fields": [
            4,
            247
          ]
        }
      },
      "docs": []
    },
    {
      "id": 247,
      "path": [
        "xcm",
        "v2",
        "traits",
        "Error"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Overflow",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Unimplemented",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "UntrustedReserveLocation",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "UntrustedTeleportLocation",
              "fields": [],
              "index": 3,
              "docs": []
            },
            {
              "name": "MultiLocationFull",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "MultiLocationNotInvertible",
              "fields": [],
              "index": 5,
              "docs": []
            },
            {
              "name": "BadOrigin",
              "fields": [],
              "index": 6,
              "docs": []
            },
            {
              "name": "InvalidLocation",
              "fields": [],
              "index": 7,
              "docs": []
            },
            {
              "name": "AssetNotFound",
              "fields": [],
              "index": 8,
              "docs": []
            },
            {
              "name": "FailedToTransactAsset",
              "fields": [],
              "index": 9,
              "docs": []
            },
            {
              "name": "NotWithdrawable",
              "fields": [],
              "index": 10,
              "docs": []
            },
            {
              "name": "LocationCannotHold",
              "fields": [],
              "index": 11,
              "docs": []
            },
            {
              "name": "ExceedsMaxMessageSize",
              "fields": [],
              "index": 12,
              "docs": []
            },
            {
              "name": "DestinationUnsupported",
              "fields": [],
              "index": 13,
              "docs": []
            },
            {
              "name": "Transport",
              "fields": [],
              "index": 14,
              "docs": []
            },
            {
              "name": "Unroutable",
              "fields": [],
              "index": 15,
              "docs": []
            },
            {
              "name": "UnknownClaim",
              "fields": [],
              "index": 16,
              "docs": []
            },
            {
              "name": "FailedToDecode",
              "fields": [],
              "index": 17,
              "docs": []
            },
            {
              "name": "MaxWeightInvalid",
              "fields": [],
              "index": 18,
              "docs": []
            },
            {
              "name": "NotHoldingFees",
              "fields": [],
              "index": 19,
              "docs": []
            },
            {
              "name": "TooExpensive",
              "fields": [],
              "index": 20,
              "docs": []
            },
            {
              "name": "Trap",
              "fields": [
                {
                  "typeId": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": []
            },
            {
              "name": "UnhandledXcmVersion",
              "fields": [],
              "index": 22,
              "docs": []
            },
            {
              "name": "WeightLimitReached",
              "fields": [
                {
                  "typeId": 11,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 23,
              "docs": []
            },
            {
              "name": "Barrier",
              "fields": [],
              "index": 24,
              "docs": []
            },
            {
              "name": "WeightNotComputable",
              "fields": [],
              "index": 25,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 248,
      "path": [
        "xcm",
        "v2",
        "multiasset",
        "MultiAssetFilter"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Definite",
              "fields": [
                {
                  "typeId": 102,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Wild",
              "fields": [
                {
                  "typeId": 249,
                  "typeName": "WildMultiAsset",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 249,
      "path": [
        "xcm",
        "v2",
        "multiasset",
        "WildMultiAsset"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "All",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "AllOf",
              "fields": [
                {
                  "name": "id",
                  "typeId": 105,
                  "typeName": "AssetId",
                  "docs": []
                },
                {
                  "name": "fun",
                  "typeId": 250,
                  "typeName": "WildFungibility",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 250,
      "path": [
        "xcm",
        "v2",
        "multiasset",
        "WildFungibility"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Fungible",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "NonFungible",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 251,
      "path": [
        "xcm",
        "v2",
        "WeightLimit"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Unlimited",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Limited",
              "fields": [
                {
                  "typeId": 10,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 252,
      "path": [
        "xcm",
        "VersionedXcm"
      ],
      "params": [
        {
          "name": "RuntimeCall"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "V2",
              "fields": [
                {
                  "typeId": 253,
                  "typeName": "v2::Xcm<RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "V3",
              "fields": [
                {
                  "typeId": 257,
                  "typeName": "v3::Xcm<RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 253,
      "path": [
        "xcm",
        "v2",
        "Xcm"
      ],
      "params": [
        {
          "name": "RuntimeCall"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 254,
              "typeName": "Vec<Instruction<RuntimeCall>>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 254,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 255
        }
      },
      "docs": []
    },
    {
      "id": 255,
      "path": [
        "xcm",
        "v2",
        "Instruction"
      ],
      "params": [
        {
          "name": "RuntimeCall"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "WithdrawAsset",
              "fields": [
                {
                  "typeId": 102,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "ReserveAssetDeposited",
              "fields": [
                {
                  "typeId": 102,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "ReceiveTeleportedAsset",
              "fields": [
                {
                  "typeId": 102,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "QueryResponse",
              "fields": [
                {
                  "name": "query_id",
                  "typeId": 10,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "response",
                  "typeId": 244,
                  "typeName": "Response",
                  "docs": []
                },
                {
                  "name": "max_weight",
                  "typeId": 10,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "TransferAsset",
              "fields": [
                {
                  "name": "assets",
                  "typeId": 102,
                  "typeName": "MultiAssets",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "typeId": 106,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "TransferReserveAsset",
              "fields": [
                {
                  "name": "assets",
                  "typeId": 102,
                  "typeName": "MultiAssets",
                  "docs": []
                },
                {
                  "name": "dest",
                  "typeId": 106,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "typeId": 241,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "Transact",
              "fields": [
                {
                  "name": "origin_type",
                  "typeId": 94,
                  "typeName": "OriginKind",
                  "docs": []
                },
                {
                  "name": "require_weight_at_most",
                  "typeId": 10,
                  "typeName": "u64",
                  "docs": []
                },
                {
                  "name": "call",
                  "typeId": 256,
                  "typeName": "DoubleEncoded<RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "HrmpNewChannelOpenRequest",
              "fields": [
                {
                  "name": "sender",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_message_size",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_capacity",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "HrmpChannelAccepted",
              "fields": [
                {
                  "name": "recipient",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            },
            {
              "name": "HrmpChannelClosing",
              "fields": [
                {
                  "name": "initiator",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "sender",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "recipient",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": []
            },
            {
              "name": "ClearOrigin",
              "fields": [],
              "index": 10,
              "docs": []
            },
            {
              "name": "DescendOrigin",
              "fields": [
                {
                  "typeId": 107,
                  "typeName": "InteriorMultiLocation",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": []
            },
            {
              "name": "ReportError",
              "fields": [
                {
                  "name": "query_id",
                  "typeId": 10,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "dest",
                  "typeId": 106,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "max_response_weight",
                  "typeId": 10,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": []
            },
            {
              "name": "DepositAsset",
              "fields": [
                {
                  "name": "assets",
                  "typeId": 248,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "max_assets",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "typeId": 106,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": []
            },
            {
              "name": "DepositReserveAsset",
              "fields": [
                {
                  "name": "assets",
                  "typeId": 248,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "max_assets",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "dest",
                  "typeId": 106,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "typeId": 241,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": []
            },
            {
              "name": "ExchangeAsset",
              "fields": [
                {
                  "name": "give",
                  "typeId": 248,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "receive",
                  "typeId": 102,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": []
            },
            {
              "name": "InitiateReserveWithdraw",
              "fields": [
                {
                  "name": "assets",
                  "typeId": 248,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "reserve",
                  "typeId": 106,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "typeId": 241,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": []
            },
            {
              "name": "InitiateTeleport",
              "fields": [
                {
                  "name": "assets",
                  "typeId": 248,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "dest",
                  "typeId": 106,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "typeId": 241,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": []
            },
            {
              "name": "QueryHolding",
              "fields": [
                {
                  "name": "query_id",
                  "typeId": 10,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "dest",
                  "typeId": 106,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "assets",
                  "typeId": 248,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "max_response_weight",
                  "typeId": 10,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 18,
              "docs": []
            },
            {
              "name": "BuyExecution",
              "fields": [
                {
                  "name": "fees",
                  "typeId": 104,
                  "typeName": "MultiAsset",
                  "docs": []
                },
                {
                  "name": "weight_limit",
                  "typeId": 251,
                  "typeName": "WeightLimit",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": []
            },
            {
              "name": "RefundSurplus",
              "fields": [],
              "index": 20,
              "docs": []
            },
            {
              "name": "SetErrorHandler",
              "fields": [
                {
                  "typeId": 253,
                  "typeName": "Xcm<RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": []
            },
            {
              "name": "SetAppendix",
              "fields": [
                {
                  "typeId": 253,
                  "typeName": "Xcm<RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 22,
              "docs": []
            },
            {
              "name": "ClearError",
              "fields": [],
              "index": 23,
              "docs": []
            },
            {
              "name": "ClaimAsset",
              "fields": [
                {
                  "name": "assets",
                  "typeId": 102,
                  "typeName": "MultiAssets",
                  "docs": []
                },
                {
                  "name": "ticket",
                  "typeId": 106,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 24,
              "docs": []
            },
            {
              "name": "Trap",
              "fields": [
                {
                  "typeId": 10,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 25,
              "docs": []
            },
            {
              "name": "SubscribeVersion",
              "fields": [
                {
                  "name": "query_id",
                  "typeId": 10,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "max_response_weight",
                  "typeId": 10,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 26,
              "docs": []
            },
            {
              "name": "UnsubscribeVersion",
              "fields": [],
              "index": 27,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 256,
      "path": [
        "xcm",
        "double_encoded",
        "DoubleEncoded"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "encoded",
              "typeId": 13,
              "typeName": "Vec<u8>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 257,
      "path": [
        "xcm",
        "v3",
        "Xcm"
      ],
      "params": [
        {
          "name": "Call"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 258,
              "typeName": "Vec<Instruction<Call>>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 258,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 259
        }
      },
      "docs": []
    },
    {
      "id": 259,
      "path": [
        "xcm",
        "v3",
        "Instruction"
      ],
      "params": [
        {
          "name": "Call"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "WithdrawAsset",
              "fields": [
                {
                  "typeId": 76,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "ReserveAssetDeposited",
              "fields": [
                {
                  "typeId": 76,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "ReceiveTeleportedAsset",
              "fields": [
                {
                  "typeId": 76,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "QueryResponse",
              "fields": [
                {
                  "name": "query_id",
                  "typeId": 10,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "response",
                  "typeId": 84,
                  "typeName": "Response",
                  "docs": []
                },
                {
                  "name": "max_weight",
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "querier",
                  "typeId": 93,
                  "typeName": "Option<MultiLocation>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "TransferAsset",
              "fields": [
                {
                  "name": "assets",
                  "typeId": 76,
                  "typeName": "MultiAssets",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "typeId": 64,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "TransferReserveAsset",
              "fields": [
                {
                  "name": "assets",
                  "typeId": 76,
                  "typeName": "MultiAssets",
                  "docs": []
                },
                {
                  "name": "dest",
                  "typeId": 64,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "typeId": 73,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "Transact",
              "fields": [
                {
                  "name": "origin_kind",
                  "typeId": 94,
                  "typeName": "OriginKind",
                  "docs": []
                },
                {
                  "name": "require_weight_at_most",
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "call",
                  "typeId": 256,
                  "typeName": "DoubleEncoded<Call>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "HrmpNewChannelOpenRequest",
              "fields": [
                {
                  "name": "sender",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_message_size",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_capacity",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "HrmpChannelAccepted",
              "fields": [
                {
                  "name": "recipient",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            },
            {
              "name": "HrmpChannelClosing",
              "fields": [
                {
                  "name": "initiator",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "sender",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "recipient",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": []
            },
            {
              "name": "ClearOrigin",
              "fields": [],
              "index": 10,
              "docs": []
            },
            {
              "name": "DescendOrigin",
              "fields": [
                {
                  "typeId": 65,
                  "typeName": "InteriorMultiLocation",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": []
            },
            {
              "name": "ReportError",
              "fields": [
                {
                  "typeId": 96,
                  "typeName": "QueryResponseInfo",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": []
            },
            {
              "name": "DepositAsset",
              "fields": [
                {
                  "name": "assets",
                  "typeId": 97,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "typeId": 64,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": []
            },
            {
              "name": "DepositReserveAsset",
              "fields": [
                {
                  "name": "assets",
                  "typeId": 97,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "dest",
                  "typeId": 64,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "typeId": 73,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": []
            },
            {
              "name": "ExchangeAsset",
              "fields": [
                {
                  "name": "give",
                  "typeId": 97,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "want",
                  "typeId": 76,
                  "typeName": "MultiAssets",
                  "docs": []
                },
                {
                  "name": "maximal",
                  "typeId": 49,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": []
            },
            {
              "name": "InitiateReserveWithdraw",
              "fields": [
                {
                  "name": "assets",
                  "typeId": 97,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "reserve",
                  "typeId": 64,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "typeId": 73,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": []
            },
            {
              "name": "InitiateTeleport",
              "fields": [
                {
                  "name": "assets",
                  "typeId": 97,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "dest",
                  "typeId": 64,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "typeId": 73,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": []
            },
            {
              "name": "ReportHolding",
              "fields": [
                {
                  "name": "response_info",
                  "typeId": 96,
                  "typeName": "QueryResponseInfo",
                  "docs": []
                },
                {
                  "name": "assets",
                  "typeId": 97,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                }
              ],
              "index": 18,
              "docs": []
            },
            {
              "name": "BuyExecution",
              "fields": [
                {
                  "name": "fees",
                  "typeId": 78,
                  "typeName": "MultiAsset",
                  "docs": []
                },
                {
                  "name": "weight_limit",
                  "typeId": 100,
                  "typeName": "WeightLimit",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": []
            },
            {
              "name": "RefundSurplus",
              "fields": [],
              "index": 20,
              "docs": []
            },
            {
              "name": "SetErrorHandler",
              "fields": [
                {
                  "typeId": 257,
                  "typeName": "Xcm<Call>",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": []
            },
            {
              "name": "SetAppendix",
              "fields": [
                {
                  "typeId": 257,
                  "typeName": "Xcm<Call>",
                  "docs": []
                }
              ],
              "index": 22,
              "docs": []
            },
            {
              "name": "ClearError",
              "fields": [],
              "index": 23,
              "docs": []
            },
            {
              "name": "ClaimAsset",
              "fields": [
                {
                  "name": "assets",
                  "typeId": 76,
                  "typeName": "MultiAssets",
                  "docs": []
                },
                {
                  "name": "ticket",
                  "typeId": 64,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 24,
              "docs": []
            },
            {
              "name": "Trap",
              "fields": [
                {
                  "typeId": 10,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 25,
              "docs": []
            },
            {
              "name": "SubscribeVersion",
              "fields": [
                {
                  "name": "query_id",
                  "typeId": 10,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "max_response_weight",
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 26,
              "docs": []
            },
            {
              "name": "UnsubscribeVersion",
              "fields": [],
              "index": 27,
              "docs": []
            },
            {
              "name": "BurnAsset",
              "fields": [
                {
                  "typeId": 76,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 28,
              "docs": []
            },
            {
              "name": "ExpectAsset",
              "fields": [
                {
                  "typeId": 76,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 29,
              "docs": []
            },
            {
              "name": "ExpectOrigin",
              "fields": [
                {
                  "typeId": 93,
                  "typeName": "Option<MultiLocation>",
                  "docs": []
                }
              ],
              "index": 30,
              "docs": []
            },
            {
              "name": "ExpectError",
              "fields": [
                {
                  "typeId": 85,
                  "typeName": "Option<(u32, Error)>",
                  "docs": []
                }
              ],
              "index": 31,
              "docs": []
            },
            {
              "name": "ExpectTransactStatus",
              "fields": [
                {
                  "typeId": 91,
                  "typeName": "MaybeErrorCode",
                  "docs": []
                }
              ],
              "index": 32,
              "docs": []
            },
            {
              "name": "QueryPallet",
              "fields": [
                {
                  "name": "module_name",
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "response_info",
                  "typeId": 96,
                  "typeName": "QueryResponseInfo",
                  "docs": []
                }
              ],
              "index": 33,
              "docs": []
            },
            {
              "name": "ExpectPallet",
              "fields": [
                {
                  "name": "index",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "name",
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "module_name",
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "crate_major",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "min_crate_minor",
                  "typeId": 67,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 34,
              "docs": []
            },
            {
              "name": "ReportTransactStatus",
              "fields": [
                {
                  "typeId": 96,
                  "typeName": "QueryResponseInfo",
                  "docs": []
                }
              ],
              "index": 35,
              "docs": []
            },
            {
              "name": "ClearTransactStatus",
              "fields": [],
              "index": 36,
              "docs": []
            },
            {
              "name": "UniversalOrigin",
              "fields": [
                {
                  "typeId": 66,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 37,
              "docs": []
            },
            {
              "name": "ExportMessage",
              "fields": [
                {
                  "name": "network",
                  "typeId": 69,
                  "typeName": "NetworkId",
                  "docs": []
                },
                {
                  "name": "destination",
                  "typeId": 65,
                  "typeName": "InteriorMultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "typeId": 73,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 38,
              "docs": []
            },
            {
              "name": "LockAsset",
              "fields": [
                {
                  "name": "asset",
                  "typeId": 78,
                  "typeName": "MultiAsset",
                  "docs": []
                },
                {
                  "name": "unlocker",
                  "typeId": 64,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 39,
              "docs": []
            },
            {
              "name": "UnlockAsset",
              "fields": [
                {
                  "name": "asset",
                  "typeId": 78,
                  "typeName": "MultiAsset",
                  "docs": []
                },
                {
                  "name": "target",
                  "typeId": 64,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 40,
              "docs": []
            },
            {
              "name": "NoteUnlockable",
              "fields": [
                {
                  "name": "asset",
                  "typeId": 78,
                  "typeName": "MultiAsset",
                  "docs": []
                },
                {
                  "name": "owner",
                  "typeId": 64,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 41,
              "docs": []
            },
            {
              "name": "RequestUnlock",
              "fields": [
                {
                  "name": "asset",
                  "typeId": 78,
                  "typeName": "MultiAsset",
                  "docs": []
                },
                {
                  "name": "locker",
                  "typeId": 64,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 42,
              "docs": []
            },
            {
              "name": "SetFeesMode",
              "fields": [
                {
                  "name": "jit_withdraw",
                  "typeId": 49,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 43,
              "docs": []
            },
            {
              "name": "SetTopic",
              "fields": [
                {
                  "typeId": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 44,
              "docs": []
            },
            {
              "name": "ClearTopic",
              "fields": [],
              "index": 45,
              "docs": []
            },
            {
              "name": "AliasOrigin",
              "fields": [
                {
                  "typeId": 64,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 46,
              "docs": []
            },
            {
              "name": "UnpaidExecution",
              "fields": [
                {
                  "name": "weight_limit",
                  "typeId": 100,
                  "typeName": "WeightLimit",
                  "docs": []
                },
                {
                  "name": "check_origin",
                  "typeId": 93,
                  "typeName": "Option<MultiLocation>",
                  "docs": []
                }
              ],
              "index": 47,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 260,
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 4
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "typeId": 4,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 261,
      "path": [
        "cumulus_pallet_xcm",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": []
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    },
    {
      "id": 262,
      "path": [
        "cumulus_pallet_dmp_queue",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "service_overweight",
              "fields": [
                {
                  "name": "index",
                  "typeId": 11,
                  "typeName": "OverweightIndex",
                  "docs": []
                },
                {
                  "name": "weight_limit",
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Service a single overweight message."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    },
    {
      "id": 263,
      "path": [
        "pallet_xc_asset_config",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "register_asset_location",
              "fields": [
                {
                  "name": "asset_location",
                  "typeId": 115,
                  "typeName": "Box<VersionedMultiLocation>",
                  "docs": []
                },
                {
                  "name": "asset_id",
                  "typeId": 70,
                  "typeName": "T::AssetId",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Register new asset location to asset Id mapping.",
                "",
                "This makes the asset eligible for XCM interaction."
              ]
            },
            {
              "name": "set_asset_units_per_second",
              "fields": [
                {
                  "name": "asset_location",
                  "typeId": 115,
                  "typeName": "Box<VersionedMultiLocation>",
                  "docs": []
                },
                {
                  "name": "units_per_second",
                  "typeId": 70,
                  "typeName": "u128",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Change the amount of units we are charging per execution second",
                "for a given AssetLocation."
              ]
            },
            {
              "name": "change_existing_asset_location",
              "fields": [
                {
                  "name": "new_asset_location",
                  "typeId": 115,
                  "typeName": "Box<VersionedMultiLocation>",
                  "docs": []
                },
                {
                  "name": "asset_id",
                  "typeId": 70,
                  "typeName": "T::AssetId",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Change the xcm type mapping for a given asset Id.",
                "The new asset type will inherit old `units per second` value."
              ]
            },
            {
              "name": "remove_payment_asset",
              "fields": [
                {
                  "name": "asset_location",
                  "typeId": 115,
                  "typeName": "Box<VersionedMultiLocation>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Removes asset from the set of supported payment assets.",
                "",
                "The asset can still be interacted with via XCM but it cannot be used to pay for execution time."
              ]
            },
            {
              "name": "remove_asset",
              "fields": [
                {
                  "name": "asset_id",
                  "typeId": 70,
                  "typeName": "T::AssetId",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Removes all information related to asset, removing it from XCM support."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    },
    {
      "id": 264,
      "path": [
        "orml_xtokens",
        "module",
        "Call"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "transfer",
              "fields": [
                {
                  "name": "currency_id",
                  "typeId": 6,
                  "typeName": "T::CurrencyId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "T::Balance",
                  "docs": []
                },
                {
                  "name": "dest",
                  "typeId": 115,
                  "typeName": "Box<VersionedMultiLocation>",
                  "docs": []
                },
                {
                  "name": "dest_weight_limit",
                  "typeId": 100,
                  "typeName": "WeightLimit",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Transfer native currencies.",
                "",
                "`dest_weight_limit` is the weight for XCM execution on the dest",
                "chain, and it would be charged from the transferred assets. If set",
                "below requirements, the execution may fail and assets wouldn't be",
                "received.",
                "",
                "It's a no-op if any error on local XCM execution or message sending.",
                "Note sending assets out per se doesn't guarantee they would be",
                "received. Receiving depends on if the XCM message could be delivered",
                "by the network, and if the receiving chain would handle",
                "messages correctly."
              ]
            },
            {
              "name": "transfer_multiasset",
              "fields": [
                {
                  "name": "asset",
                  "typeId": 265,
                  "typeName": "Box<VersionedMultiAsset>",
                  "docs": []
                },
                {
                  "name": "dest",
                  "typeId": 115,
                  "typeName": "Box<VersionedMultiLocation>",
                  "docs": []
                },
                {
                  "name": "dest_weight_limit",
                  "typeId": 100,
                  "typeName": "WeightLimit",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Transfer `MultiAsset`.",
                "",
                "`dest_weight_limit` is the weight for XCM execution on the dest",
                "chain, and it would be charged from the transferred assets. If set",
                "below requirements, the execution may fail and assets wouldn't be",
                "received.",
                "",
                "It's a no-op if any error on local XCM execution or message sending.",
                "Note sending assets out per se doesn't guarantee they would be",
                "received. Receiving depends on if the XCM message could be delivered",
                "by the network, and if the receiving chain would handle",
                "messages correctly."
              ]
            },
            {
              "name": "transfer_with_fee",
              "fields": [
                {
                  "name": "currency_id",
                  "typeId": 6,
                  "typeName": "T::CurrencyId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "T::Balance",
                  "docs": []
                },
                {
                  "name": "fee",
                  "typeId": 6,
                  "typeName": "T::Balance",
                  "docs": []
                },
                {
                  "name": "dest",
                  "typeId": 115,
                  "typeName": "Box<VersionedMultiLocation>",
                  "docs": []
                },
                {
                  "name": "dest_weight_limit",
                  "typeId": 100,
                  "typeName": "WeightLimit",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Transfer native currencies specifying the fee and amount as",
                "separate.",
                "",
                "`dest_weight_limit` is the weight for XCM execution on the dest",
                "chain, and it would be charged from the transferred assets. If set",
                "below requirements, the execution may fail and assets wouldn't be",
                "received.",
                "",
                "`fee` is the amount to be spent to pay for execution in destination",
                "chain. Both fee and amount will be subtracted form the callers",
                "balance.",
                "",
                "If `fee` is not high enough to cover for the execution costs in the",
                "destination chain, then the assets will be trapped in the",
                "destination chain",
                "",
                "It's a no-op if any error on local XCM execution or message sending.",
                "Note sending assets out per se doesn't guarantee they would be",
                "received. Receiving depends on if the XCM message could be delivered",
                "by the network, and if the receiving chain would handle",
                "messages correctly."
              ]
            },
            {
              "name": "transfer_multiasset_with_fee",
              "fields": [
                {
                  "name": "asset",
                  "typeId": 265,
                  "typeName": "Box<VersionedMultiAsset>",
                  "docs": []
                },
                {
                  "name": "fee",
                  "typeId": 265,
                  "typeName": "Box<VersionedMultiAsset>",
                  "docs": []
                },
                {
                  "name": "dest",
                  "typeId": 115,
                  "typeName": "Box<VersionedMultiLocation>",
                  "docs": []
                },
                {
                  "name": "dest_weight_limit",
                  "typeId": 100,
                  "typeName": "WeightLimit",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Transfer `MultiAsset` specifying the fee and amount as separate.",
                "",
                "`dest_weight_limit` is the weight for XCM execution on the dest",
                "chain, and it would be charged from the transferred assets. If set",
                "below requirements, the execution may fail and assets wouldn't be",
                "received.",
                "",
                "`fee` is the multiasset to be spent to pay for execution in",
                "destination chain. Both fee and amount will be subtracted form the",
                "callers balance For now we only accept fee and asset having the same",
                "`MultiLocation` id.",
                "",
                "If `fee` is not high enough to cover for the execution costs in the",
                "destination chain, then the assets will be trapped in the",
                "destination chain",
                "",
                "It's a no-op if any error on local XCM execution or message sending.",
                "Note sending assets out per se doesn't guarantee they would be",
                "received. Receiving depends on if the XCM message could be delivered",
                "by the network, and if the receiving chain would handle",
                "messages correctly."
              ]
            },
            {
              "name": "transfer_multicurrencies",
              "fields": [
                {
                  "name": "currencies",
                  "typeId": 266,
                  "typeName": "Vec<(T::CurrencyId, T::Balance)>",
                  "docs": []
                },
                {
                  "name": "fee_item",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "dest",
                  "typeId": 115,
                  "typeName": "Box<VersionedMultiLocation>",
                  "docs": []
                },
                {
                  "name": "dest_weight_limit",
                  "typeId": 100,
                  "typeName": "WeightLimit",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Transfer several currencies specifying the item to be used as fee",
                "",
                "`dest_weight_limit` is the weight for XCM execution on the dest",
                "chain, and it would be charged from the transferred assets. If set",
                "below requirements, the execution may fail and assets wouldn't be",
                "received.",
                "",
                "`fee_item` is index of the currencies tuple that we want to use for",
                "payment",
                "",
                "It's a no-op if any error on local XCM execution or message sending.",
                "Note sending assets out per se doesn't guarantee they would be",
                "received. Receiving depends on if the XCM message could be delivered",
                "by the network, and if the receiving chain would handle",
                "messages correctly."
              ]
            },
            {
              "name": "transfer_multiassets",
              "fields": [
                {
                  "name": "assets",
                  "typeId": 101,
                  "typeName": "Box<VersionedMultiAssets>",
                  "docs": []
                },
                {
                  "name": "fee_item",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "dest",
                  "typeId": 115,
                  "typeName": "Box<VersionedMultiLocation>",
                  "docs": []
                },
                {
                  "name": "dest_weight_limit",
                  "typeId": 100,
                  "typeName": "WeightLimit",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Transfer several `MultiAsset` specifying the item to be used as fee",
                "",
                "`dest_weight_limit` is the weight for XCM execution on the dest",
                "chain, and it would be charged from the transferred assets. If set",
                "below requirements, the execution may fail and assets wouldn't be",
                "received.",
                "",
                "`fee_item` is index of the MultiAssets that we want to use for",
                "payment",
                "",
                "It's a no-op if any error on local XCM execution or message sending.",
                "Note sending assets out per se doesn't guarantee they would be",
                "received. Receiving depends on if the XCM message could be delivered",
                "by the network, and if the receiving chain would handle",
                "messages correctly."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    },
    {
      "id": 265,
      "path": [
        "xcm",
        "VersionedMultiAsset"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "V2",
              "fields": [
                {
                  "typeId": 104,
                  "typeName": "v2::MultiAsset",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "V3",
              "fields": [
                {
                  "typeId": 78,
                  "typeName": "v3::MultiAsset",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 266,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 267
        }
      },
      "docs": []
    },
    {
      "id": 267,
      "path": [],
      "params": [],
      "type": {
        "tag": "Tuple",
        "value": {
          "fields": [
            6,
            6
          ]
        }
      },
      "docs": []
    },
    {
      "id": 268,
      "path": [
        "pallet_evm",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "withdraw",
              "fields": [
                {
                  "name": "address",
                  "typeId": 47,
                  "typeName": "H160",
                  "docs": []
                },
                {
                  "name": "value",
                  "typeId": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Withdraw balance from EVM into currency/balances pallet."
              ]
            },
            {
              "name": "call",
              "fields": [
                {
                  "name": "source",
                  "typeId": 47,
                  "typeName": "H160",
                  "docs": []
                },
                {
                  "name": "target",
                  "typeId": 47,
                  "typeName": "H160",
                  "docs": []
                },
                {
                  "name": "input",
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "value",
                  "typeId": 134,
                  "typeName": "U256",
                  "docs": []
                },
                {
                  "name": "gas_limit",
                  "typeId": 11,
                  "typeName": "u64",
                  "docs": []
                },
                {
                  "name": "max_fee_per_gas",
                  "typeId": 134,
                  "typeName": "U256",
                  "docs": []
                },
                {
                  "name": "max_priority_fee_per_gas",
                  "typeId": 269,
                  "typeName": "Option<U256>",
                  "docs": []
                },
                {
                  "name": "nonce",
                  "typeId": 269,
                  "typeName": "Option<U256>",
                  "docs": []
                },
                {
                  "name": "access_list",
                  "typeId": 270,
                  "typeName": "Vec<(H160, Vec<H256>)>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Issue an EVM call operation. This is similar to a message call transaction in Ethereum."
              ]
            },
            {
              "name": "create",
              "fields": [
                {
                  "name": "source",
                  "typeId": 47,
                  "typeName": "H160",
                  "docs": []
                },
                {
                  "name": "init",
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "value",
                  "typeId": 134,
                  "typeName": "U256",
                  "docs": []
                },
                {
                  "name": "gas_limit",
                  "typeId": 11,
                  "typeName": "u64",
                  "docs": []
                },
                {
                  "name": "max_fee_per_gas",
                  "typeId": 134,
                  "typeName": "U256",
                  "docs": []
                },
                {
                  "name": "max_priority_fee_per_gas",
                  "typeId": 269,
                  "typeName": "Option<U256>",
                  "docs": []
                },
                {
                  "name": "nonce",
                  "typeId": 269,
                  "typeName": "Option<U256>",
                  "docs": []
                },
                {
                  "name": "access_list",
                  "typeId": 270,
                  "typeName": "Vec<(H160, Vec<H256>)>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Issue an EVM create operation. This is similar to a contract creation transaction in",
                "Ethereum."
              ]
            },
            {
              "name": "create2",
              "fields": [
                {
                  "name": "source",
                  "typeId": 47,
                  "typeName": "H160",
                  "docs": []
                },
                {
                  "name": "init",
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "salt",
                  "typeId": 12,
                  "typeName": "H256",
                  "docs": []
                },
                {
                  "name": "value",
                  "typeId": 134,
                  "typeName": "U256",
                  "docs": []
                },
                {
                  "name": "gas_limit",
                  "typeId": 11,
                  "typeName": "u64",
                  "docs": []
                },
                {
                  "name": "max_fee_per_gas",
                  "typeId": 134,
                  "typeName": "U256",
                  "docs": []
                },
                {
                  "name": "max_priority_fee_per_gas",
                  "typeId": 269,
                  "typeName": "Option<U256>",
                  "docs": []
                },
                {
                  "name": "nonce",
                  "typeId": 269,
                  "typeName": "Option<U256>",
                  "docs": []
                },
                {
                  "name": "access_list",
                  "typeId": 270,
                  "typeName": "Vec<(H160, Vec<H256>)>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Issue an EVM create2 operation."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    },
    {
      "id": 269,
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 134
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "typeId": 134,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 270,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 271
        }
      },
      "docs": []
    },
    {
      "id": 271,
      "path": [],
      "params": [],
      "type": {
        "tag": "Tuple",
        "value": {
          "fields": [
            47,
            122
          ]
        }
      },
      "docs": []
    },
    {
      "id": 272,
      "path": [
        "pallet_ethereum",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "transact",
              "fields": [
                {
                  "name": "transaction",
                  "typeId": 273,
                  "typeName": "Transaction",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Transact an Ethereum transaction."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    },
    {
      "id": 273,
      "path": [
        "ethereum",
        "transaction",
        "TransactionV2"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Legacy",
              "fields": [
                {
                  "typeId": 274,
                  "typeName": "LegacyTransaction",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "EIP2930",
              "fields": [
                {
                  "typeId": 278,
                  "typeName": "EIP2930Transaction",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "EIP1559",
              "fields": [
                {
                  "typeId": 281,
                  "typeName": "EIP1559Transaction",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 274,
      "path": [
        "ethereum",
        "transaction",
        "LegacyTransaction"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "nonce",
              "typeId": 134,
              "typeName": "U256",
              "docs": []
            },
            {
              "name": "gas_price",
              "typeId": 134,
              "typeName": "U256",
              "docs": []
            },
            {
              "name": "gas_limit",
              "typeId": 134,
              "typeName": "U256",
              "docs": []
            },
            {
              "name": "action",
              "typeId": 275,
              "typeName": "TransactionAction",
              "docs": []
            },
            {
              "name": "value",
              "typeId": 134,
              "typeName": "U256",
              "docs": []
            },
            {
              "name": "input",
              "typeId": 13,
              "typeName": "Bytes",
              "docs": []
            },
            {
              "name": "signature",
              "typeId": 276,
              "typeName": "TransactionSignature",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 275,
      "path": [
        "ethereum",
        "transaction",
        "TransactionAction"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Call",
              "fields": [
                {
                  "typeId": 47,
                  "typeName": "H160",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Create",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 276,
      "path": [
        "ethereum",
        "transaction",
        "TransactionSignature"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "v",
              "typeId": 277,
              "typeName": "TransactionRecoveryId",
              "docs": []
            },
            {
              "name": "r",
              "typeId": 12,
              "typeName": "H256",
              "docs": []
            },
            {
              "name": "s",
              "typeId": 12,
              "typeName": "H256",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 277,
      "path": [
        "ethereum",
        "transaction",
        "TransactionRecoveryId"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 11,
              "typeName": "u64",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 278,
      "path": [
        "ethereum",
        "transaction",
        "EIP2930Transaction"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "chain_id",
              "typeId": 11,
              "typeName": "u64",
              "docs": []
            },
            {
              "name": "nonce",
              "typeId": 134,
              "typeName": "U256",
              "docs": []
            },
            {
              "name": "gas_price",
              "typeId": 134,
              "typeName": "U256",
              "docs": []
            },
            {
              "name": "gas_limit",
              "typeId": 134,
              "typeName": "U256",
              "docs": []
            },
            {
              "name": "action",
              "typeId": 275,
              "typeName": "TransactionAction",
              "docs": []
            },
            {
              "name": "value",
              "typeId": 134,
              "typeName": "U256",
              "docs": []
            },
            {
              "name": "input",
              "typeId": 13,
              "typeName": "Bytes",
              "docs": []
            },
            {
              "name": "access_list",
              "typeId": 279,
              "typeName": "AccessList",
              "docs": []
            },
            {
              "name": "odd_y_parity",
              "typeId": 49,
              "typeName": "bool",
              "docs": []
            },
            {
              "name": "r",
              "typeId": 12,
              "typeName": "H256",
              "docs": []
            },
            {
              "name": "s",
              "typeId": 12,
              "typeName": "H256",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 279,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 280
        }
      },
      "docs": []
    },
    {
      "id": 280,
      "path": [
        "ethereum",
        "transaction",
        "AccessListItem"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "address",
              "typeId": 47,
              "typeName": "Address",
              "docs": []
            },
            {
              "name": "storage_keys",
              "typeId": 122,
              "typeName": "Vec<H256>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 281,
      "path": [
        "ethereum",
        "transaction",
        "EIP1559Transaction"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "chain_id",
              "typeId": 11,
              "typeName": "u64",
              "docs": []
            },
            {
              "name": "nonce",
              "typeId": 134,
              "typeName": "U256",
              "docs": []
            },
            {
              "name": "max_priority_fee_per_gas",
              "typeId": 134,
              "typeName": "U256",
              "docs": []
            },
            {
              "name": "max_fee_per_gas",
              "typeId": 134,
              "typeName": "U256",
              "docs": []
            },
            {
              "name": "gas_limit",
              "typeId": 134,
              "typeName": "U256",
              "docs": []
            },
            {
              "name": "action",
              "typeId": 275,
              "typeName": "TransactionAction",
              "docs": []
            },
            {
              "name": "value",
              "typeId": 134,
              "typeName": "U256",
              "docs": []
            },
            {
              "name": "input",
              "typeId": 13,
              "typeName": "Bytes",
              "docs": []
            },
            {
              "name": "access_list",
              "typeId": 279,
              "typeName": "AccessList",
              "docs": []
            },
            {
              "name": "odd_y_parity",
              "typeId": 49,
              "typeName": "bool",
              "docs": []
            },
            {
              "name": "r",
              "typeId": 12,
              "typeName": "H256",
              "docs": []
            },
            {
              "name": "s",
              "typeId": 12,
              "typeName": "H256",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 282,
      "path": [
        "pallet_custom_signatures",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "call",
              "fields": [
                {
                  "name": "call",
                  "typeId": 164,
                  "typeName": "Box<<T as Config>::RuntimeCall>",
                  "docs": []
                },
                {
                  "name": "signer",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "signature",
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "nonce",
                  "typeId": 67,
                  "typeName": "T::Index",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "# <weight>",
                "- O(1).",
                "- Limited storage reads.",
                "- One DB write (event).",
                "- Weight of derivative `call` execution + read/write + 10_000.",
                "# </weight>"
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    },
    {
      "id": 283,
      "path": [
        "pallet_base_fee",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "set_base_fee_per_gas",
              "fields": [
                {
                  "name": "fee",
                  "typeId": 134,
                  "typeName": "U256",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "set_elasticity",
              "fields": [
                {
                  "name": "elasticity",
                  "typeId": 136,
                  "typeName": "Permill",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    },
    {
      "id": 284,
      "path": [
        "pallet_contracts",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "call_old_weight",
              "fields": [
                {
                  "name": "dest",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "value",
                  "typeId": 70,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "gas_limit",
                  "typeId": 10,
                  "typeName": "OldWeight",
                  "docs": []
                },
                {
                  "name": "storage_deposit_limit",
                  "typeId": 285,
                  "typeName": "Option<<BalanceOf<T> as codec::HasCompact>::Type>",
                  "docs": []
                },
                {
                  "name": "data",
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Deprecated version if [`Self::call`] for use in an in-storage `Call`."
              ]
            },
            {
              "name": "instantiate_with_code_old_weight",
              "fields": [
                {
                  "name": "value",
                  "typeId": 70,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "gas_limit",
                  "typeId": 10,
                  "typeName": "OldWeight",
                  "docs": []
                },
                {
                  "name": "storage_deposit_limit",
                  "typeId": 285,
                  "typeName": "Option<<BalanceOf<T> as codec::HasCompact>::Type>",
                  "docs": []
                },
                {
                  "name": "code",
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "data",
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "salt",
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Deprecated version if [`Self::instantiate_with_code`] for use in an in-storage `Call`."
              ]
            },
            {
              "name": "instantiate_old_weight",
              "fields": [
                {
                  "name": "value",
                  "typeId": 70,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "gas_limit",
                  "typeId": 10,
                  "typeName": "OldWeight",
                  "docs": []
                },
                {
                  "name": "storage_deposit_limit",
                  "typeId": 285,
                  "typeName": "Option<<BalanceOf<T> as codec::HasCompact>::Type>",
                  "docs": []
                },
                {
                  "name": "code_hash",
                  "typeId": 12,
                  "typeName": "CodeHash<T>",
                  "docs": []
                },
                {
                  "name": "data",
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "salt",
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Deprecated version if [`Self::instantiate`] for use in an in-storage `Call`."
              ]
            },
            {
              "name": "upload_code",
              "fields": [
                {
                  "name": "code",
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "storage_deposit_limit",
                  "typeId": 285,
                  "typeName": "Option<<BalanceOf<T> as codec::HasCompact>::Type>",
                  "docs": []
                },
                {
                  "name": "determinism",
                  "typeId": 286,
                  "typeName": "Determinism",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Upload new `code` without instantiating a contract from it.",
                "",
                "If the code does not already exist a deposit is reserved from the caller",
                "and unreserved only when [`Self::remove_code`] is called. The size of the reserve",
                "depends on the instrumented size of the the supplied `code`.",
                "",
                "If the code already exists in storage it will still return `Ok` and upgrades",
                "the in storage version to the current",
                "[`InstructionWeights::version`](InstructionWeights).",
                "",
                "- `determinism`: If this is set to any other value but [`Determinism::Enforced`] then",
                "  the only way to use this code is to delegate call into it from an offchain execution.",
                "  Set to [`Determinism::Enforced`] if in doubt.",
                "",
                "# Note",
                "",
                "Anyone can instantiate a contract from any uploaded code and thus prevent its removal.",
                "To avoid this situation a constructor could employ access control so that it can",
                "only be instantiated by permissioned entities. The same is true when uploading",
                "through [`Self::instantiate_with_code`]."
              ]
            },
            {
              "name": "remove_code",
              "fields": [
                {
                  "name": "code_hash",
                  "typeId": 12,
                  "typeName": "CodeHash<T>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Remove the code stored under `code_hash` and refund the deposit to its owner.",
                "",
                "A code can only be removed by its original uploader (its owner) and only if it is",
                "not used by any contract."
              ]
            },
            {
              "name": "set_code",
              "fields": [
                {
                  "name": "dest",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "code_hash",
                  "typeId": 12,
                  "typeName": "CodeHash<T>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Privileged function that changes the code of an existing contract.",
                "",
                "This takes care of updating refcounts and all other necessary operations. Returns",
                "an error if either the `code_hash` or `dest` do not exist.",
                "",
                "# Note",
                "",
                "This does **not** change the address of the contract in question. This means",
                "that the contract address is no longer derived from its code hash after calling",
                "this dispatchable."
              ]
            },
            {
              "name": "call",
              "fields": [
                {
                  "name": "dest",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "value",
                  "typeId": 70,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "gas_limit",
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "storage_deposit_limit",
                  "typeId": 285,
                  "typeName": "Option<<BalanceOf<T> as codec::HasCompact>::Type>",
                  "docs": []
                },
                {
                  "name": "data",
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Makes a call to an account, optionally transferring some balance.",
                "",
                "# Parameters",
                "",
                "* `dest`: Address of the contract to call.",
                "* `value`: The balance to transfer from the `origin` to `dest`.",
                "* `gas_limit`: The gas limit enforced when executing the constructor.",
                "* `storage_deposit_limit`: The maximum amount of balance that can be charged from the",
                "  caller to pay for the storage consumed.",
                "* `data`: The input data to pass to the contract.",
                "",
                "* If the account is a smart-contract account, the associated code will be",
                "executed and any value will be transferred.",
                "* If the account is a regular account, any value will be transferred.",
                "* If no account exists and the call value is not less than `existential_deposit`,",
                "a regular account will be created and any value will be transferred."
              ]
            },
            {
              "name": "instantiate_with_code",
              "fields": [
                {
                  "name": "value",
                  "typeId": 70,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "gas_limit",
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "storage_deposit_limit",
                  "typeId": 285,
                  "typeName": "Option<<BalanceOf<T> as codec::HasCompact>::Type>",
                  "docs": []
                },
                {
                  "name": "code",
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "data",
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "salt",
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Instantiates a new contract from the supplied `code` optionally transferring",
                "some balance.",
                "",
                "This dispatchable has the same effect as calling [`Self::upload_code`] +",
                "[`Self::instantiate`]. Bundling them together provides efficiency gains. Please",
                "also check the documentation of [`Self::upload_code`].",
                "",
                "# Parameters",
                "",
                "* `value`: The balance to transfer from the `origin` to the newly created contract.",
                "* `gas_limit`: The gas limit enforced when executing the constructor.",
                "* `storage_deposit_limit`: The maximum amount of balance that can be charged/reserved",
                "  from the caller to pay for the storage consumed.",
                "* `code`: The contract code to deploy in raw bytes.",
                "* `data`: The input data to pass to the contract constructor.",
                "* `salt`: Used for the address derivation. See [`Pallet::contract_address`].",
                "",
                "Instantiation is executed as follows:",
                "",
                "- The supplied `code` is instrumented, deployed, and a `code_hash` is created for that",
                "  code.",
                "- If the `code_hash` already exists on the chain the underlying `code` will be shared.",
                "- The destination address is computed based on the sender, code_hash and the salt.",
                "- The smart-contract account is created at the computed address.",
                "- The `value` is transferred to the new account.",
                "- The `deploy` function is executed in the context of the newly-created account."
              ]
            },
            {
              "name": "instantiate",
              "fields": [
                {
                  "name": "value",
                  "typeId": 70,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "gas_limit",
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "storage_deposit_limit",
                  "typeId": 285,
                  "typeName": "Option<<BalanceOf<T> as codec::HasCompact>::Type>",
                  "docs": []
                },
                {
                  "name": "code_hash",
                  "typeId": 12,
                  "typeName": "CodeHash<T>",
                  "docs": []
                },
                {
                  "name": "data",
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "salt",
                  "typeId": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Instantiates a contract from a previously deployed wasm binary.",
                "",
                "This function is identical to [`Self::instantiate_with_code`] but without the",
                "code deployment step. Instead, the `code_hash` of an on-chain deployed wasm binary",
                "must be supplied."
              ]
            },
            {
              "name": "migrate",
              "fields": [
                {
                  "name": "weight_limit",
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "When a migration is in progress, this dispatchable can be used to run migration steps.",
                "Calls that contribute to advancing the migration have their fees waived, as it's helpful",
                "for the chain. Note that while the migration is in progress, the pallet will also",
                "leverage the `on_idle` hooks to run migration steps."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    },
    {
      "id": 285,
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 70
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "typeId": 70,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 286,
      "path": [
        "pallet_contracts",
        "wasm",
        "Determinism"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Enforced",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Relaxed",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 287,
      "path": [
        "pallet_sudo",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "sudo",
              "fields": [
                {
                  "name": "call",
                  "typeId": 164,
                  "typeName": "Box<<T as Config>::RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Authenticates the sudo key and dispatches a function call with `Root` origin.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "## Complexity",
                "- O(1)."
              ]
            },
            {
              "name": "sudo_unchecked_weight",
              "fields": [
                {
                  "name": "call",
                  "typeId": 164,
                  "typeName": "Box<<T as Config>::RuntimeCall>",
                  "docs": []
                },
                {
                  "name": "weight",
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Authenticates the sudo key and dispatches a function call with `Root` origin.",
                "This function does not check the weight of the call, and instead allows the",
                "Sudo user to specify the weight of the call.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "## Complexity",
                "- O(1)."
              ]
            },
            {
              "name": "set_key",
              "fields": [
                {
                  "name": "new",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo",
                "key.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "## Complexity",
                "- O(1)."
              ]
            },
            {
              "name": "sudo_as",
              "fields": [
                {
                  "name": "who",
                  "typeId": 166,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "call",
                  "typeId": 164,
                  "typeName": "Box<<T as Config>::RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Authenticates the sudo key and dispatches a function call with `Signed` origin from",
                "a given account.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "## Complexity",
                "- O(1)."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    },
    {
      "id": 288,
      "path": [
        "astar_runtime",
        "OriginCaller"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "system",
              "fields": [
                {
                  "typeId": 289,
                  "typeName": "frame_system::Origin<Runtime>",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": []
            },
            {
              "name": "PolkadotXcm",
              "fields": [
                {
                  "typeId": 290,
                  "typeName": "pallet_xcm::Origin",
                  "docs": []
                }
              ],
              "index": 51,
              "docs": []
            },
            {
              "name": "CumulusXcm",
              "fields": [
                {
                  "typeId": 291,
                  "typeName": "cumulus_pallet_xcm::Origin",
                  "docs": []
                }
              ],
              "index": 52,
              "docs": []
            },
            {
              "name": "Ethereum",
              "fields": [
                {
                  "typeId": 292,
                  "typeName": "pallet_ethereum::Origin",
                  "docs": []
                }
              ],
              "index": 61,
              "docs": []
            },
            {
              "name": "Void",
              "fields": [
                {
                  "typeId": 293,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::Void",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 289,
      "path": [
        "frame_support",
        "dispatch",
        "RawOrigin"
      ],
      "params": [
        {
          "name": "AccountId",
          "typeId": 0
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Root",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Signed",
              "fields": [
                {
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "None",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 290,
      "path": [
        "pallet_xcm",
        "pallet",
        "Origin"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Xcm",
              "fields": [
                {
                  "typeId": 64,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Response",
              "fields": [
                {
                  "typeId": 64,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 291,
      "path": [
        "cumulus_pallet_xcm",
        "pallet",
        "Origin"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Relay",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "SiblingParachain",
              "fields": [
                {
                  "typeId": 61,
                  "typeName": "ParaId",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 292,
      "path": [
        "pallet_ethereum",
        "RawOrigin"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "EthereumTransaction",
              "fields": [
                {
                  "typeId": 47,
                  "typeName": "H160",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 293,
      "path": [
        "sp_core",
        "Void"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": []
        }
      },
      "docs": []
    },
    {
      "id": 294,
      "path": [
        "pallet_utility",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "TooManyCalls",
              "fields": [],
              "index": 0,
              "docs": [
                "Too many calls batched."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 295,
      "path": [
        "pallet_identity",
        "types",
        "Registration"
      ],
      "params": [
        {
          "name": "Balance",
          "typeId": 6
        },
        {
          "name": "MaxJudgements"
        },
        {
          "name": "MaxAdditionalFields"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "judgements",
              "typeId": 296,
              "typeName": "BoundedVec<(RegistrarIndex, Judgement<Balance>), MaxJudgements>",
              "docs": []
            },
            {
              "name": "deposit",
              "typeId": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "info",
              "typeId": 168,
              "typeName": "IdentityInfo<MaxAdditionalFields>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 296,
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 297
        },
        {
          "name": "S"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 298,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 297,
      "path": [],
      "params": [],
      "type": {
        "tag": "Tuple",
        "value": {
          "fields": [
            4,
            206
          ]
        }
      },
      "docs": []
    },
    {
      "id": 298,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 297
        }
      },
      "docs": []
    },
    {
      "id": 299,
      "path": [],
      "params": [],
      "type": {
        "tag": "Tuple",
        "value": {
          "fields": [
            6,
            300
          ]
        }
      },
      "docs": []
    },
    {
      "id": 300,
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 0
        },
        {
          "name": "S"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 57,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 301,
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 302
        },
        {
          "name": "S"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 304,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 302,
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 303
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "typeId": 303,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 303,
      "path": [
        "pallet_identity",
        "types",
        "RegistrarInfo"
      ],
      "params": [
        {
          "name": "Balance",
          "typeId": 6
        },
        {
          "name": "AccountId",
          "typeId": 0
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "account",
              "typeId": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "fee",
              "typeId": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "fields",
              "typeId": 204,
              "typeName": "IdentityFields",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 304,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 302
        }
      },
      "docs": []
    },
    {
      "id": 305,
      "path": [
        "pallet_identity",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "TooManySubAccounts",
              "fields": [],
              "index": 0,
              "docs": [
                "Too many subs-accounts."
              ]
            },
            {
              "name": "NotFound",
              "fields": [],
              "index": 1,
              "docs": [
                "Account isn't found."
              ]
            },
            {
              "name": "NotNamed",
              "fields": [],
              "index": 2,
              "docs": [
                "Account isn't named."
              ]
            },
            {
              "name": "EmptyIndex",
              "fields": [],
              "index": 3,
              "docs": [
                "Empty index."
              ]
            },
            {
              "name": "FeeChanged",
              "fields": [],
              "index": 4,
              "docs": [
                "Fee is changed."
              ]
            },
            {
              "name": "NoIdentity",
              "fields": [],
              "index": 5,
              "docs": [
                "No identity found."
              ]
            },
            {
              "name": "StickyJudgement",
              "fields": [],
              "index": 6,
              "docs": [
                "Sticky judgement."
              ]
            },
            {
              "name": "JudgementGiven",
              "fields": [],
              "index": 7,
              "docs": [
                "Judgement given."
              ]
            },
            {
              "name": "InvalidJudgement",
              "fields": [],
              "index": 8,
              "docs": [
                "Invalid judgement."
              ]
            },
            {
              "name": "InvalidIndex",
              "fields": [],
              "index": 9,
              "docs": [
                "The index is invalid."
              ]
            },
            {
              "name": "InvalidTarget",
              "fields": [],
              "index": 10,
              "docs": [
                "The target is invalid."
              ]
            },
            {
              "name": "TooManyFields",
              "fields": [],
              "index": 11,
              "docs": [
                "Too many additional fields."
              ]
            },
            {
              "name": "TooManyRegistrars",
              "fields": [],
              "index": 12,
              "docs": [
                "Maximum amount of registrars reached. Cannot add any more."
              ]
            },
            {
              "name": "AlreadyClaimed",
              "fields": [],
              "index": 13,
              "docs": [
                "Account ID is already named."
              ]
            },
            {
              "name": "NotSub",
              "fields": [],
              "index": 14,
              "docs": [
                "Sender is not a sub-account."
              ]
            },
            {
              "name": "NotOwned",
              "fields": [],
              "index": 15,
              "docs": [
                "Sub-account isn't owned by sender."
              ]
            },
            {
              "name": "JudgementForDifferentIdentity",
              "fields": [],
              "index": 16,
              "docs": [
                "The provided judgement was for a different identity."
              ]
            },
            {
              "name": "JudgementPaymentFailed",
              "fields": [],
              "index": 17,
              "docs": [
                "Error that occurs when there is an issue paying for judgement."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 306,
      "path": [],
      "params": [],
      "type": {
        "tag": "Tuple",
        "value": {
          "fields": [
            0,
            1
          ]
        }
      },
      "docs": []
    },
    {
      "id": 307,
      "path": [
        "pallet_multisig",
        "Multisig"
      ],
      "params": [
        {
          "name": "BlockNumber",
          "typeId": 4
        },
        {
          "name": "Balance",
          "typeId": 6
        },
        {
          "name": "AccountId",
          "typeId": 0
        },
        {
          "name": "MaxApprovals"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "when",
              "typeId": 35,
              "typeName": "Timepoint<BlockNumber>",
              "docs": []
            },
            {
              "name": "deposit",
              "typeId": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "depositor",
              "typeId": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "approvals",
              "typeId": 308,
              "typeName": "BoundedVec<AccountId, MaxApprovals>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 308,
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 0
        },
        {
          "name": "S"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 57,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 309,
      "path": [
        "pallet_multisig",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "MinimumThreshold",
              "fields": [],
              "index": 0,
              "docs": [
                "Threshold must be 2 or greater."
              ]
            },
            {
              "name": "AlreadyApproved",
              "fields": [],
              "index": 1,
              "docs": [
                "Call is already approved by this signatory."
              ]
            },
            {
              "name": "NoApprovalsNeeded",
              "fields": [],
              "index": 2,
              "docs": [
                "Call doesn't need any (more) approvals."
              ]
            },
            {
              "name": "TooFewSignatories",
              "fields": [],
              "index": 3,
              "docs": [
                "There are too few signatories in the list."
              ]
            },
            {
              "name": "TooManySignatories",
              "fields": [],
              "index": 4,
              "docs": [
                "There are too many signatories in the list."
              ]
            },
            {
              "name": "SignatoriesOutOfOrder",
              "fields": [],
              "index": 5,
              "docs": [
                "The signatories were provided out of order; they should be ordered."
              ]
            },
            {
              "name": "SenderInSignatories",
              "fields": [],
              "index": 6,
              "docs": [
                "The sender was contained in the other signatories; it shouldn't be."
              ]
            },
            {
              "name": "NotFound",
              "fields": [],
              "index": 7,
              "docs": [
                "Multisig operation not found when attempting to cancel."
              ]
            },
            {
              "name": "NotOwner",
              "fields": [],
              "index": 8,
              "docs": [
                "Only the account that originally created the multisig is able to cancel it."
              ]
            },
            {
              "name": "NoTimepoint",
              "fields": [],
              "index": 9,
              "docs": [
                "No timepoint was given, yet the multisig operation is already underway."
              ]
            },
            {
              "name": "WrongTimepoint",
              "fields": [],
              "index": 10,
              "docs": [
                "A different timepoint was given to the multisig operation that is underway."
              ]
            },
            {
              "name": "UnexpectedTimepoint",
              "fields": [],
              "index": 11,
              "docs": [
                "A timepoint was given, yet no multisig operation is underway."
              ]
            },
            {
              "name": "MaxWeightTooLow",
              "fields": [],
              "index": 12,
              "docs": [
                "The maximum weight information provided was too low."
              ]
            },
            {
              "name": "AlreadyStored",
              "fields": [],
              "index": 13,
              "docs": [
                "The data to be stored is already stored."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 310,
      "path": [],
      "params": [],
      "type": {
        "tag": "Tuple",
        "value": {
          "fields": [
            311,
            6
          ]
        }
      },
      "docs": []
    },
    {
      "id": 311,
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 312
        },
        {
          "name": "S"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 313,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 312,
      "path": [
        "pallet_proxy",
        "ProxyDefinition"
      ],
      "params": [
        {
          "name": "AccountId",
          "typeId": 0
        },
        {
          "name": "ProxyType",
          "typeId": 37
        },
        {
          "name": "BlockNumber",
          "typeId": 4
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "delegate",
              "typeId": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "proxy_type",
              "typeId": 37,
              "typeName": "ProxyType",
              "docs": []
            },
            {
              "name": "delay",
              "typeId": 4,
              "typeName": "BlockNumber",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 313,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 312
        }
      },
      "docs": []
    },
    {
      "id": 314,
      "path": [],
      "params": [],
      "type": {
        "tag": "Tuple",
        "value": {
          "fields": [
            315,
            6
          ]
        }
      },
      "docs": []
    },
    {
      "id": 315,
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 316
        },
        {
          "name": "S"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 317,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 316,
      "path": [
        "pallet_proxy",
        "Announcement"
      ],
      "params": [
        {
          "name": "AccountId",
          "typeId": 0
        },
        {
          "name": "Hash",
          "typeId": 12
        },
        {
          "name": "BlockNumber",
          "typeId": 4
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "real",
              "typeId": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "call_hash",
              "typeId": 12,
              "typeName": "Hash",
              "docs": []
            },
            {
              "name": "height",
              "typeId": 4,
              "typeName": "BlockNumber",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 317,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 316
        }
      },
      "docs": []
    },
    {
      "id": 318,
      "path": [
        "pallet_proxy",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "TooMany",
              "fields": [],
              "index": 0,
              "docs": [
                "There are too many proxies registered or too many announcements pending."
              ]
            },
            {
              "name": "NotFound",
              "fields": [],
              "index": 1,
              "docs": [
                "Proxy registration not found."
              ]
            },
            {
              "name": "NotProxy",
              "fields": [],
              "index": 2,
              "docs": [
                "Sender is not a proxy of the account to be proxied."
              ]
            },
            {
              "name": "Unproxyable",
              "fields": [],
              "index": 3,
              "docs": [
                "A call which is incompatible with the proxy type's filter was attempted."
              ]
            },
            {
              "name": "Duplicate",
              "fields": [],
              "index": 4,
              "docs": [
                "Account is already a proxy."
              ]
            },
            {
              "name": "NoPermission",
              "fields": [],
              "index": 5,
              "docs": [
                "Call may not be made by proxy because it may escalate its privileges."
              ]
            },
            {
              "name": "Unannounced",
              "fields": [],
              "index": 6,
              "docs": [
                "Announcement, if made at all, was made too recently."
              ]
            },
            {
              "name": "NoSelfProxy",
              "fields": [],
              "index": 7,
              "docs": [
                "Cannot add self as proxy."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 319,
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 320
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "typeId": 320,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 320,
      "path": [
        "polkadot_primitives",
        "v4",
        "UpgradeRestriction"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Present",
              "fields": [],
              "index": 0,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 321,
      "path": [
        "cumulus_pallet_parachain_system",
        "relay_state_snapshot",
        "MessagingStateSnapshot"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "dmq_mqc_head",
              "typeId": 12,
              "typeName": "relay_chain::Hash",
              "docs": []
            },
            {
              "name": "relay_dispatch_queue_size",
              "typeId": 322,
              "typeName": "RelayDispachQueueSize",
              "docs": []
            },
            {
              "name": "ingress_channels",
              "typeId": 323,
              "typeName": "Vec<(ParaId, AbridgedHrmpChannel)>",
              "docs": []
            },
            {
              "name": "egress_channels",
              "typeId": 323,
              "typeName": "Vec<(ParaId, AbridgedHrmpChannel)>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 322,
      "path": [
        "cumulus_pallet_parachain_system",
        "relay_state_snapshot",
        "RelayDispachQueueSize"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "remaining_count",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "remaining_size",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 323,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 324
        }
      },
      "docs": []
    },
    {
      "id": 324,
      "path": [],
      "params": [],
      "type": {
        "tag": "Tuple",
        "value": {
          "fields": [
            61,
            325
          ]
        }
      },
      "docs": []
    },
    {
      "id": 325,
      "path": [
        "polkadot_primitives",
        "v4",
        "AbridgedHrmpChannel"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "max_capacity",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "max_total_size",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "max_message_size",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "msg_count",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "total_size",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "mqc_head",
              "typeId": 326,
              "typeName": "Option<Hash>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 326,
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 12
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "typeId": 12,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 327,
      "path": [
        "polkadot_primitives",
        "v4",
        "AbridgedHostConfiguration"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "max_code_size",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "max_head_data_size",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "max_upward_queue_count",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "max_upward_queue_size",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "max_upward_message_size",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "max_upward_message_num_per_candidate",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "hrmp_max_message_num_per_candidate",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "validation_upgrade_cooldown",
              "typeId": 4,
              "typeName": "BlockNumber",
              "docs": []
            },
            {
              "name": "validation_upgrade_delay",
              "typeId": 4,
              "typeName": "BlockNumber",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 328,
      "path": [
        "cumulus_primitives_parachain_inherent",
        "MessageQueueChain"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 12,
              "typeName": "RelayHash",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 329,
      "path": [
        "BTreeMap"
      ],
      "params": [
        {
          "name": "K",
          "typeId": 61
        },
        {
          "name": "V",
          "typeId": 328
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 330,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 330,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 331
        }
      },
      "docs": []
    },
    {
      "id": 331,
      "path": [],
      "params": [],
      "type": {
        "tag": "Tuple",
        "value": {
          "fields": [
            61,
            328
          ]
        }
      },
      "docs": []
    },
    {
      "id": 332,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 333
        }
      },
      "docs": []
    },
    {
      "id": 333,
      "path": [
        "polkadot_core_primitives",
        "OutboundHrmpMessage"
      ],
      "params": [
        {
          "name": "Id",
          "typeId": 61
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "recipient",
              "typeId": 61,
              "typeName": "Id",
              "docs": []
            },
            {
              "name": "data",
              "typeId": 13,
              "typeName": "sp_std::vec::Vec<u8>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 334,
      "path": [
        "cumulus_pallet_parachain_system",
        "CodeUpgradeAuthorization"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "code_hash",
              "typeId": 12,
              "typeName": "T::Hash",
              "docs": []
            },
            {
              "name": "check_version",
              "typeId": 49,
              "typeName": "bool",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 335,
      "path": [
        "cumulus_pallet_parachain_system",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "OverlappingUpgrades",
              "fields": [],
              "index": 0,
              "docs": [
                "Attempt to upgrade validation function while existing upgrade pending."
              ]
            },
            {
              "name": "ProhibitedByPolkadot",
              "fields": [],
              "index": 1,
              "docs": [
                "Polkadot currently prohibits this parachain from upgrading its validation function."
              ]
            },
            {
              "name": "TooBig",
              "fields": [],
              "index": 2,
              "docs": [
                "The supplied validation function has compiled into a blob larger than Polkadot is",
                "willing to run."
              ]
            },
            {
              "name": "ValidationDataNotAvailable",
              "fields": [],
              "index": 3,
              "docs": [
                "The inherent which supplies the validation data did not run this block."
              ]
            },
            {
              "name": "HostConfigurationNotAvailable",
              "fields": [],
              "index": 4,
              "docs": [
                "The inherent which supplies the host configuration did not run this block."
              ]
            },
            {
              "name": "NotScheduled",
              "fields": [],
              "index": 5,
              "docs": [
                "No validation function upgrade is currently scheduled."
              ]
            },
            {
              "name": "NothingAuthorized",
              "fields": [],
              "index": 6,
              "docs": [
                "No code upgrade has been authorized."
              ]
            },
            {
              "name": "Unauthorized",
              "fields": [],
              "index": 7,
              "docs": [
                "The given code upgrade has not been authorized."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 336,
      "path": [
        "sp_arithmetic",
        "fixed_point",
        "FixedU128"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 6,
              "typeName": "u128",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 337,
      "path": [
        "pallet_transaction_payment",
        "Releases"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "V1Ancient",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "V2",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 338,
      "path": [
        "bounded_collections",
        "weak_bounded_vec",
        "WeakBoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 339
        },
        {
          "name": "S"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 341,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 339,
      "path": [
        "pallet_balances",
        "types",
        "BalanceLock"
      ],
      "params": [
        {
          "name": "Balance",
          "typeId": 6
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "id",
              "typeId": 82,
              "typeName": "LockIdentifier",
              "docs": []
            },
            {
              "name": "amount",
              "typeId": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "reasons",
              "typeId": 340,
              "typeName": "Reasons",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 340,
      "path": [
        "pallet_balances",
        "types",
        "Reasons"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Fee",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Misc",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "All",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 341,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 339
        }
      },
      "docs": []
    },
    {
      "id": 342,
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 343
        },
        {
          "name": "S"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 344,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 343,
      "path": [
        "pallet_balances",
        "types",
        "ReserveData"
      ],
      "params": [
        {
          "name": "ReserveIdentifier",
          "typeId": 82
        },
        {
          "name": "Balance",
          "typeId": 6
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "id",
              "typeId": 82,
              "typeName": "ReserveIdentifier",
              "docs": []
            },
            {
              "name": "amount",
              "typeId": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 344,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 343
        }
      },
      "docs": []
    },
    {
      "id": 345,
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 346
        },
        {
          "name": "S"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 347,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 346,
      "path": [
        "pallet_balances",
        "types",
        "IdAmount"
      ],
      "params": [
        {
          "name": "Id",
          "typeId": 32
        },
        {
          "name": "Balance",
          "typeId": 6
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "id",
              "typeId": 32,
              "typeName": "Id",
              "docs": []
            },
            {
              "name": "amount",
              "typeId": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 347,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 346
        }
      },
      "docs": []
    },
    {
      "id": 348,
      "path": [
        "pallet_balances",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T"
        },
        {
          "name": "I"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "VestingBalance",
              "fields": [],
              "index": 0,
              "docs": [
                "Vesting balance too high to send value."
              ]
            },
            {
              "name": "LiquidityRestrictions",
              "fields": [],
              "index": 1,
              "docs": [
                "Account liquidity restrictions prevent withdrawal."
              ]
            },
            {
              "name": "InsufficientBalance",
              "fields": [],
              "index": 2,
              "docs": [
                "Balance too low to send value."
              ]
            },
            {
              "name": "ExistentialDeposit",
              "fields": [],
              "index": 3,
              "docs": [
                "Value too low to create account due to existential deposit."
              ]
            },
            {
              "name": "Expendability",
              "fields": [],
              "index": 4,
              "docs": [
                "Transfer/payment would kill account."
              ]
            },
            {
              "name": "ExistingVestingSchedule",
              "fields": [],
              "index": 5,
              "docs": [
                "A vesting schedule already exists for this account."
              ]
            },
            {
              "name": "DeadAccount",
              "fields": [],
              "index": 6,
              "docs": [
                "Beneficiary account must pre-exist."
              ]
            },
            {
              "name": "TooManyReserves",
              "fields": [],
              "index": 7,
              "docs": [
                "Number of named reserves exceed `MaxReserves`."
              ]
            },
            {
              "name": "TooManyHolds",
              "fields": [],
              "index": 8,
              "docs": [
                "Number of holds exceed `MaxHolds`."
              ]
            },
            {
              "name": "TooManyFreezes",
              "fields": [],
              "index": 9,
              "docs": [
                "Number of freezes exceed `MaxFreezes`."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 349,
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 228
        },
        {
          "name": "S"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 350,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 350,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 228
        }
      },
      "docs": []
    },
    {
      "id": 351,
      "path": [
        "pallet_vesting",
        "Releases"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "V0",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "V1",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 352,
      "path": [
        "pallet_vesting",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "NotVesting",
              "fields": [],
              "index": 0,
              "docs": [
                "The account given is not vesting."
              ]
            },
            {
              "name": "AtMaxVestingSchedules",
              "fields": [],
              "index": 1,
              "docs": [
                "The account already has `MaxVestingSchedules` count of schedules and thus",
                "cannot add another one. Consider merging existing schedules in order to add another."
              ]
            },
            {
              "name": "AmountLow",
              "fields": [],
              "index": 2,
              "docs": [
                "Amount being transferred is too low to create a vesting schedule."
              ]
            },
            {
              "name": "ScheduleIndexOutOfBounds",
              "fields": [],
              "index": 3,
              "docs": [
                "An index was out of bounds of the vesting schedules."
              ]
            },
            {
              "name": "InvalidScheduleParams",
              "fields": [],
              "index": 4,
              "docs": [
                "Failed to create a new schedule because some parameter was invalid."
              ]
            }
          ]
        }
      },
      "docs": [
        "Error for the vesting pallet."
      ]
    },
    {
      "id": 353,
      "path": [
        "pallet_dapps_staking",
        "AccountLedger"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "locked",
              "typeId": 70,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "unbonding_info",
              "typeId": 354,
              "typeName": "UnbondingInfo",
              "docs": []
            },
            {
              "name": "reward_destination",
              "typeId": 50,
              "typeName": "RewardDestination",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 354,
      "path": [
        "pallet_dapps_staking",
        "UnbondingInfo"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "unlocking_chunks",
              "typeId": 355,
              "typeName": "Vec<UnlockingChunk>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 355,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 356
        }
      },
      "docs": []
    },
    {
      "id": 356,
      "path": [
        "pallet_dapps_staking",
        "UnlockingChunk"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "amount",
              "typeId": 70,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "unlock_era",
              "typeId": 67,
              "typeName": "EraIndex",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 357,
      "path": [
        "pallet_dapps_staking",
        "RewardInfo"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "stakers",
              "typeId": 70,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "dapps",
              "typeId": 70,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 358,
      "path": [
        "pallet_dapps_staking",
        "Forcing"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "NotForcing",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "ForceNew",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 359,
      "path": [
        "pallet_dapps_staking",
        "DAppInfo"
      ],
      "params": [
        {
          "name": "AccountId",
          "typeId": 0
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "developer",
              "typeId": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "state",
              "typeId": 360,
              "typeName": "DAppState",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 360,
      "path": [
        "pallet_dapps_staking",
        "DAppState"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Registered",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Unregistered",
              "fields": [
                {
                  "typeId": 4,
                  "typeName": "EraIndex",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 361,
      "path": [
        "pallet_dapps_staking",
        "EraInfo"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "rewards",
              "typeId": 357,
              "typeName": "RewardInfo",
              "docs": []
            },
            {
              "name": "staked",
              "typeId": 70,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "locked",
              "typeId": 70,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 362,
      "path": [],
      "params": [],
      "type": {
        "tag": "Tuple",
        "value": {
          "fields": [
            46,
            4
          ]
        }
      },
      "docs": []
    },
    {
      "id": 363,
      "path": [],
      "params": [],
      "type": {
        "tag": "Tuple",
        "value": {
          "fields": [
            0,
            46
          ]
        }
      },
      "docs": []
    },
    {
      "id": 364,
      "path": [
        "pallet_dapps_staking",
        "StakerInfo"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "stakes",
              "typeId": 365,
              "typeName": "Vec<EraStake>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 365,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 366
        }
      },
      "docs": []
    },
    {
      "id": 366,
      "path": [
        "pallet_dapps_staking",
        "EraStake"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "staked",
              "typeId": 70,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "era",
              "typeId": 67,
              "typeName": "EraIndex",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 367,
      "path": [
        "pallet_dapps_staking",
        "Version"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "V1_0_0",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "V2_0_0",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "V3_0_0",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "V4_0_0",
              "fields": [],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 368,
      "path": [
        "frame_support",
        "PalletId"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 82,
              "typeName": "[u8; 8]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 369,
      "path": [
        "pallet_dapps_staking",
        "pallet",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Disabled",
              "fields": [],
              "index": 0,
              "docs": [
                "Disabled"
              ]
            },
            {
              "name": "NoMaintenanceModeChange",
              "fields": [],
              "index": 1,
              "docs": [
                "No change in maintenance mode"
              ]
            },
            {
              "name": "UpgradeTooHeavy",
              "fields": [],
              "index": 2,
              "docs": [
                "Upgrade is too heavy, reduce the weight parameter."
              ]
            },
            {
              "name": "StakingWithNoValue",
              "fields": [],
              "index": 3,
              "docs": [
                "Can not stake with zero value."
              ]
            },
            {
              "name": "InsufficientValue",
              "fields": [],
              "index": 4,
              "docs": [
                "Can not stake with value less than minimum staking value"
              ]
            },
            {
              "name": "MaxNumberOfStakersExceeded",
              "fields": [],
              "index": 5,
              "docs": [
                "Number of stakers per contract exceeded."
              ]
            },
            {
              "name": "NotOperatedContract",
              "fields": [],
              "index": 6,
              "docs": [
                "Targets must be operated contracts"
              ]
            },
            {
              "name": "NotStakedContract",
              "fields": [],
              "index": 7,
              "docs": [
                "Contract isn't staked."
              ]
            },
            {
              "name": "NotUnregisteredContract",
              "fields": [],
              "index": 8,
              "docs": [
                "Contract isn't unregistered."
              ]
            },
            {
              "name": "UnclaimedRewardsRemaining",
              "fields": [],
              "index": 9,
              "docs": [
                "Unclaimed rewards should be claimed before withdrawing stake."
              ]
            },
            {
              "name": "UnstakingWithNoValue",
              "fields": [],
              "index": 10,
              "docs": [
                "Unstaking a contract with zero value"
              ]
            },
            {
              "name": "NothingToWithdraw",
              "fields": [],
              "index": 11,
              "docs": [
                "There are no previously unbonded funds that can be unstaked and withdrawn."
              ]
            },
            {
              "name": "AlreadyRegisteredContract",
              "fields": [],
              "index": 12,
              "docs": [
                "The contract is already registered by other account"
              ]
            },
            {
              "name": "AlreadyUsedDeveloperAccount",
              "fields": [],
              "index": 13,
              "docs": [
                "This account was already used to register contract"
              ]
            },
            {
              "name": "NotOwnedContract",
              "fields": [],
              "index": 14,
              "docs": [
                "Smart contract not owned by the account id."
              ]
            },
            {
              "name": "UnknownEraReward",
              "fields": [],
              "index": 15,
              "docs": [
                "Report issue on github if this is ever emitted"
              ]
            },
            {
              "name": "UnexpectedStakeInfoEra",
              "fields": [],
              "index": 16,
              "docs": [
                "Report issue on github if this is ever emitted"
              ]
            },
            {
              "name": "TooManyUnlockingChunks",
              "fields": [],
              "index": 17,
              "docs": [
                "Contract has too many unlocking chunks. Withdraw the existing chunks if possible",
                "or wait for current chunks to complete unlocking process to withdraw them."
              ]
            },
            {
              "name": "AlreadyClaimedInThisEra",
              "fields": [],
              "index": 18,
              "docs": [
                "Contract already claimed in this era and reward is distributed"
              ]
            },
            {
              "name": "EraOutOfBounds",
              "fields": [],
              "index": 19,
              "docs": [
                "Era parameter is out of bounds"
              ]
            },
            {
              "name": "TooManyEraStakeValues",
              "fields": [],
              "index": 20,
              "docs": [
                "Too many active `EraStake` values for (staker, contract) pairing.",
                "Claim existing rewards to fix this problem."
              ]
            },
            {
              "name": "NotActiveStaker",
              "fields": [],
              "index": 21,
              "docs": [
                "Account is not actively staking"
              ]
            },
            {
              "name": "NominationTransferToSameContract",
              "fields": [],
              "index": 22,
              "docs": [
                "Transfering nomination to the same contract"
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 370,
      "path": [
        "pallet_block_reward",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "InvalidDistributionConfiguration",
              "fields": [],
              "index": 0,
              "docs": [
                "Sum of all rations must be one whole (100%)"
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 371,
      "path": [
        "pallet_assets",
        "types",
        "AssetDetails"
      ],
      "params": [
        {
          "name": "Balance",
          "typeId": 6
        },
        {
          "name": "AccountId",
          "typeId": 0
        },
        {
          "name": "DepositBalance",
          "typeId": 6
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "owner",
              "typeId": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "issuer",
              "typeId": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "admin",
              "typeId": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "freezer",
              "typeId": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "supply",
              "typeId": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "deposit",
              "typeId": 6,
              "typeName": "DepositBalance",
              "docs": []
            },
            {
              "name": "min_balance",
              "typeId": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "is_sufficient",
              "typeId": 49,
              "typeName": "bool",
              "docs": []
            },
            {
              "name": "accounts",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "sufficients",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "approvals",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "status",
              "typeId": 372,
              "typeName": "AssetStatus",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 372,
      "path": [
        "pallet_assets",
        "types",
        "AssetStatus"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Live",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Frozen",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Destroying",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 373,
      "path": [],
      "params": [],
      "type": {
        "tag": "Tuple",
        "value": {
          "fields": [
            6,
            0
          ]
        }
      },
      "docs": []
    },
    {
      "id": 374,
      "path": [
        "pallet_assets",
        "types",
        "AssetAccount"
      ],
      "params": [
        {
          "name": "Balance",
          "typeId": 6
        },
        {
          "name": "DepositBalance",
          "typeId": 6
        },
        {
          "name": "Extra",
          "typeId": 32
        },
        {
          "name": "AccountId",
          "typeId": 0
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "balance",
              "typeId": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "status",
              "typeId": 375,
              "typeName": "AccountStatus",
              "docs": []
            },
            {
              "name": "reason",
              "typeId": 376,
              "typeName": "ExistenceReason<DepositBalance, AccountId>",
              "docs": []
            },
            {
              "name": "extra",
              "typeId": 32,
              "typeName": "Extra",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 375,
      "path": [
        "pallet_assets",
        "types",
        "AccountStatus"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Liquid",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Frozen",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Blocked",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 376,
      "path": [
        "pallet_assets",
        "types",
        "ExistenceReason"
      ],
      "params": [
        {
          "name": "Balance",
          "typeId": 6
        },
        {
          "name": "AccountId",
          "typeId": 0
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Consumer",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Sufficient",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "DepositHeld",
              "fields": [
                {
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "DepositRefunded",
              "fields": [],
              "index": 3,
              "docs": []
            },
            {
              "name": "DepositFrom",
              "fields": [
                {
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 377,
      "path": [],
      "params": [],
      "type": {
        "tag": "Tuple",
        "value": {
          "fields": [
            6,
            0,
            0
          ]
        }
      },
      "docs": []
    },
    {
      "id": 378,
      "path": [
        "pallet_assets",
        "types",
        "Approval"
      ],
      "params": [
        {
          "name": "Balance",
          "typeId": 6
        },
        {
          "name": "DepositBalance",
          "typeId": 6
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "amount",
              "typeId": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "deposit",
              "typeId": 6,
              "typeName": "DepositBalance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 379,
      "path": [
        "pallet_assets",
        "types",
        "AssetMetadata"
      ],
      "params": [
        {
          "name": "DepositBalance",
          "typeId": 6
        },
        {
          "name": "BoundedString",
          "typeId": 380
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "deposit",
              "typeId": 6,
              "typeName": "DepositBalance",
              "docs": []
            },
            {
              "name": "name",
              "typeId": 380,
              "typeName": "BoundedString",
              "docs": []
            },
            {
              "name": "symbol",
              "typeId": 380,
              "typeName": "BoundedString",
              "docs": []
            },
            {
              "name": "decimals",
              "typeId": 2,
              "typeName": "u8",
              "docs": []
            },
            {
              "name": "is_frozen",
              "typeId": 49,
              "typeName": "bool",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 380,
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 2
        },
        {
          "name": "S"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 13,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 381,
      "path": [
        "pallet_assets",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T"
        },
        {
          "name": "I"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "BalanceLow",
              "fields": [],
              "index": 0,
              "docs": [
                "Account balance must be greater than or equal to the transfer amount."
              ]
            },
            {
              "name": "NoAccount",
              "fields": [],
              "index": 1,
              "docs": [
                "The account to alter does not exist."
              ]
            },
            {
              "name": "NoPermission",
              "fields": [],
              "index": 2,
              "docs": [
                "The signing account has no permission to do the operation."
              ]
            },
            {
              "name": "Unknown",
              "fields": [],
              "index": 3,
              "docs": [
                "The given asset ID is unknown."
              ]
            },
            {
              "name": "Frozen",
              "fields": [],
              "index": 4,
              "docs": [
                "The origin account is frozen."
              ]
            },
            {
              "name": "InUse",
              "fields": [],
              "index": 5,
              "docs": [
                "The asset ID is already taken."
              ]
            },
            {
              "name": "BadWitness",
              "fields": [],
              "index": 6,
              "docs": [
                "Invalid witness data given."
              ]
            },
            {
              "name": "MinBalanceZero",
              "fields": [],
              "index": 7,
              "docs": [
                "Minimum balance should be non-zero."
              ]
            },
            {
              "name": "UnavailableConsumer",
              "fields": [],
              "index": 8,
              "docs": [
                "Unable to increment the consumer reference counters on the account. Either no provider",
                "reference exists to allow a non-zero balance of a non-self-sufficient asset, or one",
                "fewer then the maximum number of consumers has been reached."
              ]
            },
            {
              "name": "BadMetadata",
              "fields": [],
              "index": 9,
              "docs": [
                "Invalid metadata given."
              ]
            },
            {
              "name": "Unapproved",
              "fields": [],
              "index": 10,
              "docs": [
                "No approval exists that would allow the transfer."
              ]
            },
            {
              "name": "WouldDie",
              "fields": [],
              "index": 11,
              "docs": [
                "The source account would not survive the transfer and it needs to stay alive."
              ]
            },
            {
              "name": "AlreadyExists",
              "fields": [],
              "index": 12,
              "docs": [
                "The asset-account already exists."
              ]
            },
            {
              "name": "NoDeposit",
              "fields": [],
              "index": 13,
              "docs": [
                "The asset-account doesn't have an associated deposit."
              ]
            },
            {
              "name": "WouldBurn",
              "fields": [],
              "index": 14,
              "docs": [
                "The operation would result in funds being burned."
              ]
            },
            {
              "name": "LiveAsset",
              "fields": [],
              "index": 15,
              "docs": [
                "The asset is a live asset and is actively being used. Usually emit for operations such",
                "as `start_destroy` which require the asset to be in a destroying state."
              ]
            },
            {
              "name": "AssetNotLive",
              "fields": [],
              "index": 16,
              "docs": [
                "The asset is not live, and likely being destroyed."
              ]
            },
            {
              "name": "IncorrectStatus",
              "fields": [],
              "index": 17,
              "docs": [
                "The asset status is not the expected status."
              ]
            },
            {
              "name": "NotFrozen",
              "fields": [],
              "index": 18,
              "docs": [
                "The asset should be frozen before the given operation."
              ]
            },
            {
              "name": "CallbackFailed",
              "fields": [],
              "index": 19,
              "docs": [
                "Callback action resulted in error"
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 382,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 383
        }
      },
      "docs": []
    },
    {
      "id": 383,
      "path": [
        "pallet_collator_selection",
        "pallet",
        "CandidateInfo"
      ],
      "params": [
        {
          "name": "AccountId",
          "typeId": 0
        },
        {
          "name": "Balance",
          "typeId": 6
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "who",
              "typeId": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "deposit",
              "typeId": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 384,
      "path": [
        "pallet_collator_selection",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "TooManyCandidates",
              "fields": [],
              "index": 0,
              "docs": [
                "Too many candidates"
              ]
            },
            {
              "name": "TooFewCandidates",
              "fields": [],
              "index": 1,
              "docs": [
                "Too few candidates"
              ]
            },
            {
              "name": "Unknown",
              "fields": [],
              "index": 2,
              "docs": [
                "Unknown error"
              ]
            },
            {
              "name": "Permission",
              "fields": [],
              "index": 3,
              "docs": [
                "Permission issue"
              ]
            },
            {
              "name": "AlreadyCandidate",
              "fields": [],
              "index": 4,
              "docs": [
                "User is already a candidate"
              ]
            },
            {
              "name": "NotCandidate",
              "fields": [],
              "index": 5,
              "docs": [
                "User is not a candidate"
              ]
            },
            {
              "name": "AlreadyInvulnerable",
              "fields": [],
              "index": 6,
              "docs": [
                "User is already an Invulnerable"
              ]
            },
            {
              "name": "NoAssociatedValidatorId",
              "fields": [],
              "index": 7,
              "docs": [
                "Account has no associated validator ID"
              ]
            },
            {
              "name": "ValidatorNotRegistered",
              "fields": [],
              "index": 8,
              "docs": [
                "Validator ID is not yet registered"
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 385,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 386
        }
      },
      "docs": []
    },
    {
      "id": 386,
      "path": [],
      "params": [],
      "type": {
        "tag": "Tuple",
        "value": {
          "fields": [
            0,
            235
          ]
        }
      },
      "docs": []
    },
    {
      "id": 387,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 4
        }
      },
      "docs": []
    },
    {
      "id": 388,
      "path": [],
      "params": [],
      "type": {
        "tag": "Tuple",
        "value": {
          "fields": [
            389,
            13
          ]
        }
      },
      "docs": []
    },
    {
      "id": 389,
      "path": [
        "sp_core",
        "crypto",
        "KeyTypeId"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 17,
              "typeName": "[u8; 4]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 390,
      "path": [
        "pallet_session",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "InvalidProof",
              "fields": [],
              "index": 0,
              "docs": [
                "Invalid ownership proof."
              ]
            },
            {
              "name": "NoAssociatedValidatorId",
              "fields": [],
              "index": 1,
              "docs": [
                "No associated validator ID for account."
              ]
            },
            {
              "name": "DuplicatedKey",
              "fields": [],
              "index": 2,
              "docs": [
                "Registered duplicate key."
              ]
            },
            {
              "name": "NoKeys",
              "fields": [],
              "index": 3,
              "docs": [
                "No keys are associated with this account."
              ]
            },
            {
              "name": "NoAccount",
              "fields": [],
              "index": 4,
              "docs": [
                "Key setting account is not live, so it's impossible to associate keys."
              ]
            }
          ]
        }
      },
      "docs": [
        "Error for the session pallet."
      ]
    },
    {
      "id": 391,
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 236
        },
        {
          "name": "S"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 392,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 392,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 236
        }
      },
      "docs": []
    },
    {
      "id": 393,
      "path": [
        "sp_consensus_slots",
        "Slot"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 11,
              "typeName": "u64",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 394,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 395
        }
      },
      "docs": []
    },
    {
      "id": 395,
      "path": [
        "cumulus_pallet_xcmp_queue",
        "InboundChannelDetails"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "sender",
              "typeId": 61,
              "typeName": "ParaId",
              "docs": []
            },
            {
              "name": "state",
              "typeId": 396,
              "typeName": "InboundState",
              "docs": []
            },
            {
              "name": "message_metadata",
              "typeId": 397,
              "typeName": "Vec<(RelayBlockNumber, XcmpMessageFormat)>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 396,
      "path": [
        "cumulus_pallet_xcmp_queue",
        "InboundState"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Ok",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Suspended",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 397,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 398
        }
      },
      "docs": []
    },
    {
      "id": 398,
      "path": [],
      "params": [],
      "type": {
        "tag": "Tuple",
        "value": {
          "fields": [
            4,
            399
          ]
        }
      },
      "docs": []
    },
    {
      "id": 399,
      "path": [
        "polkadot_parachain",
        "primitives",
        "XcmpMessageFormat"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "ConcatenatedVersionedXcm",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "ConcatenatedEncodedBlob",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Signals",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 400,
      "path": [],
      "params": [],
      "type": {
        "tag": "Tuple",
        "value": {
          "fields": [
            61,
            4
          ]
        }
      },
      "docs": []
    },
    {
      "id": 401,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 402
        }
      },
      "docs": []
    },
    {
      "id": 402,
      "path": [
        "cumulus_pallet_xcmp_queue",
        "OutboundChannelDetails"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "recipient",
              "typeId": 61,
              "typeName": "ParaId",
              "docs": []
            },
            {
              "name": "state",
              "typeId": 403,
              "typeName": "OutboundState",
              "docs": []
            },
            {
              "name": "signals_exist",
              "typeId": 49,
              "typeName": "bool",
              "docs": []
            },
            {
              "name": "first_index",
              "typeId": 38,
              "typeName": "u16",
              "docs": []
            },
            {
              "name": "last_index",
              "typeId": 38,
              "typeName": "u16",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 403,
      "path": [
        "cumulus_pallet_xcmp_queue",
        "OutboundState"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Ok",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Suspended",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 404,
      "path": [],
      "params": [],
      "type": {
        "tag": "Tuple",
        "value": {
          "fields": [
            61,
            38
          ]
        }
      },
      "docs": []
    },
    {
      "id": 405,
      "path": [
        "cumulus_pallet_xcmp_queue",
        "QueueConfigData"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "suspend_threshold",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "drop_threshold",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "resume_threshold",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "threshold_weight",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "weight_restrict_decay",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "xcmp_max_individual_weight",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 406,
      "path": [],
      "params": [],
      "type": {
        "tag": "Tuple",
        "value": {
          "fields": [
            61,
            4,
            13
          ]
        }
      },
      "docs": []
    },
    {
      "id": 407,
      "path": [
        "cumulus_pallet_xcmp_queue",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "FailedToSend",
              "fields": [],
              "index": 0,
              "docs": [
                "Failed to send XCM message."
              ]
            },
            {
              "name": "BadXcmOrigin",
              "fields": [],
              "index": 1,
              "docs": [
                "Bad XCM origin."
              ]
            },
            {
              "name": "BadXcm",
              "fields": [],
              "index": 2,
              "docs": [
                "Bad XCM data."
              ]
            },
            {
              "name": "BadOverweightIndex",
              "fields": [],
              "index": 3,
              "docs": [
                "Bad overweight index."
              ]
            },
            {
              "name": "WeightOverLimit",
              "fields": [],
              "index": 4,
              "docs": [
                "Provided weight is possibly not enough to execute the message."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 408,
      "path": [
        "pallet_xcm",
        "pallet",
        "QueryStatus"
      ],
      "params": [
        {
          "name": "BlockNumber",
          "typeId": 4
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Pending",
              "fields": [
                {
                  "name": "responder",
                  "typeId": 115,
                  "typeName": "VersionedMultiLocation",
                  "docs": []
                },
                {
                  "name": "maybe_match_querier",
                  "typeId": 409,
                  "typeName": "Option<VersionedMultiLocation>",
                  "docs": []
                },
                {
                  "name": "maybe_notify",
                  "typeId": 410,
                  "typeName": "Option<(u8, u8)>",
                  "docs": []
                },
                {
                  "name": "timeout",
                  "typeId": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "VersionNotifier",
              "fields": [
                {
                  "name": "origin",
                  "typeId": 115,
                  "typeName": "VersionedMultiLocation",
                  "docs": []
                },
                {
                  "name": "is_active",
                  "typeId": 49,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Ready",
              "fields": [
                {
                  "name": "response",
                  "typeId": 412,
                  "typeName": "VersionedResponse",
                  "docs": []
                },
                {
                  "name": "at",
                  "typeId": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 409,
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 115
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "typeId": 115,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 410,
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 411
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "typeId": 411,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 411,
      "path": [],
      "params": [],
      "type": {
        "tag": "Tuple",
        "value": {
          "fields": [
            2,
            2
          ]
        }
      },
      "docs": []
    },
    {
      "id": 412,
      "path": [
        "xcm",
        "VersionedResponse"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "V2",
              "fields": [
                {
                  "typeId": 244,
                  "typeName": "v2::Response",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "V3",
              "fields": [
                {
                  "typeId": 84,
                  "typeName": "v3::Response",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 413,
      "path": [],
      "params": [],
      "type": {
        "tag": "Tuple",
        "value": {
          "fields": [
            4,
            115
          ]
        }
      },
      "docs": []
    },
    {
      "id": 414,
      "path": [],
      "params": [],
      "type": {
        "tag": "Tuple",
        "value": {
          "fields": [
            11,
            9,
            4
          ]
        }
      },
      "docs": []
    },
    {
      "id": 415,
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 416
        },
        {
          "name": "S"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 417,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 416,
      "path": [],
      "params": [],
      "type": {
        "tag": "Tuple",
        "value": {
          "fields": [
            115,
            4
          ]
        }
      },
      "docs": []
    },
    {
      "id": 417,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 416
        }
      },
      "docs": []
    },
    {
      "id": 418,
      "path": [
        "pallet_xcm",
        "pallet",
        "VersionMigrationStage"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "MigrateSupportedVersion",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "MigrateVersionNotifiers",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "NotifyCurrentTargets",
              "fields": [
                {
                  "typeId": 419,
                  "typeName": "Option<Vec<u8>>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "MigrateAndNotifyOldTargets",
              "fields": [],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 419,
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 13
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "typeId": 13,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 420,
      "path": [],
      "params": [],
      "type": {
        "tag": "Tuple",
        "value": {
          "fields": [
            4,
            0,
            421
          ]
        }
      },
      "docs": []
    },
    {
      "id": 421,
      "path": [
        "xcm",
        "VersionedAssetId"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "V3",
              "fields": [
                {
                  "typeId": 79,
                  "typeName": "v3::AssetId",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 422,
      "path": [
        "pallet_xcm",
        "pallet",
        "RemoteLockedFungibleRecord"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "amount",
              "typeId": 6,
              "typeName": "u128",
              "docs": []
            },
            {
              "name": "owner",
              "typeId": 115,
              "typeName": "VersionedMultiLocation",
              "docs": []
            },
            {
              "name": "locker",
              "typeId": 115,
              "typeName": "VersionedMultiLocation",
              "docs": []
            },
            {
              "name": "users",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 423,
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 424
        },
        {
          "name": "S"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 425,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 424,
      "path": [],
      "params": [],
      "type": {
        "tag": "Tuple",
        "value": {
          "fields": [
            6,
            115
          ]
        }
      },
      "docs": []
    },
    {
      "id": 425,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 424
        }
      },
      "docs": []
    },
    {
      "id": 426,
      "path": [
        "pallet_xcm",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Unreachable",
              "fields": [],
              "index": 0,
              "docs": [
                "The desired destination was unreachable, generally because there is a no way of routing",
                "to it."
              ]
            },
            {
              "name": "SendFailure",
              "fields": [],
              "index": 1,
              "docs": [
                "There was some other issue (i.e. not to do with routing) in sending the message. Perhaps",
                "a lack of space for buffering the message."
              ]
            },
            {
              "name": "Filtered",
              "fields": [],
              "index": 2,
              "docs": [
                "The message execution fails the filter."
              ]
            },
            {
              "name": "UnweighableMessage",
              "fields": [],
              "index": 3,
              "docs": [
                "The message's weight could not be determined."
              ]
            },
            {
              "name": "DestinationNotInvertible",
              "fields": [],
              "index": 4,
              "docs": [
                "The destination `MultiLocation` provided cannot be inverted."
              ]
            },
            {
              "name": "Empty",
              "fields": [],
              "index": 5,
              "docs": [
                "The assets to be sent are empty."
              ]
            },
            {
              "name": "CannotReanchor",
              "fields": [],
              "index": 6,
              "docs": [
                "Could not re-anchor the assets to declare the fees for the destination chain."
              ]
            },
            {
              "name": "TooManyAssets",
              "fields": [],
              "index": 7,
              "docs": [
                "Too many assets have been attempted for transfer."
              ]
            },
            {
              "name": "InvalidOrigin",
              "fields": [],
              "index": 8,
              "docs": [
                "Origin is invalid for sending."
              ]
            },
            {
              "name": "BadVersion",
              "fields": [],
              "index": 9,
              "docs": [
                "The version of the `Versioned` value used is not able to be interpreted."
              ]
            },
            {
              "name": "BadLocation",
              "fields": [],
              "index": 10,
              "docs": [
                "The given location could not be used (e.g. because it cannot be expressed in the",
                "desired version of XCM)."
              ]
            },
            {
              "name": "NoSubscription",
              "fields": [],
              "index": 11,
              "docs": [
                "The referenced subscription could not be found."
              ]
            },
            {
              "name": "AlreadySubscribed",
              "fields": [],
              "index": 12,
              "docs": [
                "The location is invalid since it already has a subscription from us."
              ]
            },
            {
              "name": "InvalidAsset",
              "fields": [],
              "index": 13,
              "docs": [
                "Invalid asset for the operation."
              ]
            },
            {
              "name": "LowBalance",
              "fields": [],
              "index": 14,
              "docs": [
                "The owner does not own (all) of the asset that they wish to do the operation on."
              ]
            },
            {
              "name": "TooManyLocks",
              "fields": [],
              "index": 15,
              "docs": [
                "The asset owner has too many locks on the asset."
              ]
            },
            {
              "name": "AccountNotSovereign",
              "fields": [],
              "index": 16,
              "docs": [
                "The given account is not an identifiable sovereign account for any location."
              ]
            },
            {
              "name": "FeesNotMet",
              "fields": [],
              "index": 17,
              "docs": [
                "The operation required fees to be paid which the initiator could not meet."
              ]
            },
            {
              "name": "LockNotFound",
              "fields": [],
              "index": 18,
              "docs": [
                "A remote lock with the corresponding data could not be found."
              ]
            },
            {
              "name": "InUse",
              "fields": [],
              "index": 19,
              "docs": [
                "The unlock operation cannot succeed because there are still users of the lock."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 427,
      "path": [
        "cumulus_pallet_xcm",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": []
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 428,
      "path": [
        "cumulus_pallet_dmp_queue",
        "ConfigData"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "max_individual",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 429,
      "path": [
        "cumulus_pallet_dmp_queue",
        "PageIndexData"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "begin_used",
              "typeId": 4,
              "typeName": "PageCounter",
              "docs": []
            },
            {
              "name": "end_used",
              "typeId": 4,
              "typeName": "PageCounter",
              "docs": []
            },
            {
              "name": "overweight_count",
              "typeId": 11,
              "typeName": "OverweightIndex",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 430,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 431
        }
      },
      "docs": []
    },
    {
      "id": 431,
      "path": [],
      "params": [],
      "type": {
        "tag": "Tuple",
        "value": {
          "fields": [
            4,
            13
          ]
        }
      },
      "docs": []
    },
    {
      "id": 432,
      "path": [
        "cumulus_pallet_dmp_queue",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Unknown",
              "fields": [],
              "index": 0,
              "docs": [
                "The message index given is unknown."
              ]
            },
            {
              "name": "OverLimit",
              "fields": [],
              "index": 1,
              "docs": [
                "The amount of weight given is possibly not enough for executing the message."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 433,
      "path": [
        "pallet_xc_asset_config",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "AssetAlreadyRegistered",
              "fields": [],
              "index": 0,
              "docs": [
                "Asset is already registered."
              ]
            },
            {
              "name": "AssetDoesNotExist",
              "fields": [],
              "index": 1,
              "docs": [
                "Asset does not exist (hasn't been registered)."
              ]
            },
            {
              "name": "MultiLocationNotSupported",
              "fields": [],
              "index": 2,
              "docs": [
                "Failed to convert to latest versioned MultiLocation"
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 434,
      "path": [
        "orml_xtokens",
        "module",
        "Error"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "AssetHasNoReserve",
              "fields": [],
              "index": 0,
              "docs": [
                "Asset has no reserve location."
              ]
            },
            {
              "name": "NotCrossChainTransfer",
              "fields": [],
              "index": 1,
              "docs": [
                "Not cross-chain transfer."
              ]
            },
            {
              "name": "InvalidDest",
              "fields": [],
              "index": 2,
              "docs": [
                "Invalid transfer destination."
              ]
            },
            {
              "name": "NotCrossChainTransferableCurrency",
              "fields": [],
              "index": 3,
              "docs": [
                "Currency is not cross-chain transferable."
              ]
            },
            {
              "name": "UnweighableMessage",
              "fields": [],
              "index": 4,
              "docs": [
                "The message's weight could not be determined."
              ]
            },
            {
              "name": "XcmExecutionFailed",
              "fields": [],
              "index": 5,
              "docs": [
                "XCM execution failed."
              ]
            },
            {
              "name": "CannotReanchor",
              "fields": [],
              "index": 6,
              "docs": [
                "Could not re-anchor the assets to declare the fees for the",
                "destination chain."
              ]
            },
            {
              "name": "InvalidAncestry",
              "fields": [],
              "index": 7,
              "docs": [
                "Could not get ancestry of asset reserve location."
              ]
            },
            {
              "name": "InvalidAsset",
              "fields": [],
              "index": 8,
              "docs": [
                "The MultiAsset is invalid."
              ]
            },
            {
              "name": "DestinationNotInvertible",
              "fields": [],
              "index": 9,
              "docs": [
                "The destination `MultiLocation` provided cannot be inverted."
              ]
            },
            {
              "name": "BadVersion",
              "fields": [],
              "index": 10,
              "docs": [
                "The version of the `Versioned` value used is not able to be",
                "interpreted."
              ]
            },
            {
              "name": "DistinctReserveForAssetAndFee",
              "fields": [],
              "index": 11,
              "docs": [
                "We tried sending distinct asset and fee but they have different",
                "reserve chains."
              ]
            },
            {
              "name": "ZeroFee",
              "fields": [],
              "index": 12,
              "docs": [
                "The fee is zero."
              ]
            },
            {
              "name": "ZeroAmount",
              "fields": [],
              "index": 13,
              "docs": [
                "The transfering asset amount is zero."
              ]
            },
            {
              "name": "TooManyAssetsBeingSent",
              "fields": [],
              "index": 14,
              "docs": [
                "The number of assets to be sent is over the maximum."
              ]
            },
            {
              "name": "AssetIndexNonExistent",
              "fields": [],
              "index": 15,
              "docs": [
                "The specified index does not exist in a MultiAssets struct."
              ]
            },
            {
              "name": "FeeNotEnough",
              "fields": [],
              "index": 16,
              "docs": [
                "Fee is not enough."
              ]
            },
            {
              "name": "NotSupportedMultiLocation",
              "fields": [],
              "index": 17,
              "docs": [
                "Not supported MultiLocation"
              ]
            },
            {
              "name": "MinXcmFeeNotDefined",
              "fields": [],
              "index": 18,
              "docs": [
                "MinXcmFee not registered for certain reserve location"
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 435,
      "path": [
        "pallet_evm",
        "CodeMetadata"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "size",
              "typeId": 11,
              "typeName": "u64",
              "docs": []
            },
            {
              "name": "hash",
              "typeId": 12,
              "typeName": "H256",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 436,
      "path": [],
      "params": [],
      "type": {
        "tag": "Tuple",
        "value": {
          "fields": [
            47,
            12
          ]
        }
      },
      "docs": []
    },
    {
      "id": 437,
      "path": [
        "pallet_evm",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "BalanceLow",
              "fields": [],
              "index": 0,
              "docs": [
                "Not enough balance to perform action"
              ]
            },
            {
              "name": "FeeOverflow",
              "fields": [],
              "index": 1,
              "docs": [
                "Calculating total fee overflowed"
              ]
            },
            {
              "name": "PaymentOverflow",
              "fields": [],
              "index": 2,
              "docs": [
                "Calculating total payment overflowed"
              ]
            },
            {
              "name": "WithdrawFailed",
              "fields": [],
              "index": 3,
              "docs": [
                "Withdraw fee failed"
              ]
            },
            {
              "name": "GasPriceTooLow",
              "fields": [],
              "index": 4,
              "docs": [
                "Gas price is too low."
              ]
            },
            {
              "name": "InvalidNonce",
              "fields": [],
              "index": 5,
              "docs": [
                "Nonce is invalid"
              ]
            },
            {
              "name": "GasLimitTooLow",
              "fields": [],
              "index": 6,
              "docs": [
                "Gas limit is too low."
              ]
            },
            {
              "name": "GasLimitTooHigh",
              "fields": [],
              "index": 7,
              "docs": [
                "Gas limit is too high."
              ]
            },
            {
              "name": "Undefined",
              "fields": [],
              "index": 8,
              "docs": [
                "Undefined error."
              ]
            },
            {
              "name": "Reentrancy",
              "fields": [],
              "index": 9,
              "docs": [
                "EVM reentrancy"
              ]
            },
            {
              "name": "TransactionMustComeFromEOA",
              "fields": [],
              "index": 10,
              "docs": [
                "EIP-3607,"
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 438,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 439
        }
      },
      "docs": []
    },
    {
      "id": 439,
      "path": [],
      "params": [],
      "type": {
        "tag": "Tuple",
        "value": {
          "fields": [
            273,
            440,
            445
          ]
        }
      },
      "docs": []
    },
    {
      "id": 440,
      "path": [
        "fp_rpc",
        "TransactionStatus"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "transaction_hash",
              "typeId": 12,
              "typeName": "H256",
              "docs": []
            },
            {
              "name": "transaction_index",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "from",
              "typeId": 47,
              "typeName": "H160",
              "docs": []
            },
            {
              "name": "to",
              "typeId": 441,
              "typeName": "Option<H160>",
              "docs": []
            },
            {
              "name": "contract_address",
              "typeId": 441,
              "typeName": "Option<H160>",
              "docs": []
            },
            {
              "name": "logs",
              "typeId": 442,
              "typeName": "Vec<Log>",
              "docs": []
            },
            {
              "name": "logs_bloom",
              "typeId": 443,
              "typeName": "Bloom",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 441,
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 47
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "typeId": 47,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 442,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 121
        }
      },
      "docs": []
    },
    {
      "id": 443,
      "path": [
        "ethbloom",
        "Bloom"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 444,
              "typeName": "[u8; BLOOM_SIZE]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 444,
      "path": [],
      "params": [],
      "type": {
        "tag": "SizedVec",
        "value": {
          "len": 256,
          "typeParam": 2
        }
      },
      "docs": []
    },
    {
      "id": 445,
      "path": [
        "ethereum",
        "receipt",
        "ReceiptV3"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Legacy",
              "fields": [
                {
                  "typeId": 446,
                  "typeName": "EIP658ReceiptData",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "EIP2930",
              "fields": [
                {
                  "typeId": 446,
                  "typeName": "EIP2930ReceiptData",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "EIP1559",
              "fields": [
                {
                  "typeId": 446,
                  "typeName": "EIP1559ReceiptData",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 446,
      "path": [
        "ethereum",
        "receipt",
        "EIP658ReceiptData"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "status_code",
              "typeId": 2,
              "typeName": "u8",
              "docs": []
            },
            {
              "name": "used_gas",
              "typeId": 134,
              "typeName": "U256",
              "docs": []
            },
            {
              "name": "logs_bloom",
              "typeId": 443,
              "typeName": "Bloom",
              "docs": []
            },
            {
              "name": "logs",
              "typeId": 442,
              "typeName": "Vec<Log>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 447,
      "path": [
        "ethereum",
        "block",
        "Block"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 273
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "header",
              "typeId": 448,
              "typeName": "Header",
              "docs": []
            },
            {
              "name": "transactions",
              "typeId": 450,
              "typeName": "Vec<T>",
              "docs": []
            },
            {
              "name": "ommers",
              "typeId": 451,
              "typeName": "Vec<Header>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 448,
      "path": [
        "ethereum",
        "header",
        "Header"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "parent_hash",
              "typeId": 12,
              "typeName": "H256",
              "docs": []
            },
            {
              "name": "ommers_hash",
              "typeId": 12,
              "typeName": "H256",
              "docs": []
            },
            {
              "name": "beneficiary",
              "typeId": 47,
              "typeName": "H160",
              "docs": []
            },
            {
              "name": "state_root",
              "typeId": 12,
              "typeName": "H256",
              "docs": []
            },
            {
              "name": "transactions_root",
              "typeId": 12,
              "typeName": "H256",
              "docs": []
            },
            {
              "name": "receipts_root",
              "typeId": 12,
              "typeName": "H256",
              "docs": []
            },
            {
              "name": "logs_bloom",
              "typeId": 443,
              "typeName": "Bloom",
              "docs": []
            },
            {
              "name": "difficulty",
              "typeId": 134,
              "typeName": "U256",
              "docs": []
            },
            {
              "name": "number",
              "typeId": 134,
              "typeName": "U256",
              "docs": []
            },
            {
              "name": "gas_limit",
              "typeId": 134,
              "typeName": "U256",
              "docs": []
            },
            {
              "name": "gas_used",
              "typeId": 134,
              "typeName": "U256",
              "docs": []
            },
            {
              "name": "timestamp",
              "typeId": 11,
              "typeName": "u64",
              "docs": []
            },
            {
              "name": "extra_data",
              "typeId": 13,
              "typeName": "Bytes",
              "docs": []
            },
            {
              "name": "mix_hash",
              "typeId": 12,
              "typeName": "H256",
              "docs": []
            },
            {
              "name": "nonce",
              "typeId": 449,
              "typeName": "H64",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 449,
      "path": [
        "ethereum_types",
        "hash",
        "H64"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 82,
              "typeName": "[u8; 8]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 450,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 273
        }
      },
      "docs": []
    },
    {
      "id": 451,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 448
        }
      },
      "docs": []
    },
    {
      "id": 452,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 445
        }
      },
      "docs": []
    },
    {
      "id": 453,
      "path": [],
      "params": [],
      "type": {
        "tag": "Sequence",
        "value": {
          "typeParam": 440
        }
      },
      "docs": []
    },
    {
      "id": 454,
      "path": [
        "pallet_ethereum",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "InvalidSignature",
              "fields": [],
              "index": 0,
              "docs": [
                "Signature is invalid."
              ]
            },
            {
              "name": "PreLogExists",
              "fields": [],
              "index": 1,
              "docs": [
                "Pre-log is present, therefore transact is not allowed."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 455,
      "path": [
        "pallet_custom_signatures",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "DecodeFailure",
              "fields": [],
              "index": 0,
              "docs": [
                "Signature decode fails."
              ]
            },
            {
              "name": "InvalidSignature",
              "fields": [],
              "index": 1,
              "docs": [
                "Signature and account mismatched."
              ]
            },
            {
              "name": "BadNonce",
              "fields": [],
              "index": 2,
              "docs": [
                "Bad nonce parameter."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 456,
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 2
        },
        {
          "name": "S"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 13,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 457,
      "path": [
        "pallet_contracts",
        "wasm",
        "PrefabWasmModule"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "instruction_weights_version",
              "typeId": 67,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "initial",
              "typeId": 67,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "maximum",
              "typeId": 67,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "code",
              "typeId": 458,
              "typeName": "RelaxedCodeVec<T>",
              "docs": []
            },
            {
              "name": "determinism",
              "typeId": 286,
              "typeName": "Determinism",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 458,
      "path": [
        "bounded_collections",
        "weak_bounded_vec",
        "WeakBoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 2
        },
        {
          "name": "S"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 13,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 459,
      "path": [
        "pallet_contracts",
        "wasm",
        "OwnerInfo"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "owner",
              "typeId": 0,
              "typeName": "AccountIdOf<T>",
              "docs": []
            },
            {
              "name": "deposit",
              "typeId": 70,
              "typeName": "BalanceOf<T>",
              "docs": []
            },
            {
              "name": "refcount",
              "typeId": 10,
              "typeName": "u64",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 460,
      "path": [
        "pallet_contracts",
        "storage",
        "ContractInfo"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "trie_id",
              "typeId": 461,
              "typeName": "TrieId",
              "docs": []
            },
            {
              "name": "deposit_account",
              "typeId": 462,
              "typeName": "DepositAccount<T>",
              "docs": []
            },
            {
              "name": "code_hash",
              "typeId": 12,
              "typeName": "CodeHash<T>",
              "docs": []
            },
            {
              "name": "storage_bytes",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "storage_items",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "storage_byte_deposit",
              "typeId": 6,
              "typeName": "BalanceOf<T>",
              "docs": []
            },
            {
              "name": "storage_item_deposit",
              "typeId": 6,
              "typeName": "BalanceOf<T>",
              "docs": []
            },
            {
              "name": "storage_base_deposit",
              "typeId": 6,
              "typeName": "BalanceOf<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 461,
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 2
        },
        {
          "name": "S"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 13,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 462,
      "path": [
        "pallet_contracts",
        "storage",
        "DepositAccount"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 0,
              "typeName": "AccountIdOf<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 463,
      "path": [
        "pallet_contracts",
        "storage",
        "DeletionQueueManager"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "insert_counter",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "delete_counter",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 464,
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "typeId": 2
        },
        {
          "name": "S"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 13,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 465,
      "path": [
        "pallet_contracts",
        "schedule",
        "Schedule"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "limits",
              "typeId": 466,
              "typeName": "Limits",
              "docs": []
            },
            {
              "name": "instruction_weights",
              "typeId": 467,
              "typeName": "InstructionWeights<T>",
              "docs": []
            },
            {
              "name": "host_fn_weights",
              "typeId": 468,
              "typeName": "HostFnWeights<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 466,
      "path": [
        "pallet_contracts",
        "schedule",
        "Limits"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "event_topics",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "globals",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "locals",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "parameters",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "memory_pages",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "table_size",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "br_table_size",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "subject_len",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "payload_len",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "runtime_memory",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 467,
      "path": [
        "pallet_contracts",
        "schedule",
        "InstructionWeights"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "version",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "fallback",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64const",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64load",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64store",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "select",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "r#if",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "br",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "br_if",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "br_table",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "br_table_per_entry",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "call",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "call_indirect",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "call_per_local",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "local_get",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "local_set",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "local_tee",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "global_get",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "global_set",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "memory_current",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "memory_grow",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64clz",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64ctz",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64popcnt",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64eqz",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64extendsi32",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64extendui32",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i32wrapi64",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64eq",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64ne",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64lts",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64ltu",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64gts",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64gtu",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64les",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64leu",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64ges",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64geu",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64add",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64sub",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64mul",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64divs",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64divu",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64rems",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64remu",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64and",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64or",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64xor",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64shl",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64shrs",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64shru",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64rotl",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64rotr",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 468,
      "path": [
        "pallet_contracts",
        "schedule",
        "HostFnWeights"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "caller",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "is_contract",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "code_hash",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "own_code_hash",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "caller_is_origin",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "caller_is_root",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "address",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "gas_left",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "balance",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "value_transferred",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "minimum_balance",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "block_number",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "now",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "weight_to_fee",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "gas",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "input",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "input_per_byte",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "r#return",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "return_per_byte",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "terminate",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "random",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "deposit_event",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "deposit_event_per_topic",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "deposit_event_per_byte",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "debug_message",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "debug_message_per_byte",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "set_storage",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "set_storage_per_new_byte",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "set_storage_per_old_byte",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "set_code_hash",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "clear_storage",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "clear_storage_per_byte",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "contains_storage",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "contains_storage_per_byte",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "get_storage",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "get_storage_per_byte",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "take_storage",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "take_storage_per_byte",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "transfer",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "call",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "delegate_call",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "call_transfer_surcharge",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "call_per_cloned_byte",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "instantiate",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "instantiate_transfer_surcharge",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "instantiate_per_input_byte",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "instantiate_per_salt_byte",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "hash_sha2_256",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "hash_sha2_256_per_byte",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "hash_keccak_256",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "hash_keccak_256_per_byte",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "hash_blake2_256",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "hash_blake2_256_per_byte",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "hash_blake2_128",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "hash_blake2_128_per_byte",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "ecdsa_recover",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "ecdsa_to_eth_address",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "sr25519_verify",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "sr25519_verify_per_byte",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "reentrance_count",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "account_reentrance_count",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "instantiation_nonce",
              "typeId": 9,
              "typeName": "Weight",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 469,
      "path": [
        "pallet_contracts",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "InvalidScheduleVersion",
              "fields": [],
              "index": 0,
              "docs": [
                "A new schedule must have a greater version than the current one."
              ]
            },
            {
              "name": "InvalidCallFlags",
              "fields": [],
              "index": 1,
              "docs": [
                "Invalid combination of flags supplied to `seal_call` or `seal_delegate_call`."
              ]
            },
            {
              "name": "OutOfGas",
              "fields": [],
              "index": 2,
              "docs": [
                "The executed contract exhausted its gas limit."
              ]
            },
            {
              "name": "OutputBufferTooSmall",
              "fields": [],
              "index": 3,
              "docs": [
                "The output buffer supplied to a contract API call was too small."
              ]
            },
            {
              "name": "TransferFailed",
              "fields": [],
              "index": 4,
              "docs": [
                "Performing the requested transfer failed. Probably because there isn't enough",
                "free balance in the sender's account."
              ]
            },
            {
              "name": "MaxCallDepthReached",
              "fields": [],
              "index": 5,
              "docs": [
                "Performing a call was denied because the calling depth reached the limit",
                "of what is specified in the schedule."
              ]
            },
            {
              "name": "ContractNotFound",
              "fields": [],
              "index": 6,
              "docs": [
                "No contract was found at the specified address."
              ]
            },
            {
              "name": "CodeTooLarge",
              "fields": [],
              "index": 7,
              "docs": [
                "The code supplied to `instantiate_with_code` exceeds the limit specified in the",
                "current schedule."
              ]
            },
            {
              "name": "CodeNotFound",
              "fields": [],
              "index": 8,
              "docs": [
                "No code could be found at the supplied code hash."
              ]
            },
            {
              "name": "OutOfBounds",
              "fields": [],
              "index": 9,
              "docs": [
                "A buffer outside of sandbox memory was passed to a contract API function."
              ]
            },
            {
              "name": "DecodingFailed",
              "fields": [],
              "index": 10,
              "docs": [
                "Input passed to a contract API function failed to decode as expected type."
              ]
            },
            {
              "name": "ContractTrapped",
              "fields": [],
              "index": 11,
              "docs": [
                "Contract trapped during execution."
              ]
            },
            {
              "name": "ValueTooLarge",
              "fields": [],
              "index": 12,
              "docs": [
                "The size defined in `T::MaxValueSize` was exceeded."
              ]
            },
            {
              "name": "TerminatedWhileReentrant",
              "fields": [],
              "index": 13,
              "docs": [
                "Termination of a contract is not allowed while the contract is already",
                "on the call stack. Can be triggered by `seal_terminate`."
              ]
            },
            {
              "name": "InputForwarded",
              "fields": [],
              "index": 14,
              "docs": [
                "`seal_call` forwarded this contracts input. It therefore is no longer available."
              ]
            },
            {
              "name": "RandomSubjectTooLong",
              "fields": [],
              "index": 15,
              "docs": [
                "The subject passed to `seal_random` exceeds the limit."
              ]
            },
            {
              "name": "TooManyTopics",
              "fields": [],
              "index": 16,
              "docs": [
                "The amount of topics passed to `seal_deposit_events` exceeds the limit."
              ]
            },
            {
              "name": "NoChainExtension",
              "fields": [],
              "index": 17,
              "docs": [
                "The chain does not provide a chain extension. Calling the chain extension results",
                "in this error. Note that this usually  shouldn't happen as deploying such contracts",
                "is rejected."
              ]
            },
            {
              "name": "DuplicateContract",
              "fields": [],
              "index": 18,
              "docs": [
                "A contract with the same AccountId already exists."
              ]
            },
            {
              "name": "TerminatedInConstructor",
              "fields": [],
              "index": 19,
              "docs": [
                "A contract self destructed in its constructor.",
                "",
                "This can be triggered by a call to `seal_terminate`."
              ]
            },
            {
              "name": "ReentranceDenied",
              "fields": [],
              "index": 20,
              "docs": [
                "A call tried to invoke a contract that is flagged as non-reentrant.",
                "The only other cause is that a call from a contract into the runtime tried to call back",
                "into `pallet-contracts`. This would make the whole pallet reentrant with regard to",
                "contract code execution which is not supported."
              ]
            },
            {
              "name": "StorageDepositNotEnoughFunds",
              "fields": [],
              "index": 21,
              "docs": [
                "Origin doesn't have enough balance to pay the required storage deposits."
              ]
            },
            {
              "name": "StorageDepositLimitExhausted",
              "fields": [],
              "index": 22,
              "docs": [
                "More storage was created than allowed by the storage deposit limit."
              ]
            },
            {
              "name": "CodeInUse",
              "fields": [],
              "index": 23,
              "docs": [
                "Code removal was denied because the code is still in use by at least one contract."
              ]
            },
            {
              "name": "ContractReverted",
              "fields": [],
              "index": 24,
              "docs": [
                "The contract ran to completion but decided to revert its storage changes.",
                "Please note that this error is only returned from extrinsics. When called directly",
                "or via RPC an `Ok` will be returned. In this case the caller needs to inspect the flags",
                "to determine whether a reversion has taken place."
              ]
            },
            {
              "name": "CodeRejected",
              "fields": [],
              "index": 25,
              "docs": [
                "The contract's code was found to be invalid during validation or instrumentation.",
                "",
                "The most likely cause of this is that an API was used which is not supported by the",
                "node. This happens if an older node is used with a new version of ink!. Try updating",
                "your node to the newest available version.",
                "",
                "A more detailed error can be found on the node console if debug messages are enabled",
                "by supplying `-lruntime::contracts=debug`."
              ]
            },
            {
              "name": "Indeterministic",
              "fields": [],
              "index": 26,
              "docs": [
                "An indetermistic code was used in a context where this is not permitted."
              ]
            },
            {
              "name": "MigrationInProgress",
              "fields": [],
              "index": 27,
              "docs": [
                "A pending migration needs to complete before the extrinsic can be called."
              ]
            },
            {
              "name": "NoMigrationPerformed",
              "fields": [],
              "index": 28,
              "docs": [
                "Migrate dispatch call was attempted but no migration was performed."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 470,
      "path": [
        "pallet_sudo",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "RequireSudo",
              "fields": [],
              "index": 0,
              "docs": [
                "Sender must be the Sudo account"
              ]
            }
          ]
        }
      },
      "docs": [
        "Error for the Sudo pallet"
      ]
    },
    {
      "id": 471,
      "path": [
        "fp_self_contained",
        "unchecked_extrinsic",
        "UncheckedExtrinsic"
      ],
      "params": [
        {
          "name": "Address",
          "typeId": 166
        },
        {
          "name": "Call",
          "typeId": 164
        },
        {
          "name": "Signature",
          "typeId": 472
        },
        {
          "name": "Extra",
          "typeId": 478
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 487,
              "typeName": "sp_runtime::generic::UncheckedExtrinsic<Address, Call, Signature, Extra\n>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 472,
      "path": [
        "sp_runtime",
        "MultiSignature"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Ed25519",
              "fields": [
                {
                  "typeId": 473,
                  "typeName": "ed25519::Signature",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Sr25519",
              "fields": [
                {
                  "typeId": 475,
                  "typeName": "sr25519::Signature",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Ecdsa",
              "fields": [
                {
                  "typeId": 476,
                  "typeName": "ecdsa::Signature",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 473,
      "path": [
        "sp_core",
        "ed25519",
        "Signature"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 474,
              "typeName": "[u8; 64]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 474,
      "path": [],
      "params": [],
      "type": {
        "tag": "SizedVec",
        "value": {
          "len": 64,
          "typeParam": 2
        }
      },
      "docs": []
    },
    {
      "id": 475,
      "path": [
        "sp_core",
        "sr25519",
        "Signature"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 474,
              "typeName": "[u8; 64]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 476,
      "path": [
        "sp_core",
        "ecdsa",
        "Signature"
      ],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 477,
              "typeName": "[u8; 65]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 477,
      "path": [],
      "params": [],
      "type": {
        "tag": "SizedVec",
        "value": {
          "len": 65,
          "typeParam": 2
        }
      },
      "docs": []
    },
    {
      "id": 478,
      "path": [],
      "params": [],
      "type": {
        "tag": "Tuple",
        "value": {
          "fields": [
            479,
            480,
            481,
            482,
            484,
            485,
            486
          ]
        }
      },
      "docs": []
    },
    {
      "id": 479,
      "path": [
        "frame_system",
        "extensions",
        "check_spec_version",
        "CheckSpecVersion"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": []
        }
      },
      "docs": []
    },
    {
      "id": 480,
      "path": [
        "frame_system",
        "extensions",
        "check_tx_version",
        "CheckTxVersion"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": []
        }
      },
      "docs": []
    },
    {
      "id": 481,
      "path": [
        "frame_system",
        "extensions",
        "check_genesis",
        "CheckGenesis"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": []
        }
      },
      "docs": []
    },
    {
      "id": 482,
      "path": [
        "frame_system",
        "extensions",
        "check_mortality",
        "CheckMortality"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 483,
              "typeName": "Era",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 483,
      "path": [
        "sp_runtime",
        "generic",
        "era",
        "Era"
      ],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Immortal",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Mortal1",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Mortal2",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Mortal3",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "Mortal4",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "Mortal5",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "Mortal6",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "Mortal7",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "Mortal8",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            },
            {
              "name": "Mortal9",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 9,
              "docs": []
            },
            {
              "name": "Mortal10",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 10,
              "docs": []
            },
            {
              "name": "Mortal11",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 11,
              "docs": []
            },
            {
              "name": "Mortal12",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 12,
              "docs": []
            },
            {
              "name": "Mortal13",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 13,
              "docs": []
            },
            {
              "name": "Mortal14",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 14,
              "docs": []
            },
            {
              "name": "Mortal15",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 15,
              "docs": []
            },
            {
              "name": "Mortal16",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 16,
              "docs": []
            },
            {
              "name": "Mortal17",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 17,
              "docs": []
            },
            {
              "name": "Mortal18",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 18,
              "docs": []
            },
            {
              "name": "Mortal19",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 19,
              "docs": []
            },
            {
              "name": "Mortal20",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 20,
              "docs": []
            },
            {
              "name": "Mortal21",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 21,
              "docs": []
            },
            {
              "name": "Mortal22",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 22,
              "docs": []
            },
            {
              "name": "Mortal23",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 23,
              "docs": []
            },
            {
              "name": "Mortal24",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 24,
              "docs": []
            },
            {
              "name": "Mortal25",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 25,
              "docs": []
            },
            {
              "name": "Mortal26",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 26,
              "docs": []
            },
            {
              "name": "Mortal27",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 27,
              "docs": []
            },
            {
              "name": "Mortal28",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 28,
              "docs": []
            },
            {
              "name": "Mortal29",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 29,
              "docs": []
            },
            {
              "name": "Mortal30",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 30,
              "docs": []
            },
            {
              "name": "Mortal31",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 31,
              "docs": []
            },
            {
              "name": "Mortal32",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 32,
              "docs": []
            },
            {
              "name": "Mortal33",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 33,
              "docs": []
            },
            {
              "name": "Mortal34",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 34,
              "docs": []
            },
            {
              "name": "Mortal35",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 35,
              "docs": []
            },
            {
              "name": "Mortal36",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 36,
              "docs": []
            },
            {
              "name": "Mortal37",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 37,
              "docs": []
            },
            {
              "name": "Mortal38",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 38,
              "docs": []
            },
            {
              "name": "Mortal39",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 39,
              "docs": []
            },
            {
              "name": "Mortal40",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 40,
              "docs": []
            },
            {
              "name": "Mortal41",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 41,
              "docs": []
            },
            {
              "name": "Mortal42",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 42,
              "docs": []
            },
            {
              "name": "Mortal43",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 43,
              "docs": []
            },
            {
              "name": "Mortal44",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 44,
              "docs": []
            },
            {
              "name": "Mortal45",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 45,
              "docs": []
            },
            {
              "name": "Mortal46",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 46,
              "docs": []
            },
            {
              "name": "Mortal47",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 47,
              "docs": []
            },
            {
              "name": "Mortal48",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 48,
              "docs": []
            },
            {
              "name": "Mortal49",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 49,
              "docs": []
            },
            {
              "name": "Mortal50",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 50,
              "docs": []
            },
            {
              "name": "Mortal51",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 51,
              "docs": []
            },
            {
              "name": "Mortal52",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 52,
              "docs": []
            },
            {
              "name": "Mortal53",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 53,
              "docs": []
            },
            {
              "name": "Mortal54",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 54,
              "docs": []
            },
            {
              "name": "Mortal55",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 55,
              "docs": []
            },
            {
              "name": "Mortal56",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 56,
              "docs": []
            },
            {
              "name": "Mortal57",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 57,
              "docs": []
            },
            {
              "name": "Mortal58",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 58,
              "docs": []
            },
            {
              "name": "Mortal59",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 59,
              "docs": []
            },
            {
              "name": "Mortal60",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 60,
              "docs": []
            },
            {
              "name": "Mortal61",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 61,
              "docs": []
            },
            {
              "name": "Mortal62",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 62,
              "docs": []
            },
            {
              "name": "Mortal63",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 63,
              "docs": []
            },
            {
              "name": "Mortal64",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 64,
              "docs": []
            },
            {
              "name": "Mortal65",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 65,
              "docs": []
            },
            {
              "name": "Mortal66",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 66,
              "docs": []
            },
            {
              "name": "Mortal67",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 67,
              "docs": []
            },
            {
              "name": "Mortal68",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 68,
              "docs": []
            },
            {
              "name": "Mortal69",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 69,
              "docs": []
            },
            {
              "name": "Mortal70",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 70,
              "docs": []
            },
            {
              "name": "Mortal71",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 71,
              "docs": []
            },
            {
              "name": "Mortal72",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 72,
              "docs": []
            },
            {
              "name": "Mortal73",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 73,
              "docs": []
            },
            {
              "name": "Mortal74",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 74,
              "docs": []
            },
            {
              "name": "Mortal75",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 75,
              "docs": []
            },
            {
              "name": "Mortal76",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 76,
              "docs": []
            },
            {
              "name": "Mortal77",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 77,
              "docs": []
            },
            {
              "name": "Mortal78",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 78,
              "docs": []
            },
            {
              "name": "Mortal79",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 79,
              "docs": []
            },
            {
              "name": "Mortal80",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 80,
              "docs": []
            },
            {
              "name": "Mortal81",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 81,
              "docs": []
            },
            {
              "name": "Mortal82",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 82,
              "docs": []
            },
            {
              "name": "Mortal83",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 83,
              "docs": []
            },
            {
              "name": "Mortal84",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 84,
              "docs": []
            },
            {
              "name": "Mortal85",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 85,
              "docs": []
            },
            {
              "name": "Mortal86",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 86,
              "docs": []
            },
            {
              "name": "Mortal87",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 87,
              "docs": []
            },
            {
              "name": "Mortal88",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 88,
              "docs": []
            },
            {
              "name": "Mortal89",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 89,
              "docs": []
            },
            {
              "name": "Mortal90",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 90,
              "docs": []
            },
            {
              "name": "Mortal91",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 91,
              "docs": []
            },
            {
              "name": "Mortal92",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 92,
              "docs": []
            },
            {
              "name": "Mortal93",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 93,
              "docs": []
            },
            {
              "name": "Mortal94",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 94,
              "docs": []
            },
            {
              "name": "Mortal95",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 95,
              "docs": []
            },
            {
              "name": "Mortal96",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 96,
              "docs": []
            },
            {
              "name": "Mortal97",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 97,
              "docs": []
            },
            {
              "name": "Mortal98",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 98,
              "docs": []
            },
            {
              "name": "Mortal99",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 99,
              "docs": []
            },
            {
              "name": "Mortal100",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 100,
              "docs": []
            },
            {
              "name": "Mortal101",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 101,
              "docs": []
            },
            {
              "name": "Mortal102",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 102,
              "docs": []
            },
            {
              "name": "Mortal103",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 103,
              "docs": []
            },
            {
              "name": "Mortal104",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 104,
              "docs": []
            },
            {
              "name": "Mortal105",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 105,
              "docs": []
            },
            {
              "name": "Mortal106",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 106,
              "docs": []
            },
            {
              "name": "Mortal107",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 107,
              "docs": []
            },
            {
              "name": "Mortal108",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 108,
              "docs": []
            },
            {
              "name": "Mortal109",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 109,
              "docs": []
            },
            {
              "name": "Mortal110",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 110,
              "docs": []
            },
            {
              "name": "Mortal111",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 111,
              "docs": []
            },
            {
              "name": "Mortal112",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 112,
              "docs": []
            },
            {
              "name": "Mortal113",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 113,
              "docs": []
            },
            {
              "name": "Mortal114",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 114,
              "docs": []
            },
            {
              "name": "Mortal115",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 115,
              "docs": []
            },
            {
              "name": "Mortal116",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 116,
              "docs": []
            },
            {
              "name": "Mortal117",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 117,
              "docs": []
            },
            {
              "name": "Mortal118",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 118,
              "docs": []
            },
            {
              "name": "Mortal119",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 119,
              "docs": []
            },
            {
              "name": "Mortal120",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 120,
              "docs": []
            },
            {
              "name": "Mortal121",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 121,
              "docs": []
            },
            {
              "name": "Mortal122",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 122,
              "docs": []
            },
            {
              "name": "Mortal123",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 123,
              "docs": []
            },
            {
              "name": "Mortal124",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 124,
              "docs": []
            },
            {
              "name": "Mortal125",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 125,
              "docs": []
            },
            {
              "name": "Mortal126",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 126,
              "docs": []
            },
            {
              "name": "Mortal127",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 127,
              "docs": []
            },
            {
              "name": "Mortal128",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 128,
              "docs": []
            },
            {
              "name": "Mortal129",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 129,
              "docs": []
            },
            {
              "name": "Mortal130",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 130,
              "docs": []
            },
            {
              "name": "Mortal131",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 131,
              "docs": []
            },
            {
              "name": "Mortal132",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 132,
              "docs": []
            },
            {
              "name": "Mortal133",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 133,
              "docs": []
            },
            {
              "name": "Mortal134",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 134,
              "docs": []
            },
            {
              "name": "Mortal135",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 135,
              "docs": []
            },
            {
              "name": "Mortal136",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 136,
              "docs": []
            },
            {
              "name": "Mortal137",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 137,
              "docs": []
            },
            {
              "name": "Mortal138",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 138,
              "docs": []
            },
            {
              "name": "Mortal139",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 139,
              "docs": []
            },
            {
              "name": "Mortal140",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 140,
              "docs": []
            },
            {
              "name": "Mortal141",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 141,
              "docs": []
            },
            {
              "name": "Mortal142",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 142,
              "docs": []
            },
            {
              "name": "Mortal143",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 143,
              "docs": []
            },
            {
              "name": "Mortal144",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 144,
              "docs": []
            },
            {
              "name": "Mortal145",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 145,
              "docs": []
            },
            {
              "name": "Mortal146",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 146,
              "docs": []
            },
            {
              "name": "Mortal147",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 147,
              "docs": []
            },
            {
              "name": "Mortal148",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 148,
              "docs": []
            },
            {
              "name": "Mortal149",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 149,
              "docs": []
            },
            {
              "name": "Mortal150",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 150,
              "docs": []
            },
            {
              "name": "Mortal151",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 151,
              "docs": []
            },
            {
              "name": "Mortal152",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 152,
              "docs": []
            },
            {
              "name": "Mortal153",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 153,
              "docs": []
            },
            {
              "name": "Mortal154",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 154,
              "docs": []
            },
            {
              "name": "Mortal155",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 155,
              "docs": []
            },
            {
              "name": "Mortal156",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 156,
              "docs": []
            },
            {
              "name": "Mortal157",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 157,
              "docs": []
            },
            {
              "name": "Mortal158",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 158,
              "docs": []
            },
            {
              "name": "Mortal159",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 159,
              "docs": []
            },
            {
              "name": "Mortal160",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 160,
              "docs": []
            },
            {
              "name": "Mortal161",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 161,
              "docs": []
            },
            {
              "name": "Mortal162",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 162,
              "docs": []
            },
            {
              "name": "Mortal163",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 163,
              "docs": []
            },
            {
              "name": "Mortal164",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 164,
              "docs": []
            },
            {
              "name": "Mortal165",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 165,
              "docs": []
            },
            {
              "name": "Mortal166",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 166,
              "docs": []
            },
            {
              "name": "Mortal167",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 167,
              "docs": []
            },
            {
              "name": "Mortal168",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 168,
              "docs": []
            },
            {
              "name": "Mortal169",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 169,
              "docs": []
            },
            {
              "name": "Mortal170",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 170,
              "docs": []
            },
            {
              "name": "Mortal171",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 171,
              "docs": []
            },
            {
              "name": "Mortal172",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 172,
              "docs": []
            },
            {
              "name": "Mortal173",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 173,
              "docs": []
            },
            {
              "name": "Mortal174",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 174,
              "docs": []
            },
            {
              "name": "Mortal175",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 175,
              "docs": []
            },
            {
              "name": "Mortal176",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 176,
              "docs": []
            },
            {
              "name": "Mortal177",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 177,
              "docs": []
            },
            {
              "name": "Mortal178",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 178,
              "docs": []
            },
            {
              "name": "Mortal179",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 179,
              "docs": []
            },
            {
              "name": "Mortal180",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 180,
              "docs": []
            },
            {
              "name": "Mortal181",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 181,
              "docs": []
            },
            {
              "name": "Mortal182",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 182,
              "docs": []
            },
            {
              "name": "Mortal183",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 183,
              "docs": []
            },
            {
              "name": "Mortal184",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 184,
              "docs": []
            },
            {
              "name": "Mortal185",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 185,
              "docs": []
            },
            {
              "name": "Mortal186",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 186,
              "docs": []
            },
            {
              "name": "Mortal187",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 187,
              "docs": []
            },
            {
              "name": "Mortal188",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 188,
              "docs": []
            },
            {
              "name": "Mortal189",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 189,
              "docs": []
            },
            {
              "name": "Mortal190",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 190,
              "docs": []
            },
            {
              "name": "Mortal191",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 191,
              "docs": []
            },
            {
              "name": "Mortal192",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 192,
              "docs": []
            },
            {
              "name": "Mortal193",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 193,
              "docs": []
            },
            {
              "name": "Mortal194",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 194,
              "docs": []
            },
            {
              "name": "Mortal195",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 195,
              "docs": []
            },
            {
              "name": "Mortal196",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 196,
              "docs": []
            },
            {
              "name": "Mortal197",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 197,
              "docs": []
            },
            {
              "name": "Mortal198",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 198,
              "docs": []
            },
            {
              "name": "Mortal199",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 199,
              "docs": []
            },
            {
              "name": "Mortal200",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 200,
              "docs": []
            },
            {
              "name": "Mortal201",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 201,
              "docs": []
            },
            {
              "name": "Mortal202",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 202,
              "docs": []
            },
            {
              "name": "Mortal203",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 203,
              "docs": []
            },
            {
              "name": "Mortal204",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 204,
              "docs": []
            },
            {
              "name": "Mortal205",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 205,
              "docs": []
            },
            {
              "name": "Mortal206",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 206,
              "docs": []
            },
            {
              "name": "Mortal207",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 207,
              "docs": []
            },
            {
              "name": "Mortal208",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 208,
              "docs": []
            },
            {
              "name": "Mortal209",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 209,
              "docs": []
            },
            {
              "name": "Mortal210",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 210,
              "docs": []
            },
            {
              "name": "Mortal211",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 211,
              "docs": []
            },
            {
              "name": "Mortal212",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 212,
              "docs": []
            },
            {
              "name": "Mortal213",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 213,
              "docs": []
            },
            {
              "name": "Mortal214",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 214,
              "docs": []
            },
            {
              "name": "Mortal215",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 215,
              "docs": []
            },
            {
              "name": "Mortal216",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 216,
              "docs": []
            },
            {
              "name": "Mortal217",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 217,
              "docs": []
            },
            {
              "name": "Mortal218",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 218,
              "docs": []
            },
            {
              "name": "Mortal219",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 219,
              "docs": []
            },
            {
              "name": "Mortal220",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 220,
              "docs": []
            },
            {
              "name": "Mortal221",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 221,
              "docs": []
            },
            {
              "name": "Mortal222",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 222,
              "docs": []
            },
            {
              "name": "Mortal223",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 223,
              "docs": []
            },
            {
              "name": "Mortal224",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 224,
              "docs": []
            },
            {
              "name": "Mortal225",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 225,
              "docs": []
            },
            {
              "name": "Mortal226",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 226,
              "docs": []
            },
            {
              "name": "Mortal227",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 227,
              "docs": []
            },
            {
              "name": "Mortal228",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 228,
              "docs": []
            },
            {
              "name": "Mortal229",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 229,
              "docs": []
            },
            {
              "name": "Mortal230",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 230,
              "docs": []
            },
            {
              "name": "Mortal231",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 231,
              "docs": []
            },
            {
              "name": "Mortal232",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 232,
              "docs": []
            },
            {
              "name": "Mortal233",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 233,
              "docs": []
            },
            {
              "name": "Mortal234",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 234,
              "docs": []
            },
            {
              "name": "Mortal235",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 235,
              "docs": []
            },
            {
              "name": "Mortal236",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 236,
              "docs": []
            },
            {
              "name": "Mortal237",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 237,
              "docs": []
            },
            {
              "name": "Mortal238",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 238,
              "docs": []
            },
            {
              "name": "Mortal239",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 239,
              "docs": []
            },
            {
              "name": "Mortal240",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 240,
              "docs": []
            },
            {
              "name": "Mortal241",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 241,
              "docs": []
            },
            {
              "name": "Mortal242",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 242,
              "docs": []
            },
            {
              "name": "Mortal243",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 243,
              "docs": []
            },
            {
              "name": "Mortal244",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 244,
              "docs": []
            },
            {
              "name": "Mortal245",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 245,
              "docs": []
            },
            {
              "name": "Mortal246",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 246,
              "docs": []
            },
            {
              "name": "Mortal247",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 247,
              "docs": []
            },
            {
              "name": "Mortal248",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 248,
              "docs": []
            },
            {
              "name": "Mortal249",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 249,
              "docs": []
            },
            {
              "name": "Mortal250",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 250,
              "docs": []
            },
            {
              "name": "Mortal251",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 251,
              "docs": []
            },
            {
              "name": "Mortal252",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 252,
              "docs": []
            },
            {
              "name": "Mortal253",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 253,
              "docs": []
            },
            {
              "name": "Mortal254",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 254,
              "docs": []
            },
            {
              "name": "Mortal255",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 255,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 484,
      "path": [
        "frame_system",
        "extensions",
        "check_nonce",
        "CheckNonce"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 67,
              "typeName": "T::Index",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 485,
      "path": [
        "frame_system",
        "extensions",
        "check_weight",
        "CheckWeight"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": []
        }
      },
      "docs": []
    },
    {
      "id": 486,
      "path": [
        "pallet_transaction_payment",
        "ChargeTransactionPayment"
      ],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 70,
              "typeName": "BalanceOf<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 487,
      "path": [
        "sp_runtime",
        "generic",
        "unchecked_extrinsic",
        "UncheckedExtrinsic"
      ],
      "params": [
        {
          "name": "Address",
          "typeId": 166
        },
        {
          "name": "Call",
          "typeId": 164
        },
        {
          "name": "Signature",
          "typeId": 472
        },
        {
          "name": "Extra",
          "typeId": 478
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 13,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  ],
  "pallets": [
    {
      "name": "System",
      "storage": {
        "prefix": "System",
        "entries": [
          {
            "name": "Account",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "blake2_128Concat"
                  }
                ],
                "key": 0,
                "value": 3
              }
            },
            "default": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080",
            "docs": [
              " The full account information for a particular account ID."
            ]
          },
          {
            "name": "ExtrinsicCount",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 4
              }
            },
            "default": "0x00",
            "docs": [
              " Total extrinsics count for the current block."
            ]
          },
          {
            "name": "BlockWeight",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 8
              }
            },
            "default": "0x000000000000",
            "docs": [
              " The current weight for the block."
            ]
          },
          {
            "name": "AllExtrinsicsLen",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 4
              }
            },
            "default": "0x00",
            "docs": [
              " Total length (in bytes) for all extrinsics put together, for the current block."
            ]
          },
          {
            "name": "BlockHash",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "twox64Concat"
                  }
                ],
                "key": 4,
                "value": 12
              }
            },
            "default": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "docs": [
              " Map of block numbers to block hashes."
            ]
          },
          {
            "name": "ExtrinsicData",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "twox64Concat"
                  }
                ],
                "key": 4,
                "value": 13
              }
            },
            "default": "0x00",
            "docs": [
              " Extrinsics data for the current block (maps an extrinsic's index to its data)."
            ]
          },
          {
            "name": "Number",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 4
              }
            },
            "default": "0x00000000",
            "docs": [
              " The current block number being processed. Set by `execute_block`."
            ]
          },
          {
            "name": "ParentHash",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 12
              }
            },
            "default": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "docs": [
              " Hash of the previous block."
            ]
          },
          {
            "name": "Digest",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 14
              }
            },
            "default": "0x00",
            "docs": [
              " Digest of the current block, also part of the block header."
            ]
          },
          {
            "name": "Events",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 18
              }
            },
            "default": "0x00",
            "docs": [
              " Events deposited for the current block.",
              "",
              " NOTE: The item is unbound and should therefore never be read on chain.",
              " It could otherwise inflate the PoV size of a block.",
              "",
              " Events have a large in-memory size. Box the events to not go out-of-memory",
              " just in case someone still reads them from within the runtime."
            ]
          },
          {
            "name": "EventCount",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 4
              }
            },
            "default": "0x00000000",
            "docs": [
              " The number of events in the `Events<T>` list."
            ]
          },
          {
            "name": "EventTopics",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "blake2_128Concat"
                  }
                ],
                "key": 12,
                "value": 143
              }
            },
            "default": "0x00",
            "docs": [
              " Mapping between a topic (represented by T::Hash) and a vector of indexes",
              " of events in the `<Events<T>>` list.",
              "",
              " All topic vectors have deterministic storage locations depending on the topic. This",
              " allows light-clients to leverage the changes trie storage tracking mechanism and",
              " in case of changes fetch the list of events of interest.",
              "",
              " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just",
              " the `EventIndex` then in case if the topic has the same contents on the next block",
              " no notification will be triggered thus the event might be lost."
            ]
          },
          {
            "name": "LastRuntimeUpgrade",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 145
              }
            },
            "default": "0x00",
            "docs": [
              " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
            ]
          },
          {
            "name": "UpgradedToU32RefCount",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 49
              }
            },
            "default": "0x00",
            "docs": [
              " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
            ]
          },
          {
            "name": "UpgradedToTripleRefCount",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 49
              }
            },
            "default": "0x00",
            "docs": [
              " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
              " (default) if not."
            ]
          },
          {
            "name": "ExecutionPhase",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 142
              }
            },
            "default": "0x00",
            "docs": [
              " The execution phase of the block."
            ]
          }
        ]
      },
      "calls": 146,
      "event": 21,
      "constants": [
        {
          "name": "BlockWeights",
          "typeId": 150,
          "value": "0x0203815d00070088526a7402004001c2e9171b0001079077bca44b0200d000010700e6bd4f570200f000010000c2e9171b000107901951bf680200200101070088526a7402004001010700a2941a1d02005000c2e9171b00000000",
          "docs": [
            " Block & extrinsics weights: base values and limits."
          ]
        },
        {
          "name": "BlockLength",
          "typeId": 154,
          "value": "0x00003c000000500000005000",
          "docs": [
            " The maximum length of a block (in bytes)."
          ]
        },
        {
          "name": "BlockHashCount",
          "typeId": 4,
          "value": "0x00100000",
          "docs": [
            " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
          ]
        },
        {
          "name": "DbWeight",
          "typeId": 156,
          "value": "0x40787d010000000000e1f50500000000",
          "docs": [
            " The weight of runtime database operations the runtime can invoke."
          ]
        },
        {
          "name": "Version",
          "typeId": 157,
          "value": "0x14617374617214617374617201000000420000000000000038df6acb689907609b0400000037e397fc7c91f5e402000000dd718d5cc53262d40100000040fe3ad401f8959a06000000d2bc9897eed08f1503000000f78b278be53f454c02000000bc9d89904f5b923f0100000037c8bb1350a9a2a804000000f3ff14d5ab52705903000000ab3c0572291feb8b01000000ea93e3f16f3d696202000000582211f65bb14b8905000000e65b00e46cedd0aa0200000068b66ba122c93fa7020000000200000001",
          "docs": [
            " Get the chain's current version."
          ]
        },
        {
          "name": "SS58Prefix",
          "typeId": 38,
          "value": "0x0500",
          "docs": [
            " The designated SS58 prefix of this chain.",
            "",
            " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
            " that the runtime should know about the prefix in order to make use of it as",
            " an identifier of the chain."
          ]
        }
      ],
      "error": 161,
      "index": 10
    },
    {
      "name": "Utility",
      "calls": 162,
      "event": 30,
      "constants": [
        {
          "name": "batched_calls_limit",
          "typeId": 4,
          "value": "0xaa2a0000",
          "docs": [
            " The limit on the number of batched calls."
          ]
        }
      ],
      "error": 294,
      "index": 11
    },
    {
      "name": "Identity",
      "storage": {
        "prefix": "Identity",
        "entries": [
          {
            "name": "IdentityOf",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "twox64Concat"
                  }
                ],
                "key": 0,
                "value": 295
              }
            },
            "default": "0x00",
            "docs": [
              " Information that is pertinent to identify the entity behind an account.",
              "",
              " TWOX-NOTE: OK ― `AccountId` is a secure hash."
            ]
          },
          {
            "name": "SuperOf",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "blake2_128Concat"
                  }
                ],
                "key": 0,
                "value": 203
              }
            },
            "default": "0x00",
            "docs": [
              " The super-identity of an alternative \"sub\" identity together with its name, within that",
              " context. If the account is not some other account's sub-identity, then just `None`."
            ]
          },
          {
            "name": "SubsOf",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "twox64Concat"
                  }
                ],
                "key": 0,
                "value": 299
              }
            },
            "default": "0x0000000000000000000000000000000000",
            "docs": [
              " Alternative \"sub\" identities of this account.",
              "",
              " The first item is the deposit, the second is a vector of the accounts.",
              "",
              " TWOX-NOTE: OK ― `AccountId` is a secure hash."
            ]
          },
          {
            "name": "Registrars",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 301
              }
            },
            "default": "0x00",
            "docs": [
              " The set of registrars. Not expected to get very big as can only be added through a",
              " special origin (likely a council motion).",
              "",
              " The index into this can be cast to `RegistrarIndex` to get a valid value."
            ]
          }
        ]
      },
      "calls": 165,
      "event": 33,
      "constants": [
        {
          "name": "BasicDeposit",
          "typeId": 6,
          "value": "0x000002aa4856f0910000000000000000",
          "docs": [
            " The amount held on deposit for a registered identity"
          ]
        },
        {
          "name": "FieldDeposit",
          "typeId": 6,
          "value": "0x00005af64cf5d4010000000000000000",
          "docs": [
            " The amount held on deposit per additional field for a registered identity."
          ]
        },
        {
          "name": "SubAccountDeposit",
          "typeId": 6,
          "value": "0x000019c474b93f8c0000000000000000",
          "docs": [
            " The amount held on deposit for a registered subaccount. This should account for the fact",
            " that one storage item's value will increase by the size of an account ID, and there will",
            " be another trie item whose value is the size of an account ID plus 32 bytes."
          ]
        },
        {
          "name": "MaxSubAccounts",
          "typeId": 4,
          "value": "0x64000000",
          "docs": [
            " The maximum number of sub-accounts allowed per identified account."
          ]
        },
        {
          "name": "MaxAdditionalFields",
          "typeId": 4,
          "value": "0x64000000",
          "docs": [
            " Maximum number of additional fields that may be stored in an ID. Needed to bound the I/O",
            " required to access an identity, but can be pretty high."
          ]
        },
        {
          "name": "MaxRegistrars",
          "typeId": 4,
          "value": "0x14000000",
          "docs": [
            " Maxmimum number of registrars allowed in the system. Needed to bound the complexity",
            " of, e.g., updating judgements."
          ]
        }
      ],
      "error": 305,
      "index": 12
    },
    {
      "name": "Timestamp",
      "storage": {
        "prefix": "Timestamp",
        "entries": [
          {
            "name": "Now",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 11
              }
            },
            "default": "0x0000000000000000",
            "docs": [
              " Current time for the current block."
            ]
          },
          {
            "name": "DidUpdate",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 49
              }
            },
            "default": "0x00",
            "docs": [
              " Did the timestamp get updated in this block?"
            ]
          }
        ]
      },
      "calls": 207,
      "constants": [
        {
          "name": "MinimumPeriod",
          "typeId": 11,
          "value": "0x7017000000000000",
          "docs": [
            " The minimum period between blocks. Beware that this is different to the *expected*",
            " period that the block production apparatus provides. Your chosen consensus system will",
            " generally work with this to determine a sensible block time. e.g. For Aura, it will be",
            " double this period on default settings."
          ]
        }
      ],
      "index": 13
    },
    {
      "name": "Multisig",
      "storage": {
        "prefix": "Multisig",
        "entries": [
          {
            "name": "Multisigs",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "twox64Concat"
                  },
                  {
                    "tag": "blake2_128Concat"
                  }
                ],
                "key": 306,
                "value": 307
              }
            },
            "default": "0x00",
            "docs": [
              " The set of open multisig operations."
            ]
          }
        ]
      },
      "calls": 208,
      "event": 34,
      "constants": [
        {
          "name": "DepositBase",
          "typeId": 6,
          "value": "0x000060d2156a388d0000000000000000",
          "docs": [
            " The base amount of currency needed to reserve for creating a multisig execution or to",
            " store a dispatch call for later.",
            "",
            " This is held for an additional storage item whose value size is",
            " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is",
            " `32 + sizeof(AccountId)` bytes."
          ]
        },
        {
          "name": "DepositFactor",
          "typeId": 6,
          "value": "0x0000a031a95fe3000000000000000000",
          "docs": [
            " The amount of currency needed per unit threshold when creating a multisig execution.",
            "",
            " This is held for adding 32 bytes more into a pre-existing storage value."
          ]
        },
        {
          "name": "MaxSignatories",
          "typeId": 4,
          "value": "0x64000000",
          "docs": [
            " The maximum amount of signatories allowed in the multisig."
          ]
        }
      ],
      "error": 309,
      "index": 14
    },
    {
      "name": "Proxy",
      "storage": {
        "prefix": "Proxy",
        "entries": [
          {
            "name": "Proxies",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "twox64Concat"
                  }
                ],
                "key": 0,
                "value": 310
              }
            },
            "default": "0x0000000000000000000000000000000000",
            "docs": [
              " The set of account proxies. Maps the account which has delegated to the accounts",
              " which are being delegated to, together with the amount held on deposit."
            ]
          },
          {
            "name": "Announcements",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "twox64Concat"
                  }
                ],
                "key": 0,
                "value": 314
              }
            },
            "default": "0x0000000000000000000000000000000000",
            "docs": [
              " The announcements made by the proxy (key)."
            ]
          }
        ]
      },
      "calls": 210,
      "event": 36,
      "constants": [
        {
          "name": "ProxyDepositBase",
          "typeId": 6,
          "value": "0x000050d6eefaff8a0000000000000000",
          "docs": [
            " The base amount of currency needed to reserve for creating a proxy.",
            "",
            " This is held for an additional storage item whose value size is",
            " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."
          ]
        },
        {
          "name": "ProxyDepositFactor",
          "typeId": 6,
          "value": "0x00002d7ba67aea000000000000000000",
          "docs": [
            " The amount of currency needed per proxy added.",
            "",
            " This is held for adding 32 bytes plus an instance of `ProxyType` more into a",
            " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take",
            " into account `32 + proxy_type.encode().len()` bytes of data."
          ]
        },
        {
          "name": "MaxProxies",
          "typeId": 4,
          "value": "0x20000000",
          "docs": [
            " The maximum amount of proxies allowed for a single account."
          ]
        },
        {
          "name": "MaxPending",
          "typeId": 4,
          "value": "0x20000000",
          "docs": [
            " The maximum amount of time-delayed announcements that are allowed to be pending."
          ]
        },
        {
          "name": "AnnouncementDepositBase",
          "typeId": 6,
          "value": "0x000050d6eefaff8a0000000000000000",
          "docs": [
            " The base amount of currency needed to reserve for creating an announcement.",
            "",
            " This is held when a new storage item holding a `Balance` is created (typically 16",
            " bytes)."
          ]
        },
        {
          "name": "AnnouncementDepositFactor",
          "typeId": 6,
          "value": "0x00005af64cf5d4010000000000000000",
          "docs": [
            " The amount of currency needed per announcement made.",
            "",
            " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)",
            " into a pre-existing storage value."
          ]
        }
      ],
      "error": 318,
      "index": 15
    },
    {
      "name": "ParachainSystem",
      "storage": {
        "prefix": "ParachainSystem",
        "entries": [
          {
            "name": "PendingValidationCode",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 13
              }
            },
            "default": "0x00",
            "docs": [
              " In case of a scheduled upgrade, this storage field contains the validation code to be applied.",
              "",
              " As soon as the relay chain gives us the go-ahead signal, we will overwrite the [`:code`][well_known_keys::CODE]",
              " which will result the next block process with the new validation code. This concludes the upgrade process.",
              "",
              " [well_known_keys::CODE]: sp_core::storage::well_known_keys::CODE"
            ]
          },
          {
            "name": "NewValidationCode",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 13
              }
            },
            "default": "0x00",
            "docs": [
              " Validation code that is set by the parachain and is to be communicated to collator and",
              " consequently the relay-chain.",
              "",
              " This will be cleared in `on_initialize` of each new block if no other pallet already set",
              " the value."
            ]
          },
          {
            "name": "ValidationData",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 214
              }
            },
            "default": "0x00",
            "docs": [
              " The [`PersistedValidationData`] set for this block.",
              " This value is expected to be set only once per block and it's never stored",
              " in the trie."
            ]
          },
          {
            "name": "DidSetValidationCode",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 49
              }
            },
            "default": "0x00",
            "docs": [
              " Were the validation data set to notify the relay chain?"
            ]
          },
          {
            "name": "LastRelayChainBlockNumber",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 4
              }
            },
            "default": "0x00000000",
            "docs": [
              " The relay chain block number associated with the last parachain block."
            ]
          },
          {
            "name": "UpgradeRestrictionSignal",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 319
              }
            },
            "default": "0x00",
            "docs": [
              " An option which indicates if the relay-chain restricts signalling a validation code upgrade.",
              " In other words, if this is `Some` and [`NewValidationCode`] is `Some` then the produced",
              " candidate will be invalid.",
              "",
              " This storage item is a mirror of the corresponding value for the current parachain from the",
              " relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is",
              " set after the inherent."
            ]
          },
          {
            "name": "RelayStateProof",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 216
              }
            },
            "default": "0x00",
            "docs": [
              " The state proof for the last relay parent block.",
              "",
              " This field is meant to be updated each block with the validation data inherent. Therefore,",
              " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
              "",
              " This data is also absent from the genesis."
            ]
          },
          {
            "name": "RelevantMessagingState",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 321
              }
            },
            "default": "0x00",
            "docs": [
              " The snapshot of some state related to messaging relevant to the current parachain as per",
              " the relay parent.",
              "",
              " This field is meant to be updated each block with the validation data inherent. Therefore,",
              " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
              "",
              " This data is also absent from the genesis."
            ]
          },
          {
            "name": "HostConfiguration",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 327
              }
            },
            "default": "0x00",
            "docs": [
              " The parachain host configuration that was obtained from the relay parent.",
              "",
              " This field is meant to be updated each block with the validation data inherent. Therefore,",
              " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
              "",
              " This data is also absent from the genesis."
            ]
          },
          {
            "name": "LastDmqMqcHead",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 328
              }
            },
            "default": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "docs": [
              " The last downward message queue chain head we have observed.",
              "",
              " This value is loaded before and saved after processing inbound downward messages carried",
              " by the system inherent."
            ]
          },
          {
            "name": "LastHrmpMqcHeads",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 329
              }
            },
            "default": "0x00",
            "docs": [
              " The message queue chain heads we have observed per each channel incoming channel.",
              "",
              " This value is loaded before and saved after processing inbound downward messages carried",
              " by the system inherent."
            ]
          },
          {
            "name": "ProcessedDownwardMessages",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 4
              }
            },
            "default": "0x00000000",
            "docs": [
              " Number of downward messages processed in a block.",
              "",
              " This will be cleared in `on_initialize` of each new block."
            ]
          },
          {
            "name": "HrmpWatermark",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 4
              }
            },
            "default": "0x00000000",
            "docs": [
              " HRMP watermark that was set in a block.",
              "",
              " This will be cleared in `on_initialize` of each new block."
            ]
          },
          {
            "name": "HrmpOutboundMessages",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 332
              }
            },
            "default": "0x00",
            "docs": [
              " HRMP messages that were sent in a block.",
              "",
              " This will be cleared in `on_initialize` of each new block."
            ]
          },
          {
            "name": "UpwardMessages",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 149
              }
            },
            "default": "0x00",
            "docs": [
              " Upward messages that were sent in a block.",
              "",
              " This will be cleared in `on_initialize` of each new block."
            ]
          },
          {
            "name": "PendingUpwardMessages",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 149
              }
            },
            "default": "0x00",
            "docs": [
              " Upward messages that are still pending and not yet send to the relay chain."
            ]
          },
          {
            "name": "AnnouncedHrmpMessagesPerCandidate",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 4
              }
            },
            "default": "0x00000000",
            "docs": [
              " The number of HRMP messages we observed in `on_initialize` and thus used that number for",
              " announcing the weight of `on_initialize` and `on_finalize`."
            ]
          },
          {
            "name": "ReservedXcmpWeightOverride",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 9
              }
            },
            "default": "0x00",
            "docs": [
              " The weight we reserve at the beginning of the block for processing XCMP messages. This",
              " overrides the amount set in the Config trait."
            ]
          },
          {
            "name": "ReservedDmpWeightOverride",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 9
              }
            },
            "default": "0x00",
            "docs": [
              " The weight we reserve at the beginning of the block for processing DMP messages. This",
              " overrides the amount set in the Config trait."
            ]
          },
          {
            "name": "AuthorizedUpgrade",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 334
              }
            },
            "default": "0x00",
            "docs": [
              " The next authorized upgrade, if there is one."
            ]
          },
          {
            "name": "CustomValidationHeadData",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 13
              }
            },
            "default": "0x00",
            "docs": [
              " A custom head data that should be returned as result of `validate_block`.",
              "",
              " See [`Pallet::set_custom_validation_head_data`] for more information."
            ]
          }
        ]
      },
      "calls": 212,
      "event": 39,
      "constants": [],
      "error": 335,
      "index": 20
    },
    {
      "name": "ParachainInfo",
      "storage": {
        "prefix": "ParachainInfo",
        "entries": [
          {
            "name": "ParachainId",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 61
              }
            },
            "default": "0x64000000",
            "docs": []
          }
        ]
      },
      "calls": 225,
      "constants": [],
      "index": 21
    },
    {
      "name": "TransactionPayment",
      "storage": {
        "prefix": "TransactionPayment",
        "entries": [
          {
            "name": "NextFeeMultiplier",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 336
              }
            },
            "default": "0x000064a7b3b6e00d0000000000000000",
            "docs": []
          },
          {
            "name": "StorageVersion",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 337
              }
            },
            "default": "0x00",
            "docs": []
          }
        ]
      },
      "event": 41,
      "constants": [
        {
          "name": "OperationalFeeMultiplier",
          "typeId": 2,
          "value": "0x05",
          "docs": [
            " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
            " `priority`",
            "",
            " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later",
            " added to a tip component in regular `priority` calculations.",
            " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
            " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
            "",
            " ```rust,ignore",
            " // For `Normal`",
            " let priority = priority_calc(tip);",
            "",
            " // For `Operational`",
            " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
            " let priority = priority_calc(tip + virtual_tip);",
            " ```",
            "",
            " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
            " sent with the transaction. So, not only does the transaction get a priority bump based",
            " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
            " transactions."
          ]
        }
      ],
      "index": 30
    },
    {
      "name": "Balances",
      "storage": {
        "prefix": "Balances",
        "entries": [
          {
            "name": "TotalIssuance",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 6
              }
            },
            "default": "0x00000000000000000000000000000000",
            "docs": [
              " The total units issued in the system."
            ]
          },
          {
            "name": "InactiveIssuance",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 6
              }
            },
            "default": "0x00000000000000000000000000000000",
            "docs": [
              " The total units of outstanding deactivated balance in the system."
            ]
          },
          {
            "name": "Account",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "blake2_128Concat"
                  }
                ],
                "key": 0,
                "value": 5
              }
            },
            "default": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080",
            "docs": [
              " The Balances pallet example of storing the balance of an account.",
              "",
              " # Example",
              "",
              " ```nocompile",
              "  impl pallet_balances::Config for Runtime {",
              "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>",
              "  }",
              " ```",
              "",
              " You can also store the balance of an account in the `System` pallet.",
              "",
              " # Example",
              "",
              " ```nocompile",
              "  impl pallet_balances::Config for Runtime {",
              "   type AccountStore = System",
              "  }",
              " ```",
              "",
              " But this comes with tradeoffs, storing account balances in the system pallet stores",
              " `frame_system` data alongside the account data contrary to storing account balances in the",
              " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
              " NOTE: This is only used in the case that this pallet is used to store balances."
            ]
          },
          {
            "name": "Locks",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "blake2_128Concat"
                  }
                ],
                "key": 0,
                "value": 338
              }
            },
            "default": "0x00",
            "docs": [
              " Any liquidity locks on some account balances.",
              " NOTE: Should only be accessed when setting, changing and freeing a lock."
            ]
          },
          {
            "name": "Reserves",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "blake2_128Concat"
                  }
                ],
                "key": 0,
                "value": 342
              }
            },
            "default": "0x00",
            "docs": [
              " Named reserves on some account balances."
            ]
          },
          {
            "name": "Holds",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "blake2_128Concat"
                  }
                ],
                "key": 0,
                "value": 345
              }
            },
            "default": "0x00",
            "docs": [
              " Holds on account balances."
            ]
          },
          {
            "name": "Freezes",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "blake2_128Concat"
                  }
                ],
                "key": 0,
                "value": 345
              }
            },
            "default": "0x00",
            "docs": [
              " Freeze locks on account balances."
            ]
          }
        ]
      },
      "calls": 226,
      "event": 42,
      "constants": [
        {
          "name": "ExistentialDeposit",
          "typeId": 6,
          "value": "0x40420f00000000000000000000000000",
          "docs": [
            " The minimum amount required to keep an account open. MUST BE GREATER THAN ZERO!",
            "",
            " If you *really* need it to be zero, you can enable the feature `insecure_zero_ed` for",
            " this pallet. However, you do so at your own risk: this will open up a major DoS vector.",
            " In case you have multiple sources of provider references, you may also get unexpected",
            " behaviour if you set this to zero.",
            "",
            " Bottom line: Do yourself a favour and make it at least one!"
          ]
        },
        {
          "name": "MaxLocks",
          "typeId": 4,
          "value": "0x32000000",
          "docs": [
            " The maximum number of locks that should exist on an account.",
            " Not strictly enforced, but used for weight estimation."
          ]
        },
        {
          "name": "MaxReserves",
          "typeId": 4,
          "value": "0x32000000",
          "docs": [
            " The maximum number of named reserves that can exist on an account."
          ]
        },
        {
          "name": "MaxHolds",
          "typeId": 4,
          "value": "0x00000000",
          "docs": [
            " The maximum number of holds that can exist on an account at any time."
          ]
        },
        {
          "name": "MaxFreezes",
          "typeId": 4,
          "value": "0x00000000",
          "docs": [
            " The maximum number of individual freeze locks that can exist on an account at any time."
          ]
        }
      ],
      "error": 348,
      "index": 31
    },
    {
      "name": "Vesting",
      "storage": {
        "prefix": "Vesting",
        "entries": [
          {
            "name": "Vesting",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "blake2_128Concat"
                  }
                ],
                "key": 0,
                "value": 349
              }
            },
            "default": "0x00",
            "docs": [
              " Information regarding the vesting of a given account."
            ]
          },
          {
            "name": "StorageVersion",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 351
              }
            },
            "default": "0x00",
            "docs": [
              " Storage version of the pallet.",
              "",
              " New networks start with latest version, as determined by the genesis build."
            ]
          }
        ]
      },
      "calls": 227,
      "event": 44,
      "constants": [
        {
          "name": "MinVestedTransfer",
          "typeId": 6,
          "value": "0x000010632d5ec76b0500000000000000",
          "docs": [
            " The minimum amount transferred to call `vested_transfer`."
          ]
        },
        {
          "name": "MaxVestingSchedules",
          "typeId": 4,
          "value": "0x1c000000",
          "docs": []
        }
      ],
      "error": 352,
      "index": 32
    },
    {
      "name": "DappsStaking",
      "storage": {
        "prefix": "DappsStaking",
        "entries": [
          {
            "name": "PalletDisabled",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 49
              }
            },
            "default": "0x00",
            "docs": [
              " Denotes whether pallet is disabled (in maintenance mode) or not"
            ]
          },
          {
            "name": "Ledger",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "blake2_128Concat"
                  }
                ],
                "key": 0,
                "value": 353
              }
            },
            "default": "0x000000",
            "docs": [
              " General information about the staker (non-smart-contract specific)."
            ]
          },
          {
            "name": "CurrentEra",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 4
              }
            },
            "default": "0x00000000",
            "docs": [
              " The current era index."
            ]
          },
          {
            "name": "BlockRewardAccumulator",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 357
              }
            },
            "default": "0x0000",
            "docs": [
              " Accumulator for block rewards during an era. It is reset at every new era"
            ]
          },
          {
            "name": "ForceEra",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 358
              }
            },
            "default": "0x00",
            "docs": [
              " Mode of era forcing."
            ]
          },
          {
            "name": "NextEraStartingBlock",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 4
              }
            },
            "default": "0x00000000",
            "docs": [
              " Stores the block number of when the next era starts"
            ]
          },
          {
            "name": "RegisteredDevelopers",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "blake2_128Concat"
                  }
                ],
                "key": 0,
                "value": 46
              }
            },
            "default": "0x00",
            "docs": [
              " Simple map where developer account points to their smart contract"
            ]
          },
          {
            "name": "RegisteredDapps",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "blake2_128Concat"
                  }
                ],
                "key": 46,
                "value": 359
              }
            },
            "default": "0x00",
            "docs": [
              " Simple map where smart contract points to basic info about it (e.g. developer address, state)"
            ]
          },
          {
            "name": "GeneralEraInfo",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "twox64Concat"
                  }
                ],
                "key": 4,
                "value": 361
              }
            },
            "default": "0x00",
            "docs": [
              " General information about an era like TVL, total staked value, rewards."
            ]
          },
          {
            "name": "ContractEraStake",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "blake2_128Concat"
                  },
                  {
                    "tag": "twox64Concat"
                  }
                ],
                "key": 362,
                "value": 230
              }
            },
            "default": "0x00",
            "docs": [
              " Staking information about contract in a particular era."
            ]
          },
          {
            "name": "GeneralStakerInfo",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "blake2_128Concat"
                  },
                  {
                    "tag": "blake2_128Concat"
                  }
                ],
                "key": 363,
                "value": 364
              }
            },
            "default": "0x00",
            "docs": [
              " Info about stakers stakes on particular contracts."
            ]
          },
          {
            "name": "StorageVersion",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 367
              }
            },
            "default": "0x03",
            "docs": [
              " Stores the current pallet storage version."
            ]
          }
        ]
      },
      "calls": 229,
      "event": 45,
      "constants": [
        {
          "name": "BlockPerEra",
          "typeId": 4,
          "value": "0x201c0000",
          "docs": [
            " Number of blocks per era."
          ]
        },
        {
          "name": "RegisterDeposit",
          "typeId": 6,
          "value": "0x0000a0dec5adc9353600000000000000",
          "docs": [
            " Deposit that will be reserved as part of new contract registration."
          ]
        },
        {
          "name": "MaxNumberOfStakersPerContract",
          "typeId": 4,
          "value": "0x00400000",
          "docs": [
            " Maximum number of unique stakers per contract."
          ]
        },
        {
          "name": "MinimumStakingAmount",
          "typeId": 6,
          "value": "0x000050efe2d6e41a1b00000000000000",
          "docs": [
            " Minimum amount user must have staked on contract.",
            " User can stake less if they already have the minimum staking amount staked on that particular contract."
          ]
        },
        {
          "name": "PalletId",
          "typeId": 368,
          "value": "0x70792f6470737374",
          "docs": [
            " Dapps staking pallet Id"
          ]
        },
        {
          "name": "MinimumRemainingAmount",
          "typeId": 6,
          "value": "0x000064a7b3b6e00d0000000000000000",
          "docs": [
            " Minimum amount that should be left on staker account after staking.",
            " Serves as a safeguard to prevent users from locking their entire free balance."
          ]
        },
        {
          "name": "MaxUnlockingChunks",
          "typeId": 4,
          "value": "0x04000000",
          "docs": [
            " Max number of unlocking chunks per account Id <-> contract Id pairing.",
            " If value is zero, unlocking becomes impossible."
          ]
        },
        {
          "name": "UnbondingPeriod",
          "typeId": 4,
          "value": "0x0a000000",
          "docs": [
            " Number of eras that need to pass until unstaked value can be withdrawn.",
            " Current era is always counted as full era (regardless how much blocks are remaining).",
            " When set to `0`, it's equal to having no unbonding period."
          ]
        },
        {
          "name": "MaxEraStakeValues",
          "typeId": 4,
          "value": "0x05000000",
          "docs": [
            " Max number of unique `EraStake` values that can exist for a `(staker, contract)` pairing.",
            " When stakers claims rewards, they will either keep the number of `EraStake` values the same or they will reduce them by one.",
            " Stakers cannot add an additional `EraStake` value by calling `bond&stake` or `unbond&unstake` if they've reached the max number of values.",
            "",
            " This ensures that history doesn't grow indefinitely - if there are too many chunks, stakers should first claim their former rewards",
            " before adding additional `EraStake` values."
          ]
        },
        {
          "name": "UnregisteredDappRewardRetention",
          "typeId": 4,
          "value": "0xffffffff",
          "docs": [
            " Number of eras that need to pass until dApp rewards for the unregistered contracts can be burned.",
            " Developer can still claim rewards after this period has passed, iff it hasn't been burned yet.",
            "",
            " For example, if retention is set to `2` and current era is `10`, it means that all unclaimed rewards bellow era `8` can be burned."
          ]
        }
      ],
      "error": 369,
      "index": 34
    },
    {
      "name": "BlockReward",
      "storage": {
        "prefix": "BlockReward",
        "entries": [
          {
            "name": "RewardDistributionConfigStorage",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 52
              }
            },
            "default": "0x02105e5f02ca9a3b02ca9a3b0284d7170000",
            "docs": []
          }
        ]
      },
      "calls": 231,
      "event": 51,
      "constants": [
        {
          "name": "RewardAmount",
          "typeId": 6,
          "value": "0x0000dceb1fc730b80d00000000000000",
          "docs": [
            " The amount of issuance for each block."
          ]
        }
      ],
      "error": 370,
      "index": 35
    },
    {
      "name": "Assets",
      "storage": {
        "prefix": "Assets",
        "entries": [
          {
            "name": "Asset",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "blake2_128Concat"
                  }
                ],
                "key": 6,
                "value": 371
              }
            },
            "default": "0x00",
            "docs": [
              " Details of an asset."
            ]
          },
          {
            "name": "Account",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "blake2_128Concat"
                  },
                  {
                    "tag": "blake2_128Concat"
                  }
                ],
                "key": 373,
                "value": 374
              }
            },
            "default": "0x00",
            "docs": [
              " The holdings of a specific account for a specific asset."
            ]
          },
          {
            "name": "Approvals",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "blake2_128Concat"
                  },
                  {
                    "tag": "blake2_128Concat"
                  },
                  {
                    "tag": "blake2_128Concat"
                  }
                ],
                "key": 377,
                "value": 378
              }
            },
            "default": "0x00",
            "docs": [
              " Approved balance transfers. First balance is the amount approved for transfer. Second",
              " is the amount of `T::Currency` reserved for storing this.",
              " First key is the asset ID, second key is the owner and third key is the delegate."
            ]
          },
          {
            "name": "Metadata",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "blake2_128Concat"
                  }
                ],
                "key": 6,
                "value": 379
              }
            },
            "default": "0x0000000000000000000000000000000000000000",
            "docs": [
              " Metadata of an asset."
            ]
          }
        ]
      },
      "calls": 232,
      "event": 55,
      "constants": [
        {
          "name": "RemoveItemsLimit",
          "typeId": 4,
          "value": "0xe8030000",
          "docs": [
            " Max number of items to destroy per `destroy_accounts` and `destroy_approvals` call.",
            "",
            " Must be configured to result in a weight that makes each call fit in a block."
          ]
        },
        {
          "name": "AssetDeposit",
          "typeId": 6,
          "value": "0x0000a0dec5adc9353600000000000000",
          "docs": [
            " The basic amount of funds that must be reserved for an asset."
          ]
        },
        {
          "name": "AssetAccountDeposit",
          "typeId": 6,
          "value": "0x0000d2b5d308478b0000000000000000",
          "docs": [
            " The amount of funds that must be reserved for a non-provider asset account to be",
            " maintained."
          ]
        },
        {
          "name": "MetadataDepositBase",
          "typeId": 6,
          "value": "0x00005c134c4eaa8c0000000000000000",
          "docs": [
            " The basic amount of funds that must be reserved when adding metadata to your asset."
          ]
        },
        {
          "name": "MetadataDepositPerByte",
          "typeId": 6,
          "value": "0x00008d49fd1a07000000000000000000",
          "docs": [
            " The additional funds that must be reserved for the number of bytes you store in your",
            " metadata."
          ]
        },
        {
          "name": "ApprovalDeposit",
          "typeId": 6,
          "value": "0x40420f00000000000000000000000000",
          "docs": [
            " The amount of funds that must be reserved when creating a new approval."
          ]
        },
        {
          "name": "StringLimit",
          "typeId": 4,
          "value": "0x32000000",
          "docs": [
            " The maximum length of a name or symbol stored on-chain."
          ]
        }
      ],
      "error": 381,
      "index": 36
    },
    {
      "name": "Authorship",
      "storage": {
        "prefix": "Authorship",
        "entries": [
          {
            "name": "Author",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 0
              }
            },
            "default": "0x00",
            "docs": [
              " Author of current block."
            ]
          }
        ]
      },
      "constants": [],
      "index": 40
    },
    {
      "name": "CollatorSelection",
      "storage": {
        "prefix": "CollatorSelection",
        "entries": [
          {
            "name": "Invulnerables",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 57
              }
            },
            "default": "0x00",
            "docs": [
              " The invulnerable, fixed collators."
            ]
          },
          {
            "name": "Candidates",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 382
              }
            },
            "default": "0x00",
            "docs": [
              " The (community, limited) collation candidates."
            ]
          },
          {
            "name": "LastAuthoredBlock",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "twox64Concat"
                  }
                ],
                "key": 0,
                "value": 4
              }
            },
            "default": "0x00000000",
            "docs": [
              " Last block authored by collator."
            ]
          },
          {
            "name": "DesiredCandidates",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 4
              }
            },
            "default": "0x00000000",
            "docs": [
              " Desired number of candidates.",
              "",
              " This should ideally always be less than [`Config::MaxCandidates`] for weights to be correct."
            ]
          },
          {
            "name": "CandidacyBond",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 6
              }
            },
            "default": "0x00000000000000000000000000000000",
            "docs": [
              " Fixed amount to deposit to become a collator.",
              "",
              " When a collator calls `leave_intent` they immediately receive the deposit back."
            ]
          },
          {
            "name": "SlashDestination",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 0
              }
            },
            "default": "0x00",
            "docs": [
              " Destination account for slashed amount."
            ]
          }
        ]
      },
      "calls": 233,
      "event": 56,
      "constants": [],
      "error": 384,
      "index": 41
    },
    {
      "name": "Session",
      "storage": {
        "prefix": "Session",
        "entries": [
          {
            "name": "Validators",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 57
              }
            },
            "default": "0x00",
            "docs": [
              " The current set of validators."
            ]
          },
          {
            "name": "CurrentIndex",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 4
              }
            },
            "default": "0x00000000",
            "docs": [
              " Current index of the session."
            ]
          },
          {
            "name": "QueuedChanged",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 49
              }
            },
            "default": "0x00",
            "docs": [
              " True if the underlying economic identities or weighting behind the validators",
              " has changed in the queued validator set."
            ]
          },
          {
            "name": "QueuedKeys",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 385
              }
            },
            "default": "0x00",
            "docs": [
              " The queued keys for the next session. When the next session begins, these keys",
              " will be used to determine the validator's session keys."
            ]
          },
          {
            "name": "DisabledValidators",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 387
              }
            },
            "default": "0x00",
            "docs": [
              " Indices of disabled validators.",
              "",
              " The vec is always kept sorted so that we can find whether a given validator is",
              " disabled using binary search. It gets cleared when `on_session_ending` returns",
              " a new set of identities."
            ]
          },
          {
            "name": "NextKeys",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "twox64Concat"
                  }
                ],
                "key": 0,
                "value": 235
              }
            },
            "default": "0x00",
            "docs": [
              " The next session keys for a validator."
            ]
          },
          {
            "name": "KeyOwner",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "twox64Concat"
                  }
                ],
                "key": 388,
                "value": 0
              }
            },
            "default": "0x00",
            "docs": [
              " The owner of a key. The key is the `KeyTypeId` + the encoded key."
            ]
          }
        ]
      },
      "calls": 234,
      "event": 58,
      "constants": [],
      "error": 390,
      "index": 42
    },
    {
      "name": "Aura",
      "storage": {
        "prefix": "Aura",
        "entries": [
          {
            "name": "Authorities",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 391
              }
            },
            "default": "0x00",
            "docs": [
              " The current authority set."
            ]
          },
          {
            "name": "CurrentSlot",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 393
              }
            },
            "default": "0x0000000000000000",
            "docs": [
              " The current slot of this block.",
              "",
              " This will be set in `on_initialize`."
            ]
          }
        ]
      },
      "constants": [],
      "index": 43
    },
    {
      "name": "AuraExt",
      "storage": {
        "prefix": "AuraExt",
        "entries": [
          {
            "name": "Authorities",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 391
              }
            },
            "default": "0x00",
            "docs": [
              " Serves as cache for the authorities.",
              "",
              " The authorities in AuRa are overwritten in `on_initialize` when we switch to a new session,",
              " but we require the old authorities to verify the seal when validating a PoV. This will always",
              " be updated to the latest AuRa authorities in `on_finalize`."
            ]
          }
        ]
      },
      "constants": [],
      "index": 44
    },
    {
      "name": "XcmpQueue",
      "storage": {
        "prefix": "XcmpQueue",
        "entries": [
          {
            "name": "InboundXcmpStatus",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 394
              }
            },
            "default": "0x00",
            "docs": [
              " Status of the inbound XCMP channels."
            ]
          },
          {
            "name": "InboundXcmpMessages",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "blake2_128Concat"
                  },
                  {
                    "tag": "twox64Concat"
                  }
                ],
                "key": 400,
                "value": 13
              }
            },
            "default": "0x00",
            "docs": [
              " Inbound aggregate XCMP messages. It can only be one per ParaId/block."
            ]
          },
          {
            "name": "OutboundXcmpStatus",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 401
              }
            },
            "default": "0x00",
            "docs": [
              " The non-empty XCMP channels in order of becoming non-empty, and the index of the first",
              " and last outbound message. If the two indices are equal, then it indicates an empty",
              " queue and there must be a non-`Ok` `OutboundStatus`. We assume queues grow no greater",
              " than 65535 items. Queue indices for normal messages begin at one; zero is reserved in",
              " case of the need to send a high-priority signal message this block.",
              " The bool is true if there is a signal message waiting to be sent."
            ]
          },
          {
            "name": "OutboundXcmpMessages",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "blake2_128Concat"
                  },
                  {
                    "tag": "twox64Concat"
                  }
                ],
                "key": 404,
                "value": 13
              }
            },
            "default": "0x00",
            "docs": [
              " The messages outbound in a given XCMP channel."
            ]
          },
          {
            "name": "SignalMessages",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "blake2_128Concat"
                  }
                ],
                "key": 61,
                "value": 13
              }
            },
            "default": "0x00",
            "docs": [
              " Any signal messages waiting to be sent."
            ]
          },
          {
            "name": "QueueConfig",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 405
              }
            },
            "default": "0x020000000500000001000000821a06000008000700c817a80402000400",
            "docs": [
              " The configuration which controls the dynamics of the outbound queue."
            ]
          },
          {
            "name": "Overweight",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "twox64Concat"
                  }
                ],
                "key": 11,
                "value": 406
              }
            },
            "default": "0x00",
            "docs": [
              " The messages that exceeded max individual message weight budget.",
              "",
              " These message stay in this storage map until they are manually dispatched via",
              " `service_overweight`."
            ]
          },
          {
            "name": "CounterForOverweight",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 4
              }
            },
            "default": "0x00000000",
            "docs": [
              "Counter for the related counted storage map"
            ]
          },
          {
            "name": "OverweightCount",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 11
              }
            },
            "default": "0x0000000000000000",
            "docs": [
              " The number of overweight messages ever recorded in `Overweight`. Also doubles as the next",
              " available free overweight index."
            ]
          },
          {
            "name": "QueueSuspended",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 49
              }
            },
            "default": "0x00",
            "docs": [
              " Whether or not the XCMP queue is suspended from executing incoming XCMs or not."
            ]
          }
        ]
      },
      "calls": 238,
      "event": 59,
      "constants": [],
      "error": 407,
      "index": 50
    },
    {
      "name": "PolkadotXcm",
      "storage": {
        "prefix": "PolkadotXcm",
        "entries": [
          {
            "name": "QueryCounter",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 11
              }
            },
            "default": "0x0000000000000000",
            "docs": [
              " The latest available query index."
            ]
          },
          {
            "name": "Queries",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "blake2_128Concat"
                  }
                ],
                "key": 11,
                "value": 408
              }
            },
            "default": "0x00",
            "docs": [
              " The ongoing queries."
            ]
          },
          {
            "name": "AssetTraps",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "identity"
                  }
                ],
                "key": 12,
                "value": 4
              }
            },
            "default": "0x00000000",
            "docs": [
              " The existing asset traps.",
              "",
              " Key is the blake2 256 hash of (origin, versioned `MultiAssets`) pair. Value is the number of",
              " times this pair has been trapped (usually just 1 if it exists at all)."
            ]
          },
          {
            "name": "SafeXcmVersion",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 4
              }
            },
            "default": "0x00",
            "docs": [
              " Default version to encode XCM when latest version of destination is unknown. If `None`,",
              " then the destinations whose XCM version is unknown are considered unreachable."
            ]
          },
          {
            "name": "SupportedVersion",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "twox64Concat"
                  },
                  {
                    "tag": "blake2_128Concat"
                  }
                ],
                "key": 413,
                "value": 4
              }
            },
            "default": "0x00",
            "docs": [
              " The Latest versions that we know various locations support."
            ]
          },
          {
            "name": "VersionNotifiers",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "twox64Concat"
                  },
                  {
                    "tag": "blake2_128Concat"
                  }
                ],
                "key": 413,
                "value": 11
              }
            },
            "default": "0x00",
            "docs": [
              " All locations that we have requested version notifications from."
            ]
          },
          {
            "name": "VersionNotifyTargets",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "twox64Concat"
                  },
                  {
                    "tag": "blake2_128Concat"
                  }
                ],
                "key": 413,
                "value": 414
              }
            },
            "default": "0x00",
            "docs": [
              " The target locations that are subscribed to our version changes, as well as the most recent",
              " of our versions we informed them of."
            ]
          },
          {
            "name": "VersionDiscoveryQueue",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 415
              }
            },
            "default": "0x00",
            "docs": [
              " Destinations whose latest XCM version we would like to know. Duplicates not allowed, and",
              " the `u32` counter is the number of times that a send to the destination has been attempted,",
              " which is used as a prioritization."
            ]
          },
          {
            "name": "CurrentMigration",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 418
              }
            },
            "default": "0x00",
            "docs": [
              " The current migration's stage, if any."
            ]
          },
          {
            "name": "RemoteLockedFungibles",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "twox64Concat"
                  },
                  {
                    "tag": "blake2_128Concat"
                  },
                  {
                    "tag": "blake2_128Concat"
                  }
                ],
                "key": 420,
                "value": 422
              }
            },
            "default": "0x00",
            "docs": [
              " Fungible assets which we know are locked on a remote chain."
            ]
          },
          {
            "name": "LockedFungibles",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "blake2_128Concat"
                  }
                ],
                "key": 0,
                "value": 423
              }
            },
            "default": "0x00",
            "docs": [
              " Fungible assets which we know are locked on this chain."
            ]
          },
          {
            "name": "XcmExecutionSuspended",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 49
              }
            },
            "default": "0x00",
            "docs": [
              " Global suspension state of the XCM executor."
            ]
          }
        ]
      },
      "calls": 239,
      "event": 62,
      "constants": [],
      "error": 426,
      "index": 51
    },
    {
      "name": "CumulusXcm",
      "calls": 261,
      "event": 116,
      "constants": [],
      "error": 427,
      "index": 52
    },
    {
      "name": "DmpQueue",
      "storage": {
        "prefix": "DmpQueue",
        "entries": [
          {
            "name": "Configuration",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 428
              }
            },
            "default": "0x0700e40b540202000400",
            "docs": [
              " The configuration."
            ]
          },
          {
            "name": "PageIndex",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 429
              }
            },
            "default": "0x00000000000000000000000000000000",
            "docs": [
              " The page index."
            ]
          },
          {
            "name": "Pages",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "blake2_128Concat"
                  }
                ],
                "key": 4,
                "value": 430
              }
            },
            "default": "0x00",
            "docs": [
              " The queue pages."
            ]
          },
          {
            "name": "Overweight",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "blake2_128Concat"
                  }
                ],
                "key": 11,
                "value": 431
              }
            },
            "default": "0x00",
            "docs": [
              " The overweight messages."
            ]
          },
          {
            "name": "CounterForOverweight",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 4
              }
            },
            "default": "0x00000000",
            "docs": [
              "Counter for the related counted storage map"
            ]
          }
        ]
      },
      "calls": 262,
      "event": 117,
      "constants": [],
      "error": 432,
      "index": 53
    },
    {
      "name": "XcAssetConfig",
      "storage": {
        "prefix": "XcAssetConfig",
        "entries": [
          {
            "name": "AssetIdToLocation",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "twox64Concat"
                  }
                ],
                "key": 6,
                "value": 115
              }
            },
            "default": "0x00",
            "docs": [
              " Mapping from an asset id to asset type.",
              " Can be used when receiving transaction specifying an asset directly,",
              " like transferring an asset from this chain to another."
            ]
          },
          {
            "name": "AssetLocationToId",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "twox64Concat"
                  }
                ],
                "key": 115,
                "value": 6
              }
            },
            "default": "0x00",
            "docs": [
              " Mapping from an asset type to an asset id.",
              " Can be used when receiving a multilocation XCM message to retrieve",
              " the corresponding asset in which tokens should me minted."
            ]
          },
          {
            "name": "AssetLocationUnitsPerSecond",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "twox64Concat"
                  }
                ],
                "key": 115,
                "value": 6
              }
            },
            "default": "0x00",
            "docs": [
              " Stores the units per second for local execution for a AssetLocation.",
              " This is used to know how to charge for XCM execution in a particular asset.",
              "",
              " Not all asset types are supported for payment. If value exists here, it means it is supported."
            ]
          }
        ]
      },
      "calls": 263,
      "event": 118,
      "constants": [],
      "error": 433,
      "index": 54
    },
    {
      "name": "Xtokens",
      "calls": 264,
      "event": 119,
      "constants": [
        {
          "name": "SelfLocation",
          "typeId": 64,
          "value": "0x0000",
          "docs": [
            " Self chain location."
          ]
        },
        {
          "name": "BaseXcmWeight",
          "typeId": 9,
          "value": "0x02286bee02000400",
          "docs": [
            " Base XCM weight.",
            "",
            " The actually weight for an XCM message is `T::BaseXcmWeight +",
            " T::Weigher::weight(&msg)`."
          ]
        }
      ],
      "error": 434,
      "index": 55
    },
    {
      "name": "EVM",
      "storage": {
        "prefix": "EVM",
        "entries": [
          {
            "name": "AccountCodes",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "blake2_128Concat"
                  }
                ],
                "key": 47,
                "value": 13
              }
            },
            "default": "0x00",
            "docs": []
          },
          {
            "name": "AccountCodesMetadata",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "blake2_128Concat"
                  }
                ],
                "key": 47,
                "value": 435
              }
            },
            "default": "0x00",
            "docs": []
          },
          {
            "name": "AccountStorages",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "blake2_128Concat"
                  },
                  {
                    "tag": "blake2_128Concat"
                  }
                ],
                "key": 436,
                "value": 12
              }
            },
            "default": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "docs": []
          }
        ]
      },
      "calls": 268,
      "event": 120,
      "constants": [],
      "error": 437,
      "index": 60
    },
    {
      "name": "Ethereum",
      "storage": {
        "prefix": "Ethereum",
        "entries": [
          {
            "name": "Pending",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 438
              }
            },
            "default": "0x00",
            "docs": [
              " Current building block's transactions and receipts."
            ]
          },
          {
            "name": "CurrentBlock",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 447
              }
            },
            "default": "0x00",
            "docs": [
              " The current Ethereum block."
            ]
          },
          {
            "name": "CurrentReceipts",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 452
              }
            },
            "default": "0x00",
            "docs": [
              " The current Ethereum receipts."
            ]
          },
          {
            "name": "CurrentTransactionStatuses",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 453
              }
            },
            "default": "0x00",
            "docs": [
              " The current transaction statuses."
            ]
          },
          {
            "name": "BlockHash",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "twox64Concat"
                  }
                ],
                "key": 134,
                "value": 12
              }
            },
            "default": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "docs": []
          }
        ]
      },
      "calls": 272,
      "event": 123,
      "constants": [],
      "error": 454,
      "index": 61
    },
    {
      "name": "EthCall",
      "calls": 282,
      "event": 132,
      "constants": [
        {
          "name": "CallFee",
          "typeId": 6,
          "value": "0x00008a5d784563010000000000000000",
          "docs": [
            " The call processing fee amount."
          ]
        },
        {
          "name": "CallMagicNumber",
          "typeId": 38,
          "value": "0x5002",
          "docs": [
            " The call magic number."
          ]
        }
      ],
      "error": 455,
      "index": 62
    },
    {
      "name": "BaseFee",
      "storage": {
        "prefix": "BaseFee",
        "entries": [
          {
            "name": "BaseFeePerGas",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 134
              }
            },
            "default": "0x00ca9a3b00000000000000000000000000000000000000000000000000000000",
            "docs": []
          },
          {
            "name": "Elasticity",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 136
              }
            },
            "default": "0x00000000",
            "docs": []
          }
        ]
      },
      "calls": 283,
      "event": 133,
      "constants": [],
      "index": 63
    },
    {
      "name": "Contracts",
      "storage": {
        "prefix": "Contracts",
        "entries": [
          {
            "name": "PristineCode",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "identity"
                  }
                ],
                "key": 12,
                "value": 456
              }
            },
            "default": "0x00",
            "docs": [
              " A mapping from an original code hash to the original code, untouched by instrumentation."
            ]
          },
          {
            "name": "CodeStorage",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "identity"
                  }
                ],
                "key": 12,
                "value": 457
              }
            },
            "default": "0x00",
            "docs": [
              " A mapping between an original code hash and instrumented wasm code, ready for execution."
            ]
          },
          {
            "name": "OwnerInfoOf",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "identity"
                  }
                ],
                "key": 12,
                "value": 459
              }
            },
            "default": "0x00",
            "docs": [
              " A mapping between an original code hash and its owner information."
            ]
          },
          {
            "name": "Nonce",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 11
              }
            },
            "default": "0x0000000000000000",
            "docs": [
              " This is a **monotonic** counter incremented on contract instantiation.",
              "",
              " This is used in order to generate unique trie ids for contracts.",
              " The trie id of a new contract is calculated from hash(account_id, nonce).",
              " The nonce is required because otherwise the following sequence would lead to",
              " a possible collision of storage:",
              "",
              " 1. Create a new contract.",
              " 2. Terminate the contract.",
              " 3. Immediately recreate the contract with the same account_id.",
              "",
              " This is bad because the contents of a trie are deleted lazily and there might be",
              " storage of the old instantiation still in it when the new contract is created. Please",
              " note that we can't replace the counter by the block number because the sequence above",
              " can happen in the same block. We also can't keep the account counter in memory only",
              " because storage is the only way to communicate across different extrinsics in the",
              " same block.",
              "",
              " # Note",
              "",
              " Do not use it to determine the number of contracts. It won't be decremented if",
              " a contract is destroyed."
            ]
          },
          {
            "name": "ContractInfoOf",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "twox64Concat"
                  }
                ],
                "key": 0,
                "value": 460
              }
            },
            "default": "0x00",
            "docs": [
              " The code associated with a given account.",
              "",
              " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
            ]
          },
          {
            "name": "DeletionQueue",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Map",
              "value": {
                "hashers": [
                  {
                    "tag": "twox64Concat"
                  }
                ],
                "key": 4,
                "value": 461
              }
            },
            "default": "0x00",
            "docs": [
              " Evicted contracts that await child trie deletion.",
              "",
              " Child trie deletion is a heavy operation depending on the amount of storage items",
              " stored in said trie. Therefore this operation is performed lazily in `on_idle`."
            ]
          },
          {
            "name": "DeletionQueueCounter",
            "modifier": {
              "tag": "Default"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 463
              }
            },
            "default": "0x0000000000000000",
            "docs": [
              " A pair of monotonic counters used to track the latest contract marked for deletion",
              " and the latest deleted contract in queue."
            ]
          },
          {
            "name": "MigrationInProgress",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 464
              }
            },
            "default": "0x00",
            "docs": []
          }
        ]
      },
      "calls": 284,
      "event": 137,
      "constants": [
        {
          "name": "Schedule",
          "typeId": 465,
          "value": "0x040000000001000000040000800000001000000000100000000100002000000000400000000000080400000000000000da0500005c0d0000cd0b00008d070000c918000053060000e10900007c13000000000000683a00004c4a000098040000fb0300004a080000c9030000f71a0000851c000020090000e44ac9001f0400001203000008030000a0020000d70300002f030000e4020000bf050000c2050000d8050000e60500002e05000058060000d605000039060000c5050000c80500006a05000000060000f5040000ed1c00000b1800009f1e00000e18000098040000e40400007b050000a105000066060000a7050000ed05000068050000a20b140018d234c1066d2a0af7f3067d2adede190018aa5a0a000cd6f008000c82ba1300188e2e210018f2555b00180e781300187e891300185634130018f6b61300180640550038ce2a080000a262100018510900622dcd00b4c902003a6b7afe95797685720028d241d6002872ea551e3127210a00de460e001c890b00ce93441f9504c5060000040a7fc5464930becd431f8504d50904caae1b078504f4049e942607a5044d0a042239481fa504fd050416f7672661274ea4716f012bb60362563128066d4844895061090016464dee5551ea90333929292d1200e114004647230020ad3d00a2e42c00206d300076ba190020490e007246190020490e00c694fe083501d6103f02a81e7b7a0bc101f148042ee509000cba0a1000a0b27e08000c",
          "docs": [
            " Cost schedule and limits."
          ]
        },
        {
          "name": "DepositPerByte",
          "typeId": 6,
          "value": "0x00008d49fd1a07000000000000000000",
          "docs": [
            " The amount of balance a caller has to pay for each byte of storage.",
            "",
            " # Note",
            "",
            " Changing this value for an existing chain might need a storage migration."
          ]
        },
        {
          "name": "DefaultDepositLimit",
          "typeId": 6,
          "value": "0x000080a27ab0901f0200000000000000",
          "docs": [
            " Fallback value to limit the storage deposit if it's not being set by the caller."
          ]
        },
        {
          "name": "DepositPerItem",
          "typeId": 6,
          "value": "0x00002876e1158d050000000000000000",
          "docs": [
            " The amount of balance a caller has to pay for each storage item.",
            "",
            " # Note",
            "",
            " Changing this value for an existing chain might need a storage migration."
          ]
        },
        {
          "name": "MaxCodeLen",
          "typeId": 4,
          "value": "0x00ec0100",
          "docs": [
            " The maximum length of a contract code in bytes. This limit applies to the instrumented",
            " version of the code. Therefore `instantiate_with_code` can fail even when supplying",
            " a wasm binary below this maximum size.",
            "",
            " The value should be chosen carefully taking into the account the overall memory limit",
            " your runtime has, as well as the [maximum allowed callstack",
            " depth](#associatedtype.CallStack). Look into the `integrity_test()` for some insights."
          ]
        },
        {
          "name": "MaxStorageKeyLen",
          "typeId": 4,
          "value": "0x80000000",
          "docs": [
            " The maximum allowable length in bytes for storage keys."
          ]
        },
        {
          "name": "UnsafeUnstableInterface",
          "typeId": 49,
          "value": "0x00",
          "docs": [
            " Make contract callable functions marked as `#[unstable]` available.",
            "",
            " Contracts that use `#[unstable]` functions won't be able to be uploaded unless",
            " this is set to `true`. This is only meant for testnets and dev nodes in order to",
            " experiment with new features.",
            "",
            " # Warning",
            "",
            " Do **not** set to `true` on productions chains."
          ]
        },
        {
          "name": "MaxDebugBufferLen",
          "typeId": 4,
          "value": "0x00002000",
          "docs": [
            " The maximum length of the debug buffer in bytes."
          ]
        }
      ],
      "error": 469,
      "index": 70
    },
    {
      "name": "Sudo",
      "storage": {
        "prefix": "Sudo",
        "entries": [
          {
            "name": "Key",
            "modifier": {
              "tag": "Optional"
            },
            "type": {
              "tag": "Plain",
              "value": {
                "value": 0
              }
            },
            "default": "0x00",
            "docs": [
              " The `AccountId` of the sudo key."
            ]
          }
        ]
      },
      "calls": 287,
      "event": 140,
      "constants": [],
      "error": 470,
      "index": 99
    }
  ],
  "extrinsic": {
    "typeId": 471,
    "version": 4,
    "signedExtensions": [
      {
        "ident": "CheckSpecVersion",
        "typeId": 479,
        "additionalSigned": 4
      },
      {
        "ident": "CheckTxVersion",
        "typeId": 480,
        "additionalSigned": 4
      },
      {
        "ident": "CheckGenesis",
        "typeId": 481,
        "additionalSigned": 12
      },
      {
        "ident": "CheckMortality",
        "typeId": 482,
        "additionalSigned": 12
      },
      {
        "ident": "CheckNonce",
        "typeId": 484,
        "additionalSigned": 32
      },
      {
        "ident": "CheckWeight",
        "typeId": 485,
        "additionalSigned": 32
      },
      {
        "ident": "ChargeTransactionPayment",
        "typeId": 486,
        "additionalSigned": 32
      }
    ]
  },
  "runtimeType": 139
}