{
  "magicNumber": 1635018093,
  "metadataVersioned": {
    "tag": "V14",
    "value": {
      "types": [
        {
          "id": 0,
          "path": [
            "sp_core",
            "crypto",
            "AccountId32"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 1,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 32,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 2,
          "path": [],
          "params": [],
          "type": {
            "tag": "Primitive",
            "value": {
              "kind": "u8"
            }
          },
          "docs": []
        },
        {
          "id": 3,
          "path": [
            "frame_system",
            "AccountInfo"
          ],
          "params": [
            {
              "name": "Index",
              "typeId": 4
            },
            {
              "name": "AccountData",
              "typeId": 5
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "nonce",
                  "typeId": 4,
                  "typeName": "Index",
                  "docs": []
                },
                {
                  "name": "consumers",
                  "typeId": 4,
                  "typeName": "RefCount",
                  "docs": []
                },
                {
                  "name": "providers",
                  "typeId": 4,
                  "typeName": "RefCount",
                  "docs": []
                },
                {
                  "name": "sufficients",
                  "typeId": 4,
                  "typeName": "RefCount",
                  "docs": []
                },
                {
                  "name": "data",
                  "typeId": 5,
                  "typeName": "AccountData",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 4,
          "path": [],
          "params": [],
          "type": {
            "tag": "Primitive",
            "value": {
              "kind": "u32"
            }
          },
          "docs": []
        },
        {
          "id": 5,
          "path": [
            "pallet_balances",
            "AccountData"
          ],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "free",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "reserved",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "misc_frozen",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "fee_frozen",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 6,
          "path": [],
          "params": [],
          "type": {
            "tag": "Primitive",
            "value": {
              "kind": "u128"
            }
          },
          "docs": []
        },
        {
          "id": 7,
          "path": [
            "frame_support",
            "dispatch",
            "PerDispatchClass"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 8
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "normal",
                  "typeId": 8,
                  "typeName": "T",
                  "docs": []
                },
                {
                  "name": "operational",
                  "typeId": 8,
                  "typeName": "T",
                  "docs": []
                },
                {
                  "name": "mandatory",
                  "typeId": 8,
                  "typeName": "T",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 8,
          "path": [
            "sp_weights",
            "weight_v2",
            "Weight"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "ref_time",
                  "typeId": 9,
                  "typeName": "u64",
                  "docs": []
                },
                {
                  "name": "proof_size",
                  "typeId": 9,
                  "typeName": "u64",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 9,
          "path": [],
          "params": [],
          "type": {
            "tag": "Compact",
            "value": {
              "typeParam": 10
            }
          },
          "docs": []
        },
        {
          "id": 10,
          "path": [],
          "params": [],
          "type": {
            "tag": "Primitive",
            "value": {
              "kind": "u64"
            }
          },
          "docs": []
        },
        {
          "id": 11,
          "path": [
            "primitive_types",
            "H256"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 12,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 13,
          "path": [
            "sp_runtime",
            "generic",
            "digest",
            "Digest"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "logs",
                  "typeId": 14,
                  "typeName": "Vec<DigestItem>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 14,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 15
            }
          },
          "docs": []
        },
        {
          "id": 15,
          "path": [
            "sp_runtime",
            "generic",
            "digest",
            "DigestItem"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "PreRuntime",
                  "fields": [
                    {
                      "typeId": 16,
                      "typeName": "ConsensusEngineId",
                      "docs": []
                    },
                    {
                      "typeId": 12,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "Consensus",
                  "fields": [
                    {
                      "typeId": 16,
                      "typeName": "ConsensusEngineId",
                      "docs": []
                    },
                    {
                      "typeId": 12,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Seal",
                  "fields": [
                    {
                      "typeId": 16,
                      "typeName": "ConsensusEngineId",
                      "docs": []
                    },
                    {
                      "typeId": 12,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Other",
                  "fields": [
                    {
                      "typeId": 12,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "RuntimeEnvironmentUpdated",
                  "fields": [],
                  "index": 8,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 16,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 4,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 17,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 18
            }
          },
          "docs": []
        },
        {
          "id": 18,
          "path": [
            "frame_system",
            "EventRecord"
          ],
          "params": [
            {
              "name": "E",
              "typeId": 19
            },
            {
              "name": "T",
              "typeId": 11
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "phase",
                  "typeId": 340,
                  "typeName": "Phase",
                  "docs": []
                },
                {
                  "name": "event",
                  "typeId": 19,
                  "typeName": "E",
                  "docs": []
                },
                {
                  "name": "topics",
                  "typeId": 341,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 19,
          "path": [
            "vara_runtime",
            "RuntimeEvent"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "System",
                  "fields": [
                    {
                      "typeId": 20,
                      "typeName": "frame_system::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Grandpa",
                  "fields": [
                    {
                      "typeId": 29,
                      "typeName": "pallet_grandpa::Event",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Balances",
                  "fields": [
                    {
                      "typeId": 34,
                      "typeName": "pallet_balances::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Vesting",
                  "fields": [
                    {
                      "typeId": 36,
                      "typeName": "pallet_vesting::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "TransactionPayment",
                  "fields": [
                    {
                      "typeId": 37,
                      "typeName": "pallet_transaction_payment::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "BagsList",
                  "fields": [
                    {
                      "typeId": 38,
                      "typeName": "pallet_bags_list::Event<Runtime, pallet_bags_list::Instance1>",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "ImOnline",
                  "fields": [
                    {
                      "typeId": 39,
                      "typeName": "pallet_im_online::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": []
                },
                {
                  "name": "Staking",
                  "fields": [
                    {
                      "typeId": 48,
                      "typeName": "pallet_staking::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": []
                },
                {
                  "name": "Session",
                  "fields": [
                    {
                      "typeId": 54,
                      "typeName": "pallet_session::Event",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "Treasury",
                  "fields": [
                    {
                      "typeId": 55,
                      "typeName": "pallet_treasury::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": []
                },
                {
                  "name": "Utility",
                  "fields": [
                    {
                      "typeId": 56,
                      "typeName": "pallet_utility::Event",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "ConvictionVoting",
                  "fields": [
                    {
                      "typeId": 59,
                      "typeName": "pallet_conviction_voting::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 16,
                  "docs": []
                },
                {
                  "name": "Referenda",
                  "fields": [
                    {
                      "typeId": 60,
                      "typeName": "pallet_referenda::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 17,
                  "docs": []
                },
                {
                  "name": "FellowshipCollective",
                  "fields": [
                    {
                      "typeId": 282,
                      "typeName": "pallet_ranked_collective::Event<Runtime, pallet_ranked_collective::\nInstance1>",
                      "docs": []
                    }
                  ],
                  "index": 18,
                  "docs": []
                },
                {
                  "name": "FellowshipReferenda",
                  "fields": [
                    {
                      "typeId": 285,
                      "typeName": "pallet_referenda::Event<Runtime, pallet_referenda::Instance2>",
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": []
                },
                {
                  "name": "Whitelist",
                  "fields": [
                    {
                      "typeId": 286,
                      "typeName": "pallet_whitelist::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": []
                },
                {
                  "name": "Scheduler",
                  "fields": [
                    {
                      "typeId": 291,
                      "typeName": "pallet_scheduler::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 22,
                  "docs": []
                },
                {
                  "name": "Preimage",
                  "fields": [
                    {
                      "typeId": 293,
                      "typeName": "pallet_preimage::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 23,
                  "docs": []
                },
                {
                  "name": "Identity",
                  "fields": [
                    {
                      "typeId": 294,
                      "typeName": "pallet_identity::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 24,
                  "docs": []
                },
                {
                  "name": "Proxy",
                  "fields": [
                    {
                      "typeId": 295,
                      "typeName": "pallet_proxy::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 25,
                  "docs": []
                },
                {
                  "name": "Multisig",
                  "fields": [
                    {
                      "typeId": 296,
                      "typeName": "pallet_multisig::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 26,
                  "docs": []
                },
                {
                  "name": "ElectionProviderMultiPhase",
                  "fields": [
                    {
                      "typeId": 297,
                      "typeName": "pallet_election_provider_multi_phase::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 27,
                  "docs": []
                },
                {
                  "name": "Offences",
                  "fields": [
                    {
                      "typeId": 302,
                      "typeName": "pallet_offences::Event",
                      "docs": []
                    }
                  ],
                  "index": 28,
                  "docs": []
                },
                {
                  "name": "Bounties",
                  "fields": [
                    {
                      "typeId": 303,
                      "typeName": "pallet_bounties::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 29,
                  "docs": []
                },
                {
                  "name": "ChildBounties",
                  "fields": [
                    {
                      "typeId": 304,
                      "typeName": "pallet_child_bounties::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 30,
                  "docs": []
                },
                {
                  "name": "NominationPools",
                  "fields": [
                    {
                      "typeId": 305,
                      "typeName": "pallet_nomination_pools::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 31,
                  "docs": []
                },
                {
                  "name": "Gear",
                  "fields": [
                    {
                      "typeId": 306,
                      "typeName": "pallet_gear::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 104,
                  "docs": []
                },
                {
                  "name": "StakingRewards",
                  "fields": [
                    {
                      "typeId": 338,
                      "typeName": "pallet_gear_staking_rewards::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 106,
                  "docs": []
                },
                {
                  "name": "GearVoucher",
                  "fields": [
                    {
                      "typeId": 339,
                      "typeName": "pallet_gear_voucher::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 107,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 20,
          "path": [
            "frame_system",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "ExtrinsicSuccess",
                  "fields": [
                    {
                      "name": "dispatch_info",
                      "typeId": 21,
                      "typeName": "DispatchInfo",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "An extrinsic completed successfully."
                  ]
                },
                {
                  "name": "ExtrinsicFailed",
                  "fields": [
                    {
                      "name": "dispatch_error",
                      "typeId": 24,
                      "typeName": "DispatchError",
                      "docs": []
                    },
                    {
                      "name": "dispatch_info",
                      "typeId": 21,
                      "typeName": "DispatchInfo",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "An extrinsic failed."
                  ]
                },
                {
                  "name": "CodeUpdated",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "`:code` was updated."
                  ]
                },
                {
                  "name": "NewAccount",
                  "fields": [
                    {
                      "name": "account",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A new account was created."
                  ]
                },
                {
                  "name": "KilledAccount",
                  "fields": [
                    {
                      "name": "account",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "An account was reaped."
                  ]
                },
                {
                  "name": "Remarked",
                  "fields": [
                    {
                      "name": "sender",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "hash",
                      "typeId": 11,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "On on-chain remark happened."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Event for the System pallet."
          ]
        },
        {
          "id": 21,
          "path": [
            "frame_support",
            "dispatch",
            "DispatchInfo"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "weight",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "class",
                  "typeId": 22,
                  "typeName": "DispatchClass",
                  "docs": []
                },
                {
                  "name": "pays_fee",
                  "typeId": 23,
                  "typeName": "Pays",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 22,
          "path": [
            "frame_support",
            "dispatch",
            "DispatchClass"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Normal",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Operational",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Mandatory",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 23,
          "path": [
            "frame_support",
            "dispatch",
            "Pays"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Yes",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "No",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 24,
          "path": [
            "sp_runtime",
            "DispatchError"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Other",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "CannotLookup",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "BadOrigin",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Module",
                  "fields": [
                    {
                      "typeId": 25,
                      "typeName": "ModuleError",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "ConsumerRemaining",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "NoProviders",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "TooManyConsumers",
                  "fields": [],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "Token",
                  "fields": [
                    {
                      "typeId": 26,
                      "typeName": "TokenError",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "Arithmetic",
                  "fields": [
                    {
                      "typeId": 27,
                      "typeName": "ArithmeticError",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "Transactional",
                  "fields": [
                    {
                      "typeId": 28,
                      "typeName": "TransactionalError",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "Exhausted",
                  "fields": [],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "Corruption",
                  "fields": [],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "Unavailable",
                  "fields": [],
                  "index": 12,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 25,
          "path": [
            "sp_runtime",
            "ModuleError"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "index",
                  "typeId": 2,
                  "typeName": "u8",
                  "docs": []
                },
                {
                  "name": "error",
                  "typeId": 16,
                  "typeName": "[u8; MAX_MODULE_ERROR_ENCODED_SIZE]",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 26,
          "path": [
            "sp_runtime",
            "TokenError"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "NoFunds",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "WouldDie",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "BelowMinimum",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "CannotCreate",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "UnknownAsset",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Frozen",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Unsupported",
                  "fields": [],
                  "index": 6,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 27,
          "path": [
            "sp_arithmetic",
            "ArithmeticError"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Underflow",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Overflow",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "DivisionByZero",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 28,
          "path": [
            "sp_runtime",
            "TransactionalError"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "LimitReached",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "NoLayer",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 29,
          "path": [
            "pallet_grandpa",
            "pallet",
            "Event"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "NewAuthorities",
                  "fields": [
                    {
                      "name": "authority_set",
                      "typeId": 30,
                      "typeName": "AuthorityList",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "New authority set has been applied."
                  ]
                },
                {
                  "name": "Paused",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Current authority set has been paused."
                  ]
                },
                {
                  "name": "Resumed",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Current authority set has been resumed."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 30,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 31
            }
          },
          "docs": []
        },
        {
          "id": 31,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                32,
                10
              ]
            }
          },
          "docs": []
        },
        {
          "id": 32,
          "path": [
            "sp_consensus_grandpa",
            "app",
            "Public"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 33,
                  "typeName": "ed25519::Public",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 33,
          "path": [
            "sp_core",
            "ed25519",
            "Public"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 34,
          "path": [
            "pallet_balances",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Endowed",
                  "fields": [
                    {
                      "name": "account",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "free_balance",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "An account was created with some free balance."
                  ]
                },
                {
                  "name": "DustLost",
                  "fields": [
                    {
                      "name": "account",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "An account was removed whose balance was non-zero but below ExistentialDeposit,",
                    "resulting in an outright loss."
                  ]
                },
                {
                  "name": "Transfer",
                  "fields": [
                    {
                      "name": "from",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "to",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Transfer succeeded."
                  ]
                },
                {
                  "name": "BalanceSet",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "free",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    },
                    {
                      "name": "reserved",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A balance was set by root."
                  ]
                },
                {
                  "name": "Reserved",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Some balance was reserved (moved from free to reserved)."
                  ]
                },
                {
                  "name": "Unreserved",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Some balance was unreserved (moved from reserved to free)."
                  ]
                },
                {
                  "name": "ReserveRepatriated",
                  "fields": [
                    {
                      "name": "from",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "to",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    },
                    {
                      "name": "destination_status",
                      "typeId": 35,
                      "typeName": "Status",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Some balance was moved from the reserve of the first account to the second account.",
                    "Final argument indicates the destination balance type."
                  ]
                },
                {
                  "name": "Deposit",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Some amount was deposited (e.g. for transaction fees)."
                  ]
                },
                {
                  "name": "Withdraw",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "Some amount was withdrawn from the account (e.g. for transaction fees)."
                  ]
                },
                {
                  "name": "Slashed",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "Some amount was removed from the account (e.g. for misbehavior)."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 35,
          "path": [
            "frame_support",
            "traits",
            "tokens",
            "misc",
            "BalanceStatus"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Free",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Reserved",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 36,
          "path": [
            "pallet_vesting",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "VestingUpdated",
                  "fields": [
                    {
                      "name": "account",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "unvested",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "The amount vested has been updated. This could indicate a change in funds available.",
                    "The balance given is the amount which is left unvested (and thus locked)."
                  ]
                },
                {
                  "name": "VestingCompleted",
                  "fields": [
                    {
                      "name": "account",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "An \\[account\\] has become fully vested."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 37,
          "path": [
            "pallet_transaction_payment",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "TransactionFeePaid",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "actual_fee",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "tip",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
                    "has been paid by `who`."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 38,
          "path": [
            "pallet_bags_list",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Rebagged",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "from",
                      "typeId": 10,
                      "typeName": "T::Score",
                      "docs": []
                    },
                    {
                      "name": "to",
                      "typeId": 10,
                      "typeName": "T::Score",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Moved an account from one bag to another."
                  ]
                },
                {
                  "name": "ScoreUpdated",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "new_score",
                      "typeId": 10,
                      "typeName": "T::Score",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Updated the score of some account to the given amount."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 39,
          "path": [
            "pallet_im_online",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "HeartbeatReceived",
                  "fields": [
                    {
                      "name": "authority_id",
                      "typeId": 40,
                      "typeName": "T::AuthorityId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A new heartbeat was received from `AuthorityId`."
                  ]
                },
                {
                  "name": "AllGood",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "At the end of the session, no offence was committed."
                  ]
                },
                {
                  "name": "SomeOffline",
                  "fields": [
                    {
                      "name": "offline",
                      "typeId": 42,
                      "typeName": "Vec<IdentificationTuple<T>>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "At the end of the session, at least one validator was found to be offline."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 40,
          "path": [
            "pallet_im_online",
            "sr25519",
            "app_sr25519",
            "Public"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 41,
                  "typeName": "sr25519::Public",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 41,
          "path": [
            "sp_core",
            "sr25519",
            "Public"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 42,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 43
            }
          },
          "docs": []
        },
        {
          "id": 43,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                0,
                44
              ]
            }
          },
          "docs": []
        },
        {
          "id": 44,
          "path": [
            "pallet_staking",
            "Exposure"
          ],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "total",
                  "typeId": 45,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "own",
                  "typeId": 45,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "others",
                  "typeId": 46,
                  "typeName": "Vec<IndividualExposure<AccountId, Balance>>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 45,
          "path": [],
          "params": [],
          "type": {
            "tag": "Compact",
            "value": {
              "typeParam": 6
            }
          },
          "docs": []
        },
        {
          "id": 46,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 47
            }
          },
          "docs": []
        },
        {
          "id": 47,
          "path": [
            "pallet_staking",
            "IndividualExposure"
          ],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "who",
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "value",
                  "typeId": 45,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 48,
          "path": [
            "pallet_staking",
            "pallet",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "EraPaid",
                  "fields": [
                    {
                      "name": "era_index",
                      "typeId": 4,
                      "typeName": "EraIndex",
                      "docs": []
                    },
                    {
                      "name": "validator_payout",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "remainder",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "The era payout has been set; the first balance is the validator-payout; the second is",
                    "the remainder from the maximum amount of reward."
                  ]
                },
                {
                  "name": "Rewarded",
                  "fields": [
                    {
                      "name": "stash",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "The nominator has been rewarded by this amount."
                  ]
                },
                {
                  "name": "Slashed",
                  "fields": [
                    {
                      "name": "staker",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "A staker (validator or nominator) has been slashed by the given amount."
                  ]
                },
                {
                  "name": "SlashReported",
                  "fields": [
                    {
                      "name": "validator",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "fraction",
                      "typeId": 49,
                      "typeName": "Perbill",
                      "docs": []
                    },
                    {
                      "name": "slash_era",
                      "typeId": 4,
                      "typeName": "EraIndex",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A slash for the given validator, for the given percentage of their stake, at the given",
                    "era as been reported."
                  ]
                },
                {
                  "name": "OldSlashingReportDiscarded",
                  "fields": [
                    {
                      "name": "session_index",
                      "typeId": 4,
                      "typeName": "SessionIndex",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "An old slashing report from a prior era was discarded because it could",
                    "not be processed."
                  ]
                },
                {
                  "name": "StakersElected",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "A new set of stakers was elected."
                  ]
                },
                {
                  "name": "Bonded",
                  "fields": [
                    {
                      "name": "stash",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "An account has bonded this amount. \\[stash, amount\\]",
                    "",
                    "NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,",
                    "it will not be emitted for staking rewards when they are added to stake."
                  ]
                },
                {
                  "name": "Unbonded",
                  "fields": [
                    {
                      "name": "stash",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "An account has unbonded this amount."
                  ]
                },
                {
                  "name": "Withdrawn",
                  "fields": [
                    {
                      "name": "stash",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`",
                    "from the unlocking queue."
                  ]
                },
                {
                  "name": "Kicked",
                  "fields": [
                    {
                      "name": "nominator",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "stash",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "A nominator has been kicked from a validator."
                  ]
                },
                {
                  "name": "StakingElectionFailed",
                  "fields": [],
                  "index": 10,
                  "docs": [
                    "The election failed. No new era is planned."
                  ]
                },
                {
                  "name": "Chilled",
                  "fields": [
                    {
                      "name": "stash",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": [
                    "An account has stopped participating as either a validator or nominator."
                  ]
                },
                {
                  "name": "PayoutStarted",
                  "fields": [
                    {
                      "name": "era_index",
                      "typeId": 4,
                      "typeName": "EraIndex",
                      "docs": []
                    },
                    {
                      "name": "validator_stash",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": [
                    "The stakers' rewards are getting paid."
                  ]
                },
                {
                  "name": "ValidatorPrefsSet",
                  "fields": [
                    {
                      "name": "stash",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "prefs",
                      "typeId": 50,
                      "typeName": "ValidatorPrefs",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": [
                    "A validator has set their preferences."
                  ]
                },
                {
                  "name": "ForceEra",
                  "fields": [
                    {
                      "name": "mode",
                      "typeId": 53,
                      "typeName": "Forcing",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": [
                    "A new force era mode was set."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 49,
          "path": [
            "sp_arithmetic",
            "per_things",
            "Perbill"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 50,
          "path": [
            "pallet_staking",
            "ValidatorPrefs"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "commission",
                  "typeId": 51,
                  "typeName": "Perbill",
                  "docs": []
                },
                {
                  "name": "blocked",
                  "typeId": 52,
                  "typeName": "bool",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 51,
          "path": [],
          "params": [],
          "type": {
            "tag": "Compact",
            "value": {
              "typeParam": 49
            }
          },
          "docs": []
        },
        {
          "id": 52,
          "path": [],
          "params": [],
          "type": {
            "tag": "Primitive",
            "value": {
              "kind": "bool"
            }
          },
          "docs": []
        },
        {
          "id": 53,
          "path": [
            "pallet_staking",
            "Forcing"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "NotForcing",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "ForceNew",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "ForceNone",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "ForceAlways",
                  "fields": [],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 54,
          "path": [
            "pallet_session",
            "pallet",
            "Event"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "NewSession",
                  "fields": [
                    {
                      "name": "session_index",
                      "typeId": 4,
                      "typeName": "SessionIndex",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "New session has happened. Note that the argument is the session index, not the",
                    "block number as the type might suggest."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 55,
          "path": [
            "pallet_treasury",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Proposed",
                  "fields": [
                    {
                      "name": "proposal_index",
                      "typeId": 4,
                      "typeName": "ProposalIndex",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "New proposal."
                  ]
                },
                {
                  "name": "Spending",
                  "fields": [
                    {
                      "name": "budget_remaining",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "We have ended a spend period and will now allocate funds."
                  ]
                },
                {
                  "name": "Awarded",
                  "fields": [
                    {
                      "name": "proposal_index",
                      "typeId": 4,
                      "typeName": "ProposalIndex",
                      "docs": []
                    },
                    {
                      "name": "award",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "account",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Some funds have been allocated."
                  ]
                },
                {
                  "name": "Rejected",
                  "fields": [
                    {
                      "name": "proposal_index",
                      "typeId": 4,
                      "typeName": "ProposalIndex",
                      "docs": []
                    },
                    {
                      "name": "slashed",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A proposal was rejected; funds were slashed."
                  ]
                },
                {
                  "name": "Burnt",
                  "fields": [
                    {
                      "name": "burnt_funds",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Some of our funds have been burnt."
                  ]
                },
                {
                  "name": "Rollover",
                  "fields": [
                    {
                      "name": "rollover_balance",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Spending has finished; this is the amount that rolls over until next spend."
                  ]
                },
                {
                  "name": "Deposit",
                  "fields": [
                    {
                      "name": "value",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Some funds have been deposited."
                  ]
                },
                {
                  "name": "SpendApproved",
                  "fields": [
                    {
                      "name": "proposal_index",
                      "typeId": 4,
                      "typeName": "ProposalIndex",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "A new spend proposal has been approved."
                  ]
                },
                {
                  "name": "UpdatedInactive",
                  "fields": [
                    {
                      "name": "reactivated",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "deactivated",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "The inactive funds of the pallet have been updated."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 56,
          "path": [
            "pallet_utility",
            "pallet",
            "Event"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "BatchInterrupted",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "error",
                      "typeId": 24,
                      "typeName": "DispatchError",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
                    "well as the error."
                  ]
                },
                {
                  "name": "BatchCompleted",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Batch of dispatches completed fully with no error."
                  ]
                },
                {
                  "name": "BatchCompletedWithErrors",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Batch of dispatches completed but has errors."
                  ]
                },
                {
                  "name": "ItemCompleted",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "A single item within a Batch of dispatches has completed with no error."
                  ]
                },
                {
                  "name": "ItemFailed",
                  "fields": [
                    {
                      "name": "error",
                      "typeId": 24,
                      "typeName": "DispatchError",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "A single item within a Batch of dispatches has completed with error."
                  ]
                },
                {
                  "name": "DispatchedAs",
                  "fields": [
                    {
                      "name": "result",
                      "typeId": 57,
                      "typeName": "DispatchResult",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "A call was dispatched."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 57,
          "path": [
            "Result"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 58
            },
            {
              "name": "E",
              "typeId": 24
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Ok",
                  "fields": [
                    {
                      "typeId": 58,
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Err",
                  "fields": [
                    {
                      "typeId": 24,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 58,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": []
            }
          },
          "docs": []
        },
        {
          "id": 59,
          "path": [
            "pallet_conviction_voting",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Delegated",
                  "fields": [
                    {
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "An account has delegated their vote to another account. \\[who, target\\]"
                  ]
                },
                {
                  "name": "Undelegated",
                  "fields": [
                    {
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "An \\[account\\] has cancelled a previous delegation operation."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 60,
          "path": [
            "pallet_referenda",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Submitted",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    },
                    {
                      "name": "track",
                      "typeId": 61,
                      "typeName": "TrackIdOf<T, I>",
                      "docs": [
                        "The track (and by extension proposal dispatch origin) of this referendum."
                      ]
                    },
                    {
                      "name": "proposal",
                      "typeId": 62,
                      "typeName": "BoundedCallOf<T, I>",
                      "docs": [
                        "The proposal for the referendum."
                      ]
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A referendum has been submitted."
                  ]
                },
                {
                  "name": "DecisionDepositPlaced",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    },
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": [
                        "The account who placed the deposit."
                      ]
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": [
                        "The amount placed by the account."
                      ]
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "The decision deposit has been placed."
                  ]
                },
                {
                  "name": "DecisionDepositRefunded",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    },
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": [
                        "The account who placed the deposit."
                      ]
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": [
                        "The amount placed by the account."
                      ]
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "The decision deposit has been refunded."
                  ]
                },
                {
                  "name": "DepositSlashed",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": [
                        "The account who placed the deposit."
                      ]
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": [
                        "The amount placed by the account."
                      ]
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A deposit has been slashaed."
                  ]
                },
                {
                  "name": "DecisionStarted",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    },
                    {
                      "name": "track",
                      "typeId": 61,
                      "typeName": "TrackIdOf<T, I>",
                      "docs": [
                        "The track (and by extension proposal dispatch origin) of this referendum."
                      ]
                    },
                    {
                      "name": "proposal",
                      "typeId": 62,
                      "typeName": "BoundedCallOf<T, I>",
                      "docs": [
                        "The proposal for the referendum."
                      ]
                    },
                    {
                      "name": "tally",
                      "typeId": 281,
                      "typeName": "T::Tally",
                      "docs": [
                        "The current tally of votes in this referendum."
                      ]
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "A referendum has moved into the deciding phase."
                  ]
                },
                {
                  "name": "ConfirmStarted",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "ConfirmAborted",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "Confirmed",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    },
                    {
                      "name": "tally",
                      "typeId": 281,
                      "typeName": "T::Tally",
                      "docs": [
                        "The final tally of votes in this referendum."
                      ]
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "A referendum has ended its confirmation phase and is ready for approval."
                  ]
                },
                {
                  "name": "Approved",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "A referendum has been approved and its proposal has been scheduled."
                  ]
                },
                {
                  "name": "Rejected",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    },
                    {
                      "name": "tally",
                      "typeId": 281,
                      "typeName": "T::Tally",
                      "docs": [
                        "The final tally of votes in this referendum."
                      ]
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "A proposal has been rejected by referendum."
                  ]
                },
                {
                  "name": "TimedOut",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    },
                    {
                      "name": "tally",
                      "typeId": 281,
                      "typeName": "T::Tally",
                      "docs": [
                        "The final tally of votes in this referendum."
                      ]
                    }
                  ],
                  "index": 10,
                  "docs": [
                    "A referendum has been timed out without being decided."
                  ]
                },
                {
                  "name": "Cancelled",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    },
                    {
                      "name": "tally",
                      "typeId": 281,
                      "typeName": "T::Tally",
                      "docs": [
                        "The final tally of votes in this referendum."
                      ]
                    }
                  ],
                  "index": 11,
                  "docs": [
                    "A referendum has been cancelled."
                  ]
                },
                {
                  "name": "Killed",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    },
                    {
                      "name": "tally",
                      "typeId": 281,
                      "typeName": "T::Tally",
                      "docs": [
                        "The final tally of votes in this referendum."
                      ]
                    }
                  ],
                  "index": 12,
                  "docs": [
                    "A referendum has been killed."
                  ]
                },
                {
                  "name": "SubmissionDepositRefunded",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    },
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": [
                        "The account who placed the deposit."
                      ]
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": [
                        "The amount placed by the account."
                      ]
                    }
                  ],
                  "index": 13,
                  "docs": [
                    "The submission deposit has been refunded."
                  ]
                },
                {
                  "name": "MetadataSet",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    },
                    {
                      "name": "hash",
                      "typeId": 11,
                      "typeName": "PreimageHash",
                      "docs": [
                        "Preimage hash."
                      ]
                    }
                  ],
                  "index": 14,
                  "docs": [
                    "Metadata for a referendum has been set."
                  ]
                },
                {
                  "name": "MetadataCleared",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    },
                    {
                      "name": "hash",
                      "typeId": 11,
                      "typeName": "PreimageHash",
                      "docs": [
                        "Preimage hash."
                      ]
                    }
                  ],
                  "index": 15,
                  "docs": [
                    "Metadata for a referendum has been cleared."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 61,
          "path": [],
          "params": [],
          "type": {
            "tag": "Primitive",
            "value": {
              "kind": "u16"
            }
          },
          "docs": []
        },
        {
          "id": 62,
          "path": [
            "frame_support",
            "traits",
            "preimages",
            "Bounded"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 63
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Legacy",
                  "fields": [
                    {
                      "name": "hash",
                      "typeId": 11,
                      "typeName": "Hash",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Inline",
                  "fields": [
                    {
                      "typeId": 280,
                      "typeName": "BoundedInline",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Lookup",
                  "fields": [
                    {
                      "name": "hash",
                      "typeId": 11,
                      "typeName": "Hash",
                      "docs": []
                    },
                    {
                      "name": "len",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 63,
          "path": [
            "vara_runtime",
            "RuntimeCall"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "System",
                  "fields": [
                    {
                      "typeId": 64,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Timestamp",
                  "fields": [
                    {
                      "typeId": 68,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Babe",
                  "fields": [
                    {
                      "typeId": 69,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Babe, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Grandpa",
                  "fields": [
                    {
                      "typeId": 80,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Grandpa, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Balances",
                  "fields": [
                    {
                      "typeId": 92,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Vesting",
                  "fields": [
                    {
                      "typeId": 96,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Vesting, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "BagsList",
                  "fields": [
                    {
                      "typeId": 98,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<BagsList, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "ImOnline",
                  "fields": [
                    {
                      "typeId": 99,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ImOnline, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": []
                },
                {
                  "name": "Staking",
                  "fields": [
                    {
                      "typeId": 107,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Staking, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": []
                },
                {
                  "name": "Session",
                  "fields": [
                    {
                      "typeId": 117,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Session, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "Treasury",
                  "fields": [
                    {
                      "typeId": 120,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Treasury, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": []
                },
                {
                  "name": "Utility",
                  "fields": [
                    {
                      "typeId": 121,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "ConvictionVoting",
                  "fields": [
                    {
                      "typeId": 127,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ConvictionVoting, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 16,
                  "docs": []
                },
                {
                  "name": "Referenda",
                  "fields": [
                    {
                      "typeId": 132,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Referenda, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 17,
                  "docs": []
                },
                {
                  "name": "FellowshipCollective",
                  "fields": [
                    {
                      "typeId": 135,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<FellowshipCollective, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 18,
                  "docs": []
                },
                {
                  "name": "FellowshipReferenda",
                  "fields": [
                    {
                      "typeId": 136,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<FellowshipReferenda, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": []
                },
                {
                  "name": "Whitelist",
                  "fields": [
                    {
                      "typeId": 137,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Whitelist, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": []
                },
                {
                  "name": "Scheduler",
                  "fields": [
                    {
                      "typeId": 138,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Scheduler, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 22,
                  "docs": []
                },
                {
                  "name": "Preimage",
                  "fields": [
                    {
                      "typeId": 141,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Preimage, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 23,
                  "docs": []
                },
                {
                  "name": "Identity",
                  "fields": [
                    {
                      "typeId": 142,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Identity, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 24,
                  "docs": []
                },
                {
                  "name": "Proxy",
                  "fields": [
                    {
                      "typeId": 184,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Proxy, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 25,
                  "docs": []
                },
                {
                  "name": "Multisig",
                  "fields": [
                    {
                      "typeId": 187,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Multisig, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 26,
                  "docs": []
                },
                {
                  "name": "ElectionProviderMultiPhase",
                  "fields": [
                    {
                      "typeId": 190,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ElectionProviderMultiPhase, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 27,
                  "docs": []
                },
                {
                  "name": "Bounties",
                  "fields": [
                    {
                      "typeId": 252,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Bounties, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 29,
                  "docs": []
                },
                {
                  "name": "ChildBounties",
                  "fields": [
                    {
                      "typeId": 253,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ChildBounties, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 30,
                  "docs": []
                },
                {
                  "name": "NominationPools",
                  "fields": [
                    {
                      "typeId": 254,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<NominationPools, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 31,
                  "docs": []
                },
                {
                  "name": "Gear",
                  "fields": [
                    {
                      "typeId": 265,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Gear, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 104,
                  "docs": []
                },
                {
                  "name": "StakingRewards",
                  "fields": [
                    {
                      "typeId": 278,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<StakingRewards, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 106,
                  "docs": []
                },
                {
                  "name": "GearVoucher",
                  "fields": [
                    {
                      "typeId": 279,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<GearVoucher, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 107,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 64,
          "path": [
            "frame_system",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "remark",
                  "fields": [
                    {
                      "name": "remark",
                      "typeId": 12,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Make some on-chain remark.",
                    "",
                    "## Complexity",
                    "- `O(1)`"
                  ]
                },
                {
                  "name": "set_heap_pages",
                  "fields": [
                    {
                      "name": "pages",
                      "typeId": 10,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Set the number of pages in the WebAssembly environment's heap."
                  ]
                },
                {
                  "name": "set_code",
                  "fields": [
                    {
                      "name": "code",
                      "typeId": 12,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Set the new runtime code.",
                    "",
                    "## Complexity",
                    "- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`"
                  ]
                },
                {
                  "name": "set_code_without_checks",
                  "fields": [
                    {
                      "name": "code",
                      "typeId": 12,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Set the new runtime code without doing any checks of the given `code`.",
                    "",
                    "## Complexity",
                    "- `O(C)` where `C` length of `code`"
                  ]
                },
                {
                  "name": "set_storage",
                  "fields": [
                    {
                      "name": "items",
                      "typeId": 65,
                      "typeName": "Vec<KeyValue>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Set some items of storage."
                  ]
                },
                {
                  "name": "kill_storage",
                  "fields": [
                    {
                      "name": "keys",
                      "typeId": 67,
                      "typeName": "Vec<Key>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Kill some items from storage."
                  ]
                },
                {
                  "name": "kill_prefix",
                  "fields": [
                    {
                      "name": "prefix",
                      "typeId": 12,
                      "typeName": "Key",
                      "docs": []
                    },
                    {
                      "name": "subkeys",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Kill all storage items with a key that starts with the given prefix.",
                    "",
                    "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
                    "the prefix we are removing to accurately calculate the weight of this function."
                  ]
                },
                {
                  "name": "remark_with_event",
                  "fields": [
                    {
                      "name": "remark",
                      "typeId": 12,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Make some on-chain remark and emit event."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 65,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 66
            }
          },
          "docs": []
        },
        {
          "id": 66,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                12,
                12
              ]
            }
          },
          "docs": []
        },
        {
          "id": 67,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 12
            }
          },
          "docs": []
        },
        {
          "id": 68,
          "path": [
            "pallet_timestamp",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "set",
                  "fields": [
                    {
                      "name": "now",
                      "typeId": 9,
                      "typeName": "T::Moment",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Set the current time.",
                    "",
                    "This call should be invoked exactly once per block. It will panic at the finalization",
                    "phase, if this call hasn't been invoked by that time.",
                    "",
                    "The timestamp should be greater than the previous one by the amount specified by",
                    "`MinimumPeriod`.",
                    "",
                    "The dispatch origin for this call must be `Inherent`.",
                    "",
                    "## Complexity",
                    "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
                    "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in",
                    "  `on_finalize`)",
                    "- 1 event handler `on_timestamp_set`. Must be `O(1)`."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 69,
          "path": [
            "pallet_babe",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "report_equivocation",
                  "fields": [
                    {
                      "name": "equivocation_proof",
                      "typeId": 70,
                      "typeName": "Box<EquivocationProof<T::Header>>",
                      "docs": []
                    },
                    {
                      "name": "key_owner_proof",
                      "typeId": 76,
                      "typeName": "T::KeyOwnerProof",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Report authority equivocation/misbehavior. This method will verify",
                    "the equivocation proof and validate the given key ownership proof",
                    "against the extracted offender. If both are valid, the offence will",
                    "be reported."
                  ]
                },
                {
                  "name": "report_equivocation_unsigned",
                  "fields": [
                    {
                      "name": "equivocation_proof",
                      "typeId": 70,
                      "typeName": "Box<EquivocationProof<T::Header>>",
                      "docs": []
                    },
                    {
                      "name": "key_owner_proof",
                      "typeId": 76,
                      "typeName": "T::KeyOwnerProof",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Report authority equivocation/misbehavior. This method will verify",
                    "the equivocation proof and validate the given key ownership proof",
                    "against the extracted offender. If both are valid, the offence will",
                    "be reported.",
                    "This extrinsic must be called unsigned and it is expected that only",
                    "block authors will call it (validated in `ValidateUnsigned`), as such",
                    "if the block author is defined it will be defined as the equivocation",
                    "reporter."
                  ]
                },
                {
                  "name": "plan_config_change",
                  "fields": [
                    {
                      "name": "config",
                      "typeId": 77,
                      "typeName": "NextConfigDescriptor",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Plan an epoch config change. The epoch config change is recorded and will be enacted on",
                    "the next call to `enact_epoch_change`. The config will be activated one epoch after.",
                    "Multiple calls to this method will replace any existing planned config change that had",
                    "not been enacted yet."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 70,
          "path": [
            "sp_consensus_slots",
            "EquivocationProof"
          ],
          "params": [
            {
              "name": "Header",
              "typeId": 71
            },
            {
              "name": "Id",
              "typeId": 74
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "offender",
                  "typeId": 74,
                  "typeName": "Id",
                  "docs": []
                },
                {
                  "name": "slot",
                  "typeId": 75,
                  "typeName": "Slot",
                  "docs": []
                },
                {
                  "name": "first_header",
                  "typeId": 71,
                  "typeName": "Header",
                  "docs": []
                },
                {
                  "name": "second_header",
                  "typeId": 71,
                  "typeName": "Header",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 71,
          "path": [
            "sp_runtime",
            "generic",
            "header",
            "Header"
          ],
          "params": [
            {
              "name": "Number",
              "typeId": 4
            },
            {
              "name": "Hash",
              "typeId": 72
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "parent_hash",
                  "typeId": 11,
                  "typeName": "Hash::Output",
                  "docs": []
                },
                {
                  "name": "number",
                  "typeId": 73,
                  "typeName": "Number",
                  "docs": []
                },
                {
                  "name": "state_root",
                  "typeId": 11,
                  "typeName": "Hash::Output",
                  "docs": []
                },
                {
                  "name": "extrinsics_root",
                  "typeId": 11,
                  "typeName": "Hash::Output",
                  "docs": []
                },
                {
                  "name": "digest",
                  "typeId": 13,
                  "typeName": "Digest",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 72,
          "path": [
            "sp_runtime",
            "traits",
            "BlakeTwo256"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": []
            }
          },
          "docs": []
        },
        {
          "id": 73,
          "path": [],
          "params": [],
          "type": {
            "tag": "Compact",
            "value": {
              "typeParam": 4
            }
          },
          "docs": []
        },
        {
          "id": 74,
          "path": [
            "sp_consensus_babe",
            "app",
            "Public"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 41,
                  "typeName": "sr25519::Public",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 75,
          "path": [
            "sp_consensus_slots",
            "Slot"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 10,
                  "typeName": "u64",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 76,
          "path": [
            "sp_session",
            "MembershipProof"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "session",
                  "typeId": 4,
                  "typeName": "SessionIndex",
                  "docs": []
                },
                {
                  "name": "trie_nodes",
                  "typeId": 67,
                  "typeName": "Vec<Vec<u8>>",
                  "docs": []
                },
                {
                  "name": "validator_count",
                  "typeId": 4,
                  "typeName": "ValidatorCount",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 77,
          "path": [
            "sp_consensus_babe",
            "digests",
            "NextConfigDescriptor"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "V1",
                  "fields": [
                    {
                      "name": "c",
                      "typeId": 78,
                      "typeName": "(u64, u64)",
                      "docs": []
                    },
                    {
                      "name": "allowed_slots",
                      "typeId": 79,
                      "typeName": "AllowedSlots",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 78,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                10,
                10
              ]
            }
          },
          "docs": []
        },
        {
          "id": 79,
          "path": [
            "sp_consensus_babe",
            "AllowedSlots"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "PrimarySlots",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "PrimaryAndSecondaryPlainSlots",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "PrimaryAndSecondaryVRFSlots",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 80,
          "path": [
            "pallet_grandpa",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "report_equivocation",
                  "fields": [
                    {
                      "name": "equivocation_proof",
                      "typeId": 81,
                      "typeName": "Box<EquivocationProof<T::Hash, T::BlockNumber>>",
                      "docs": []
                    },
                    {
                      "name": "key_owner_proof",
                      "typeId": 76,
                      "typeName": "T::KeyOwnerProof",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Report voter equivocation/misbehavior. This method will verify the",
                    "equivocation proof and validate the given key ownership proof",
                    "against the extracted offender. If both are valid, the offence",
                    "will be reported."
                  ]
                },
                {
                  "name": "report_equivocation_unsigned",
                  "fields": [
                    {
                      "name": "equivocation_proof",
                      "typeId": 81,
                      "typeName": "Box<EquivocationProof<T::Hash, T::BlockNumber>>",
                      "docs": []
                    },
                    {
                      "name": "key_owner_proof",
                      "typeId": 76,
                      "typeName": "T::KeyOwnerProof",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Report voter equivocation/misbehavior. This method will verify the",
                    "equivocation proof and validate the given key ownership proof",
                    "against the extracted offender. If both are valid, the offence",
                    "will be reported.",
                    "",
                    "This extrinsic must be called unsigned and it is expected that only",
                    "block authors will call it (validated in `ValidateUnsigned`), as such",
                    "if the block author is defined it will be defined as the equivocation",
                    "reporter."
                  ]
                },
                {
                  "name": "note_stalled",
                  "fields": [
                    {
                      "name": "delay",
                      "typeId": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "best_finalized_block_number",
                      "typeId": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Note that the current authority set of the GRANDPA finality gadget has stalled.",
                    "",
                    "This will trigger a forced authority set change at the beginning of the next session, to",
                    "be enacted `delay` blocks after that. The `delay` should be high enough to safely assume",
                    "that the block signalling the forced change will not be re-orged e.g. 1000 blocks.",
                    "The block production rate (which may be slowed down because of finality lagging) should",
                    "be taken into account when choosing the `delay`. The GRANDPA voters based on the new",
                    "authority will start voting on top of `best_finalized_block_number` for new finalized",
                    "blocks. `best_finalized_block_number` should be the highest of the latest finalized",
                    "block of all validators of the new authority set.",
                    "",
                    "Only callable by root."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 81,
          "path": [
            "sp_consensus_grandpa",
            "EquivocationProof"
          ],
          "params": [
            {
              "name": "H",
              "typeId": 11
            },
            {
              "name": "N",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "set_id",
                  "typeId": 10,
                  "typeName": "SetId",
                  "docs": []
                },
                {
                  "name": "equivocation",
                  "typeId": 82,
                  "typeName": "Equivocation<H, N>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 82,
          "path": [
            "sp_consensus_grandpa",
            "Equivocation"
          ],
          "params": [
            {
              "name": "H",
              "typeId": 11
            },
            {
              "name": "N",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Prevote",
                  "fields": [
                    {
                      "typeId": 83,
                      "typeName": "grandpa::Equivocation<AuthorityId, grandpa::Prevote<H, N>,\nAuthoritySignature>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Precommit",
                  "fields": [
                    {
                      "typeId": 89,
                      "typeName": "grandpa::Equivocation<AuthorityId, grandpa::Precommit<H, N>,\nAuthoritySignature>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 83,
          "path": [
            "finality_grandpa",
            "Equivocation"
          ],
          "params": [
            {
              "name": "Id",
              "typeId": 32
            },
            {
              "name": "V",
              "typeId": 84
            },
            {
              "name": "S",
              "typeId": 85
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "round_number",
                  "typeId": 10,
                  "typeName": "u64",
                  "docs": []
                },
                {
                  "name": "identity",
                  "typeId": 32,
                  "typeName": "Id",
                  "docs": []
                },
                {
                  "name": "first",
                  "typeId": 88,
                  "typeName": "(V, S)",
                  "docs": []
                },
                {
                  "name": "second",
                  "typeId": 88,
                  "typeName": "(V, S)",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 84,
          "path": [
            "finality_grandpa",
            "Prevote"
          ],
          "params": [
            {
              "name": "H",
              "typeId": 11
            },
            {
              "name": "N",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "target_hash",
                  "typeId": 11,
                  "typeName": "H",
                  "docs": []
                },
                {
                  "name": "target_number",
                  "typeId": 4,
                  "typeName": "N",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 85,
          "path": [
            "sp_consensus_grandpa",
            "app",
            "Signature"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 86,
                  "typeName": "ed25519::Signature",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 86,
          "path": [
            "sp_core",
            "ed25519",
            "Signature"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 87,
                  "typeName": "[u8; 64]",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 87,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 64,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 88,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                84,
                85
              ]
            }
          },
          "docs": []
        },
        {
          "id": 89,
          "path": [
            "finality_grandpa",
            "Equivocation"
          ],
          "params": [
            {
              "name": "Id",
              "typeId": 32
            },
            {
              "name": "V",
              "typeId": 90
            },
            {
              "name": "S",
              "typeId": 85
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "round_number",
                  "typeId": 10,
                  "typeName": "u64",
                  "docs": []
                },
                {
                  "name": "identity",
                  "typeId": 32,
                  "typeName": "Id",
                  "docs": []
                },
                {
                  "name": "first",
                  "typeId": 91,
                  "typeName": "(V, S)",
                  "docs": []
                },
                {
                  "name": "second",
                  "typeId": 91,
                  "typeName": "(V, S)",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 90,
          "path": [
            "finality_grandpa",
            "Precommit"
          ],
          "params": [
            {
              "name": "H",
              "typeId": 11
            },
            {
              "name": "N",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "target_hash",
                  "typeId": 11,
                  "typeName": "H",
                  "docs": []
                },
                {
                  "name": "target_number",
                  "typeId": 4,
                  "typeName": "N",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 91,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                90,
                85
              ]
            }
          },
          "docs": []
        },
        {
          "id": 92,
          "path": [
            "pallet_balances",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "transfer",
                  "fields": [
                    {
                      "name": "dest",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "typeId": 45,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Transfer some liquid free balance to another account.",
                    "",
                    "`transfer` will set the `FreeBalance` of the sender and receiver.",
                    "If the sender's account is below the existential deposit as a result",
                    "of the transfer, the account will be reaped.",
                    "",
                    "The dispatch origin for this call must be `Signed` by the transactor.",
                    "",
                    "## Complexity",
                    "- Dependent on arguments but not critical, given proper implementations for input config",
                    "  types. See related functions below.",
                    "- It contains a limited number of reads and writes internally and no complex",
                    "  computation.",
                    "",
                    "Related functions:",
                    "",
                    "  - `ensure_can_withdraw` is always called internally but has a bounded complexity.",
                    "  - Transferring balances to accounts that did not exist before will cause",
                    "    `T::OnNewAccount::on_new_account` to be called.",
                    "  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.",
                    "  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check",
                    "    that the transfer will not kill the origin account."
                  ]
                },
                {
                  "name": "set_balance",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "new_free",
                      "typeId": 45,
                      "typeName": "T::Balance",
                      "docs": []
                    },
                    {
                      "name": "new_reserved",
                      "typeId": 45,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Set the balances of a given account.",
                    "",
                    "This will alter `FreeBalance` and `ReservedBalance` in storage. it will",
                    "also alter the total issuance of the system (`TotalIssuance`) appropriately.",
                    "If the new free or reserved balance is below the existential deposit,",
                    "it will reset the account nonce (`frame_system::AccountNonce`).",
                    "",
                    "The dispatch origin for this call is `root`."
                  ]
                },
                {
                  "name": "force_transfer",
                  "fields": [
                    {
                      "name": "source",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "typeId": 45,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Exactly as `transfer`, except the origin must be root and the source account may be",
                    "specified.",
                    "## Complexity",
                    "- Same as transfer, but additional read and write because the source account is not",
                    "  assumed to be in the overlay."
                  ]
                },
                {
                  "name": "transfer_keep_alive",
                  "fields": [
                    {
                      "name": "dest",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "typeId": 45,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Same as the [`transfer`] call, but with a check that the transfer will not kill the",
                    "origin account.",
                    "",
                    "99% of the time you want [`transfer`] instead.",
                    "",
                    "[`transfer`]: struct.Pallet.html#method.transfer"
                  ]
                },
                {
                  "name": "transfer_all",
                  "fields": [
                    {
                      "name": "dest",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "keep_alive",
                      "typeId": 52,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Transfer the entire transferable balance from the caller account.",
                    "",
                    "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
                    "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
                    "transferred by this function. To ensure that this function results in a killed account,",
                    "you might need to prepare the account by removing any reference counters, storage",
                    "deposits, etc...",
                    "",
                    "The dispatch origin of this call must be Signed.",
                    "",
                    "- `dest`: The recipient of the transfer.",
                    "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
                    "  of the funds the account has, causing the sender account to be killed (false), or",
                    "  transfer everything except at least the existential deposit, which will guarantee to",
                    "  keep the sender account alive (true). ## Complexity",
                    "- O(1). Just like transfer, but reading the user's transferable balance first."
                  ]
                },
                {
                  "name": "force_unreserve",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Unreserve some balance from a user by force.",
                    "",
                    "Can only be called by ROOT."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 93,
          "path": [
            "sp_runtime",
            "multiaddress",
            "MultiAddress"
          ],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "AccountIndex",
              "typeId": 58
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Id",
                  "fields": [
                    {
                      "typeId": 0,
                      "typeName": "AccountId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Index",
                  "fields": [
                    {
                      "typeId": 94,
                      "typeName": "AccountIndex",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Raw",
                  "fields": [
                    {
                      "typeId": 12,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Address32",
                  "fields": [
                    {
                      "typeId": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Address20",
                  "fields": [
                    {
                      "typeId": 95,
                      "typeName": "[u8; 20]",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 94,
          "path": [],
          "params": [],
          "type": {
            "tag": "Compact",
            "value": {
              "typeParam": 58
            }
          },
          "docs": []
        },
        {
          "id": 95,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 20,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 96,
          "path": [
            "pallet_vesting",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "vest",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Unlock any vested funds of the sender account.",
                    "",
                    "The dispatch origin for this call must be _Signed_ and the sender must have funds still",
                    "locked under this pallet.",
                    "",
                    "Emits either `VestingCompleted` or `VestingUpdated`.",
                    "",
                    "## Complexity",
                    "- `O(1)`."
                  ]
                },
                {
                  "name": "vest_other",
                  "fields": [
                    {
                      "name": "target",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Unlock any vested funds of a `target` account.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "- `target`: The account whose vested funds should be unlocked. Must have funds still",
                    "locked under this pallet.",
                    "",
                    "Emits either `VestingCompleted` or `VestingUpdated`.",
                    "",
                    "## Complexity",
                    "- `O(1)`."
                  ]
                },
                {
                  "name": "vested_transfer",
                  "fields": [
                    {
                      "name": "target",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "schedule",
                      "typeId": 97,
                      "typeName": "VestingInfo<BalanceOf<T>, T::BlockNumber>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Create a vested transfer.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "- `target`: The account receiving the vested funds.",
                    "- `schedule`: The vesting schedule attached to the transfer.",
                    "",
                    "Emits `VestingCreated`.",
                    "",
                    "NOTE: This will unlock all schedules through the current block.",
                    "",
                    "## Complexity",
                    "- `O(1)`."
                  ]
                },
                {
                  "name": "force_vested_transfer",
                  "fields": [
                    {
                      "name": "source",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "target",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "schedule",
                      "typeId": 97,
                      "typeName": "VestingInfo<BalanceOf<T>, T::BlockNumber>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Force a vested transfer.",
                    "",
                    "The dispatch origin for this call must be _Root_.",
                    "",
                    "- `source`: The account whose funds should be transferred.",
                    "- `target`: The account that should be transferred the vested funds.",
                    "- `schedule`: The vesting schedule attached to the transfer.",
                    "",
                    "Emits `VestingCreated`.",
                    "",
                    "NOTE: This will unlock all schedules through the current block.",
                    "",
                    "## Complexity",
                    "- `O(1)`."
                  ]
                },
                {
                  "name": "merge_schedules",
                  "fields": [
                    {
                      "name": "schedule1_index",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "schedule2_index",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Merge two vesting schedules together, creating a new vesting schedule that unlocks over",
                    "the highest possible start and end blocks. If both schedules have already started the",
                    "current block will be used as the schedule start; with the caveat that if one schedule",
                    "is finished by the current block, the other will be treated as the new merged schedule,",
                    "unmodified.",
                    "",
                    "NOTE: If `schedule1_index == schedule2_index` this is a no-op.",
                    "NOTE: This will unlock all schedules through the current block prior to merging.",
                    "NOTE: If both schedules have ended by the current block, no new schedule will be created",
                    "and both will be removed.",
                    "",
                    "Merged schedule attributes:",
                    "- `starting_block`: `MAX(schedule1.starting_block, scheduled2.starting_block,",
                    "  current_block)`.",
                    "- `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`.",
                    "- `locked`: `schedule1.locked_at(current_block) + schedule2.locked_at(current_block)`.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "- `schedule1_index`: index of the first schedule to merge.",
                    "- `schedule2_index`: index of the second schedule to merge."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 97,
          "path": [
            "pallet_vesting",
            "vesting_info",
            "VestingInfo"
          ],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            },
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "locked",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "per_block",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "starting_block",
                  "typeId": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 98,
          "path": [
            "pallet_bags_list",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "rebag",
                  "fields": [
                    {
                      "name": "dislocated",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Declare that some `dislocated` account has, through rewards or penalties, sufficiently",
                    "changed its score that it should properly fall into a different bag than its current",
                    "one.",
                    "",
                    "Anyone can call this function about any potentially dislocated account.",
                    "",
                    "Will always update the stored score of `dislocated` to the correct score, based on",
                    "`ScoreProvider`.",
                    "",
                    "If `dislocated` does not exists, it returns an error."
                  ]
                },
                {
                  "name": "put_in_front_of",
                  "fields": [
                    {
                      "name": "lighter",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Move the caller's Id directly in front of `lighter`.",
                    "",
                    "The dispatch origin for this call must be _Signed_ and can only be called by the Id of",
                    "the account going in front of `lighter`.",
                    "",
                    "Only works if",
                    "- both nodes are within the same bag,",
                    "- and `origin` has a greater `Score` than `lighter`."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 99,
          "path": [
            "pallet_im_online",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "heartbeat",
                  "fields": [
                    {
                      "name": "heartbeat",
                      "typeId": 100,
                      "typeName": "Heartbeat<T::BlockNumber>",
                      "docs": []
                    },
                    {
                      "name": "signature",
                      "typeId": 105,
                      "typeName": "<T::AuthorityId as RuntimeAppPublic>::Signature",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "## Complexity:",
                    "- `O(K + E)` where K is length of `Keys` (heartbeat.validators_len) and E is length of",
                    "  `heartbeat.network_state.external_address`",
                    "  - `O(K)`: decoding of length `K`",
                    "  - `O(E)`: decoding/encoding of length `E`"
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 100,
          "path": [
            "pallet_im_online",
            "Heartbeat"
          ],
          "params": [
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "block_number",
                  "typeId": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "network_state",
                  "typeId": 101,
                  "typeName": "OpaqueNetworkState",
                  "docs": []
                },
                {
                  "name": "session_index",
                  "typeId": 4,
                  "typeName": "SessionIndex",
                  "docs": []
                },
                {
                  "name": "authority_index",
                  "typeId": 4,
                  "typeName": "AuthIndex",
                  "docs": []
                },
                {
                  "name": "validators_len",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 101,
          "path": [
            "sp_core",
            "offchain",
            "OpaqueNetworkState"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "peer_id",
                  "typeId": 102,
                  "typeName": "OpaquePeerId",
                  "docs": []
                },
                {
                  "name": "external_addresses",
                  "typeId": 103,
                  "typeName": "Vec<OpaqueMultiaddr>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 102,
          "path": [
            "sp_core",
            "OpaquePeerId"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 12,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 103,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 104
            }
          },
          "docs": []
        },
        {
          "id": 104,
          "path": [
            "sp_core",
            "offchain",
            "OpaqueMultiaddr"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 12,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 105,
          "path": [
            "pallet_im_online",
            "sr25519",
            "app_sr25519",
            "Signature"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 106,
                  "typeName": "sr25519::Signature",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 106,
          "path": [
            "sp_core",
            "sr25519",
            "Signature"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 87,
                  "typeName": "[u8; 64]",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 107,
          "path": [
            "pallet_staking",
            "pallet",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "bond",
                  "fields": [
                    {
                      "name": "controller",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "typeId": 45,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "payee",
                      "typeId": 108,
                      "typeName": "RewardDestination<T::AccountId>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Take the origin account as a stash and lock up `value` of its balance. `controller` will",
                    "be the account that controls it.",
                    "",
                    "`value` must be more than the `minimum_balance` specified by `T::Currency`.",
                    "",
                    "The dispatch origin for this call must be _Signed_ by the stash account.",
                    "",
                    "Emits `Bonded`.",
                    "## Complexity",
                    "- Independent of the arguments. Moderate complexity.",
                    "- O(1).",
                    "- Three extra DB entries.",
                    "",
                    "NOTE: Two of the storage writes (`Self::bonded`, `Self::payee`) are _never_ cleaned",
                    "unless the `origin` falls below _existential deposit_ and gets removed as dust."
                  ]
                },
                {
                  "name": "bond_extra",
                  "fields": [
                    {
                      "name": "max_additional",
                      "typeId": 45,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Add some extra amount that have appeared in the stash `free_balance` into the balance up",
                    "for staking.",
                    "",
                    "The dispatch origin for this call must be _Signed_ by the stash, not the controller.",
                    "",
                    "Use this if there are additional funds in your stash account that you wish to bond.",
                    "Unlike [`bond`](Self::bond) or [`unbond`](Self::unbond) this function does not impose",
                    "any limitation on the amount that can be added.",
                    "",
                    "Emits `Bonded`.",
                    "",
                    "## Complexity",
                    "- Independent of the arguments. Insignificant complexity.",
                    "- O(1)."
                  ]
                },
                {
                  "name": "unbond",
                  "fields": [
                    {
                      "name": "value",
                      "typeId": 45,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Schedule a portion of the stash to be unlocked ready for transfer out after the bond",
                    "period ends. If this leaves an amount actively bonded less than",
                    "T::Currency::minimum_balance(), then it is increased to the full amount.",
                    "",
                    "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                    "",
                    "Once the unlock period is done, you can call `withdraw_unbonded` to actually move",
                    "the funds out of management ready for transfer.",
                    "",
                    "No more than a limited number of unlocking chunks (see `MaxUnlockingChunks`)",
                    "can co-exists at the same time. If there are no unlocking chunks slots available",
                    "[`Call::withdraw_unbonded`] is called to remove some of the chunks (if possible).",
                    "",
                    "If a user encounters the `InsufficientBond` error when calling this extrinsic,",
                    "they should call `chill` first in order to free up their bonded funds.",
                    "",
                    "Emits `Unbonded`.",
                    "",
                    "See also [`Call::withdraw_unbonded`]."
                  ]
                },
                {
                  "name": "withdraw_unbonded",
                  "fields": [
                    {
                      "name": "num_slashing_spans",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Remove any unlocked chunks from the `unlocking` queue from our management.",
                    "",
                    "This essentially frees up that balance to be used by the stash account to do",
                    "whatever it wants.",
                    "",
                    "The dispatch origin for this call must be _Signed_ by the controller.",
                    "",
                    "Emits `Withdrawn`.",
                    "",
                    "See also [`Call::unbond`].",
                    "",
                    "## Complexity",
                    "O(S) where S is the number of slashing spans to remove",
                    "NOTE: Weight annotation is the kill scenario, we refund otherwise."
                  ]
                },
                {
                  "name": "validate",
                  "fields": [
                    {
                      "name": "prefs",
                      "typeId": 50,
                      "typeName": "ValidatorPrefs",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Declare the desire to validate for the origin controller.",
                    "",
                    "Effects will be felt at the beginning of the next era.",
                    "",
                    "The dispatch origin for this call must be _Signed_ by the controller, not the stash."
                  ]
                },
                {
                  "name": "nominate",
                  "fields": [
                    {
                      "name": "targets",
                      "typeId": 109,
                      "typeName": "Vec<AccountIdLookupOf<T>>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Declare the desire to nominate `targets` for the origin controller.",
                    "",
                    "Effects will be felt at the beginning of the next era.",
                    "",
                    "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                    "",
                    "## Complexity",
                    "- The transaction's complexity is proportional to the size of `targets` (N)",
                    "which is capped at CompactAssignments::LIMIT (T::MaxNominations).",
                    "- Both the reads and writes follow a similar pattern."
                  ]
                },
                {
                  "name": "chill",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "Declare no desire to either validate or nominate.",
                    "",
                    "Effects will be felt at the beginning of the next era.",
                    "",
                    "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                    "",
                    "## Complexity",
                    "- Independent of the arguments. Insignificant complexity.",
                    "- Contains one read.",
                    "- Writes are limited to the `origin` account key."
                  ]
                },
                {
                  "name": "set_payee",
                  "fields": [
                    {
                      "name": "payee",
                      "typeId": 108,
                      "typeName": "RewardDestination<T::AccountId>",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "(Re-)set the payment target for a controller.",
                    "",
                    "Effects will be felt instantly (as soon as this function is completed successfully).",
                    "",
                    "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                    "",
                    "## Complexity",
                    "- O(1)",
                    "- Independent of the arguments. Insignificant complexity.",
                    "- Contains a limited number of reads.",
                    "- Writes are limited to the `origin` account key.",
                    "---------"
                  ]
                },
                {
                  "name": "set_controller",
                  "fields": [
                    {
                      "name": "controller",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "(Re-)set the controller of a stash.",
                    "",
                    "Effects will be felt instantly (as soon as this function is completed successfully).",
                    "",
                    "The dispatch origin for this call must be _Signed_ by the stash, not the controller.",
                    "",
                    "## Complexity",
                    "O(1)",
                    "- Independent of the arguments. Insignificant complexity.",
                    "- Contains a limited number of reads.",
                    "- Writes are limited to the `origin` account key."
                  ]
                },
                {
                  "name": "set_validator_count",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 73,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "Sets the ideal number of validators.",
                    "",
                    "The dispatch origin must be Root.",
                    "",
                    "## Complexity",
                    "O(1)"
                  ]
                },
                {
                  "name": "increase_validator_count",
                  "fields": [
                    {
                      "name": "additional",
                      "typeId": 73,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": [
                    "Increments the ideal number of validators upto maximum of",
                    "`ElectionProviderBase::MaxWinners`.",
                    "",
                    "The dispatch origin must be Root.",
                    "",
                    "## Complexity",
                    "Same as [`Self::set_validator_count`]."
                  ]
                },
                {
                  "name": "scale_validator_count",
                  "fields": [
                    {
                      "name": "factor",
                      "typeId": 110,
                      "typeName": "Percent",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": [
                    "Scale up the ideal number of validators by a factor upto maximum of",
                    "`ElectionProviderBase::MaxWinners`.",
                    "",
                    "The dispatch origin must be Root.",
                    "",
                    "## Complexity",
                    "Same as [`Self::set_validator_count`]."
                  ]
                },
                {
                  "name": "force_no_eras",
                  "fields": [],
                  "index": 12,
                  "docs": [
                    "Force there to be no new eras indefinitely.",
                    "",
                    "The dispatch origin must be Root.",
                    "",
                    "# Warning",
                    "",
                    "The election process starts multiple blocks before the end of the era.",
                    "Thus the election process may be ongoing when this is called. In this case the",
                    "election will continue until the next era is triggered.",
                    "",
                    "## Complexity",
                    "- No arguments.",
                    "- Weight: O(1)"
                  ]
                },
                {
                  "name": "force_new_era",
                  "fields": [],
                  "index": 13,
                  "docs": [
                    "Force there to be a new era at the end of the next session. After this, it will be",
                    "reset to normal (non-forced) behaviour.",
                    "",
                    "The dispatch origin must be Root.",
                    "",
                    "# Warning",
                    "",
                    "The election process starts multiple blocks before the end of the era.",
                    "If this is called just before a new era is triggered, the election process may not",
                    "have enough blocks to get a result.",
                    "",
                    "## Complexity",
                    "- No arguments.",
                    "- Weight: O(1)"
                  ]
                },
                {
                  "name": "set_invulnerables",
                  "fields": [
                    {
                      "name": "invulnerables",
                      "typeId": 111,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": [
                    "Set the validators who cannot be slashed (if any).",
                    "",
                    "The dispatch origin must be Root."
                  ]
                },
                {
                  "name": "force_unstake",
                  "fields": [
                    {
                      "name": "stash",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "num_slashing_spans",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": [
                    "Force a current staker to become completely unstaked, immediately.",
                    "",
                    "The dispatch origin must be Root."
                  ]
                },
                {
                  "name": "force_new_era_always",
                  "fields": [],
                  "index": 16,
                  "docs": [
                    "Force there to be a new era at the end of sessions indefinitely.",
                    "",
                    "The dispatch origin must be Root.",
                    "",
                    "# Warning",
                    "",
                    "The election process starts multiple blocks before the end of the era.",
                    "If this is called just before a new era is triggered, the election process may not",
                    "have enough blocks to get a result."
                  ]
                },
                {
                  "name": "cancel_deferred_slash",
                  "fields": [
                    {
                      "name": "era",
                      "typeId": 4,
                      "typeName": "EraIndex",
                      "docs": []
                    },
                    {
                      "name": "slash_indices",
                      "typeId": 112,
                      "typeName": "Vec<u32>",
                      "docs": []
                    }
                  ],
                  "index": 17,
                  "docs": [
                    "Cancel enactment of a deferred slash.",
                    "",
                    "Can be called by the `T::AdminOrigin`.",
                    "",
                    "Parameters: era and indices of the slashes for that era to kill."
                  ]
                },
                {
                  "name": "payout_stakers",
                  "fields": [
                    {
                      "name": "validator_stash",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "era",
                      "typeId": 4,
                      "typeName": "EraIndex",
                      "docs": []
                    }
                  ],
                  "index": 18,
                  "docs": [
                    "Pay out all the stakers behind a single validator for a single era.",
                    "",
                    "- `validator_stash` is the stash account of the validator. Their nominators, up to",
                    "  `T::MaxNominatorRewardedPerValidator`, will also receive their rewards.",
                    "- `era` may be any era between `[current_era - history_depth; current_era]`.",
                    "",
                    "The origin of this call must be _Signed_. Any account can call this function, even if",
                    "it is not one of the stakers.",
                    "",
                    "## Complexity",
                    "- At most O(MaxNominatorRewardedPerValidator)."
                  ]
                },
                {
                  "name": "rebond",
                  "fields": [
                    {
                      "name": "value",
                      "typeId": 45,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": [
                    "Rebond a portion of the stash scheduled to be unlocked.",
                    "",
                    "The dispatch origin must be signed by the controller.",
                    "",
                    "## Complexity",
                    "- Time complexity: O(L), where L is unlocking chunks",
                    "- Bounded by `MaxUnlockingChunks`."
                  ]
                },
                {
                  "name": "reap_stash",
                  "fields": [
                    {
                      "name": "stash",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "num_slashing_spans",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 20,
                  "docs": [
                    "Remove all data structures concerning a staker/stash once it is at a state where it can",
                    "be considered `dust` in the staking system. The requirements are:",
                    "",
                    "1. the `total_balance` of the stash is below existential deposit.",
                    "2. or, the `ledger.total` of the stash is below existential deposit.",
                    "",
                    "The former can happen in cases like a slash; the latter when a fully unbonded account",
                    "is still receiving staking rewards in `RewardDestination::Staked`.",
                    "",
                    "It can be called by anyone, as long as `stash` meets the above requirements.",
                    "",
                    "Refunds the transaction fees upon successful execution."
                  ]
                },
                {
                  "name": "kick",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 109,
                      "typeName": "Vec<AccountIdLookupOf<T>>",
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": [
                    "Remove the given nominations from the calling validator.",
                    "",
                    "Effects will be felt at the beginning of the next era.",
                    "",
                    "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                    "",
                    "- `who`: A list of nominator stash accounts who are nominating this validator which",
                    "  should no longer be nominating this validator.",
                    "",
                    "Note: Making this call only makes sense if you first set the validator preferences to",
                    "block any further nominations."
                  ]
                },
                {
                  "name": "set_staking_configs",
                  "fields": [
                    {
                      "name": "min_nominator_bond",
                      "typeId": 113,
                      "typeName": "ConfigOp<BalanceOf<T>>",
                      "docs": []
                    },
                    {
                      "name": "min_validator_bond",
                      "typeId": 113,
                      "typeName": "ConfigOp<BalanceOf<T>>",
                      "docs": []
                    },
                    {
                      "name": "max_nominator_count",
                      "typeId": 114,
                      "typeName": "ConfigOp<u32>",
                      "docs": []
                    },
                    {
                      "name": "max_validator_count",
                      "typeId": 114,
                      "typeName": "ConfigOp<u32>",
                      "docs": []
                    },
                    {
                      "name": "chill_threshold",
                      "typeId": 115,
                      "typeName": "ConfigOp<Percent>",
                      "docs": []
                    },
                    {
                      "name": "min_commission",
                      "typeId": 116,
                      "typeName": "ConfigOp<Perbill>",
                      "docs": []
                    }
                  ],
                  "index": 22,
                  "docs": [
                    "Update the various staking configurations .",
                    "",
                    "* `min_nominator_bond`: The minimum active bond needed to be a nominator.",
                    "* `min_validator_bond`: The minimum active bond needed to be a validator.",
                    "* `max_nominator_count`: The max number of users who can be a nominator at once. When",
                    "  set to `None`, no limit is enforced.",
                    "* `max_validator_count`: The max number of users who can be a validator at once. When",
                    "  set to `None`, no limit is enforced.",
                    "* `chill_threshold`: The ratio of `max_nominator_count` or `max_validator_count` which",
                    "  should be filled in order for the `chill_other` transaction to work.",
                    "* `min_commission`: The minimum amount of commission that each validators must maintain.",
                    "  This is checked only upon calling `validate`. Existing validators are not affected.",
                    "",
                    "RuntimeOrigin must be Root to call this function.",
                    "",
                    "NOTE: Existing nominators and validators will not be affected by this update.",
                    "to kick people under the new limits, `chill_other` should be called."
                  ]
                },
                {
                  "name": "chill_other",
                  "fields": [
                    {
                      "name": "controller",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 23,
                  "docs": [
                    "Declare a `controller` to stop participating as either a validator or nominator.",
                    "",
                    "Effects will be felt at the beginning of the next era.",
                    "",
                    "The dispatch origin for this call must be _Signed_, but can be called by anyone.",
                    "",
                    "If the caller is the same as the controller being targeted, then no further checks are",
                    "enforced, and this function behaves just like `chill`.",
                    "",
                    "If the caller is different than the controller being targeted, the following conditions",
                    "must be met:",
                    "",
                    "* `controller` must belong to a nominator who has become non-decodable,",
                    "",
                    "Or:",
                    "",
                    "* A `ChillThreshold` must be set and checked which defines how close to the max",
                    "  nominators or validators we must reach before users can start chilling one-another.",
                    "* A `MaxNominatorCount` and `MaxValidatorCount` must be set which is used to determine",
                    "  how close we are to the threshold.",
                    "* A `MinNominatorBond` and `MinValidatorBond` must be set and checked, which determines",
                    "  if this is a person that should be chilled because they have not met the threshold",
                    "  bond required.",
                    "",
                    "This can be helpful if bond requirements are updated, and we need to remove old users",
                    "who do not satisfy these requirements."
                  ]
                },
                {
                  "name": "force_apply_min_commission",
                  "fields": [
                    {
                      "name": "validator_stash",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 24,
                  "docs": [
                    "Force a validator to have at least the minimum commission. This will not affect a",
                    "validator who already has a commission greater than or equal to the minimum. Any account",
                    "can call this."
                  ]
                },
                {
                  "name": "set_min_commission",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 49,
                      "typeName": "Perbill",
                      "docs": []
                    }
                  ],
                  "index": 25,
                  "docs": [
                    "Sets the minimum amount of commission that each validators must maintain.",
                    "",
                    "This call has lower privilege requirements than `set_staking_config` and can be called",
                    "by the `T::AdminOrigin`. Root can always call this."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 108,
          "path": [
            "pallet_staking",
            "RewardDestination"
          ],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Staked",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Stash",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Controller",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Account",
                  "fields": [
                    {
                      "typeId": 0,
                      "typeName": "AccountId",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "None",
                  "fields": [],
                  "index": 4,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 109,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 93
            }
          },
          "docs": []
        },
        {
          "id": 110,
          "path": [
            "sp_arithmetic",
            "per_things",
            "Percent"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 2,
                  "typeName": "u8",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 111,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 0
            }
          },
          "docs": []
        },
        {
          "id": 112,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 4
            }
          },
          "docs": []
        },
        {
          "id": 113,
          "path": [
            "pallet_staking",
            "pallet",
            "pallet",
            "ConfigOp"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Noop",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Set",
                  "fields": [
                    {
                      "typeId": 6,
                      "typeName": "T",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Remove",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 114,
          "path": [
            "pallet_staking",
            "pallet",
            "pallet",
            "ConfigOp"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Noop",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Set",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "T",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Remove",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 115,
          "path": [
            "pallet_staking",
            "pallet",
            "pallet",
            "ConfigOp"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 110
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Noop",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Set",
                  "fields": [
                    {
                      "typeId": 110,
                      "typeName": "T",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Remove",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 116,
          "path": [
            "pallet_staking",
            "pallet",
            "pallet",
            "ConfigOp"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 49
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Noop",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Set",
                  "fields": [
                    {
                      "typeId": 49,
                      "typeName": "T",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Remove",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 117,
          "path": [
            "pallet_session",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "set_keys",
                  "fields": [
                    {
                      "name": "keys",
                      "typeId": 118,
                      "typeName": "T::Keys",
                      "docs": []
                    },
                    {
                      "name": "proof",
                      "typeId": 12,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Sets the session key(s) of the function caller to `keys`.",
                    "Allows an account to set its session key prior to becoming a validator.",
                    "This doesn't take effect until the next session.",
                    "",
                    "The dispatch origin of this function must be signed.",
                    "",
                    "## Complexity",
                    "- `O(1)`. Actual cost depends on the number of length of `T::Keys::key_ids()` which is",
                    "  fixed."
                  ]
                },
                {
                  "name": "purge_keys",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Removes any session key(s) of the function caller.",
                    "",
                    "This doesn't take effect until the next session.",
                    "",
                    "The dispatch origin of this function must be Signed and the account must be either be",
                    "convertible to a validator ID using the chain's typical addressing system (this usually",
                    "means being a controller account) or directly convertible into a validator ID (which",
                    "usually means being a stash account).",
                    "",
                    "## Complexity",
                    "- `O(1)` in number of key types. Actual cost depends on the number of length of",
                    "  `T::Keys::key_ids()` which is fixed."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 118,
          "path": [
            "vara_runtime",
            "SessionKeys"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "babe",
                  "typeId": 74,
                  "typeName": "<Babe as $crate::BoundToRuntimeAppPublic>::Public",
                  "docs": []
                },
                {
                  "name": "grandpa",
                  "typeId": 32,
                  "typeName": "<Grandpa as $crate::BoundToRuntimeAppPublic>::Public",
                  "docs": []
                },
                {
                  "name": "im_online",
                  "typeId": 40,
                  "typeName": "<ImOnline as $crate::BoundToRuntimeAppPublic>::Public",
                  "docs": []
                },
                {
                  "name": "authority_discovery",
                  "typeId": 119,
                  "typeName": "<AuthorityDiscovery as $crate::BoundToRuntimeAppPublic>::Public",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 119,
          "path": [
            "sp_authority_discovery",
            "app",
            "Public"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 41,
                  "typeName": "sr25519::Public",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 120,
          "path": [
            "pallet_treasury",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "propose_spend",
                  "fields": [
                    {
                      "name": "value",
                      "typeId": 45,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Put forward a suggestion for spending. A deposit proportional to the value",
                    "is reserved and slashed if the proposal is rejected. It is returned once the",
                    "proposal is awarded.",
                    "",
                    "## Complexity",
                    "- O(1)"
                  ]
                },
                {
                  "name": "reject_proposal",
                  "fields": [
                    {
                      "name": "proposal_id",
                      "typeId": 73,
                      "typeName": "ProposalIndex",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Reject a proposed spend. The original deposit will be slashed.",
                    "",
                    "May only be called from `T::RejectOrigin`.",
                    "",
                    "## Complexity",
                    "- O(1)"
                  ]
                },
                {
                  "name": "approve_proposal",
                  "fields": [
                    {
                      "name": "proposal_id",
                      "typeId": 73,
                      "typeName": "ProposalIndex",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Approve a proposal. At a later time, the proposal will be allocated to the beneficiary",
                    "and the original deposit will be returned.",
                    "",
                    "May only be called from `T::ApproveOrigin`.",
                    "",
                    "## Complexity",
                    " - O(1)."
                  ]
                },
                {
                  "name": "spend",
                  "fields": [
                    {
                      "name": "amount",
                      "typeId": 45,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Propose and approve a spend of treasury funds.",
                    "",
                    "- `origin`: Must be `SpendOrigin` with the `Success` value being at least `amount`.",
                    "- `amount`: The amount to be transferred from the treasury to the `beneficiary`.",
                    "- `beneficiary`: The destination account for the transfer.",
                    "",
                    "NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the",
                    "beneficiary."
                  ]
                },
                {
                  "name": "remove_approval",
                  "fields": [
                    {
                      "name": "proposal_id",
                      "typeId": 73,
                      "typeName": "ProposalIndex",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Force a previously approved proposal to be removed from the approval queue.",
                    "The original deposit will no longer be returned.",
                    "",
                    "May only be called from `T::RejectOrigin`.",
                    "- `proposal_id`: The index of a proposal",
                    "",
                    "## Complexity",
                    "- O(A) where `A` is the number of approvals",
                    "",
                    "Errors:",
                    "- `ProposalNotApproved`: The `proposal_id` supplied was not found in the approval queue,",
                    "i.e., the proposal has not been approved. This could also mean the proposal does not",
                    "exist altogether, thus there is no way it would have been approved in the first place."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 121,
          "path": [
            "pallet_utility",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "batch",
                  "fields": [
                    {
                      "name": "calls",
                      "typeId": 122,
                      "typeName": "Vec<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Send a batch of dispatch calls.",
                    "",
                    "May be called from any origin except `None`.",
                    "",
                    "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                    "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                    "",
                    "If origin is root then the calls are dispatched without checking origin filter. (This",
                    "includes bypassing `frame_system::Config::BaseCallFilter`).",
                    "",
                    "## Complexity",
                    "- O(C) where C is the number of calls to be batched.",
                    "",
                    "This will return `Ok` in all circumstances. To determine the success of the batch, an",
                    "event is deposited. If a call failed and the batch was interrupted, then the",
                    "`BatchInterrupted` event is deposited, along with the number of successful calls made",
                    "and the error of the failed call. If all were successful, then the `BatchCompleted`",
                    "event is deposited."
                  ]
                },
                {
                  "name": "as_derivative",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 61,
                      "typeName": "u16",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "typeId": 63,
                      "typeName": "Box<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Send a call through an indexed pseudonym of the sender.",
                    "",
                    "Filter from origin are passed along. The call will be dispatched with an origin which",
                    "use the same filter as the origin of this call.",
                    "",
                    "NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
                    "because you expect `proxy` to have been used prior in the call stack and you do not want",
                    "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
                    "in the Multisig pallet instead.",
                    "",
                    "NOTE: Prior to version *12, this was called `as_limited_sub`.",
                    "",
                    "The dispatch origin for this call must be _Signed_."
                  ]
                },
                {
                  "name": "batch_all",
                  "fields": [
                    {
                      "name": "calls",
                      "typeId": 122,
                      "typeName": "Vec<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Send a batch of dispatch calls and atomically execute them.",
                    "The whole transaction will rollback and fail if any of the calls failed.",
                    "",
                    "May be called from any origin except `None`.",
                    "",
                    "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                    "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                    "",
                    "If origin is root then the calls are dispatched without checking origin filter. (This",
                    "includes bypassing `frame_system::Config::BaseCallFilter`).",
                    "",
                    "## Complexity",
                    "- O(C) where C is the number of calls to be batched."
                  ]
                },
                {
                  "name": "dispatch_as",
                  "fields": [
                    {
                      "name": "as_origin",
                      "typeId": 123,
                      "typeName": "Box<T::PalletsOrigin>",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "typeId": 63,
                      "typeName": "Box<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Dispatches a function call with a provided origin.",
                    "",
                    "The dispatch origin for this call must be _Root_.",
                    "",
                    "## Complexity",
                    "- O(1)."
                  ]
                },
                {
                  "name": "force_batch",
                  "fields": [
                    {
                      "name": "calls",
                      "typeId": 122,
                      "typeName": "Vec<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Send a batch of dispatch calls.",
                    "Unlike `batch`, it allows errors and won't interrupt.",
                    "",
                    "May be called from any origin except `None`.",
                    "",
                    "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                    "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                    "",
                    "If origin is root then the calls are dispatch without checking origin filter. (This",
                    "includes bypassing `frame_system::Config::BaseCallFilter`).",
                    "",
                    "## Complexity",
                    "- O(C) where C is the number of calls to be batched."
                  ]
                },
                {
                  "name": "with_weight",
                  "fields": [
                    {
                      "name": "call",
                      "typeId": 63,
                      "typeName": "Box<<T as Config>::RuntimeCall>",
                      "docs": []
                    },
                    {
                      "name": "weight",
                      "typeId": 8,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Dispatch a function call with a specified weight.",
                    "",
                    "This function does not check the weight of the call, and instead allows the",
                    "Root origin to specify the weight of the call.",
                    "",
                    "The dispatch origin for this call must be _Root_."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 122,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 63
            }
          },
          "docs": []
        },
        {
          "id": 123,
          "path": [
            "vara_runtime",
            "OriginCaller"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "system",
                  "fields": [
                    {
                      "typeId": 124,
                      "typeName": "frame_system::Origin<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Origins",
                  "fields": [
                    {
                      "typeId": 125,
                      "typeName": "pallet_custom_origins::Origin",
                      "docs": []
                    }
                  ],
                  "index": 20,
                  "docs": []
                },
                {
                  "name": "Void",
                  "fields": [
                    {
                      "typeId": 126,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::Void",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 124,
          "path": [
            "frame_support",
            "dispatch",
            "RawOrigin"
          ],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Root",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Signed",
                  "fields": [
                    {
                      "typeId": 0,
                      "typeName": "AccountId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "None",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 125,
          "path": [
            "vara_runtime",
            "governance",
            "origins",
            "pallet_custom_origins",
            "Origin"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "StakingAdmin",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Treasurer",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "FellowshipAdmin",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "GeneralAdmin",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "ReferendumCanceller",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "ReferendumKiller",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "SmallTipper",
                  "fields": [],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "BigTipper",
                  "fields": [],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "SmallSpender",
                  "fields": [],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "MediumSpender",
                  "fields": [],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "BigSpender",
                  "fields": [],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "WhitelistedCaller",
                  "fields": [],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "FellowshipInitiates",
                  "fields": [],
                  "index": 12,
                  "docs": []
                },
                {
                  "name": "Fellows",
                  "fields": [],
                  "index": 13,
                  "docs": []
                },
                {
                  "name": "FellowshipExperts",
                  "fields": [],
                  "index": 14,
                  "docs": []
                },
                {
                  "name": "FellowshipMasters",
                  "fields": [],
                  "index": 15,
                  "docs": []
                },
                {
                  "name": "Fellowship1Dan",
                  "fields": [],
                  "index": 16,
                  "docs": []
                },
                {
                  "name": "Fellowship2Dan",
                  "fields": [],
                  "index": 17,
                  "docs": []
                },
                {
                  "name": "Fellowship3Dan",
                  "fields": [],
                  "index": 18,
                  "docs": []
                },
                {
                  "name": "Fellowship4Dan",
                  "fields": [],
                  "index": 19,
                  "docs": []
                },
                {
                  "name": "Fellowship5Dan",
                  "fields": [],
                  "index": 20,
                  "docs": []
                },
                {
                  "name": "Fellowship6Dan",
                  "fields": [],
                  "index": 21,
                  "docs": []
                },
                {
                  "name": "Fellowship7Dan",
                  "fields": [],
                  "index": 22,
                  "docs": []
                },
                {
                  "name": "Fellowship8Dan",
                  "fields": [],
                  "index": 23,
                  "docs": []
                },
                {
                  "name": "Fellowship9Dan",
                  "fields": [],
                  "index": 24,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 126,
          "path": [
            "sp_core",
            "Void"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": []
            }
          },
          "docs": []
        },
        {
          "id": 127,
          "path": [
            "pallet_conviction_voting",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "vote",
                  "fields": [
                    {
                      "name": "poll_index",
                      "typeId": 73,
                      "typeName": "PollIndexOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "vote",
                      "typeId": 128,
                      "typeName": "AccountVote<BalanceOf<T, I>>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Vote in a poll. If `vote.is_aye()`, the vote is to enact the proposal;",
                    "otherwise it is a vote to keep the status quo.",
                    "",
                    "The dispatch origin of this call must be _Signed_.",
                    "",
                    "- `poll_index`: The index of the poll to vote for.",
                    "- `vote`: The vote configuration.",
                    "",
                    "Weight: `O(R)` where R is the number of polls the voter has voted on."
                  ]
                },
                {
                  "name": "delegate",
                  "fields": [
                    {
                      "name": "class",
                      "typeId": 61,
                      "typeName": "ClassOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "to",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "conviction",
                      "typeId": 130,
                      "typeName": "Conviction",
                      "docs": []
                    },
                    {
                      "name": "balance",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Delegate the voting power (with some given conviction) of the sending account for a",
                    "particular class of polls.",
                    "",
                    "The balance delegated is locked for as long as it's delegated, and thereafter for the",
                    "time appropriate for the conviction's lock period.",
                    "",
                    "The dispatch origin of this call must be _Signed_, and the signing account must either:",
                    "  - be delegating already; or",
                    "  - have no voting activity (if there is, then it will need to be removed/consolidated",
                    "    through `reap_vote` or `unvote`).",
                    "",
                    "- `to`: The account whose voting the `target` account's voting power will follow.",
                    "- `class`: The class of polls to delegate. To delegate multiple classes, multiple calls",
                    "  to this function are required.",
                    "- `conviction`: The conviction that will be attached to the delegated votes. When the",
                    "  account is undelegated, the funds will be locked for the corresponding period.",
                    "- `balance`: The amount of the account's balance to be used in delegating. This must not",
                    "  be more than the account's current balance.",
                    "",
                    "Emits `Delegated`.",
                    "",
                    "Weight: `O(R)` where R is the number of polls the voter delegating to has",
                    "  voted on. Weight is initially charged as if maximum votes, but is refunded later."
                  ]
                },
                {
                  "name": "undelegate",
                  "fields": [
                    {
                      "name": "class",
                      "typeId": 61,
                      "typeName": "ClassOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Undelegate the voting power of the sending account for a particular class of polls.",
                    "",
                    "Tokens may be unlocked following once an amount of time consistent with the lock period",
                    "of the conviction with which the delegation was issued has passed.",
                    "",
                    "The dispatch origin of this call must be _Signed_ and the signing account must be",
                    "currently delegating.",
                    "",
                    "- `class`: The class of polls to remove the delegation from.",
                    "",
                    "Emits `Undelegated`.",
                    "",
                    "Weight: `O(R)` where R is the number of polls the voter delegating to has",
                    "  voted on. Weight is initially charged as if maximum votes, but is refunded later."
                  ]
                },
                {
                  "name": "unlock",
                  "fields": [
                    {
                      "name": "class",
                      "typeId": 61,
                      "typeName": "ClassOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "target",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Remove the lock caused by prior voting/delegating which has expired within a particular",
                    "class.",
                    "",
                    "The dispatch origin of this call must be _Signed_.",
                    "",
                    "- `class`: The class of polls to unlock.",
                    "- `target`: The account to remove the lock on.",
                    "",
                    "Weight: `O(R)` with R number of vote of target."
                  ]
                },
                {
                  "name": "remove_vote",
                  "fields": [
                    {
                      "name": "class",
                      "typeId": 131,
                      "typeName": "Option<ClassOf<T, I>>",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "PollIndexOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Remove a vote for a poll.",
                    "",
                    "If:",
                    "- the poll was cancelled, or",
                    "- the poll is ongoing, or",
                    "- the poll has ended such that",
                    "  - the vote of the account was in opposition to the result; or",
                    "  - there was no conviction to the account's vote; or",
                    "  - the account made a split vote",
                    "...then the vote is removed cleanly and a following call to `unlock` may result in more",
                    "funds being available.",
                    "",
                    "If, however, the poll has ended and:",
                    "- it finished corresponding to the vote of the account, and",
                    "- the account made a standard vote with conviction, and",
                    "- the lock period of the conviction is not over",
                    "...then the lock will be aggregated into the overall account's lock, which may involve",
                    "*overlocking* (where the two locks are combined into a single lock that is the maximum",
                    "of both the amount locked and the time is it locked for).",
                    "",
                    "The dispatch origin of this call must be _Signed_, and the signer must have a vote",
                    "registered for poll `index`.",
                    "",
                    "- `index`: The index of poll of the vote to be removed.",
                    "- `class`: Optional parameter, if given it indicates the class of the poll. For polls",
                    "  which have finished or are cancelled, this must be `Some`.",
                    "",
                    "Weight: `O(R + log R)` where R is the number of polls that `target` has voted on.",
                    "  Weight is calculated for the maximum number of vote."
                  ]
                },
                {
                  "name": "remove_other_vote",
                  "fields": [
                    {
                      "name": "target",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "class",
                      "typeId": 61,
                      "typeName": "ClassOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "PollIndexOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Remove a vote for a poll.",
                    "",
                    "If the `target` is equal to the signer, then this function is exactly equivalent to",
                    "`remove_vote`. If not equal to the signer, then the vote must have expired,",
                    "either because the poll was cancelled, because the voter lost the poll or",
                    "because the conviction period is over.",
                    "",
                    "The dispatch origin of this call must be _Signed_.",
                    "",
                    "- `target`: The account of the vote to be removed; this account must have voted for poll",
                    "  `index`.",
                    "- `index`: The index of poll of the vote to be removed.",
                    "- `class`: The class of the poll.",
                    "",
                    "Weight: `O(R + log R)` where R is the number of polls that `target` has voted on.",
                    "  Weight is calculated for the maximum number of vote."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 128,
          "path": [
            "pallet_conviction_voting",
            "vote",
            "AccountVote"
          ],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Standard",
                  "fields": [
                    {
                      "name": "vote",
                      "typeId": 129,
                      "typeName": "Vote",
                      "docs": []
                    },
                    {
                      "name": "balance",
                      "typeId": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Split",
                  "fields": [
                    {
                      "name": "aye",
                      "typeId": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "nay",
                      "typeId": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "SplitAbstain",
                  "fields": [
                    {
                      "name": "aye",
                      "typeId": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "nay",
                      "typeId": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "abstain",
                      "typeId": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 129,
          "path": [
            "pallet_conviction_voting",
            "vote",
            "Vote"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 130,
          "path": [
            "pallet_conviction_voting",
            "conviction",
            "Conviction"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Locked1x",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Locked2x",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Locked3x",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Locked4x",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Locked5x",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Locked6x",
                  "fields": [],
                  "index": 6,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 131,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 61
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 61,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 132,
          "path": [
            "pallet_referenda",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "submit",
                  "fields": [
                    {
                      "name": "proposal_origin",
                      "typeId": 123,
                      "typeName": "Box<PalletsOriginOf<T>>",
                      "docs": []
                    },
                    {
                      "name": "proposal",
                      "typeId": 62,
                      "typeName": "BoundedCallOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "enactment_moment",
                      "typeId": 133,
                      "typeName": "DispatchTime<T::BlockNumber>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Propose a referendum on a privileged action.",
                    "",
                    "- `origin`: must be `SubmitOrigin` and the account must have `SubmissionDeposit` funds",
                    "  available.",
                    "- `proposal_origin`: The origin from which the proposal should be executed.",
                    "- `proposal`: The proposal.",
                    "- `enactment_moment`: The moment that the proposal should be enacted.",
                    "",
                    "Emits `Submitted`."
                  ]
                },
                {
                  "name": "place_decision_deposit",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Post the Decision Deposit for a referendum.",
                    "",
                    "- `origin`: must be `Signed` and the account must have funds available for the",
                    "  referendum's track's Decision Deposit.",
                    "- `index`: The index of the submitted referendum whose Decision Deposit is yet to be",
                    "  posted.",
                    "",
                    "Emits `DecisionDepositPlaced`."
                  ]
                },
                {
                  "name": "refund_decision_deposit",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Refund the Decision Deposit for a closed referendum back to the depositor.",
                    "",
                    "- `origin`: must be `Signed` or `Root`.",
                    "- `index`: The index of a closed referendum whose Decision Deposit has not yet been",
                    "  refunded.",
                    "",
                    "Emits `DecisionDepositRefunded`."
                  ]
                },
                {
                  "name": "cancel",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Cancel an ongoing referendum.",
                    "",
                    "- `origin`: must be the `CancelOrigin`.",
                    "- `index`: The index of the referendum to be cancelled.",
                    "",
                    "Emits `Cancelled`."
                  ]
                },
                {
                  "name": "kill",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Cancel an ongoing referendum and slash the deposits.",
                    "",
                    "- `origin`: must be the `KillOrigin`.",
                    "- `index`: The index of the referendum to be cancelled.",
                    "",
                    "Emits `Killed` and `DepositSlashed`."
                  ]
                },
                {
                  "name": "nudge_referendum",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Advance a referendum onto its next logical state. Only used internally.",
                    "",
                    "- `origin`: must be `Root`.",
                    "- `index`: the referendum to be advanced."
                  ]
                },
                {
                  "name": "one_fewer_deciding",
                  "fields": [
                    {
                      "name": "track",
                      "typeId": 61,
                      "typeName": "TrackIdOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Advance a track onto its next logical state. Only used internally.",
                    "",
                    "- `origin`: must be `Root`.",
                    "- `track`: the track to be advanced.",
                    "",
                    "Action item for when there is now one fewer referendum in the deciding phase and the",
                    "`DecidingCount` is not yet updated. This means that we should either:",
                    "- begin deciding another referendum (and leave `DecidingCount` alone); or",
                    "- decrement `DecidingCount`."
                  ]
                },
                {
                  "name": "refund_submission_deposit",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Refund the Submission Deposit for a closed referendum back to the depositor.",
                    "",
                    "- `origin`: must be `Signed` or `Root`.",
                    "- `index`: The index of a closed referendum whose Submission Deposit has not yet been",
                    "  refunded.",
                    "",
                    "Emits `SubmissionDepositRefunded`."
                  ]
                },
                {
                  "name": "set_metadata",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    },
                    {
                      "name": "maybe_hash",
                      "typeId": 134,
                      "typeName": "Option<PreimageHash>",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "Set or clear metadata of a referendum.",
                    "",
                    "Parameters:",
                    "- `origin`: Must be `Signed` by a creator of a referendum or by anyone to clear a",
                    "  metadata of a finished referendum.",
                    "- `index`:  The index of a referendum to set or clear metadata for.",
                    "- `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 133,
          "path": [
            "frame_support",
            "traits",
            "schedule",
            "DispatchTime"
          ],
          "params": [
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "At",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "After",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 134,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 11
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 11,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 135,
          "path": [
            "pallet_ranked_collective",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "add_member",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Introduce a new member.",
                    "",
                    "- `origin`: Must be the `AdminOrigin`.",
                    "- `who`: Account of non-member which will become a member.",
                    "- `rank`: The rank to give the new member.",
                    "",
                    "Weight: `O(1)`"
                  ]
                },
                {
                  "name": "promote_member",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Increment the rank of an existing member by one.",
                    "",
                    "- `origin`: Must be the `AdminOrigin`.",
                    "- `who`: Account of existing member.",
                    "",
                    "Weight: `O(1)`"
                  ]
                },
                {
                  "name": "demote_member",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Decrement the rank of an existing member by one. If the member is already at rank zero,",
                    "then they are removed entirely.",
                    "",
                    "- `origin`: Must be the `AdminOrigin`.",
                    "- `who`: Account of existing member of rank greater than zero.",
                    "",
                    "Weight: `O(1)`, less if the member's index is highest in its rank."
                  ]
                },
                {
                  "name": "remove_member",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "min_rank",
                      "typeId": 61,
                      "typeName": "Rank",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Remove the member entirely.",
                    "",
                    "- `origin`: Must be the `AdminOrigin`.",
                    "- `who`: Account of existing member of rank greater than zero.",
                    "- `min_rank`: The rank of the member or greater.",
                    "",
                    "Weight: `O(min_rank)`."
                  ]
                },
                {
                  "name": "vote",
                  "fields": [
                    {
                      "name": "poll",
                      "typeId": 4,
                      "typeName": "PollIndexOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "aye",
                      "typeId": 52,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Add an aye or nay vote for the sender to the given proposal.",
                    "",
                    "- `origin`: Must be `Signed` by a member account.",
                    "- `poll`: Index of a poll which is ongoing.",
                    "- `aye`: `true` if the vote is to approve the proposal, `false` otherwise.",
                    "",
                    "Transaction fees are be waived if the member is voting on any particular proposal",
                    "for the first time and the call is successful. Subsequent vote changes will charge a",
                    "fee.",
                    "",
                    "Weight: `O(1)`, less if there was no previous vote on the poll by the member."
                  ]
                },
                {
                  "name": "cleanup_poll",
                  "fields": [
                    {
                      "name": "poll_index",
                      "typeId": 4,
                      "typeName": "PollIndexOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "max",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Remove votes from the given poll. It must have ended.",
                    "",
                    "- `origin`: Must be `Signed` by any account.",
                    "- `poll_index`: Index of a poll which is completed and for which votes continue to",
                    "  exist.",
                    "- `max`: Maximum number of vote items from remove in this call.",
                    "",
                    "Transaction fees are waived if the operation is successful.",
                    "",
                    "Weight `O(max)` (less if there are fewer items to remove than `max`)."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 136,
          "path": [
            "pallet_referenda",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "submit",
                  "fields": [
                    {
                      "name": "proposal_origin",
                      "typeId": 123,
                      "typeName": "Box<PalletsOriginOf<T>>",
                      "docs": []
                    },
                    {
                      "name": "proposal",
                      "typeId": 62,
                      "typeName": "BoundedCallOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "enactment_moment",
                      "typeId": 133,
                      "typeName": "DispatchTime<T::BlockNumber>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Propose a referendum on a privileged action.",
                    "",
                    "- `origin`: must be `SubmitOrigin` and the account must have `SubmissionDeposit` funds",
                    "  available.",
                    "- `proposal_origin`: The origin from which the proposal should be executed.",
                    "- `proposal`: The proposal.",
                    "- `enactment_moment`: The moment that the proposal should be enacted.",
                    "",
                    "Emits `Submitted`."
                  ]
                },
                {
                  "name": "place_decision_deposit",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Post the Decision Deposit for a referendum.",
                    "",
                    "- `origin`: must be `Signed` and the account must have funds available for the",
                    "  referendum's track's Decision Deposit.",
                    "- `index`: The index of the submitted referendum whose Decision Deposit is yet to be",
                    "  posted.",
                    "",
                    "Emits `DecisionDepositPlaced`."
                  ]
                },
                {
                  "name": "refund_decision_deposit",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Refund the Decision Deposit for a closed referendum back to the depositor.",
                    "",
                    "- `origin`: must be `Signed` or `Root`.",
                    "- `index`: The index of a closed referendum whose Decision Deposit has not yet been",
                    "  refunded.",
                    "",
                    "Emits `DecisionDepositRefunded`."
                  ]
                },
                {
                  "name": "cancel",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Cancel an ongoing referendum.",
                    "",
                    "- `origin`: must be the `CancelOrigin`.",
                    "- `index`: The index of the referendum to be cancelled.",
                    "",
                    "Emits `Cancelled`."
                  ]
                },
                {
                  "name": "kill",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Cancel an ongoing referendum and slash the deposits.",
                    "",
                    "- `origin`: must be the `KillOrigin`.",
                    "- `index`: The index of the referendum to be cancelled.",
                    "",
                    "Emits `Killed` and `DepositSlashed`."
                  ]
                },
                {
                  "name": "nudge_referendum",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Advance a referendum onto its next logical state. Only used internally.",
                    "",
                    "- `origin`: must be `Root`.",
                    "- `index`: the referendum to be advanced."
                  ]
                },
                {
                  "name": "one_fewer_deciding",
                  "fields": [
                    {
                      "name": "track",
                      "typeId": 61,
                      "typeName": "TrackIdOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Advance a track onto its next logical state. Only used internally.",
                    "",
                    "- `origin`: must be `Root`.",
                    "- `track`: the track to be advanced.",
                    "",
                    "Action item for when there is now one fewer referendum in the deciding phase and the",
                    "`DecidingCount` is not yet updated. This means that we should either:",
                    "- begin deciding another referendum (and leave `DecidingCount` alone); or",
                    "- decrement `DecidingCount`."
                  ]
                },
                {
                  "name": "refund_submission_deposit",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Refund the Submission Deposit for a closed referendum back to the depositor.",
                    "",
                    "- `origin`: must be `Signed` or `Root`.",
                    "- `index`: The index of a closed referendum whose Submission Deposit has not yet been",
                    "  refunded.",
                    "",
                    "Emits `SubmissionDepositRefunded`."
                  ]
                },
                {
                  "name": "set_metadata",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    },
                    {
                      "name": "maybe_hash",
                      "typeId": 134,
                      "typeName": "Option<PreimageHash>",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "Set or clear metadata of a referendum.",
                    "",
                    "Parameters:",
                    "- `origin`: Must be `Signed` by a creator of a referendum or by anyone to clear a",
                    "  metadata of a finished referendum.",
                    "- `index`:  The index of a referendum to set or clear metadata for.",
                    "- `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 137,
          "path": [
            "pallet_whitelist",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "whitelist_call",
                  "fields": [
                    {
                      "name": "call_hash",
                      "typeId": 11,
                      "typeName": "PreimageHash",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "remove_whitelisted_call",
                  "fields": [
                    {
                      "name": "call_hash",
                      "typeId": 11,
                      "typeName": "PreimageHash",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "dispatch_whitelisted_call",
                  "fields": [
                    {
                      "name": "call_hash",
                      "typeId": 11,
                      "typeName": "PreimageHash",
                      "docs": []
                    },
                    {
                      "name": "call_encoded_len",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "call_weight_witness",
                      "typeId": 8,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "dispatch_whitelisted_call_with_preimage",
                  "fields": [
                    {
                      "name": "call",
                      "typeId": 63,
                      "typeName": "Box<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 138,
          "path": [
            "pallet_scheduler",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "schedule",
                  "fields": [
                    {
                      "name": "when",
                      "typeId": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "maybe_periodic",
                      "typeId": 139,
                      "typeName": "Option<schedule::Period<T::BlockNumber>>",
                      "docs": []
                    },
                    {
                      "name": "priority",
                      "typeId": 2,
                      "typeName": "schedule::Priority",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "typeId": 63,
                      "typeName": "Box<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Anonymously schedule a task."
                  ]
                },
                {
                  "name": "cancel",
                  "fields": [
                    {
                      "name": "when",
                      "typeId": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Cancel an anonymously scheduled task."
                  ]
                },
                {
                  "name": "schedule_named",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 1,
                      "typeName": "TaskName",
                      "docs": []
                    },
                    {
                      "name": "when",
                      "typeId": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "maybe_periodic",
                      "typeId": 139,
                      "typeName": "Option<schedule::Period<T::BlockNumber>>",
                      "docs": []
                    },
                    {
                      "name": "priority",
                      "typeId": 2,
                      "typeName": "schedule::Priority",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "typeId": 63,
                      "typeName": "Box<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Schedule a named task."
                  ]
                },
                {
                  "name": "cancel_named",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 1,
                      "typeName": "TaskName",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Cancel a named scheduled task."
                  ]
                },
                {
                  "name": "schedule_after",
                  "fields": [
                    {
                      "name": "after",
                      "typeId": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "maybe_periodic",
                      "typeId": 139,
                      "typeName": "Option<schedule::Period<T::BlockNumber>>",
                      "docs": []
                    },
                    {
                      "name": "priority",
                      "typeId": 2,
                      "typeName": "schedule::Priority",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "typeId": 63,
                      "typeName": "Box<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Anonymously schedule a task after a delay."
                  ]
                },
                {
                  "name": "schedule_named_after",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 1,
                      "typeName": "TaskName",
                      "docs": []
                    },
                    {
                      "name": "after",
                      "typeId": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "maybe_periodic",
                      "typeId": 139,
                      "typeName": "Option<schedule::Period<T::BlockNumber>>",
                      "docs": []
                    },
                    {
                      "name": "priority",
                      "typeId": 2,
                      "typeName": "schedule::Priority",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "typeId": 63,
                      "typeName": "Box<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Schedule a named task after a delay."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 139,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 140
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 140,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 140,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                4,
                4
              ]
            }
          },
          "docs": []
        },
        {
          "id": 141,
          "path": [
            "pallet_preimage",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "note_preimage",
                  "fields": [
                    {
                      "name": "bytes",
                      "typeId": 12,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Register a preimage on-chain.",
                    "",
                    "If the preimage was previously requested, no fees or deposits are taken for providing",
                    "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."
                  ]
                },
                {
                  "name": "unnote_preimage",
                  "fields": [
                    {
                      "name": "hash",
                      "typeId": 11,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Clear an unrequested preimage from the runtime storage.",
                    "",
                    "If `len` is provided, then it will be a much cheaper operation.",
                    "",
                    "- `hash`: The hash of the preimage to be removed from the store.",
                    "- `len`: The length of the preimage of `hash`."
                  ]
                },
                {
                  "name": "request_preimage",
                  "fields": [
                    {
                      "name": "hash",
                      "typeId": 11,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Request a preimage be uploaded to the chain without paying any fees or deposits.",
                    "",
                    "If the preimage requests has already been provided on-chain, we unreserve any deposit",
                    "a user may have paid, and take the control of the preimage out of their hands."
                  ]
                },
                {
                  "name": "unrequest_preimage",
                  "fields": [
                    {
                      "name": "hash",
                      "typeId": 11,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Clear a previously made request for a preimage.",
                    "",
                    "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 142,
          "path": [
            "pallet_identity",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "add_registrar",
                  "fields": [
                    {
                      "name": "account",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Add a registrar to the system.",
                    "",
                    "The dispatch origin for this call must be `T::RegistrarOrigin`.",
                    "",
                    "- `account`: the account of the registrar.",
                    "",
                    "Emits `RegistrarAdded` if successful.",
                    "",
                    "## Complexity",
                    "- `O(R)` where `R` registrar-count (governance-bounded and code-bounded)."
                  ]
                },
                {
                  "name": "set_identity",
                  "fields": [
                    {
                      "name": "info",
                      "typeId": 143,
                      "typeName": "Box<IdentityInfo<T::MaxAdditionalFields>>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Set an account's identity information and reserve the appropriate deposit.",
                    "",
                    "If the account already has identity information, the deposit is taken as part payment",
                    "for the new deposit.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "- `info`: The identity information.",
                    "",
                    "Emits `IdentitySet` if successful.",
                    "",
                    "## Complexity",
                    "- `O(X + X' + R)`",
                    "  - where `X` additional-field-count (deposit-bounded and code-bounded)",
                    "  - where `R` judgements-count (registrar-count-bounded)"
                  ]
                },
                {
                  "name": "set_subs",
                  "fields": [
                    {
                      "name": "subs",
                      "typeId": 179,
                      "typeName": "Vec<(T::AccountId, Data)>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Set the sub-accounts of the sender.",
                    "",
                    "Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned",
                    "and an amount `SubAccountDeposit` will be reserved for each item in `subs`.",
                    "",
                    "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                    "identity.",
                    "",
                    "- `subs`: The identity's (new) sub-accounts.",
                    "",
                    "## Complexity",
                    "- `O(P + S)`",
                    "  - where `P` old-subs-count (hard- and deposit-bounded).",
                    "  - where `S` subs-count (hard- and deposit-bounded)."
                  ]
                },
                {
                  "name": "clear_identity",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Clear an account's identity info and all sub-accounts and return all deposits.",
                    "",
                    "Payment: All reserved balances on the account are returned.",
                    "",
                    "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                    "identity.",
                    "",
                    "Emits `IdentityCleared` if successful.",
                    "",
                    "## Complexity",
                    "- `O(R + S + X)`",
                    "  - where `R` registrar-count (governance-bounded).",
                    "  - where `S` subs-count (hard- and deposit-bounded).",
                    "  - where `X` additional-field-count (deposit-bounded and code-bounded)."
                  ]
                },
                {
                  "name": "request_judgement",
                  "fields": [
                    {
                      "name": "reg_index",
                      "typeId": 73,
                      "typeName": "RegistrarIndex",
                      "docs": []
                    },
                    {
                      "name": "max_fee",
                      "typeId": 45,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Request a judgement from a registrar.",
                    "",
                    "Payment: At most `max_fee` will be reserved for payment to the registrar if judgement",
                    "given.",
                    "",
                    "The dispatch origin for this call must be _Signed_ and the sender must have a",
                    "registered identity.",
                    "",
                    "- `reg_index`: The index of the registrar whose judgement is requested.",
                    "- `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:",
                    "",
                    "```nocompile",
                    "Self::registrars().get(reg_index).unwrap().fee",
                    "```",
                    "",
                    "Emits `JudgementRequested` if successful.",
                    "",
                    "## Complexity",
                    "- `O(R + X)`.",
                    "  - where `R` registrar-count (governance-bounded).",
                    "  - where `X` additional-field-count (deposit-bounded and code-bounded)."
                  ]
                },
                {
                  "name": "cancel_request",
                  "fields": [
                    {
                      "name": "reg_index",
                      "typeId": 4,
                      "typeName": "RegistrarIndex",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Cancel a previous request.",
                    "",
                    "Payment: A previously reserved deposit is returned on success.",
                    "",
                    "The dispatch origin for this call must be _Signed_ and the sender must have a",
                    "registered identity.",
                    "",
                    "- `reg_index`: The index of the registrar whose judgement is no longer requested.",
                    "",
                    "Emits `JudgementUnrequested` if successful.",
                    "",
                    "## Complexity",
                    "- `O(R + X)`.",
                    "  - where `R` registrar-count (governance-bounded).",
                    "  - where `X` additional-field-count (deposit-bounded and code-bounded)."
                  ]
                },
                {
                  "name": "set_fee",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 73,
                      "typeName": "RegistrarIndex",
                      "docs": []
                    },
                    {
                      "name": "fee",
                      "typeId": 45,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Set the fee required for a judgement to be requested from a registrar.",
                    "",
                    "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                    "of the registrar whose index is `index`.",
                    "",
                    "- `index`: the index of the registrar whose fee is to be set.",
                    "- `fee`: the new fee.",
                    "",
                    "## Complexity",
                    "- `O(R)`.",
                    "  - where `R` registrar-count (governance-bounded)."
                  ]
                },
                {
                  "name": "set_account_id",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 73,
                      "typeName": "RegistrarIndex",
                      "docs": []
                    },
                    {
                      "name": "new",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Change the account associated with a registrar.",
                    "",
                    "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                    "of the registrar whose index is `index`.",
                    "",
                    "- `index`: the index of the registrar whose fee is to be set.",
                    "- `new`: the new account ID.",
                    "",
                    "## Complexity",
                    "- `O(R)`.",
                    "  - where `R` registrar-count (governance-bounded)."
                  ]
                },
                {
                  "name": "set_fields",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 73,
                      "typeName": "RegistrarIndex",
                      "docs": []
                    },
                    {
                      "name": "fields",
                      "typeId": 181,
                      "typeName": "IdentityFields",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "Set the field information for a registrar.",
                    "",
                    "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                    "of the registrar whose index is `index`.",
                    "",
                    "- `index`: the index of the registrar whose fee is to be set.",
                    "- `fields`: the fields that the registrar concerns themselves with.",
                    "",
                    "## Complexity",
                    "- `O(R)`.",
                    "  - where `R` registrar-count (governance-bounded)."
                  ]
                },
                {
                  "name": "provide_judgement",
                  "fields": [
                    {
                      "name": "reg_index",
                      "typeId": 73,
                      "typeName": "RegistrarIndex",
                      "docs": []
                    },
                    {
                      "name": "target",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "judgement",
                      "typeId": 183,
                      "typeName": "Judgement<BalanceOf<T>>",
                      "docs": []
                    },
                    {
                      "name": "identity",
                      "typeId": 11,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "Provide a judgement for an account's identity.",
                    "",
                    "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                    "of the registrar whose index is `reg_index`.",
                    "",
                    "- `reg_index`: the index of the registrar whose judgement is being made.",
                    "- `target`: the account whose identity the judgement is upon. This must be an account",
                    "  with a registered identity.",
                    "- `judgement`: the judgement of the registrar of index `reg_index` about `target`.",
                    "- `identity`: The hash of the [`IdentityInfo`] for that the judgement is provided.",
                    "",
                    "Emits `JudgementGiven` if successful.",
                    "",
                    "## Complexity",
                    "- `O(R + X)`.",
                    "  - where `R` registrar-count (governance-bounded).",
                    "  - where `X` additional-field-count (deposit-bounded and code-bounded)."
                  ]
                },
                {
                  "name": "kill_identity",
                  "fields": [
                    {
                      "name": "target",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": [
                    "Remove an account's identity and sub-account information and slash the deposits.",
                    "",
                    "Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by",
                    "`Slash`. Verification request deposits are not returned; they should be cancelled",
                    "manually using `cancel_request`.",
                    "",
                    "The dispatch origin for this call must match `T::ForceOrigin`.",
                    "",
                    "- `target`: the account whose identity the judgement is upon. This must be an account",
                    "  with a registered identity.",
                    "",
                    "Emits `IdentityKilled` if successful.",
                    "",
                    "## Complexity",
                    "- `O(R + S + X)`",
                    "  - where `R` registrar-count (governance-bounded).",
                    "  - where `S` subs-count (hard- and deposit-bounded).",
                    "  - where `X` additional-field-count (deposit-bounded and code-bounded)."
                  ]
                },
                {
                  "name": "add_sub",
                  "fields": [
                    {
                      "name": "sub",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "data",
                      "typeId": 146,
                      "typeName": "Data",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": [
                    "Add the given account to the sender's subs.",
                    "",
                    "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                    "to the sender.",
                    "",
                    "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                    "sub identity of `sub`."
                  ]
                },
                {
                  "name": "rename_sub",
                  "fields": [
                    {
                      "name": "sub",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "data",
                      "typeId": 146,
                      "typeName": "Data",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": [
                    "Alter the associated name of the given sub-account.",
                    "",
                    "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                    "sub identity of `sub`."
                  ]
                },
                {
                  "name": "remove_sub",
                  "fields": [
                    {
                      "name": "sub",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": [
                    "Remove the given account from the sender's subs.",
                    "",
                    "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                    "to the sender.",
                    "",
                    "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                    "sub identity of `sub`."
                  ]
                },
                {
                  "name": "quit_sub",
                  "fields": [],
                  "index": 14,
                  "docs": [
                    "Remove the sender as a sub-account.",
                    "",
                    "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                    "to the sender (*not* the original depositor).",
                    "",
                    "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                    "super-identity.",
                    "",
                    "NOTE: This should not normally be used, but is provided in the case that the non-",
                    "controller of an account is maliciously registered as a sub-account."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Identity pallet declaration."
          ]
        },
        {
          "id": 143,
          "path": [
            "pallet_identity",
            "types",
            "IdentityInfo"
          ],
          "params": [
            {
              "name": "FieldLimit"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "additional",
                  "typeId": 144,
                  "typeName": "BoundedVec<(Data, Data), FieldLimit>",
                  "docs": []
                },
                {
                  "name": "display",
                  "typeId": 146,
                  "typeName": "Data",
                  "docs": []
                },
                {
                  "name": "legal",
                  "typeId": 146,
                  "typeName": "Data",
                  "docs": []
                },
                {
                  "name": "web",
                  "typeId": 146,
                  "typeName": "Data",
                  "docs": []
                },
                {
                  "name": "riot",
                  "typeId": 146,
                  "typeName": "Data",
                  "docs": []
                },
                {
                  "name": "email",
                  "typeId": 146,
                  "typeName": "Data",
                  "docs": []
                },
                {
                  "name": "pgp_fingerprint",
                  "typeId": 178,
                  "typeName": "Option<[u8; 20]>",
                  "docs": []
                },
                {
                  "name": "image",
                  "typeId": 146,
                  "typeName": "Data",
                  "docs": []
                },
                {
                  "name": "twitter",
                  "typeId": 146,
                  "typeName": "Data",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 144,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 145
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 177,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 145,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                146,
                146
              ]
            }
          },
          "docs": []
        },
        {
          "id": 146,
          "path": [
            "pallet_identity",
            "types",
            "Data"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Raw0",
                  "fields": [
                    {
                      "typeId": 147,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Raw1",
                  "fields": [
                    {
                      "typeId": 148,
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Raw2",
                  "fields": [
                    {
                      "typeId": 149,
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Raw3",
                  "fields": [
                    {
                      "typeId": 150,
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Raw4",
                  "fields": [
                    {
                      "typeId": 16,
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Raw5",
                  "fields": [
                    {
                      "typeId": 151,
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "Raw6",
                  "fields": [
                    {
                      "typeId": 152,
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "Raw7",
                  "fields": [
                    {
                      "typeId": 153,
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "Raw8",
                  "fields": [
                    {
                      "typeId": 154,
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "Raw9",
                  "fields": [
                    {
                      "typeId": 155,
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "Raw10",
                  "fields": [
                    {
                      "typeId": 156,
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "Raw11",
                  "fields": [
                    {
                      "typeId": 157,
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": []
                },
                {
                  "name": "Raw12",
                  "fields": [
                    {
                      "typeId": 158,
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": []
                },
                {
                  "name": "Raw13",
                  "fields": [
                    {
                      "typeId": 159,
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": []
                },
                {
                  "name": "Raw14",
                  "fields": [
                    {
                      "typeId": 160,
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": []
                },
                {
                  "name": "Raw15",
                  "fields": [
                    {
                      "typeId": 161,
                      "docs": []
                    }
                  ],
                  "index": 16,
                  "docs": []
                },
                {
                  "name": "Raw16",
                  "fields": [
                    {
                      "typeId": 162,
                      "docs": []
                    }
                  ],
                  "index": 17,
                  "docs": []
                },
                {
                  "name": "Raw17",
                  "fields": [
                    {
                      "typeId": 163,
                      "docs": []
                    }
                  ],
                  "index": 18,
                  "docs": []
                },
                {
                  "name": "Raw18",
                  "fields": [
                    {
                      "typeId": 164,
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": []
                },
                {
                  "name": "Raw19",
                  "fields": [
                    {
                      "typeId": 165,
                      "docs": []
                    }
                  ],
                  "index": 20,
                  "docs": []
                },
                {
                  "name": "Raw20",
                  "fields": [
                    {
                      "typeId": 95,
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": []
                },
                {
                  "name": "Raw21",
                  "fields": [
                    {
                      "typeId": 166,
                      "docs": []
                    }
                  ],
                  "index": 22,
                  "docs": []
                },
                {
                  "name": "Raw22",
                  "fields": [
                    {
                      "typeId": 167,
                      "docs": []
                    }
                  ],
                  "index": 23,
                  "docs": []
                },
                {
                  "name": "Raw23",
                  "fields": [
                    {
                      "typeId": 168,
                      "docs": []
                    }
                  ],
                  "index": 24,
                  "docs": []
                },
                {
                  "name": "Raw24",
                  "fields": [
                    {
                      "typeId": 169,
                      "docs": []
                    }
                  ],
                  "index": 25,
                  "docs": []
                },
                {
                  "name": "Raw25",
                  "fields": [
                    {
                      "typeId": 170,
                      "docs": []
                    }
                  ],
                  "index": 26,
                  "docs": []
                },
                {
                  "name": "Raw26",
                  "fields": [
                    {
                      "typeId": 171,
                      "docs": []
                    }
                  ],
                  "index": 27,
                  "docs": []
                },
                {
                  "name": "Raw27",
                  "fields": [
                    {
                      "typeId": 172,
                      "docs": []
                    }
                  ],
                  "index": 28,
                  "docs": []
                },
                {
                  "name": "Raw28",
                  "fields": [
                    {
                      "typeId": 173,
                      "docs": []
                    }
                  ],
                  "index": 29,
                  "docs": []
                },
                {
                  "name": "Raw29",
                  "fields": [
                    {
                      "typeId": 174,
                      "docs": []
                    }
                  ],
                  "index": 30,
                  "docs": []
                },
                {
                  "name": "Raw30",
                  "fields": [
                    {
                      "typeId": 175,
                      "docs": []
                    }
                  ],
                  "index": 31,
                  "docs": []
                },
                {
                  "name": "Raw31",
                  "fields": [
                    {
                      "typeId": 176,
                      "docs": []
                    }
                  ],
                  "index": 32,
                  "docs": []
                },
                {
                  "name": "Raw32",
                  "fields": [
                    {
                      "typeId": 1,
                      "docs": []
                    }
                  ],
                  "index": 33,
                  "docs": []
                },
                {
                  "name": "BlakeTwo256",
                  "fields": [
                    {
                      "typeId": 1,
                      "docs": []
                    }
                  ],
                  "index": 34,
                  "docs": []
                },
                {
                  "name": "Sha256",
                  "fields": [
                    {
                      "typeId": 1,
                      "docs": []
                    }
                  ],
                  "index": 35,
                  "docs": []
                },
                {
                  "name": "Keccak256",
                  "fields": [
                    {
                      "typeId": 1,
                      "docs": []
                    }
                  ],
                  "index": 36,
                  "docs": []
                },
                {
                  "name": "ShaThree256",
                  "fields": [
                    {
                      "typeId": 1,
                      "docs": []
                    }
                  ],
                  "index": 37,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 147,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 0,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 148,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 1,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 149,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 2,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 150,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 3,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 151,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 5,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 152,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 6,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 153,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 7,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 154,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 8,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 155,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 9,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 156,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 10,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 157,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 11,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 158,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 12,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 159,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 13,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 160,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 14,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 161,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 15,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 162,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 16,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 163,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 17,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 164,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 18,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 165,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 19,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 166,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 21,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 167,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 22,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 168,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 23,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 169,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 24,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 170,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 25,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 171,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 26,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 172,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 27,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 173,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 28,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 174,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 29,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 175,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 30,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 176,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 31,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 177,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 145
            }
          },
          "docs": []
        },
        {
          "id": 178,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 95
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 95,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 179,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 180
            }
          },
          "docs": []
        },
        {
          "id": 180,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                0,
                146
              ]
            }
          },
          "docs": []
        },
        {
          "id": 181,
          "path": [
            "pallet_identity",
            "types",
            "BitFlags"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 182
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 10,
                  "typeName": "IdentityField",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 182,
          "path": [
            "pallet_identity",
            "types",
            "IdentityField"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Display",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Legal",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Web",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Riot",
                  "fields": [],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "Email",
                  "fields": [],
                  "index": 16,
                  "docs": []
                },
                {
                  "name": "PgpFingerprint",
                  "fields": [],
                  "index": 32,
                  "docs": []
                },
                {
                  "name": "Image",
                  "fields": [],
                  "index": 64,
                  "docs": []
                },
                {
                  "name": "Twitter",
                  "fields": [],
                  "index": 128,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 183,
          "path": [
            "pallet_identity",
            "types",
            "Judgement"
          ],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Unknown",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "FeePaid",
                  "fields": [
                    {
                      "typeId": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Reasonable",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "KnownGood",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "OutOfDate",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "LowQuality",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Erroneous",
                  "fields": [],
                  "index": 6,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 184,
          "path": [
            "pallet_proxy",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "proxy",
                  "fields": [
                    {
                      "name": "real",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "force_proxy_type",
                      "typeId": 185,
                      "typeName": "Option<T::ProxyType>",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "typeId": 63,
                      "typeName": "Box<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Dispatch the given `call` from an account that the sender is authorised for through",
                    "`add_proxy`.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "Parameters:",
                    "- `real`: The account that the proxy will make a call on behalf of.",
                    "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                    "- `call`: The call to be made by the `real` account."
                  ]
                },
                {
                  "name": "add_proxy",
                  "fields": [
                    {
                      "name": "delegate",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "proxy_type",
                      "typeId": 186,
                      "typeName": "T::ProxyType",
                      "docs": []
                    },
                    {
                      "name": "delay",
                      "typeId": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Register a proxy account for the sender that is able to make calls on its behalf.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "Parameters:",
                    "- `proxy`: The account that the `caller` would like to make a proxy.",
                    "- `proxy_type`: The permissions allowed for this proxy account.",
                    "- `delay`: The announcement period required of the initial proxy. Will generally be",
                    "zero."
                  ]
                },
                {
                  "name": "remove_proxy",
                  "fields": [
                    {
                      "name": "delegate",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "proxy_type",
                      "typeId": 186,
                      "typeName": "T::ProxyType",
                      "docs": []
                    },
                    {
                      "name": "delay",
                      "typeId": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Unregister a proxy account for the sender.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "Parameters:",
                    "- `proxy`: The account that the `caller` would like to remove as a proxy.",
                    "- `proxy_type`: The permissions currently enabled for the removed proxy account."
                  ]
                },
                {
                  "name": "remove_proxies",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Unregister all proxy accounts for the sender.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "WARNING: This may be called on accounts created by `pure`, however if done, then",
                    "the unreserved fees will be inaccessible. **All access to this account will be lost.**"
                  ]
                },
                {
                  "name": "create_pure",
                  "fields": [
                    {
                      "name": "proxy_type",
                      "typeId": 186,
                      "typeName": "T::ProxyType",
                      "docs": []
                    },
                    {
                      "name": "delay",
                      "typeId": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "typeId": 61,
                      "typeName": "u16",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and",
                    "initialize it with a proxy of `proxy_type` for `origin` sender.",
                    "",
                    "Requires a `Signed` origin.",
                    "",
                    "- `proxy_type`: The type of the proxy that the sender will be registered as over the",
                    "new account. This will almost always be the most permissive `ProxyType` possible to",
                    "allow for maximum flexibility.",
                    "- `index`: A disambiguation index, in case this is called multiple times in the same",
                    "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just",
                    "want to use `0`.",
                    "- `delay`: The announcement period required of the initial proxy. Will generally be",
                    "zero.",
                    "",
                    "Fails with `Duplicate` if this has already been called in this transaction, from the",
                    "same sender, with the same parameters.",
                    "",
                    "Fails if there are insufficient funds to pay for deposit."
                  ]
                },
                {
                  "name": "kill_pure",
                  "fields": [
                    {
                      "name": "spawner",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "proxy_type",
                      "typeId": 186,
                      "typeName": "T::ProxyType",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "typeId": 61,
                      "typeName": "u16",
                      "docs": []
                    },
                    {
                      "name": "height",
                      "typeId": 73,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "ext_index",
                      "typeId": 73,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Removes a previously spawned pure proxy.",
                    "",
                    "WARNING: **All access to this account will be lost.** Any funds held in it will be",
                    "inaccessible.",
                    "",
                    "Requires a `Signed` origin, and the sender account must have been created by a call to",
                    "`pure` with corresponding parameters.",
                    "",
                    "- `spawner`: The account that originally called `pure` to create this account.",
                    "- `index`: The disambiguation index originally passed to `pure`. Probably `0`.",
                    "- `proxy_type`: The proxy type originally passed to `pure`.",
                    "- `height`: The height of the chain when the call to `pure` was processed.",
                    "- `ext_index`: The extrinsic index in which the call to `pure` was processed.",
                    "",
                    "Fails with `NoPermission` in case the caller is not a previously created pure",
                    "account whose `pure` call has corresponding parameters."
                  ]
                },
                {
                  "name": "announce",
                  "fields": [
                    {
                      "name": "real",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "typeId": 11,
                      "typeName": "CallHashOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Publish the hash of a proxy-call that will be made in the future.",
                    "",
                    "This must be called some number of blocks before the corresponding `proxy` is attempted",
                    "if the delay associated with the proxy relationship is greater than zero.",
                    "",
                    "No more than `MaxPending` announcements may be made at any one time.",
                    "",
                    "This will take a deposit of `AnnouncementDepositFactor` as well as",
                    "`AnnouncementDepositBase` if there are no other pending announcements.",
                    "",
                    "The dispatch origin for this call must be _Signed_ and a proxy of `real`.",
                    "",
                    "Parameters:",
                    "- `real`: The account that the proxy will make a call on behalf of.",
                    "- `call_hash`: The hash of the call to be made by the `real` account."
                  ]
                },
                {
                  "name": "remove_announcement",
                  "fields": [
                    {
                      "name": "real",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "typeId": 11,
                      "typeName": "CallHashOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Remove a given announcement.",
                    "",
                    "May be called by a proxy account to remove a call they previously announced and return",
                    "the deposit.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "Parameters:",
                    "- `real`: The account that the proxy will make a call on behalf of.",
                    "- `call_hash`: The hash of the call to be made by the `real` account."
                  ]
                },
                {
                  "name": "reject_announcement",
                  "fields": [
                    {
                      "name": "delegate",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "typeId": 11,
                      "typeName": "CallHashOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "Remove the given announcement of a delegate.",
                    "",
                    "May be called by a target (proxied) account to remove a call that one of their delegates",
                    "(`delegate`) has announced they want to execute. The deposit is returned.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "Parameters:",
                    "- `delegate`: The account that previously announced the call.",
                    "- `call_hash`: The hash of the call to be made."
                  ]
                },
                {
                  "name": "proxy_announced",
                  "fields": [
                    {
                      "name": "delegate",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "real",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "force_proxy_type",
                      "typeId": 185,
                      "typeName": "Option<T::ProxyType>",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "typeId": 63,
                      "typeName": "Box<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "Dispatch the given `call` from an account that the sender is authorized for through",
                    "`add_proxy`.",
                    "",
                    "Removes any corresponding announcement(s).",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "Parameters:",
                    "- `real`: The account that the proxy will make a call on behalf of.",
                    "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                    "- `call`: The call to be made by the `real` account."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 185,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 186
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 186,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 186,
          "path": [
            "vara_runtime",
            "ProxyType"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Any",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "NonTransfer",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Governance",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Staking",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "IdentityJudgement",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "CancelProxy",
                  "fields": [],
                  "index": 5,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 187,
          "path": [
            "pallet_multisig",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "as_multi_threshold_1",
                  "fields": [
                    {
                      "name": "other_signatories",
                      "typeId": 111,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "typeId": 63,
                      "typeName": "Box<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Immediately dispatch a multi-signature call using a single approval from the caller.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "- `other_signatories`: The accounts (other than the sender) who are part of the",
                    "multi-signature, but do not participate in the approval process.",
                    "- `call`: The call to be executed.",
                    "",
                    "Result is equivalent to the dispatched result.",
                    "",
                    "## Complexity",
                    "O(Z + C) where Z is the length of the call and C its execution weight."
                  ]
                },
                {
                  "name": "as_multi",
                  "fields": [
                    {
                      "name": "threshold",
                      "typeId": 61,
                      "typeName": "u16",
                      "docs": []
                    },
                    {
                      "name": "other_signatories",
                      "typeId": 111,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "maybe_timepoint",
                      "typeId": 188,
                      "typeName": "Option<Timepoint<T::BlockNumber>>",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "typeId": 63,
                      "typeName": "Box<<T as Config>::RuntimeCall>",
                      "docs": []
                    },
                    {
                      "name": "max_weight",
                      "typeId": 8,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Register approval for a dispatch to be made from a deterministic composite account if",
                    "approved by a total of `threshold - 1` of `other_signatories`.",
                    "",
                    "If there are enough, then dispatch the call.",
                    "",
                    "Payment: `DepositBase` will be reserved if this is the first approval, plus",
                    "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                    "is cancelled.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                    "- `other_signatories`: The accounts (other than the sender) who can approve this",
                    "dispatch. May not be empty.",
                    "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                    "not the first approval, then it must be `Some`, with the timepoint (block number and",
                    "transaction index) of the first approval transaction.",
                    "- `call`: The call to be executed.",
                    "",
                    "NOTE: Unless this is the final approval, you will generally want to use",
                    "`approve_as_multi` instead, since it only requires a hash of the call.",
                    "",
                    "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise",
                    "on success, result is `Ok` and the result from the interior call, if it was executed,",
                    "may be found in the deposited `MultisigExecuted` event.",
                    "",
                    "## Complexity",
                    "- `O(S + Z + Call)`.",
                    "- Up to one balance-reserve or unreserve operation.",
                    "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                    "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                    "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.",
                    "- One encode & hash, both of complexity `O(S)`.",
                    "- Up to one binary search and insert (`O(logS + S)`).",
                    "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                    "- One event.",
                    "- The weight of the `call`.",
                    "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
                    "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
                  ]
                },
                {
                  "name": "approve_as_multi",
                  "fields": [
                    {
                      "name": "threshold",
                      "typeId": 61,
                      "typeName": "u16",
                      "docs": []
                    },
                    {
                      "name": "other_signatories",
                      "typeId": 111,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "maybe_timepoint",
                      "typeId": 188,
                      "typeName": "Option<Timepoint<T::BlockNumber>>",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "typeId": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    },
                    {
                      "name": "max_weight",
                      "typeId": 8,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Register approval for a dispatch to be made from a deterministic composite account if",
                    "approved by a total of `threshold - 1` of `other_signatories`.",
                    "",
                    "Payment: `DepositBase` will be reserved if this is the first approval, plus",
                    "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                    "is cancelled.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                    "- `other_signatories`: The accounts (other than the sender) who can approve this",
                    "dispatch. May not be empty.",
                    "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                    "not the first approval, then it must be `Some`, with the timepoint (block number and",
                    "transaction index) of the first approval transaction.",
                    "- `call_hash`: The hash of the call to be executed.",
                    "",
                    "NOTE: If this is the final approval, you will want to use `as_multi` instead.",
                    "",
                    "## Complexity",
                    "- `O(S)`.",
                    "- Up to one balance-reserve or unreserve operation.",
                    "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                    "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                    "- One encode & hash, both of complexity `O(S)`.",
                    "- Up to one binary search and insert (`O(logS + S)`).",
                    "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                    "- One event.",
                    "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
                    "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
                  ]
                },
                {
                  "name": "cancel_as_multi",
                  "fields": [
                    {
                      "name": "threshold",
                      "typeId": 61,
                      "typeName": "u16",
                      "docs": []
                    },
                    {
                      "name": "other_signatories",
                      "typeId": 111,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "timepoint",
                      "typeId": 189,
                      "typeName": "Timepoint<T::BlockNumber>",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "typeId": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously",
                    "for this operation will be unreserved on success.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                    "- `other_signatories`: The accounts (other than the sender) who can approve this",
                    "dispatch. May not be empty.",
                    "- `timepoint`: The timepoint (block number and transaction index) of the first approval",
                    "transaction for this dispatch.",
                    "- `call_hash`: The hash of the call to be executed.",
                    "",
                    "## Complexity",
                    "- `O(S)`.",
                    "- Up to one balance-reserve or unreserve operation.",
                    "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                    "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                    "- One encode & hash, both of complexity `O(S)`.",
                    "- One event.",
                    "- I/O: 1 read `O(S)`, one remove.",
                    "- Storage: removes one item."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 188,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 189
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 189,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 189,
          "path": [
            "pallet_multisig",
            "Timepoint"
          ],
          "params": [
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "height",
                  "typeId": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "index",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 190,
          "path": [
            "pallet_election_provider_multi_phase",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "submit_unsigned",
                  "fields": [
                    {
                      "name": "raw_solution",
                      "typeId": 191,
                      "typeName": "Box<RawSolution<SolutionOf<T::MinerConfig>>>",
                      "docs": []
                    },
                    {
                      "name": "witness",
                      "typeId": 244,
                      "typeName": "SolutionOrSnapshotSize",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Submit a solution for the unsigned phase.",
                    "",
                    "The dispatch origin fo this call must be __none__.",
                    "",
                    "This submission is checked on the fly. Moreover, this unsigned solution is only",
                    "validated when submitted to the pool from the **local** node. Effectively, this means",
                    "that only active validators can submit this transaction when authoring a block (similar",
                    "to an inherent).",
                    "",
                    "To prevent any incorrect solution (and thus wasted time/weight), this transaction will",
                    "panic if the solution submitted by the validator is invalid in any way, effectively",
                    "putting their authoring reward at risk.",
                    "",
                    "No deposit or reward is associated with this submission."
                  ]
                },
                {
                  "name": "set_minimum_untrusted_score",
                  "fields": [
                    {
                      "name": "maybe_next_score",
                      "typeId": 245,
                      "typeName": "Option<ElectionScore>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Set a new value for `MinimumUntrustedScore`.",
                    "",
                    "Dispatch origin must be aligned with `T::ForceOrigin`.",
                    "",
                    "This check can be turned off by setting the value to `None`."
                  ]
                },
                {
                  "name": "set_emergency_election_result",
                  "fields": [
                    {
                      "name": "supports",
                      "typeId": 246,
                      "typeName": "Supports<T::AccountId>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Set a solution in the queue, to be handed out to the client of this pallet in the next",
                    "call to `ElectionProvider::elect`.",
                    "",
                    "This can only be set by `T::ForceOrigin`, and only when the phase is `Emergency`.",
                    "",
                    "The solution is not checked for any feasibility and is assumed to be trustworthy, as any",
                    "feasibility check itself can in principle cause the election process to fail (due to",
                    "memory/weight constrains)."
                  ]
                },
                {
                  "name": "submit",
                  "fields": [
                    {
                      "name": "raw_solution",
                      "typeId": 191,
                      "typeName": "Box<RawSolution<SolutionOf<T::MinerConfig>>>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Submit a solution for the signed phase.",
                    "",
                    "The dispatch origin fo this call must be __signed__.",
                    "",
                    "The solution is potentially queued, based on the claimed score and processed at the end",
                    "of the signed phase.",
                    "",
                    "A deposit is reserved and recorded for the solution. Based on the outcome, the solution",
                    "might be rewarded, slashed, or get all or a part of the deposit back."
                  ]
                },
                {
                  "name": "governance_fallback",
                  "fields": [
                    {
                      "name": "maybe_max_voters",
                      "typeId": 251,
                      "typeName": "Option<u32>",
                      "docs": []
                    },
                    {
                      "name": "maybe_max_targets",
                      "typeId": 251,
                      "typeName": "Option<u32>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Trigger the governance fallback.",
                    "",
                    "This can only be called when [`Phase::Emergency`] is enabled, as an alternative to",
                    "calling [`Call::set_emergency_election_result`]."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 191,
          "path": [
            "pallet_election_provider_multi_phase",
            "RawSolution"
          ],
          "params": [
            {
              "name": "S",
              "typeId": 192
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "solution",
                  "typeId": 192,
                  "typeName": "S",
                  "docs": []
                },
                {
                  "name": "score",
                  "typeId": 243,
                  "typeName": "ElectionScore",
                  "docs": []
                },
                {
                  "name": "round",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 192,
          "path": [
            "vara_runtime",
            "NposSolution16"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "votes1",
                  "typeId": 193,
                  "docs": []
                },
                {
                  "name": "votes2",
                  "typeId": 196,
                  "docs": []
                },
                {
                  "name": "votes3",
                  "typeId": 201,
                  "docs": []
                },
                {
                  "name": "votes4",
                  "typeId": 204,
                  "docs": []
                },
                {
                  "name": "votes5",
                  "typeId": 207,
                  "docs": []
                },
                {
                  "name": "votes6",
                  "typeId": 210,
                  "docs": []
                },
                {
                  "name": "votes7",
                  "typeId": 213,
                  "docs": []
                },
                {
                  "name": "votes8",
                  "typeId": 216,
                  "docs": []
                },
                {
                  "name": "votes9",
                  "typeId": 219,
                  "docs": []
                },
                {
                  "name": "votes10",
                  "typeId": 222,
                  "docs": []
                },
                {
                  "name": "votes11",
                  "typeId": 225,
                  "docs": []
                },
                {
                  "name": "votes12",
                  "typeId": 228,
                  "docs": []
                },
                {
                  "name": "votes13",
                  "typeId": 231,
                  "docs": []
                },
                {
                  "name": "votes14",
                  "typeId": 234,
                  "docs": []
                },
                {
                  "name": "votes15",
                  "typeId": 237,
                  "docs": []
                },
                {
                  "name": "votes16",
                  "typeId": 240,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 193,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 194
            }
          },
          "docs": []
        },
        {
          "id": 194,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                73,
                195
              ]
            }
          },
          "docs": []
        },
        {
          "id": 195,
          "path": [],
          "params": [],
          "type": {
            "tag": "Compact",
            "value": {
              "typeParam": 61
            }
          },
          "docs": []
        },
        {
          "id": 196,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 197
            }
          },
          "docs": []
        },
        {
          "id": 197,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                73,
                198,
                195
              ]
            }
          },
          "docs": []
        },
        {
          "id": 198,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                195,
                199
              ]
            }
          },
          "docs": []
        },
        {
          "id": 199,
          "path": [],
          "params": [],
          "type": {
            "tag": "Compact",
            "value": {
              "typeParam": 200
            }
          },
          "docs": []
        },
        {
          "id": 200,
          "path": [
            "sp_arithmetic",
            "per_things",
            "PerU16"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 61,
                  "typeName": "u16",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 201,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 202
            }
          },
          "docs": []
        },
        {
          "id": 202,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                73,
                203,
                195
              ]
            }
          },
          "docs": []
        },
        {
          "id": 203,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 2,
              "typeParam": 198
            }
          },
          "docs": []
        },
        {
          "id": 204,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 205
            }
          },
          "docs": []
        },
        {
          "id": 205,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                73,
                206,
                195
              ]
            }
          },
          "docs": []
        },
        {
          "id": 206,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 3,
              "typeParam": 198
            }
          },
          "docs": []
        },
        {
          "id": 207,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 208
            }
          },
          "docs": []
        },
        {
          "id": 208,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                73,
                209,
                195
              ]
            }
          },
          "docs": []
        },
        {
          "id": 209,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 4,
              "typeParam": 198
            }
          },
          "docs": []
        },
        {
          "id": 210,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 211
            }
          },
          "docs": []
        },
        {
          "id": 211,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                73,
                212,
                195
              ]
            }
          },
          "docs": []
        },
        {
          "id": 212,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 5,
              "typeParam": 198
            }
          },
          "docs": []
        },
        {
          "id": 213,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 214
            }
          },
          "docs": []
        },
        {
          "id": 214,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                73,
                215,
                195
              ]
            }
          },
          "docs": []
        },
        {
          "id": 215,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 6,
              "typeParam": 198
            }
          },
          "docs": []
        },
        {
          "id": 216,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 217
            }
          },
          "docs": []
        },
        {
          "id": 217,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                73,
                218,
                195
              ]
            }
          },
          "docs": []
        },
        {
          "id": 218,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 7,
              "typeParam": 198
            }
          },
          "docs": []
        },
        {
          "id": 219,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 220
            }
          },
          "docs": []
        },
        {
          "id": 220,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                73,
                221,
                195
              ]
            }
          },
          "docs": []
        },
        {
          "id": 221,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 8,
              "typeParam": 198
            }
          },
          "docs": []
        },
        {
          "id": 222,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 223
            }
          },
          "docs": []
        },
        {
          "id": 223,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                73,
                224,
                195
              ]
            }
          },
          "docs": []
        },
        {
          "id": 224,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 9,
              "typeParam": 198
            }
          },
          "docs": []
        },
        {
          "id": 225,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 226
            }
          },
          "docs": []
        },
        {
          "id": 226,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                73,
                227,
                195
              ]
            }
          },
          "docs": []
        },
        {
          "id": 227,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 10,
              "typeParam": 198
            }
          },
          "docs": []
        },
        {
          "id": 228,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 229
            }
          },
          "docs": []
        },
        {
          "id": 229,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                73,
                230,
                195
              ]
            }
          },
          "docs": []
        },
        {
          "id": 230,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 11,
              "typeParam": 198
            }
          },
          "docs": []
        },
        {
          "id": 231,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 232
            }
          },
          "docs": []
        },
        {
          "id": 232,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                73,
                233,
                195
              ]
            }
          },
          "docs": []
        },
        {
          "id": 233,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 12,
              "typeParam": 198
            }
          },
          "docs": []
        },
        {
          "id": 234,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 235
            }
          },
          "docs": []
        },
        {
          "id": 235,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                73,
                236,
                195
              ]
            }
          },
          "docs": []
        },
        {
          "id": 236,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 13,
              "typeParam": 198
            }
          },
          "docs": []
        },
        {
          "id": 237,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 238
            }
          },
          "docs": []
        },
        {
          "id": 238,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                73,
                239,
                195
              ]
            }
          },
          "docs": []
        },
        {
          "id": 239,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 14,
              "typeParam": 198
            }
          },
          "docs": []
        },
        {
          "id": 240,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 241
            }
          },
          "docs": []
        },
        {
          "id": 241,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                73,
                242,
                195
              ]
            }
          },
          "docs": []
        },
        {
          "id": 242,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 15,
              "typeParam": 198
            }
          },
          "docs": []
        },
        {
          "id": 243,
          "path": [
            "sp_npos_elections",
            "ElectionScore"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "minimal_stake",
                  "typeId": 6,
                  "typeName": "ExtendedBalance",
                  "docs": []
                },
                {
                  "name": "sum_stake",
                  "typeId": 6,
                  "typeName": "ExtendedBalance",
                  "docs": []
                },
                {
                  "name": "sum_stake_squared",
                  "typeId": 6,
                  "typeName": "ExtendedBalance",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 244,
          "path": [
            "pallet_election_provider_multi_phase",
            "SolutionOrSnapshotSize"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "voters",
                  "typeId": 73,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "targets",
                  "typeId": 73,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 245,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 243
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 243,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 246,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 247
            }
          },
          "docs": []
        },
        {
          "id": 247,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                0,
                248
              ]
            }
          },
          "docs": []
        },
        {
          "id": 248,
          "path": [
            "sp_npos_elections",
            "Support"
          ],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "total",
                  "typeId": 6,
                  "typeName": "ExtendedBalance",
                  "docs": []
                },
                {
                  "name": "voters",
                  "typeId": 249,
                  "typeName": "Vec<(AccountId, ExtendedBalance)>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 249,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 250
            }
          },
          "docs": []
        },
        {
          "id": 250,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                0,
                6
              ]
            }
          },
          "docs": []
        },
        {
          "id": 251,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 4,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 252,
          "path": [
            "pallet_bounties",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "propose_bounty",
                  "fields": [
                    {
                      "name": "value",
                      "typeId": 45,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "description",
                      "typeId": 12,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Propose a new bounty.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "Payment: `TipReportDepositBase` will be reserved from the origin account, as well as",
                    "`DataDepositPerByte` for each byte in `reason`. It will be unreserved upon approval,",
                    "or slashed when rejected.",
                    "",
                    "- `curator`: The curator account whom will manage this bounty.",
                    "- `fee`: The curator fee.",
                    "- `value`: The total payment amount of this bounty, curator fee included.",
                    "- `description`: The description of this bounty."
                  ]
                },
                {
                  "name": "approve_bounty",
                  "fields": [
                    {
                      "name": "bounty_id",
                      "typeId": 73,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Approve a bounty proposal. At a later time, the bounty will be funded and become active",
                    "and the original deposit will be returned.",
                    "",
                    "May only be called from `T::SpendOrigin`.",
                    "",
                    "## Complexity",
                    "- O(1)."
                  ]
                },
                {
                  "name": "propose_curator",
                  "fields": [
                    {
                      "name": "bounty_id",
                      "typeId": 73,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "curator",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "fee",
                      "typeId": 45,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Assign a curator to a funded bounty.",
                    "",
                    "May only be called from `T::SpendOrigin`.",
                    "",
                    "## Complexity",
                    "- O(1)."
                  ]
                },
                {
                  "name": "unassign_curator",
                  "fields": [
                    {
                      "name": "bounty_id",
                      "typeId": 73,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Unassign curator from a bounty.",
                    "",
                    "This function can only be called by the `RejectOrigin` a signed origin.",
                    "",
                    "If this function is called by the `RejectOrigin`, we assume that the curator is",
                    "malicious or inactive. As a result, we will slash the curator when possible.",
                    "",
                    "If the origin is the curator, we take this as a sign they are unable to do their job and",
                    "they willingly give up. We could slash them, but for now we allow them to recover their",
                    "deposit and exit without issue. (We may want to change this if it is abused.)",
                    "",
                    "Finally, the origin can be anyone if and only if the curator is \"inactive\". This allows",
                    "anyone in the community to call out that a curator is not doing their due diligence, and",
                    "we should pick a new curator. In this case the curator should also be slashed.",
                    "",
                    "## Complexity",
                    "- O(1)."
                  ]
                },
                {
                  "name": "accept_curator",
                  "fields": [
                    {
                      "name": "bounty_id",
                      "typeId": 73,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Accept the curator role for a bounty.",
                    "A deposit will be reserved from curator and refund upon successful payout.",
                    "",
                    "May only be called from the curator.",
                    "",
                    "## Complexity",
                    "- O(1)."
                  ]
                },
                {
                  "name": "award_bounty",
                  "fields": [
                    {
                      "name": "bounty_id",
                      "typeId": 73,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Award bounty to a beneficiary account. The beneficiary will be able to claim the funds",
                    "after a delay.",
                    "",
                    "The dispatch origin for this call must be the curator of this bounty.",
                    "",
                    "- `bounty_id`: Bounty ID to award.",
                    "- `beneficiary`: The beneficiary account whom will receive the payout.",
                    "",
                    "## Complexity",
                    "- O(1)."
                  ]
                },
                {
                  "name": "claim_bounty",
                  "fields": [
                    {
                      "name": "bounty_id",
                      "typeId": 73,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Claim the payout from an awarded bounty after payout delay.",
                    "",
                    "The dispatch origin for this call must be the beneficiary of this bounty.",
                    "",
                    "- `bounty_id`: Bounty ID to claim.",
                    "",
                    "## Complexity",
                    "- O(1)."
                  ]
                },
                {
                  "name": "close_bounty",
                  "fields": [
                    {
                      "name": "bounty_id",
                      "typeId": 73,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Cancel a proposed or active bounty. All the funds will be sent to treasury and",
                    "the curator deposit will be unreserved if possible.",
                    "",
                    "Only `T::RejectOrigin` is able to cancel a bounty.",
                    "",
                    "- `bounty_id`: Bounty ID to cancel.",
                    "",
                    "## Complexity",
                    "- O(1)."
                  ]
                },
                {
                  "name": "extend_bounty_expiry",
                  "fields": [
                    {
                      "name": "bounty_id",
                      "typeId": 73,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "remark",
                      "typeId": 12,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "Extend the expiry time of an active bounty.",
                    "",
                    "The dispatch origin for this call must be the curator of this bounty.",
                    "",
                    "- `bounty_id`: Bounty ID to extend.",
                    "- `remark`: additional information.",
                    "",
                    "## Complexity",
                    "- O(1)."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 253,
          "path": [
            "pallet_child_bounties",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "add_child_bounty",
                  "fields": [
                    {
                      "name": "parent_bounty_id",
                      "typeId": 73,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "typeId": 45,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "description",
                      "typeId": 12,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Add a new child-bounty.",
                    "",
                    "The dispatch origin for this call must be the curator of parent",
                    "bounty and the parent bounty must be in \"active\" state.",
                    "",
                    "Child-bounty gets added successfully & fund gets transferred from",
                    "parent bounty to child-bounty account, if parent bounty has enough",
                    "funds, else the call fails.",
                    "",
                    "Upper bound to maximum number of active  child bounties that can be",
                    "added are managed via runtime trait config",
                    "[`Config::MaxActiveChildBountyCount`].",
                    "",
                    "If the call is success, the status of child-bounty is updated to",
                    "\"Added\".",
                    "",
                    "- `parent_bounty_id`: Index of parent bounty for which child-bounty is being added.",
                    "- `value`: Value for executing the proposal.",
                    "- `description`: Text description for the child-bounty."
                  ]
                },
                {
                  "name": "propose_curator",
                  "fields": [
                    {
                      "name": "parent_bounty_id",
                      "typeId": 73,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "child_bounty_id",
                      "typeId": 73,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "curator",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "fee",
                      "typeId": 45,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Propose curator for funded child-bounty.",
                    "",
                    "The dispatch origin for this call must be curator of parent bounty.",
                    "",
                    "Parent bounty must be in active state, for this child-bounty call to",
                    "work.",
                    "",
                    "Child-bounty must be in \"Added\" state, for processing the call. And",
                    "state of child-bounty is moved to \"CuratorProposed\" on successful",
                    "call completion.",
                    "",
                    "- `parent_bounty_id`: Index of parent bounty.",
                    "- `child_bounty_id`: Index of child bounty.",
                    "- `curator`: Address of child-bounty curator.",
                    "- `fee`: payment fee to child-bounty curator for execution."
                  ]
                },
                {
                  "name": "accept_curator",
                  "fields": [
                    {
                      "name": "parent_bounty_id",
                      "typeId": 73,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "child_bounty_id",
                      "typeId": 73,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Accept the curator role for the child-bounty.",
                    "",
                    "The dispatch origin for this call must be the curator of this",
                    "child-bounty.",
                    "",
                    "A deposit will be reserved from the curator and refund upon",
                    "successful payout or cancellation.",
                    "",
                    "Fee for curator is deducted from curator fee of parent bounty.",
                    "",
                    "Parent bounty must be in active state, for this child-bounty call to",
                    "work.",
                    "",
                    "Child-bounty must be in \"CuratorProposed\" state, for processing the",
                    "call. And state of child-bounty is moved to \"Active\" on successful",
                    "call completion.",
                    "",
                    "- `parent_bounty_id`: Index of parent bounty.",
                    "- `child_bounty_id`: Index of child bounty."
                  ]
                },
                {
                  "name": "unassign_curator",
                  "fields": [
                    {
                      "name": "parent_bounty_id",
                      "typeId": 73,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "child_bounty_id",
                      "typeId": 73,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Unassign curator from a child-bounty.",
                    "",
                    "The dispatch origin for this call can be either `RejectOrigin`, or",
                    "the curator of the parent bounty, or any signed origin.",
                    "",
                    "For the origin other than T::RejectOrigin and the child-bounty",
                    "curator, parent bounty must be in active state, for this call to",
                    "work. We allow child-bounty curator and T::RejectOrigin to execute",
                    "this call irrespective of the parent bounty state.",
                    "",
                    "If this function is called by the `RejectOrigin` or the",
                    "parent bounty curator, we assume that the child-bounty curator is",
                    "malicious or inactive. As a result, child-bounty curator deposit is",
                    "slashed.",
                    "",
                    "If the origin is the child-bounty curator, we take this as a sign",
                    "that they are unable to do their job, and are willingly giving up.",
                    "We could slash the deposit, but for now we allow them to unreserve",
                    "their deposit and exit without issue. (We may want to change this if",
                    "it is abused.)",
                    "",
                    "Finally, the origin can be anyone iff the child-bounty curator is",
                    "\"inactive\". Expiry update due of parent bounty is used to estimate",
                    "inactive state of child-bounty curator.",
                    "",
                    "This allows anyone in the community to call out that a child-bounty",
                    "curator is not doing their due diligence, and we should pick a new",
                    "one. In this case the child-bounty curator deposit is slashed.",
                    "",
                    "State of child-bounty is moved to Added state on successful call",
                    "completion.",
                    "",
                    "- `parent_bounty_id`: Index of parent bounty.",
                    "- `child_bounty_id`: Index of child bounty."
                  ]
                },
                {
                  "name": "award_child_bounty",
                  "fields": [
                    {
                      "name": "parent_bounty_id",
                      "typeId": 73,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "child_bounty_id",
                      "typeId": 73,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Award child-bounty to a beneficiary.",
                    "",
                    "The beneficiary will be able to claim the funds after a delay.",
                    "",
                    "The dispatch origin for this call must be the parent curator or",
                    "curator of this child-bounty.",
                    "",
                    "Parent bounty must be in active state, for this child-bounty call to",
                    "work.",
                    "",
                    "Child-bounty must be in active state, for processing the call. And",
                    "state of child-bounty is moved to \"PendingPayout\" on successful call",
                    "completion.",
                    "",
                    "- `parent_bounty_id`: Index of parent bounty.",
                    "- `child_bounty_id`: Index of child bounty.",
                    "- `beneficiary`: Beneficiary account."
                  ]
                },
                {
                  "name": "claim_child_bounty",
                  "fields": [
                    {
                      "name": "parent_bounty_id",
                      "typeId": 73,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "child_bounty_id",
                      "typeId": 73,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Claim the payout from an awarded child-bounty after payout delay.",
                    "",
                    "The dispatch origin for this call may be any signed origin.",
                    "",
                    "Call works independent of parent bounty state, No need for parent",
                    "bounty to be in active state.",
                    "",
                    "The Beneficiary is paid out with agreed bounty value. Curator fee is",
                    "paid & curator deposit is unreserved.",
                    "",
                    "Child-bounty must be in \"PendingPayout\" state, for processing the",
                    "call. And instance of child-bounty is removed from the state on",
                    "successful call completion.",
                    "",
                    "- `parent_bounty_id`: Index of parent bounty.",
                    "- `child_bounty_id`: Index of child bounty."
                  ]
                },
                {
                  "name": "close_child_bounty",
                  "fields": [
                    {
                      "name": "parent_bounty_id",
                      "typeId": 73,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "child_bounty_id",
                      "typeId": 73,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Cancel a proposed or active child-bounty. Child-bounty account funds",
                    "are transferred to parent bounty account. The child-bounty curator",
                    "deposit may be unreserved if possible.",
                    "",
                    "The dispatch origin for this call must be either parent curator or",
                    "`T::RejectOrigin`.",
                    "",
                    "If the state of child-bounty is `Active`, curator deposit is",
                    "unreserved.",
                    "",
                    "If the state of child-bounty is `PendingPayout`, call fails &",
                    "returns `PendingPayout` error.",
                    "",
                    "For the origin other than T::RejectOrigin, parent bounty must be in",
                    "active state, for this child-bounty call to work. For origin",
                    "T::RejectOrigin execution is forced.",
                    "",
                    "Instance of child-bounty is removed from the state on successful",
                    "call completion.",
                    "",
                    "- `parent_bounty_id`: Index of parent bounty.",
                    "- `child_bounty_id`: Index of child bounty."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 254,
          "path": [
            "pallet_nomination_pools",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "join",
                  "fields": [
                    {
                      "name": "amount",
                      "typeId": 45,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Stake funds with a pool. The amount to bond is transferred from the member to the",
                    "pools account and immediately increases the pools bond.",
                    "",
                    "# Note",
                    "",
                    "* An account can only be a member of a single pool.",
                    "* An account cannot join the same pool multiple times.",
                    "* This call will *not* dust the member account, so the member must have at least",
                    "  `existential deposit + amount` in their account.",
                    "* Only a pool with [`PoolState::Open`] can be joined"
                  ]
                },
                {
                  "name": "bond_extra",
                  "fields": [
                    {
                      "name": "extra",
                      "typeId": 255,
                      "typeName": "BondExtra<BalanceOf<T>>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Bond `extra` more funds from `origin` into the pool to which they already belong.",
                    "",
                    "Additional funds can come from either the free balance of the account, of from the",
                    "accumulated rewards, see [`BondExtra`].",
                    "",
                    "Bonding extra funds implies an automatic payout of all pending rewards as well.",
                    "See `bond_extra_other` to bond pending rewards of `other` members."
                  ]
                },
                {
                  "name": "claim_payout",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "A bonded member can use this to claim their payout based on the rewards that the pool",
                    "has accumulated since their last claimed payout (OR since joining if this is their first",
                    "time claiming rewards). The payout will be transferred to the member's account.",
                    "",
                    "The member will earn rewards pro rata based on the members stake vs the sum of the",
                    "members in the pools stake. Rewards do not \"expire\".",
                    "",
                    "See `claim_payout_other` to caim rewards on bahalf of some `other` pool member."
                  ]
                },
                {
                  "name": "unbond",
                  "fields": [
                    {
                      "name": "member_account",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "unbonding_points",
                      "typeId": 45,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Unbond up to `unbonding_points` of the `member_account`'s funds from the pool. It",
                    "implicitly collects the rewards one last time, since not doing so would mean some",
                    "rewards would be forfeited.",
                    "",
                    "Under certain conditions, this call can be dispatched permissionlessly (i.e. by any",
                    "account).",
                    "",
                    "# Conditions for a permissionless dispatch.",
                    "",
                    "* The pool is blocked and the caller is either the root or bouncer. This is refereed to",
                    "  as a kick.",
                    "* The pool is destroying and the member is not the depositor.",
                    "* The pool is destroying, the member is the depositor and no other members are in the",
                    "  pool.",
                    "",
                    "## Conditions for permissioned dispatch (i.e. the caller is also the",
                    "`member_account`):",
                    "",
                    "* The caller is not the depositor.",
                    "* The caller is the depositor, the pool is destroying and no other members are in the",
                    "  pool.",
                    "",
                    "# Note",
                    "",
                    "If there are too many unlocking chunks to unbond with the pool account,",
                    "[`Call::pool_withdraw_unbonded`] can be called to try and minimize unlocking chunks.",
                    "The [`StakingInterface::unbond`] will implicitly call [`Call::pool_withdraw_unbonded`]",
                    "to try to free chunks if necessary (ie. if unbound was called and no unlocking chunks",
                    "are available). However, it may not be possible to release the current unlocking chunks,",
                    "in which case, the result of this call will likely be the `NoMoreChunks` error from the",
                    "staking system."
                  ]
                },
                {
                  "name": "pool_withdraw_unbonded",
                  "fields": [
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "num_slashing_spans",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Call `withdraw_unbonded` for the pools account. This call can be made by any account.",
                    "",
                    "This is useful if their are too many unlocking chunks to call `unbond`, and some",
                    "can be cleared by withdrawing. In the case there are too many unlocking chunks, the user",
                    "would probably see an error like `NoMoreChunks` emitted from the staking system when",
                    "they attempt to unbond."
                  ]
                },
                {
                  "name": "withdraw_unbonded",
                  "fields": [
                    {
                      "name": "member_account",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "num_slashing_spans",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Withdraw unbonded funds from `member_account`. If no bonded funds can be unbonded, an",
                    "error is returned.",
                    "",
                    "Under certain conditions, this call can be dispatched permissionlessly (i.e. by any",
                    "account).",
                    "",
                    "# Conditions for a permissionless dispatch",
                    "",
                    "* The pool is in destroy mode and the target is not the depositor.",
                    "* The target is the depositor and they are the only member in the sub pools.",
                    "* The pool is blocked and the caller is either the root or bouncer.",
                    "",
                    "# Conditions for permissioned dispatch",
                    "",
                    "* The caller is the target and they are not the depositor.",
                    "",
                    "# Note",
                    "",
                    "If the target is the depositor, the pool will be destroyed."
                  ]
                },
                {
                  "name": "create",
                  "fields": [
                    {
                      "name": "amount",
                      "typeId": 45,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "root",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "nominator",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "bouncer",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Create a new delegation pool.",
                    "",
                    "# Arguments",
                    "",
                    "* `amount` - The amount of funds to delegate to the pool. This also acts of a sort of",
                    "  deposit since the pools creator cannot fully unbond funds until the pool is being",
                    "  destroyed.",
                    "* `index` - A disambiguation index for creating the account. Likely only useful when",
                    "  creating multiple pools in the same extrinsic.",
                    "* `root` - The account to set as [`PoolRoles::root`].",
                    "* `nominator` - The account to set as the [`PoolRoles::nominator`].",
                    "* `bouncer` - The account to set as the [`PoolRoles::bouncer`].",
                    "",
                    "# Note",
                    "",
                    "In addition to `amount`, the caller will transfer the existential deposit; so the caller",
                    "needs at have at least `amount + existential_deposit` transferrable."
                  ]
                },
                {
                  "name": "create_with_pool_id",
                  "fields": [
                    {
                      "name": "amount",
                      "typeId": 45,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "root",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "nominator",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "bouncer",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Create a new delegation pool with a previously used pool id",
                    "",
                    "# Arguments",
                    "",
                    "same as `create` with the inclusion of",
                    "* `pool_id` - `A valid PoolId."
                  ]
                },
                {
                  "name": "nominate",
                  "fields": [
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "validators",
                      "typeId": 111,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "Nominate on behalf of the pool.",
                    "",
                    "The dispatch origin of this call must be signed by the pool nominator or the pool",
                    "root role.",
                    "",
                    "This directly forward the call to the staking pallet, on behalf of the pool bonded",
                    "account."
                  ]
                },
                {
                  "name": "set_state",
                  "fields": [
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "state",
                      "typeId": 256,
                      "typeName": "PoolState",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "Set a new state for the pool.",
                    "",
                    "If a pool is already in the `Destroying` state, then under no condition can its state",
                    "change again.",
                    "",
                    "The dispatch origin of this call must be either:",
                    "",
                    "1. signed by the bouncer, or the root role of the pool,",
                    "2. if the pool conditions to be open are NOT met (as described by `ok_to_be_open`), and",
                    "   then the state of the pool can be permissionlessly changed to `Destroying`."
                  ]
                },
                {
                  "name": "set_metadata",
                  "fields": [
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "metadata",
                      "typeId": 12,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": [
                    "Set a new metadata for the pool.",
                    "",
                    "The dispatch origin of this call must be signed by the bouncer, or the root role of the",
                    "pool."
                  ]
                },
                {
                  "name": "set_configs",
                  "fields": [
                    {
                      "name": "min_join_bond",
                      "typeId": 257,
                      "typeName": "ConfigOp<BalanceOf<T>>",
                      "docs": []
                    },
                    {
                      "name": "min_create_bond",
                      "typeId": 257,
                      "typeName": "ConfigOp<BalanceOf<T>>",
                      "docs": []
                    },
                    {
                      "name": "max_pools",
                      "typeId": 258,
                      "typeName": "ConfigOp<u32>",
                      "docs": []
                    },
                    {
                      "name": "max_members",
                      "typeId": 258,
                      "typeName": "ConfigOp<u32>",
                      "docs": []
                    },
                    {
                      "name": "max_members_per_pool",
                      "typeId": 258,
                      "typeName": "ConfigOp<u32>",
                      "docs": []
                    },
                    {
                      "name": "global_max_commission",
                      "typeId": 259,
                      "typeName": "ConfigOp<Perbill>",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": [
                    "Update configurations for the nomination pools. The origin for this call must be",
                    "Root.",
                    "",
                    "# Arguments",
                    "",
                    "* `min_join_bond` - Set [`MinJoinBond`].",
                    "* `min_create_bond` - Set [`MinCreateBond`].",
                    "* `max_pools` - Set [`MaxPools`].",
                    "* `max_members` - Set [`MaxPoolMembers`].",
                    "* `max_members_per_pool` - Set [`MaxPoolMembersPerPool`].",
                    "* `global_max_commission` - Set [`GlobalMaxCommission`]."
                  ]
                },
                {
                  "name": "update_roles",
                  "fields": [
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "new_root",
                      "typeId": 260,
                      "typeName": "ConfigOp<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "new_nominator",
                      "typeId": 260,
                      "typeName": "ConfigOp<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "new_bouncer",
                      "typeId": 260,
                      "typeName": "ConfigOp<T::AccountId>",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": [
                    "Update the roles of the pool.",
                    "",
                    "The root is the only entity that can change any of the roles, including itself,",
                    "excluding the depositor, who can never change.",
                    "",
                    "It emits an event, notifying UIs of the role change. This event is quite relevant to",
                    "most pool members and they should be informed of changes to pool roles."
                  ]
                },
                {
                  "name": "chill",
                  "fields": [
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": [
                    "Chill on behalf of the pool.",
                    "",
                    "The dispatch origin of this call must be signed by the pool nominator or the pool",
                    "root role, same as [`Pallet::nominate`].",
                    "",
                    "This directly forward the call to the staking pallet, on behalf of the pool bonded",
                    "account."
                  ]
                },
                {
                  "name": "bond_extra_other",
                  "fields": [
                    {
                      "name": "member",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "extra",
                      "typeId": 255,
                      "typeName": "BondExtra<BalanceOf<T>>",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": [
                    "`origin` bonds funds from `extra` for some pool member `member` into their respective",
                    "pools.",
                    "",
                    "`origin` can bond extra funds from free balance or pending rewards when `origin ==",
                    "other`.",
                    "",
                    "In the case of `origin != other`, `origin` can only bond extra pending rewards of",
                    "`other` members assuming set_claim_permission for the given member is",
                    "`PermissionlessAll` or `PermissionlessCompound`."
                  ]
                },
                {
                  "name": "set_claim_permission",
                  "fields": [
                    {
                      "name": "permission",
                      "typeId": 261,
                      "typeName": "ClaimPermission",
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": [
                    "Allows a pool member to set a claim permission to allow or disallow permissionless",
                    "bonding and withdrawing.",
                    "",
                    "By default, this is `Permissioned`, which implies only the pool member themselves can",
                    "claim their pending rewards. If a pool member wishes so, they can set this to",
                    "`PermissionlessAll` to allow any account to claim their rewards and bond extra to the",
                    "pool.",
                    "",
                    "# Arguments",
                    "",
                    "* `origin` - Member of a pool.",
                    "* `actor` - Account to claim reward. // improve this"
                  ]
                },
                {
                  "name": "claim_payout_other",
                  "fields": [
                    {
                      "name": "other",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 16,
                  "docs": [
                    "`origin` can claim payouts on some pool member `other`'s behalf.",
                    "",
                    "Pool member `other` must have a `PermissionlessAll` or `PermissionlessWithdraw` in order",
                    "for this call to be successful."
                  ]
                },
                {
                  "name": "set_commission",
                  "fields": [
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "new_commission",
                      "typeId": 262,
                      "typeName": "Option<(Perbill, T::AccountId)>",
                      "docs": []
                    }
                  ],
                  "index": 17,
                  "docs": [
                    "Set the commission of a pool.",
                    "Both a commission percentage and a commission payee must be provided in the `current`",
                    "tuple. Where a `current` of `None` is provided, any current commission will be removed.",
                    "",
                    "- If a `None` is supplied to `new_commission`, existing commission will be removed."
                  ]
                },
                {
                  "name": "set_commission_max",
                  "fields": [
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "max_commission",
                      "typeId": 49,
                      "typeName": "Perbill",
                      "docs": []
                    }
                  ],
                  "index": 18,
                  "docs": [
                    "Set the maximum commission of a pool.",
                    "",
                    "- Initial max can be set to any `Perbill`, and only smaller values thereafter.",
                    "- Current commission will be lowered in the event it is higher than a new max",
                    "  commission."
                  ]
                },
                {
                  "name": "set_commission_change_rate",
                  "fields": [
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "change_rate",
                      "typeId": 264,
                      "typeName": "CommissionChangeRate<T::BlockNumber>",
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": [
                    "Set the commission change rate for a pool.",
                    "",
                    "Initial change rate is not bounded, whereas subsequent updates can only be more",
                    "restrictive than the current."
                  ]
                },
                {
                  "name": "claim_commission",
                  "fields": [
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    }
                  ],
                  "index": 20,
                  "docs": [
                    "Claim pending commission.",
                    "",
                    "The dispatch origin of this call must be signed by the `root` role of the pool. Pending",
                    "commission is paid out and added to total claimed commission`. Total pending commission",
                    "is reset to zero. the current."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 255,
          "path": [
            "pallet_nomination_pools",
            "BondExtra"
          ],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "FreeBalance",
                  "fields": [
                    {
                      "typeId": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Rewards",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 256,
          "path": [
            "pallet_nomination_pools",
            "PoolState"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Open",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Blocked",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Destroying",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 257,
          "path": [
            "pallet_nomination_pools",
            "ConfigOp"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Noop",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Set",
                  "fields": [
                    {
                      "typeId": 6,
                      "typeName": "T",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Remove",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 258,
          "path": [
            "pallet_nomination_pools",
            "ConfigOp"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Noop",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Set",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "T",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Remove",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 259,
          "path": [
            "pallet_nomination_pools",
            "ConfigOp"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 49
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Noop",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Set",
                  "fields": [
                    {
                      "typeId": 49,
                      "typeName": "T",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Remove",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 260,
          "path": [
            "pallet_nomination_pools",
            "ConfigOp"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 0
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Noop",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Set",
                  "fields": [
                    {
                      "typeId": 0,
                      "typeName": "T",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Remove",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 261,
          "path": [
            "pallet_nomination_pools",
            "ClaimPermission"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Permissioned",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "PermissionlessCompound",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "PermissionlessWithdraw",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "PermissionlessAll",
                  "fields": [],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 262,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 263
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 263,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 263,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                49,
                0
              ]
            }
          },
          "docs": []
        },
        {
          "id": 264,
          "path": [
            "pallet_nomination_pools",
            "CommissionChangeRate"
          ],
          "params": [
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "max_increase",
                  "typeId": 49,
                  "typeName": "Perbill",
                  "docs": []
                },
                {
                  "name": "min_delay",
                  "typeId": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 265,
          "path": [
            "pallet_gear",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "upload_code",
                  "fields": [
                    {
                      "name": "code",
                      "typeId": 12,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Saves program `code` in storage.",
                    "",
                    "The extrinsic was created to provide _deploy program from program_ functionality.",
                    "Anyone who wants to define a \"factory\" logic in program should first store the code and metadata for the \"child\"",
                    "program in storage. So the code for the child will be initialized by program initialization request only if it exists in storage.",
                    "",
                    "More precisely, the code and its metadata are actually saved in the storage under the hash of the `code`. The code hash is computed",
                    "as Blake256 hash. At the time of the call the `code` hash should not be in the storage. If it was stored previously, call will end up",
                    "with an `CodeAlreadyExists` error. In this case user can be sure, that he can actually use the hash of his program's code bytes to define",
                    "\"program factory\" logic in his program.",
                    "",
                    "Parameters",
                    "- `code`: wasm code of a program as a byte vector.",
                    "",
                    "Emits the following events:",
                    "- `SavedCode(H256)` - when the code is saved in storage."
                  ]
                },
                {
                  "name": "upload_program",
                  "fields": [
                    {
                      "name": "code",
                      "typeId": 12,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "salt",
                      "typeId": 12,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "init_payload",
                      "typeId": 12,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "gas_limit",
                      "typeId": 10,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Creates program initialization request (message), that is scheduled to be run in the same block.",
                    "",
                    "There are no guarantees that initialization message will be run in the same block due to block",
                    "gas limit restrictions. For example, when it will be the message's turn, required gas limit for it",
                    "could be more than remaining block gas limit. Therefore, the message processing will be postponed",
                    "until the next block.",
                    "",
                    "`ProgramId` is computed as Blake256 hash of concatenated bytes of `code` + `salt`. (todo #512 `code_hash` + `salt`)",
                    "Such `ProgramId` must not exist in the Program Storage at the time of this call.",
                    "",
                    "There is the same guarantee here as in `upload_code`. That is, future program's",
                    "`code` and metadata are stored before message was added to the queue and processed.",
                    "",
                    "The origin must be Signed and the sender must have sufficient funds to pay",
                    "for `gas` and `value` (in case the latter is being transferred).",
                    "",
                    "Parameters:",
                    "- `code`: wasm code of a program as a byte vector.",
                    "- `salt`: randomness term (a seed) to allow programs with identical code",
                    "  to be created independently.",
                    "- `init_payload`: encoded parameters of the wasm module `init` function.",
                    "- `gas_limit`: maximum amount of gas the program can spend before it is halted.",
                    "- `value`: balance to be transferred to the program once it's been created.",
                    "",
                    "Emits the following events:",
                    "- `InitMessageEnqueued(MessageInfo)` when init message is placed in the queue.",
                    "",
                    "# Note",
                    "Faulty (uninitialized) programs still have a valid addresses (program ids) that can deterministically be derived on the",
                    "caller's side upfront. It means that if messages are sent to such an address, they might still linger in the queue.",
                    "",
                    "In order to mitigate the risk of users' funds being sent to an address,",
                    "where a valid program should have resided, while it's not,",
                    "such \"failed-to-initialize\" programs are not silently deleted from the",
                    "program storage but rather marked as \"ghost\" programs.",
                    "Ghost program can be removed by their original author via an explicit call.",
                    "The funds stored by a ghost program will be release to the author once the program",
                    "has been removed."
                  ]
                },
                {
                  "name": "create_program",
                  "fields": [
                    {
                      "name": "code_id",
                      "typeId": 266,
                      "typeName": "CodeId",
                      "docs": []
                    },
                    {
                      "name": "salt",
                      "typeId": 12,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "init_payload",
                      "typeId": 12,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "gas_limit",
                      "typeId": 10,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Creates program via `code_id` from storage.",
                    "",
                    "Parameters:",
                    "- `code_id`: wasm code id in the code storage.",
                    "- `salt`: randomness term (a seed) to allow programs with identical code",
                    "  to be created independently.",
                    "- `init_payload`: encoded parameters of the wasm module `init` function.",
                    "- `gas_limit`: maximum amount of gas the program can spend before it is halted.",
                    "- `value`: balance to be transferred to the program once it's been created.",
                    "",
                    "Emits the following events:",
                    "- `InitMessageEnqueued(MessageInfo)` when init message is placed in the queue.",
                    "",
                    "# NOTE",
                    "",
                    "For the details of this extrinsic, see `upload_code`."
                  ]
                },
                {
                  "name": "send_message",
                  "fields": [
                    {
                      "name": "destination",
                      "typeId": 267,
                      "typeName": "ProgramId",
                      "docs": []
                    },
                    {
                      "name": "payload",
                      "typeId": 12,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "gas_limit",
                      "typeId": 10,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "prepaid",
                      "typeId": 52,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Sends a message to a program or to another account.",
                    "",
                    "The origin must be Signed and the sender must have sufficient funds to pay",
                    "for `gas` and `value` (in case the latter is being transferred).",
                    "",
                    "To avoid an undefined behavior a check is made that the destination address",
                    "is not a program in uninitialized state. If the opposite holds true,",
                    "the message is not enqueued for processing.",
                    "",
                    "If `prepaid` flag is set, the transaction fee and the gas cost will be",
                    "charged against a `voucher` that must have been issued for the sender",
                    "in conjunction with the `destination` program. That means that the",
                    "synthetic account corresponding to the (`AccountId`, `ProgramId`) pair must",
                    "exist and have sufficient funds in it. Otherwise, the call is invalidated.",
                    "",
                    "Parameters:",
                    "- `destination`: the message destination.",
                    "- `payload`: in case of a program destination, parameters of the `handle` function.",
                    "- `gas_limit`: maximum amount of gas the program can spend before it is halted.",
                    "- `value`: balance to be transferred to the program once it's been created.",
                    "- `prepaid`: a flag that indicates whether a voucher should be used.",
                    "",
                    "Emits the following events:",
                    "- `DispatchMessageEnqueued(MessageInfo)` when dispatch message is placed in the queue."
                  ]
                },
                {
                  "name": "send_reply",
                  "fields": [
                    {
                      "name": "reply_to_id",
                      "typeId": 268,
                      "typeName": "MessageId",
                      "docs": []
                    },
                    {
                      "name": "payload",
                      "typeId": 12,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "gas_limit",
                      "typeId": 10,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "prepaid",
                      "typeId": 52,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Send reply on message in `Mailbox`.",
                    "",
                    "Removes message by given `MessageId` from callers `Mailbox`:",
                    "rent funds become free, associated with the message value",
                    "transfers from message sender to extrinsic caller.",
                    "",
                    "Generates reply on removed message with given parameters",
                    "and pushes it in `MessageQueue`.",
                    "",
                    "NOTE: source of the message in mailbox guaranteed to be a program.",
                    "",
                    "NOTE: only user who is destination of the message, can claim value",
                    "or reply on the message from mailbox.",
                    "",
                    "If `prepaid` flag is set, the transaction fee and the gas cost will be",
                    "charged against a `voucher` that must have been issued for the sender",
                    "in conjunction with the mailboxed message source program. That means that the",
                    "synthetic account corresponding to the (`AccountId`, `ProgramId`) pair must",
                    "exist and have sufficient funds in it. Otherwise, the call is invalidated."
                  ]
                },
                {
                  "name": "claim_value",
                  "fields": [
                    {
                      "name": "message_id",
                      "typeId": 268,
                      "typeName": "MessageId",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Claim value from message in `Mailbox`.",
                    "",
                    "Removes message by given `MessageId` from callers `Mailbox`:",
                    "rent funds become free, associated with the message value",
                    "transfers from message sender to extrinsic caller.",
                    "",
                    "NOTE: only user who is destination of the message, can claim value",
                    "or reply on the message from mailbox."
                  ]
                },
                {
                  "name": "run",
                  "fields": [
                    {
                      "name": "max_gas",
                      "typeId": 269,
                      "typeName": "Option<GasBalanceOf<T>>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Process message queue"
                  ]
                },
                {
                  "name": "set_execute_inherent",
                  "fields": [
                    {
                      "name": "value",
                      "typeId": 52,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Sets `ExecuteInherent` flag.",
                    "",
                    "Requires root origin (eventually, will only be set via referendum)"
                  ]
                },
                {
                  "name": "pay_program_rent",
                  "fields": [
                    {
                      "name": "program_id",
                      "typeId": 267,
                      "typeName": "ProgramId",
                      "docs": []
                    },
                    {
                      "name": "block_count",
                      "typeId": 4,
                      "typeName": "BlockNumberFor<T>",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "Pay additional rent for the program."
                  ]
                },
                {
                  "name": "resume_session_init",
                  "fields": [
                    {
                      "name": "program_id",
                      "typeId": 267,
                      "typeName": "ProgramId",
                      "docs": []
                    },
                    {
                      "name": "allocations",
                      "typeId": 270,
                      "typeName": "BTreeSet<WasmPage>",
                      "docs": []
                    },
                    {
                      "name": "code_hash",
                      "typeId": 266,
                      "typeName": "CodeId",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "Starts a resume session of the previously paused program.",
                    "",
                    "The origin must be Signed.",
                    "",
                    "Parameters:",
                    "- `program_id`: id of the program to resume.",
                    "- `allocations`: memory allocations of program prior to stop.",
                    "- `code_hash`: id of the program binary code."
                  ]
                },
                {
                  "name": "resume_session_push",
                  "fields": [
                    {
                      "name": "session_id",
                      "typeId": 6,
                      "typeName": "SessionId",
                      "docs": []
                    },
                    {
                      "name": "memory_pages",
                      "typeId": 273,
                      "typeName": "Vec<(GearPage, PageBuf)>",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": [
                    "Appends memory pages to the resume session.",
                    "",
                    "The origin must be Signed and should be the owner of the session.",
                    "",
                    "Parameters:",
                    "- `session_id`: id of the resume session.",
                    "- `memory_pages`: program memory (or its part) before it was paused."
                  ]
                },
                {
                  "name": "resume_session_commit",
                  "fields": [
                    {
                      "name": "session_id",
                      "typeId": 6,
                      "typeName": "SessionId",
                      "docs": []
                    },
                    {
                      "name": "block_count",
                      "typeId": 4,
                      "typeName": "BlockNumberFor<T>",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": [
                    "Finishes the program resume session.",
                    "",
                    "The origin must be Signed and should be the owner of the session.",
                    "",
                    "Parameters:",
                    "- `session_id`: id of the resume session.",
                    "- `block_count`: the specified period of rent."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 266,
          "path": [
            "gear_core",
            "ids",
            "CodeId"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 1,
                  "typeName": "Hash",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 267,
          "path": [
            "gear_core",
            "ids",
            "ProgramId"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 1,
                  "typeName": "Hash",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 268,
          "path": [
            "gear_core",
            "ids",
            "MessageId"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 1,
                  "typeName": "Hash",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 269,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 10
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 10,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 270,
          "path": [
            "BTreeSet"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 271
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 272,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 271,
          "path": [
            "gear_core",
            "pages",
            "WasmPage"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 272,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 271
            }
          },
          "docs": []
        },
        {
          "id": 273,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 274
            }
          },
          "docs": []
        },
        {
          "id": 274,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                275,
                276
              ]
            }
          },
          "docs": []
        },
        {
          "id": 275,
          "path": [
            "gear_core",
            "pages",
            "GearPage"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 276,
          "path": [
            "gear_core",
            "memory",
            "PageBuf"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 277,
                  "typeName": "PageBufInner",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 277,
          "path": [
            "gear_core",
            "buffer",
            "LimitedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 2
            },
            {
              "name": "E",
              "typeId": 58
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 12,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 278,
          "path": [
            "pallet_gear_staking_rewards",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "refill",
                  "fields": [
                    {
                      "name": "value",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "force_refill",
                  "fields": [
                    {
                      "name": "from",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "withdraw",
                  "fields": [
                    {
                      "name": "to",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 279,
          "path": [
            "pallet_gear_voucher",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "issue",
                  "fields": [
                    {
                      "name": "to",
                      "typeId": 93,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "program",
                      "typeId": 267,
                      "typeName": "ProgramId",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Issue a new voucher for a `user` to be used to pay for sending messages",
                    "to `program_id` program.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "- `to`: The voucher holder account id.",
                    "- `program`: The program id, messages to whom can be paid with the voucher.",
                    "NOTE: the fact a program with such id exists in storage is not checked - it's",
                    "a caller's responsibility to ensure the consistency of the input parameters.",
                    "- `amount`: The voucher amount.",
                    "",
                    "## Complexity",
                    "O(Z + C) where Z is the length of the call and C its execution weight."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 280,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 2
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 12,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 281,
          "path": [
            "pallet_conviction_voting",
            "types",
            "Tally"
          ],
          "params": [
            {
              "name": "Votes",
              "typeId": 6
            },
            {
              "name": "Total"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "ayes",
                  "typeId": 6,
                  "typeName": "Votes",
                  "docs": []
                },
                {
                  "name": "nays",
                  "typeId": 6,
                  "typeName": "Votes",
                  "docs": []
                },
                {
                  "name": "support",
                  "typeId": 6,
                  "typeName": "Votes",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 282,
          "path": [
            "pallet_ranked_collective",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "MemberAdded",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A member `who` has been added."
                  ]
                },
                {
                  "name": "RankChanged",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "rank",
                      "typeId": 61,
                      "typeName": "Rank",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "The member `who`se rank has been changed to the given `rank`."
                  ]
                },
                {
                  "name": "MemberRemoved",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "rank",
                      "typeId": 61,
                      "typeName": "Rank",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "The member `who` of given `rank` has been removed from the collective."
                  ]
                },
                {
                  "name": "Voted",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "poll",
                      "typeId": 4,
                      "typeName": "PollIndexOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "vote",
                      "typeId": 283,
                      "typeName": "VoteRecord",
                      "docs": []
                    },
                    {
                      "name": "tally",
                      "typeId": 284,
                      "typeName": "TallyOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "The member `who` has voted for the `poll` with the given `vote` leading to an updated",
                    "`tally`."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 283,
          "path": [
            "pallet_ranked_collective",
            "VoteRecord"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Aye",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "Votes",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Nay",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "Votes",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 284,
          "path": [
            "pallet_ranked_collective",
            "Tally"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            },
            {
              "name": "M"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "bare_ayes",
                  "typeId": 4,
                  "typeName": "MemberIndex",
                  "docs": []
                },
                {
                  "name": "ayes",
                  "typeId": 4,
                  "typeName": "Votes",
                  "docs": []
                },
                {
                  "name": "nays",
                  "typeId": 4,
                  "typeName": "Votes",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 285,
          "path": [
            "pallet_referenda",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Submitted",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    },
                    {
                      "name": "track",
                      "typeId": 61,
                      "typeName": "TrackIdOf<T, I>",
                      "docs": [
                        "The track (and by extension proposal dispatch origin) of this referendum."
                      ]
                    },
                    {
                      "name": "proposal",
                      "typeId": 62,
                      "typeName": "BoundedCallOf<T, I>",
                      "docs": [
                        "The proposal for the referendum."
                      ]
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A referendum has been submitted."
                  ]
                },
                {
                  "name": "DecisionDepositPlaced",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    },
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": [
                        "The account who placed the deposit."
                      ]
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": [
                        "The amount placed by the account."
                      ]
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "The decision deposit has been placed."
                  ]
                },
                {
                  "name": "DecisionDepositRefunded",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    },
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": [
                        "The account who placed the deposit."
                      ]
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": [
                        "The amount placed by the account."
                      ]
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "The decision deposit has been refunded."
                  ]
                },
                {
                  "name": "DepositSlashed",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": [
                        "The account who placed the deposit."
                      ]
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": [
                        "The amount placed by the account."
                      ]
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A deposit has been slashaed."
                  ]
                },
                {
                  "name": "DecisionStarted",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    },
                    {
                      "name": "track",
                      "typeId": 61,
                      "typeName": "TrackIdOf<T, I>",
                      "docs": [
                        "The track (and by extension proposal dispatch origin) of this referendum."
                      ]
                    },
                    {
                      "name": "proposal",
                      "typeId": 62,
                      "typeName": "BoundedCallOf<T, I>",
                      "docs": [
                        "The proposal for the referendum."
                      ]
                    },
                    {
                      "name": "tally",
                      "typeId": 284,
                      "typeName": "T::Tally",
                      "docs": [
                        "The current tally of votes in this referendum."
                      ]
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "A referendum has moved into the deciding phase."
                  ]
                },
                {
                  "name": "ConfirmStarted",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "ConfirmAborted",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "Confirmed",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    },
                    {
                      "name": "tally",
                      "typeId": 284,
                      "typeName": "T::Tally",
                      "docs": [
                        "The final tally of votes in this referendum."
                      ]
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "A referendum has ended its confirmation phase and is ready for approval."
                  ]
                },
                {
                  "name": "Approved",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "A referendum has been approved and its proposal has been scheduled."
                  ]
                },
                {
                  "name": "Rejected",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    },
                    {
                      "name": "tally",
                      "typeId": 284,
                      "typeName": "T::Tally",
                      "docs": [
                        "The final tally of votes in this referendum."
                      ]
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "A proposal has been rejected by referendum."
                  ]
                },
                {
                  "name": "TimedOut",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    },
                    {
                      "name": "tally",
                      "typeId": 284,
                      "typeName": "T::Tally",
                      "docs": [
                        "The final tally of votes in this referendum."
                      ]
                    }
                  ],
                  "index": 10,
                  "docs": [
                    "A referendum has been timed out without being decided."
                  ]
                },
                {
                  "name": "Cancelled",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    },
                    {
                      "name": "tally",
                      "typeId": 284,
                      "typeName": "T::Tally",
                      "docs": [
                        "The final tally of votes in this referendum."
                      ]
                    }
                  ],
                  "index": 11,
                  "docs": [
                    "A referendum has been cancelled."
                  ]
                },
                {
                  "name": "Killed",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    },
                    {
                      "name": "tally",
                      "typeId": 284,
                      "typeName": "T::Tally",
                      "docs": [
                        "The final tally of votes in this referendum."
                      ]
                    }
                  ],
                  "index": 12,
                  "docs": [
                    "A referendum has been killed."
                  ]
                },
                {
                  "name": "SubmissionDepositRefunded",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    },
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": [
                        "The account who placed the deposit."
                      ]
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": [
                        "The amount placed by the account."
                      ]
                    }
                  ],
                  "index": 13,
                  "docs": [
                    "The submission deposit has been refunded."
                  ]
                },
                {
                  "name": "MetadataSet",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    },
                    {
                      "name": "hash",
                      "typeId": 11,
                      "typeName": "PreimageHash",
                      "docs": [
                        "Preimage hash."
                      ]
                    }
                  ],
                  "index": 14,
                  "docs": [
                    "Metadata for a referendum has been set."
                  ]
                },
                {
                  "name": "MetadataCleared",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    },
                    {
                      "name": "hash",
                      "typeId": 11,
                      "typeName": "PreimageHash",
                      "docs": [
                        "Preimage hash."
                      ]
                    }
                  ],
                  "index": 15,
                  "docs": [
                    "Metadata for a referendum has been cleared."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 286,
          "path": [
            "pallet_whitelist",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "CallWhitelisted",
                  "fields": [
                    {
                      "name": "call_hash",
                      "typeId": 11,
                      "typeName": "PreimageHash",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "WhitelistedCallRemoved",
                  "fields": [
                    {
                      "name": "call_hash",
                      "typeId": 11,
                      "typeName": "PreimageHash",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "WhitelistedCallDispatched",
                  "fields": [
                    {
                      "name": "call_hash",
                      "typeId": 11,
                      "typeName": "PreimageHash",
                      "docs": []
                    },
                    {
                      "name": "result",
                      "typeId": 287,
                      "typeName": "DispatchResultWithPostInfo",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 287,
          "path": [
            "Result"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 288
            },
            {
              "name": "E",
              "typeId": 290
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Ok",
                  "fields": [
                    {
                      "typeId": 288,
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Err",
                  "fields": [
                    {
                      "typeId": 290,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 288,
          "path": [
            "frame_support",
            "dispatch",
            "PostDispatchInfo"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "actual_weight",
                  "typeId": 289,
                  "typeName": "Option<Weight>",
                  "docs": []
                },
                {
                  "name": "pays_fee",
                  "typeId": 23,
                  "typeName": "Pays",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 289,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 8
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 8,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 290,
          "path": [
            "sp_runtime",
            "DispatchErrorWithPostInfo"
          ],
          "params": [
            {
              "name": "Info",
              "typeId": 288
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "post_info",
                  "typeId": 288,
                  "typeName": "Info",
                  "docs": []
                },
                {
                  "name": "error",
                  "typeId": 24,
                  "typeName": "DispatchError",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 291,
          "path": [
            "pallet_scheduler",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Scheduled",
                  "fields": [
                    {
                      "name": "when",
                      "typeId": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Scheduled some task."
                  ]
                },
                {
                  "name": "Canceled",
                  "fields": [
                    {
                      "name": "when",
                      "typeId": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Canceled some task."
                  ]
                },
                {
                  "name": "Dispatched",
                  "fields": [
                    {
                      "name": "task",
                      "typeId": 140,
                      "typeName": "TaskAddress<T::BlockNumber>",
                      "docs": []
                    },
                    {
                      "name": "id",
                      "typeId": 292,
                      "typeName": "Option<TaskName>",
                      "docs": []
                    },
                    {
                      "name": "result",
                      "typeId": 57,
                      "typeName": "DispatchResult",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Dispatched some task."
                  ]
                },
                {
                  "name": "CallUnavailable",
                  "fields": [
                    {
                      "name": "task",
                      "typeId": 140,
                      "typeName": "TaskAddress<T::BlockNumber>",
                      "docs": []
                    },
                    {
                      "name": "id",
                      "typeId": 292,
                      "typeName": "Option<TaskName>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "The call for the provided hash was not found so the task has been aborted."
                  ]
                },
                {
                  "name": "PeriodicFailed",
                  "fields": [
                    {
                      "name": "task",
                      "typeId": 140,
                      "typeName": "TaskAddress<T::BlockNumber>",
                      "docs": []
                    },
                    {
                      "name": "id",
                      "typeId": 292,
                      "typeName": "Option<TaskName>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "The given task was unable to be renewed since the agenda is full at that block."
                  ]
                },
                {
                  "name": "PermanentlyOverweight",
                  "fields": [
                    {
                      "name": "task",
                      "typeId": 140,
                      "typeName": "TaskAddress<T::BlockNumber>",
                      "docs": []
                    },
                    {
                      "name": "id",
                      "typeId": 292,
                      "typeName": "Option<TaskName>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "The given task can never be executed since it is overweight."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Events type."
          ]
        },
        {
          "id": 292,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 1
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 1,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 293,
          "path": [
            "pallet_preimage",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Noted",
                  "fields": [
                    {
                      "name": "hash",
                      "typeId": 11,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A preimage has been noted."
                  ]
                },
                {
                  "name": "Requested",
                  "fields": [
                    {
                      "name": "hash",
                      "typeId": 11,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "A preimage has been requested."
                  ]
                },
                {
                  "name": "Cleared",
                  "fields": [
                    {
                      "name": "hash",
                      "typeId": 11,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "A preimage has ben cleared."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 294,
          "path": [
            "pallet_identity",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "IdentitySet",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A name was set or reset (which will remove all judgements)."
                  ]
                },
                {
                  "name": "IdentityCleared",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "A name was cleared, and the given balance returned."
                  ]
                },
                {
                  "name": "IdentityKilled",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "A name was removed and the given balance slashed."
                  ]
                },
                {
                  "name": "JudgementRequested",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "registrar_index",
                      "typeId": 4,
                      "typeName": "RegistrarIndex",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A judgement was asked from a registrar."
                  ]
                },
                {
                  "name": "JudgementUnrequested",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "registrar_index",
                      "typeId": 4,
                      "typeName": "RegistrarIndex",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "A judgement request was retracted."
                  ]
                },
                {
                  "name": "JudgementGiven",
                  "fields": [
                    {
                      "name": "target",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "registrar_index",
                      "typeId": 4,
                      "typeName": "RegistrarIndex",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "A judgement was given by a registrar."
                  ]
                },
                {
                  "name": "RegistrarAdded",
                  "fields": [
                    {
                      "name": "registrar_index",
                      "typeId": 4,
                      "typeName": "RegistrarIndex",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "A registrar was added."
                  ]
                },
                {
                  "name": "SubIdentityAdded",
                  "fields": [
                    {
                      "name": "sub",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "main",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "A sub-identity was added to an identity and the deposit paid."
                  ]
                },
                {
                  "name": "SubIdentityRemoved",
                  "fields": [
                    {
                      "name": "sub",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "main",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "A sub-identity was removed from an identity and the deposit freed."
                  ]
                },
                {
                  "name": "SubIdentityRevoked",
                  "fields": [
                    {
                      "name": "sub",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "main",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "A sub-identity was cleared, and the given deposit repatriated from the",
                    "main identity account to the sub-identity account."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 295,
          "path": [
            "pallet_proxy",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "ProxyExecuted",
                  "fields": [
                    {
                      "name": "result",
                      "typeId": 57,
                      "typeName": "DispatchResult",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A proxy was executed correctly, with the given."
                  ]
                },
                {
                  "name": "PureCreated",
                  "fields": [
                    {
                      "name": "pure",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "proxy_type",
                      "typeId": 186,
                      "typeName": "T::ProxyType",
                      "docs": []
                    },
                    {
                      "name": "disambiguation_index",
                      "typeId": 61,
                      "typeName": "u16",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "A pure account has been created by new proxy with given",
                    "disambiguation index and proxy type."
                  ]
                },
                {
                  "name": "Announced",
                  "fields": [
                    {
                      "name": "real",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "proxy",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "typeId": 11,
                      "typeName": "CallHashOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "An announcement was placed to make a call in the future."
                  ]
                },
                {
                  "name": "ProxyAdded",
                  "fields": [
                    {
                      "name": "delegator",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "delegatee",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "proxy_type",
                      "typeId": 186,
                      "typeName": "T::ProxyType",
                      "docs": []
                    },
                    {
                      "name": "delay",
                      "typeId": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A proxy was added."
                  ]
                },
                {
                  "name": "ProxyRemoved",
                  "fields": [
                    {
                      "name": "delegator",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "delegatee",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "proxy_type",
                      "typeId": 186,
                      "typeName": "T::ProxyType",
                      "docs": []
                    },
                    {
                      "name": "delay",
                      "typeId": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "A proxy was removed."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 296,
          "path": [
            "pallet_multisig",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "NewMultisig",
                  "fields": [
                    {
                      "name": "approving",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "multisig",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "typeId": 1,
                      "typeName": "CallHash",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A new multisig operation has begun."
                  ]
                },
                {
                  "name": "MultisigApproval",
                  "fields": [
                    {
                      "name": "approving",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "timepoint",
                      "typeId": 189,
                      "typeName": "Timepoint<T::BlockNumber>",
                      "docs": []
                    },
                    {
                      "name": "multisig",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "typeId": 1,
                      "typeName": "CallHash",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "A multisig operation has been approved by someone."
                  ]
                },
                {
                  "name": "MultisigExecuted",
                  "fields": [
                    {
                      "name": "approving",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "timepoint",
                      "typeId": 189,
                      "typeName": "Timepoint<T::BlockNumber>",
                      "docs": []
                    },
                    {
                      "name": "multisig",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "typeId": 1,
                      "typeName": "CallHash",
                      "docs": []
                    },
                    {
                      "name": "result",
                      "typeId": 57,
                      "typeName": "DispatchResult",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "A multisig operation has been executed."
                  ]
                },
                {
                  "name": "MultisigCancelled",
                  "fields": [
                    {
                      "name": "cancelling",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "timepoint",
                      "typeId": 189,
                      "typeName": "Timepoint<T::BlockNumber>",
                      "docs": []
                    },
                    {
                      "name": "multisig",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "typeId": 1,
                      "typeName": "CallHash",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A multisig operation has been cancelled."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 297,
          "path": [
            "pallet_election_provider_multi_phase",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "SolutionStored",
                  "fields": [
                    {
                      "name": "compute",
                      "typeId": 298,
                      "typeName": "ElectionCompute",
                      "docs": []
                    },
                    {
                      "name": "origin",
                      "typeId": 299,
                      "typeName": "Option<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "prev_ejected",
                      "typeId": 52,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A solution was stored with the given compute.",
                    "",
                    "The `origin` indicates the origin of the solution. If `origin` is `Some(AccountId)`,",
                    "the stored solution was submited in the signed phase by a miner with the `AccountId`.",
                    "Otherwise, the solution was stored either during the unsigned phase or by",
                    "`T::ForceOrigin`. The `bool` is `true` when a previous solution was ejected to make",
                    "room for this one."
                  ]
                },
                {
                  "name": "ElectionFinalized",
                  "fields": [
                    {
                      "name": "compute",
                      "typeId": 298,
                      "typeName": "ElectionCompute",
                      "docs": []
                    },
                    {
                      "name": "score",
                      "typeId": 243,
                      "typeName": "ElectionScore",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "The election has been finalized, with the given computation and score."
                  ]
                },
                {
                  "name": "ElectionFailed",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "An election failed.",
                    "",
                    "Not much can be said about which computes failed in the process."
                  ]
                },
                {
                  "name": "Rewarded",
                  "fields": [
                    {
                      "name": "account",
                      "typeId": 0,
                      "typeName": "<T as frame_system::Config>::AccountId",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "An account has been rewarded for their signed submission being finalized."
                  ]
                },
                {
                  "name": "Slashed",
                  "fields": [
                    {
                      "name": "account",
                      "typeId": 0,
                      "typeName": "<T as frame_system::Config>::AccountId",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "An account has been slashed for submitting an invalid signed submission."
                  ]
                },
                {
                  "name": "PhaseTransitioned",
                  "fields": [
                    {
                      "name": "from",
                      "typeId": 300,
                      "typeName": "Phase<T::BlockNumber>",
                      "docs": []
                    },
                    {
                      "name": "to",
                      "typeId": 300,
                      "typeName": "Phase<T::BlockNumber>",
                      "docs": []
                    },
                    {
                      "name": "round",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "There was a phase transition in a given round."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 298,
          "path": [
            "pallet_election_provider_multi_phase",
            "ElectionCompute"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "OnChain",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Signed",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Unsigned",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Fallback",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Emergency",
                  "fields": [],
                  "index": 4,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 299,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 0
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 0,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 300,
          "path": [
            "pallet_election_provider_multi_phase",
            "Phase"
          ],
          "params": [
            {
              "name": "Bn",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Off",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Signed",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Unsigned",
                  "fields": [
                    {
                      "typeId": 301,
                      "typeName": "(bool, Bn)",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Emergency",
                  "fields": [],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 301,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                52,
                4
              ]
            }
          },
          "docs": []
        },
        {
          "id": 302,
          "path": [
            "pallet_offences",
            "pallet",
            "Event"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Offence",
                  "fields": [
                    {
                      "name": "kind",
                      "typeId": 162,
                      "typeName": "Kind",
                      "docs": []
                    },
                    {
                      "name": "timeslot",
                      "typeId": 12,
                      "typeName": "OpaqueTimeSlot",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "There is an offence reported of the given `kind` happened at the `session_index` and",
                    "(kind-specific) time slot. This event is not deposited for duplicate slashes.",
                    "\\[kind, timeslot\\]."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Events type."
          ]
        },
        {
          "id": 303,
          "path": [
            "pallet_bounties",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "BountyProposed",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "New bounty proposal."
                  ]
                },
                {
                  "name": "BountyRejected",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "bond",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "A bounty proposal was rejected; funds were slashed."
                  ]
                },
                {
                  "name": "BountyBecameActive",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "A bounty proposal is funded and became active."
                  ]
                },
                {
                  "name": "BountyAwarded",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A bounty is awarded to a beneficiary."
                  ]
                },
                {
                  "name": "BountyClaimed",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "payout",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "A bounty is claimed by beneficiary."
                  ]
                },
                {
                  "name": "BountyCanceled",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "A bounty is cancelled."
                  ]
                },
                {
                  "name": "BountyExtended",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "A bounty expiry is extended."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 304,
          "path": [
            "pallet_child_bounties",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Added",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "child_index",
                      "typeId": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A child-bounty is added."
                  ]
                },
                {
                  "name": "Awarded",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "child_index",
                      "typeId": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "A child-bounty is awarded to a beneficiary."
                  ]
                },
                {
                  "name": "Claimed",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "child_index",
                      "typeId": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "payout",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "A child-bounty is claimed by beneficiary."
                  ]
                },
                {
                  "name": "Canceled",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "child_index",
                      "typeId": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A child-bounty is cancelled."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 305,
          "path": [
            "pallet_nomination_pools",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Created",
                  "fields": [
                    {
                      "name": "depositor",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A pool has been created."
                  ]
                },
                {
                  "name": "Bonded",
                  "fields": [
                    {
                      "name": "member",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "bonded",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "joined",
                      "typeId": 52,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "A member has became bonded in a pool."
                  ]
                },
                {
                  "name": "PaidOut",
                  "fields": [
                    {
                      "name": "member",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "payout",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "A payout has been made to a member."
                  ]
                },
                {
                  "name": "Unbonded",
                  "fields": [
                    {
                      "name": "member",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "balance",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "points",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "era",
                      "typeId": 4,
                      "typeName": "EraIndex",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A member has unbonded from their pool.",
                    "",
                    "- `balance` is the corresponding balance of the number of points that has been",
                    "  requested to be unbonded (the argument of the `unbond` transaction) from the bonded",
                    "  pool.",
                    "- `points` is the number of points that are issued as a result of `balance` being",
                    "dissolved into the corresponding unbonding pool.",
                    "- `era` is the era in which the balance will be unbonded.",
                    "In the absence of slashing, these values will match. In the presence of slashing, the",
                    "number of points that are issued in the unbonding pool will be less than the amount",
                    "requested to be unbonded."
                  ]
                },
                {
                  "name": "Withdrawn",
                  "fields": [
                    {
                      "name": "member",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "balance",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "points",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "A member has withdrawn from their pool.",
                    "",
                    "The given number of `points` have been dissolved in return of `balance`.",
                    "",
                    "Similar to `Unbonded` event, in the absence of slashing, the ratio of point to balance",
                    "will be 1."
                  ]
                },
                {
                  "name": "Destroyed",
                  "fields": [
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "A pool has been destroyed."
                  ]
                },
                {
                  "name": "StateChanged",
                  "fields": [
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "new_state",
                      "typeId": 256,
                      "typeName": "PoolState",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "The state of a pool has changed"
                  ]
                },
                {
                  "name": "MemberRemoved",
                  "fields": [
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "member",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "A member has been removed from a pool.",
                    "",
                    "The removal can be voluntary (withdrawn all unbonded funds) or involuntary (kicked)."
                  ]
                },
                {
                  "name": "RolesUpdated",
                  "fields": [
                    {
                      "name": "root",
                      "typeId": 299,
                      "typeName": "Option<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "bouncer",
                      "typeId": 299,
                      "typeName": "Option<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "nominator",
                      "typeId": 299,
                      "typeName": "Option<T::AccountId>",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "The roles of a pool have been updated to the given new roles. Note that the depositor",
                    "can never change."
                  ]
                },
                {
                  "name": "PoolSlashed",
                  "fields": [
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "balance",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "The active balance of pool `pool_id` has been slashed to `balance`."
                  ]
                },
                {
                  "name": "UnbondingPoolSlashed",
                  "fields": [
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "era",
                      "typeId": 4,
                      "typeName": "EraIndex",
                      "docs": []
                    },
                    {
                      "name": "balance",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": [
                    "The unbond pool at `era` of pool `pool_id` has been slashed to `balance`."
                  ]
                },
                {
                  "name": "PoolCommissionUpdated",
                  "fields": [
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "current",
                      "typeId": 262,
                      "typeName": "Option<(Perbill, T::AccountId)>",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": [
                    "A pool's commission setting has been changed."
                  ]
                },
                {
                  "name": "PoolMaxCommissionUpdated",
                  "fields": [
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "max_commission",
                      "typeId": 49,
                      "typeName": "Perbill",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": [
                    "A pool's maximum commission setting has been changed."
                  ]
                },
                {
                  "name": "PoolCommissionChangeRateUpdated",
                  "fields": [
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "change_rate",
                      "typeId": 264,
                      "typeName": "CommissionChangeRate<T::BlockNumber>",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": [
                    "A pool's commission `change_rate` has been changed."
                  ]
                },
                {
                  "name": "PoolCommissionClaimed",
                  "fields": [
                    {
                      "name": "pool_id",
                      "typeId": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "commission",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": [
                    "Pool commission has been claimed."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Events of this pallet."
          ]
        },
        {
          "id": 306,
          "path": [
            "pallet_gear",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "MessageQueued",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 268,
                      "typeName": "MessageId",
                      "docs": [
                        "Generated id of the message."
                      ]
                    },
                    {
                      "name": "source",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": [
                        "Account id of the source of the message."
                      ]
                    },
                    {
                      "name": "destination",
                      "typeId": 267,
                      "typeName": "ProgramId",
                      "docs": [
                        "Program id, who is the message's destination."
                      ]
                    },
                    {
                      "name": "entry",
                      "typeId": 307,
                      "typeName": "MessageEntry",
                      "docs": [
                        "Entry point for processing of the message.",
                        "On the sending stage, the processing function",
                        "of the program is always known."
                      ]
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "User sends message to program, which was successfully",
                    "added to the Gear message queue."
                  ]
                },
                {
                  "name": "UserMessageSent",
                  "fields": [
                    {
                      "name": "message",
                      "typeId": 308,
                      "typeName": "UserMessage",
                      "docs": [
                        "Message sent."
                      ]
                    },
                    {
                      "name": "expiration",
                      "typeId": 251,
                      "typeName": "Option<T::BlockNumber>",
                      "docs": [
                        "Block number of expiration from `Mailbox`.",
                        "",
                        "Equals `Some(_)` with block number when message",
                        "will be removed from `Mailbox` due to some",
                        "reasons (see #642, #646 and #1010).",
                        "",
                        "Equals `None` if message wasn't inserted to",
                        "`Mailbox` and appears as only `Event`."
                      ]
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Somebody sent a message to the user."
                  ]
                },
                {
                  "name": "UserMessageRead",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 268,
                      "typeName": "MessageId",
                      "docs": [
                        "Id of the message read."
                      ]
                    },
                    {
                      "name": "reason",
                      "typeId": 318,
                      "typeName": "UserMessageReadReason",
                      "docs": [
                        "The reason for the reading (removal from `Mailbox`).",
                        "",
                        "NOTE: See more docs about reasons at `gear_common::event`."
                      ]
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Message marked as \"read\" and removes it from `Mailbox`.",
                    "This event only affects messages that were",
                    "already inserted in `Mailbox`."
                  ]
                },
                {
                  "name": "MessagesDispatched",
                  "fields": [
                    {
                      "name": "total",
                      "typeId": 4,
                      "typeName": "MessengerCapacityOf<T>",
                      "docs": [
                        "Total amount of messages removed from message queue."
                      ]
                    },
                    {
                      "name": "statuses",
                      "typeId": 321,
                      "typeName": "BTreeMap<MessageId, DispatchStatus>",
                      "docs": [
                        "Execution statuses of the messages, which were already known",
                        "by `Event::MessageQueued` (sent from user to program)."
                      ]
                    },
                    {
                      "name": "state_changes",
                      "typeId": 325,
                      "typeName": "BTreeSet<ProgramId>",
                      "docs": [
                        "Ids of programs, which state changed during queue processing."
                      ]
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "The result of processing the messages within the block."
                  ]
                },
                {
                  "name": "MessageWaited",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 268,
                      "typeName": "MessageId",
                      "docs": [
                        "Id of the message waited."
                      ]
                    },
                    {
                      "name": "origin",
                      "typeId": 327,
                      "typeName": "Option<GasNodeId<MessageId, ReservationId>>",
                      "docs": [
                        "Origin message id, which started messaging chain with programs,",
                        "where currently waited message was created.",
                        "",
                        "Used to identify by the user that this message associated",
                        "with him and the concrete initial message."
                      ]
                    },
                    {
                      "name": "reason",
                      "typeId": 330,
                      "typeName": "MessageWaitedReason",
                      "docs": [
                        "The reason of the waiting (addition to `Waitlist`).",
                        "",
                        "NOTE: See more docs about reasons at `gear_common::event`."
                      ]
                    },
                    {
                      "name": "expiration",
                      "typeId": 4,
                      "typeName": "T::BlockNumber",
                      "docs": [
                        "Block number of expiration from `Waitlist`.",
                        "",
                        "Equals block number when message will be removed from `Waitlist`",
                        "due to some reasons (see #642, #646 and #1010)."
                      ]
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Messages execution delayed (waited) and successfully",
                    "added to gear waitlist."
                  ]
                },
                {
                  "name": "MessageWoken",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 268,
                      "typeName": "MessageId",
                      "docs": [
                        "Id of the message woken."
                      ]
                    },
                    {
                      "name": "reason",
                      "typeId": 333,
                      "typeName": "MessageWokenReason",
                      "docs": [
                        "The reason of the waking (removal from `Waitlist`).",
                        "",
                        "NOTE: See more docs about reasons at `gear_common::event`."
                      ]
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Message is ready to continue its execution",
                    "and was removed from `Waitlist`."
                  ]
                },
                {
                  "name": "CodeChanged",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 266,
                      "typeName": "CodeId",
                      "docs": [
                        "Id of the code affected."
                      ]
                    },
                    {
                      "name": "change",
                      "typeId": 336,
                      "typeName": "CodeChangeKind<T::BlockNumber>",
                      "docs": [
                        "Change applied on code with current id.",
                        "",
                        "NOTE: See more docs about change kinds at `gear_common::event`."
                      ]
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Any data related to program codes changed."
                  ]
                },
                {
                  "name": "ProgramChanged",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 267,
                      "typeName": "ProgramId",
                      "docs": [
                        "Id of the program affected."
                      ]
                    },
                    {
                      "name": "change",
                      "typeId": 337,
                      "typeName": "ProgramChangeKind<T::BlockNumber>",
                      "docs": [
                        "Change applied on program with current id.",
                        "",
                        "NOTE: See more docs about change kinds at `gear_common::event`."
                      ]
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Any data related to programs changed."
                  ]
                },
                {
                  "name": "QueueNotProcessed",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "The pseudo-inherent extrinsic that runs queue processing rolled back or not executed."
                  ]
                },
                {
                  "name": "ProgramResumeSessionStarted",
                  "fields": [
                    {
                      "name": "session_id",
                      "typeId": 6,
                      "typeName": "SessionId",
                      "docs": [
                        "Id of the session."
                      ]
                    },
                    {
                      "name": "account_id",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": [
                        "Owner of the session."
                      ]
                    },
                    {
                      "name": "program_id",
                      "typeId": 267,
                      "typeName": "ProgramId",
                      "docs": [
                        "Id of the program affected."
                      ]
                    },
                    {
                      "name": "session_end_block",
                      "typeId": 4,
                      "typeName": "T::BlockNumber",
                      "docs": [
                        "Block number when the session will be removed if not finished."
                      ]
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "Program resume session has been started."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 307,
          "path": [
            "gear_common",
            "event",
            "MessageEntry"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Init",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Handle",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Reply",
                  "fields": [
                    {
                      "typeId": 268,
                      "typeName": "MessageId",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Signal",
                  "fields": [],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 308,
          "path": [
            "gear_core",
            "message",
            "user",
            "UserMessage"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "id",
                  "typeId": 268,
                  "typeName": "MessageId",
                  "docs": []
                },
                {
                  "name": "source",
                  "typeId": 267,
                  "typeName": "ProgramId",
                  "docs": []
                },
                {
                  "name": "destination",
                  "typeId": 267,
                  "typeName": "ProgramId",
                  "docs": []
                },
                {
                  "name": "payload",
                  "typeId": 309,
                  "typeName": "Payload",
                  "docs": []
                },
                {
                  "name": "value",
                  "typeId": 45,
                  "typeName": "Value",
                  "docs": []
                },
                {
                  "name": "details",
                  "typeId": 311,
                  "typeName": "Option<ReplyDetails>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 309,
          "path": [
            "gear_core",
            "buffer",
            "LimitedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 2
            },
            {
              "name": "E",
              "typeId": 310
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 12,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 310,
          "path": [
            "gear_core",
            "message",
            "PayloadSizeError"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": []
            }
          },
          "docs": []
        },
        {
          "id": 311,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 312
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 312,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 312,
          "path": [
            "gear_core",
            "message",
            "common",
            "ReplyDetails"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "to",
                  "typeId": 268,
                  "typeName": "MessageId",
                  "docs": []
                },
                {
                  "name": "code",
                  "typeId": 313,
                  "typeName": "ReplyCode",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 313,
          "path": [
            "gear_core_errors",
            "simple",
            "ReplyCode"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Success",
                  "fields": [
                    {
                      "typeId": 314,
                      "typeName": "SuccessReplyReason",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Error",
                  "fields": [
                    {
                      "typeId": 315,
                      "typeName": "ErrorReplyReason",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Unsupported",
                  "fields": [],
                  "index": 255,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 314,
          "path": [
            "gear_core_errors",
            "simple",
            "SuccessReplyReason"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Auto",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Manual",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Unsupported",
                  "fields": [],
                  "index": 255,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 315,
          "path": [
            "gear_core_errors",
            "simple",
            "ErrorReplyReason"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Execution",
                  "fields": [
                    {
                      "typeId": 316,
                      "typeName": "SimpleExecutionError",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "FailedToCreateProgram",
                  "fields": [
                    {
                      "typeId": 317,
                      "typeName": "SimpleProgramCreationError",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "InactiveProgram",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "RemovedFromWaitlist",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Unsupported",
                  "fields": [],
                  "index": 255,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 316,
          "path": [
            "gear_core_errors",
            "simple",
            "SimpleExecutionError"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "RanOutOfGas",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "MemoryOverflow",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "BackendError",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "UserspacePanic",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "UnreachableInstruction",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Unsupported",
                  "fields": [],
                  "index": 255,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 317,
          "path": [
            "gear_core_errors",
            "simple",
            "SimpleProgramCreationError"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "CodeNotExists",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Unsupported",
                  "fields": [],
                  "index": 255,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 318,
          "path": [
            "gear_common",
            "event",
            "Reason"
          ],
          "params": [
            {
              "name": "R",
              "typeId": 319
            },
            {
              "name": "S",
              "typeId": 320
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Runtime",
                  "fields": [
                    {
                      "typeId": 319,
                      "typeName": "R",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "System",
                  "fields": [
                    {
                      "typeId": 320,
                      "typeName": "S",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 319,
          "path": [
            "gear_common",
            "event",
            "UserMessageReadRuntimeReason"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "MessageReplied",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "MessageClaimed",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 320,
          "path": [
            "gear_common",
            "event",
            "UserMessageReadSystemReason"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "OutOfRent",
                  "fields": [],
                  "index": 0,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 321,
          "path": [
            "BTreeMap"
          ],
          "params": [
            {
              "name": "K",
              "typeId": 268
            },
            {
              "name": "V",
              "typeId": 322
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 323,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 322,
          "path": [
            "gear_common",
            "event",
            "DispatchStatus"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Success",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Failed",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "NotExecuted",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 323,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 324
            }
          },
          "docs": []
        },
        {
          "id": 324,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                268,
                322
              ]
            }
          },
          "docs": []
        },
        {
          "id": 325,
          "path": [
            "BTreeSet"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 267
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 326,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 326,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 267
            }
          },
          "docs": []
        },
        {
          "id": 327,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 328
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 328,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 328,
          "path": [
            "gear_common",
            "gas_provider",
            "node",
            "GasNodeId"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 268
            },
            {
              "name": "U",
              "typeId": 329
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Node",
                  "fields": [
                    {
                      "typeId": 268,
                      "typeName": "T",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Reservation",
                  "fields": [
                    {
                      "typeId": 329,
                      "typeName": "U",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 329,
          "path": [
            "gear_core",
            "ids",
            "ReservationId"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 1,
                  "typeName": "Hash",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 330,
          "path": [
            "gear_common",
            "event",
            "Reason"
          ],
          "params": [
            {
              "name": "R",
              "typeId": 331
            },
            {
              "name": "S",
              "typeId": 332
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Runtime",
                  "fields": [
                    {
                      "typeId": 331,
                      "typeName": "R",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "System",
                  "fields": [
                    {
                      "typeId": 332,
                      "typeName": "S",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 331,
          "path": [
            "gear_common",
            "event",
            "MessageWaitedRuntimeReason"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "WaitCalled",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "WaitForCalled",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "WaitUpToCalled",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "WaitUpToCalledFull",
                  "fields": [],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 332,
          "path": [
            "gear_common",
            "event",
            "MessageWaitedSystemReason"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "ProgramIsNotInitialized",
                  "fields": [],
                  "index": 0,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 333,
          "path": [
            "gear_common",
            "event",
            "Reason"
          ],
          "params": [
            {
              "name": "R",
              "typeId": 334
            },
            {
              "name": "S",
              "typeId": 335
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Runtime",
                  "fields": [
                    {
                      "typeId": 334,
                      "typeName": "R",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "System",
                  "fields": [
                    {
                      "typeId": 335,
                      "typeName": "S",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 334,
          "path": [
            "gear_common",
            "event",
            "MessageWokenRuntimeReason"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "WakeCalled",
                  "fields": [],
                  "index": 0,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 335,
          "path": [
            "gear_common",
            "event",
            "MessageWokenSystemReason"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "ProgramGotInitialized",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "TimeoutHasCome",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "OutOfRent",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 336,
          "path": [
            "gear_common",
            "event",
            "CodeChangeKind"
          ],
          "params": [
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Active",
                  "fields": [
                    {
                      "name": "expiration",
                      "typeId": 251,
                      "typeName": "Option<BlockNumber>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Inactive",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Reinstrumented",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 337,
          "path": [
            "gear_common",
            "event",
            "ProgramChangeKind"
          ],
          "params": [
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Active",
                  "fields": [
                    {
                      "name": "expiration",
                      "typeId": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Inactive",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Paused",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Terminated",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "ExpirationChanged",
                  "fields": [
                    {
                      "name": "expiration",
                      "typeId": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "ProgramSet",
                  "fields": [
                    {
                      "name": "expiration",
                      "typeId": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 338,
          "path": [
            "pallet_gear_staking_rewards",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Refilled",
                  "fields": [
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Transferred to the pool from an external account."
                  ]
                },
                {
                  "name": "Withdrawn",
                  "fields": [
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Transferred from the pool to an external account."
                  ]
                },
                {
                  "name": "Burned",
                  "fields": [
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Burned from the pool."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 339,
          "path": [
            "pallet_gear_voucher",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "VoucherIssued",
                  "fields": [
                    {
                      "name": "holder",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "program",
                      "typeId": 267,
                      "typeName": "ProgramId",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A new voucher issued."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 340,
          "path": [
            "frame_system",
            "Phase"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "ApplyExtrinsic",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Finalization",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Initialization",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 341,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 11
            }
          },
          "docs": []
        },
        {
          "id": 342,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 140
            }
          },
          "docs": []
        },
        {
          "id": 343,
          "path": [
            "frame_system",
            "LastRuntimeUpgradeInfo"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "spec_version",
                  "typeId": 73,
                  "typeName": "codec::Compact<u32>",
                  "docs": []
                },
                {
                  "name": "spec_name",
                  "typeId": 344,
                  "typeName": "sp_runtime::RuntimeString",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 344,
          "path": [],
          "params": [],
          "type": {
            "tag": "Primitive",
            "value": {
              "kind": "str"
            }
          },
          "docs": []
        },
        {
          "id": 345,
          "path": [
            "frame_system",
            "limits",
            "BlockWeights"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "base_block",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "max_block",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "per_class",
                  "typeId": 346,
                  "typeName": "PerDispatchClass<WeightsPerClass>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 346,
          "path": [
            "frame_support",
            "dispatch",
            "PerDispatchClass"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 347
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "normal",
                  "typeId": 347,
                  "typeName": "T",
                  "docs": []
                },
                {
                  "name": "operational",
                  "typeId": 347,
                  "typeName": "T",
                  "docs": []
                },
                {
                  "name": "mandatory",
                  "typeId": 347,
                  "typeName": "T",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 347,
          "path": [
            "frame_system",
            "limits",
            "WeightsPerClass"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "base_extrinsic",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "max_extrinsic",
                  "typeId": 289,
                  "typeName": "Option<Weight>",
                  "docs": []
                },
                {
                  "name": "max_total",
                  "typeId": 289,
                  "typeName": "Option<Weight>",
                  "docs": []
                },
                {
                  "name": "reserved",
                  "typeId": 289,
                  "typeName": "Option<Weight>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 348,
          "path": [
            "frame_system",
            "limits",
            "BlockLength"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "max",
                  "typeId": 349,
                  "typeName": "PerDispatchClass<u32>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 349,
          "path": [
            "frame_support",
            "dispatch",
            "PerDispatchClass"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "normal",
                  "typeId": 4,
                  "typeName": "T",
                  "docs": []
                },
                {
                  "name": "operational",
                  "typeId": 4,
                  "typeName": "T",
                  "docs": []
                },
                {
                  "name": "mandatory",
                  "typeId": 4,
                  "typeName": "T",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 350,
          "path": [
            "sp_weights",
            "RuntimeDbWeight"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "read",
                  "typeId": 10,
                  "typeName": "u64",
                  "docs": []
                },
                {
                  "name": "write",
                  "typeId": 10,
                  "typeName": "u64",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 351,
          "path": [
            "sp_version",
            "RuntimeVersion"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "spec_name",
                  "typeId": 344,
                  "typeName": "RuntimeString",
                  "docs": []
                },
                {
                  "name": "impl_name",
                  "typeId": 344,
                  "typeName": "RuntimeString",
                  "docs": []
                },
                {
                  "name": "authoring_version",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "spec_version",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "impl_version",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "apis",
                  "typeId": 352,
                  "typeName": "ApisVec",
                  "docs": []
                },
                {
                  "name": "transaction_version",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "state_version",
                  "typeId": 2,
                  "typeName": "u8",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 352,
          "path": [
            "Cow"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 353
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 353,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 353,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 354
            }
          },
          "docs": []
        },
        {
          "id": 354,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                154,
                4
              ]
            }
          },
          "docs": []
        },
        {
          "id": 355,
          "path": [
            "frame_system",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "InvalidSpecName",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "The name of specification does not match between the current runtime",
                    "and the new runtime."
                  ]
                },
                {
                  "name": "SpecVersionNeedsToIncrease",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "The specification version is not allowed to decrease between the current runtime",
                    "and the new runtime."
                  ]
                },
                {
                  "name": "FailedToExtractRuntimeVersion",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Failed to extract the runtime version from the new runtime.",
                    "",
                    "Either calling `Core_version` or decoding `RuntimeVersion` failed."
                  ]
                },
                {
                  "name": "NonDefaultComposite",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Suicide called when the account has non-default composite data."
                  ]
                },
                {
                  "name": "NonZeroRefCount",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "There is a non-zero reference count preventing the account from being purged."
                  ]
                },
                {
                  "name": "CallFiltered",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "The origin filter prevent the call to be dispatched."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Error for the System pallet"
          ]
        },
        {
          "id": 356,
          "path": [
            "bounded_collections",
            "weak_bounded_vec",
            "WeakBoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 119
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 357,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 357,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 119
            }
          },
          "docs": []
        },
        {
          "id": 358,
          "path": [
            "bounded_collections",
            "weak_bounded_vec",
            "WeakBoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 359
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 360,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 359,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                74,
                10
              ]
            }
          },
          "docs": []
        },
        {
          "id": 360,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 359
            }
          },
          "docs": []
        },
        {
          "id": 361,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 1
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 362,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 362,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 1
            }
          },
          "docs": []
        },
        {
          "id": 363,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 364
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 364,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 364,
          "path": [
            "sp_consensus_babe",
            "digests",
            "PreDigest"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Primary",
                  "fields": [
                    {
                      "typeId": 365,
                      "typeName": "PrimaryPreDigest",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "SecondaryPlain",
                  "fields": [
                    {
                      "typeId": 366,
                      "typeName": "SecondaryPlainPreDigest",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "SecondaryVRF",
                  "fields": [
                    {
                      "typeId": 367,
                      "typeName": "SecondaryVRFPreDigest",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 365,
          "path": [
            "sp_consensus_babe",
            "digests",
            "PrimaryPreDigest"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "authority_index",
                  "typeId": 4,
                  "typeName": "super::AuthorityIndex",
                  "docs": []
                },
                {
                  "name": "slot",
                  "typeId": 75,
                  "typeName": "Slot",
                  "docs": []
                },
                {
                  "name": "vrf_output",
                  "typeId": 1,
                  "typeName": "VRFOutput",
                  "docs": []
                },
                {
                  "name": "vrf_proof",
                  "typeId": 87,
                  "typeName": "VRFProof",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 366,
          "path": [
            "sp_consensus_babe",
            "digests",
            "SecondaryPlainPreDigest"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "authority_index",
                  "typeId": 4,
                  "typeName": "super::AuthorityIndex",
                  "docs": []
                },
                {
                  "name": "slot",
                  "typeId": 75,
                  "typeName": "Slot",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 367,
          "path": [
            "sp_consensus_babe",
            "digests",
            "SecondaryVRFPreDigest"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "authority_index",
                  "typeId": 4,
                  "typeName": "super::AuthorityIndex",
                  "docs": []
                },
                {
                  "name": "slot",
                  "typeId": 75,
                  "typeName": "Slot",
                  "docs": []
                },
                {
                  "name": "vrf_output",
                  "typeId": 1,
                  "typeName": "VRFOutput",
                  "docs": []
                },
                {
                  "name": "vrf_proof",
                  "typeId": 87,
                  "typeName": "VRFProof",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 368,
          "path": [
            "sp_consensus_babe",
            "BabeEpochConfiguration"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "c",
                  "typeId": 78,
                  "typeName": "(u64, u64)",
                  "docs": []
                },
                {
                  "name": "allowed_slots",
                  "typeId": 79,
                  "typeName": "AllowedSlots",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 369,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 370
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 371,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 370,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                10,
                4
              ]
            }
          },
          "docs": []
        },
        {
          "id": 371,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 370
            }
          },
          "docs": []
        },
        {
          "id": 372,
          "path": [
            "pallet_babe",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "InvalidEquivocationProof",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "An equivocation proof provided as part of an equivocation report is invalid."
                  ]
                },
                {
                  "name": "InvalidKeyOwnershipProof",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "A key ownership proof provided as part of an equivocation report is invalid."
                  ]
                },
                {
                  "name": "DuplicateOffenceReport",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "A given equivocation report is valid but already previously reported."
                  ]
                },
                {
                  "name": "InvalidConfiguration",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Submitted configuration is invalid."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 373,
          "path": [
            "pallet_grandpa",
            "StoredState"
          ],
          "params": [
            {
              "name": "N",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Live",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "PendingPause",
                  "fields": [
                    {
                      "name": "scheduled_at",
                      "typeId": 4,
                      "typeName": "N",
                      "docs": []
                    },
                    {
                      "name": "delay",
                      "typeId": 4,
                      "typeName": "N",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Paused",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "PendingResume",
                  "fields": [
                    {
                      "name": "scheduled_at",
                      "typeId": 4,
                      "typeName": "N",
                      "docs": []
                    },
                    {
                      "name": "delay",
                      "typeId": 4,
                      "typeName": "N",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 374,
          "path": [
            "pallet_grandpa",
            "StoredPendingChange"
          ],
          "params": [
            {
              "name": "N",
              "typeId": 4
            },
            {
              "name": "Limit"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "scheduled_at",
                  "typeId": 4,
                  "typeName": "N",
                  "docs": []
                },
                {
                  "name": "delay",
                  "typeId": 4,
                  "typeName": "N",
                  "docs": []
                },
                {
                  "name": "next_authorities",
                  "typeId": 375,
                  "typeName": "BoundedAuthorityList<Limit>",
                  "docs": []
                },
                {
                  "name": "forced",
                  "typeId": 251,
                  "typeName": "Option<N>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 375,
          "path": [
            "bounded_collections",
            "weak_bounded_vec",
            "WeakBoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 31
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 30,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 376,
          "path": [
            "pallet_grandpa",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "PauseFailed",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Attempt to signal GRANDPA pause when the authority set isn't live",
                    "(either paused or already pending pause)."
                  ]
                },
                {
                  "name": "ResumeFailed",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Attempt to signal GRANDPA resume when the authority set isn't paused",
                    "(either live or already pending resume)."
                  ]
                },
                {
                  "name": "ChangePending",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Attempt to signal GRANDPA change with one already pending."
                  ]
                },
                {
                  "name": "TooSoon",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Cannot signal forced change so soon after last."
                  ]
                },
                {
                  "name": "InvalidKeyOwnershipProof",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "A key ownership proof provided as part of an equivocation report is invalid."
                  ]
                },
                {
                  "name": "InvalidEquivocationProof",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "An equivocation proof provided as part of an equivocation report is invalid."
                  ]
                },
                {
                  "name": "DuplicateOffenceReport",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "A given equivocation report is valid but already previously reported."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 377,
          "path": [
            "bounded_collections",
            "weak_bounded_vec",
            "WeakBoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 378
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 380,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 378,
          "path": [
            "pallet_balances",
            "BalanceLock"
          ],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "id",
                  "typeId": 154,
                  "typeName": "LockIdentifier",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "reasons",
                  "typeId": 379,
                  "typeName": "Reasons",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 379,
          "path": [
            "pallet_balances",
            "Reasons"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Fee",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Misc",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "All",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 380,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 378
            }
          },
          "docs": []
        },
        {
          "id": 381,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 382
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 383,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 382,
          "path": [
            "pallet_balances",
            "ReserveData"
          ],
          "params": [
            {
              "name": "ReserveIdentifier",
              "typeId": 154
            },
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "id",
                  "typeId": 154,
                  "typeName": "ReserveIdentifier",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 383,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 382
            }
          },
          "docs": []
        },
        {
          "id": 384,
          "path": [
            "pallet_balances",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "VestingBalance",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Vesting balance too high to send value"
                  ]
                },
                {
                  "name": "LiquidityRestrictions",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Account liquidity restrictions prevent withdrawal"
                  ]
                },
                {
                  "name": "InsufficientBalance",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Balance too low to send value."
                  ]
                },
                {
                  "name": "ExistentialDeposit",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Value too low to create account due to existential deposit"
                  ]
                },
                {
                  "name": "KeepAlive",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "Transfer/payment would kill account"
                  ]
                },
                {
                  "name": "ExistingVestingSchedule",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "A vesting schedule already exists for this account"
                  ]
                },
                {
                  "name": "DeadAccount",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "Beneficiary account must pre-exist"
                  ]
                },
                {
                  "name": "TooManyReserves",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "Number of named reserves exceed MaxReserves"
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 385,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 97
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 386,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 386,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 97
            }
          },
          "docs": []
        },
        {
          "id": 387,
          "path": [
            "pallet_vesting",
            "Releases"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "V0",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "V1",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 388,
          "path": [
            "pallet_vesting",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "NotVesting",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "The account given is not vesting."
                  ]
                },
                {
                  "name": "AtMaxVestingSchedules",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "The account already has `MaxVestingSchedules` count of schedules and thus",
                    "cannot add another one. Consider merging existing schedules in order to add another."
                  ]
                },
                {
                  "name": "AmountLow",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Amount being transferred is too low to create a vesting schedule."
                  ]
                },
                {
                  "name": "ScheduleIndexOutOfBounds",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "An index was out of bounds of the vesting schedules."
                  ]
                },
                {
                  "name": "InvalidScheduleParams",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "Failed to create a new schedule because some parameter was invalid."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Error for the vesting pallet."
          ]
        },
        {
          "id": 389,
          "path": [
            "sp_arithmetic",
            "fixed_point",
            "FixedU128"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 6,
                  "typeName": "u128",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 390,
          "path": [
            "pallet_transaction_payment",
            "Releases"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "V1Ancient",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "V2",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 391,
          "path": [
            "pallet_bags_list",
            "list",
            "Node"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "id",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "prev",
                  "typeId": 299,
                  "typeName": "Option<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "next",
                  "typeId": 299,
                  "typeName": "Option<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "bag_upper",
                  "typeId": 10,
                  "typeName": "T::Score",
                  "docs": []
                },
                {
                  "name": "score",
                  "typeId": 10,
                  "typeName": "T::Score",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 392,
          "path": [
            "pallet_bags_list",
            "list",
            "Bag"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "head",
                  "typeId": 299,
                  "typeName": "Option<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "tail",
                  "typeId": 299,
                  "typeName": "Option<T::AccountId>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 393,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 10
            }
          },
          "docs": []
        },
        {
          "id": 394,
          "path": [
            "pallet_bags_list",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "List",
                  "fields": [
                    {
                      "typeId": 395,
                      "typeName": "ListError",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A error in the list interface implementation."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 395,
          "path": [
            "pallet_bags_list",
            "list",
            "ListError"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Duplicate",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "NotHeavier",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "NotInSameBag",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "NodeNotFound",
                  "fields": [],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 396,
          "path": [
            "bounded_collections",
            "weak_bounded_vec",
            "WeakBoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 40
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 397,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 397,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 40
            }
          },
          "docs": []
        },
        {
          "id": 398,
          "path": [
            "frame_support",
            "traits",
            "misc",
            "WrapperOpaque"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 399
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 73,
                  "docs": []
                },
                {
                  "typeId": 399,
                  "typeName": "T",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 399,
          "path": [
            "pallet_im_online",
            "BoundedOpaqueNetworkState"
          ],
          "params": [
            {
              "name": "PeerIdEncodingLimit"
            },
            {
              "name": "MultiAddrEncodingLimit"
            },
            {
              "name": "AddressesLimit"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "peer_id",
                  "typeId": 400,
                  "typeName": "WeakBoundedVec<u8, PeerIdEncodingLimit>",
                  "docs": []
                },
                {
                  "name": "external_addresses",
                  "typeId": 401,
                  "typeName": "WeakBoundedVec<WeakBoundedVec<u8, MultiAddrEncodingLimit>, AddressesLimit\n>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 400,
          "path": [
            "bounded_collections",
            "weak_bounded_vec",
            "WeakBoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 2
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 12,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 401,
          "path": [
            "bounded_collections",
            "weak_bounded_vec",
            "WeakBoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 400
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 402,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 402,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 400
            }
          },
          "docs": []
        },
        {
          "id": 403,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                4,
                0
              ]
            }
          },
          "docs": []
        },
        {
          "id": 404,
          "path": [
            "pallet_im_online",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "InvalidKey",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Non existent public key."
                  ]
                },
                {
                  "name": "DuplicatedHeartbeat",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Duplicated heartbeat."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 405,
          "path": [
            "pallet_staking",
            "StakingLedger"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "stash",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "total",
                  "typeId": 45,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "active",
                  "typeId": 45,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "unlocking",
                  "typeId": 406,
                  "typeName": "BoundedVec<UnlockChunk<BalanceOf<T>>, T::MaxUnlockingChunks>",
                  "docs": []
                },
                {
                  "name": "claimed_rewards",
                  "typeId": 409,
                  "typeName": "BoundedVec<EraIndex, T::HistoryDepth>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 406,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 407
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 408,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 407,
          "path": [
            "pallet_staking",
            "UnlockChunk"
          ],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "value",
                  "typeId": 45,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "era",
                  "typeId": 73,
                  "typeName": "EraIndex",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 408,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 407
            }
          },
          "docs": []
        },
        {
          "id": 409,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 4
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 112,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 410,
          "path": [
            "pallet_staking",
            "Nominations"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "targets",
                  "typeId": 411,
                  "typeName": "BoundedVec<T::AccountId, T::MaxNominations>",
                  "docs": []
                },
                {
                  "name": "submitted_in",
                  "typeId": 4,
                  "typeName": "EraIndex",
                  "docs": []
                },
                {
                  "name": "suppressed",
                  "typeId": 52,
                  "typeName": "bool",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 411,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 0
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 111,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 412,
          "path": [
            "pallet_staking",
            "ActiveEraInfo"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "index",
                  "typeId": 4,
                  "typeName": "EraIndex",
                  "docs": []
                },
                {
                  "name": "start",
                  "typeId": 269,
                  "typeName": "Option<u64>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 413,
          "path": [
            "pallet_staking",
            "EraRewardPoints"
          ],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "total",
                  "typeId": 4,
                  "typeName": "RewardPoint",
                  "docs": []
                },
                {
                  "name": "individual",
                  "typeId": 414,
                  "typeName": "BTreeMap<AccountId, RewardPoint>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 414,
          "path": [
            "BTreeMap"
          ],
          "params": [
            {
              "name": "K",
              "typeId": 0
            },
            {
              "name": "V",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 415,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 415,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 416
            }
          },
          "docs": []
        },
        {
          "id": 416,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                0,
                4
              ]
            }
          },
          "docs": []
        },
        {
          "id": 417,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 418
            }
          },
          "docs": []
        },
        {
          "id": 418,
          "path": [
            "pallet_staking",
            "UnappliedSlash"
          ],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "validator",
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "own",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "others",
                  "typeId": 249,
                  "typeName": "Vec<(AccountId, Balance)>",
                  "docs": []
                },
                {
                  "name": "reporters",
                  "typeId": 111,
                  "typeName": "Vec<AccountId>",
                  "docs": []
                },
                {
                  "name": "payout",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 419,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                49,
                6
              ]
            }
          },
          "docs": []
        },
        {
          "id": 420,
          "path": [
            "pallet_staking",
            "slashing",
            "SlashingSpans"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "span_index",
                  "typeId": 4,
                  "typeName": "SpanIndex",
                  "docs": []
                },
                {
                  "name": "last_start",
                  "typeId": 4,
                  "typeName": "EraIndex",
                  "docs": []
                },
                {
                  "name": "last_nonzero_slash",
                  "typeId": 4,
                  "typeName": "EraIndex",
                  "docs": []
                },
                {
                  "name": "prior",
                  "typeId": 112,
                  "typeName": "Vec<EraIndex>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 421,
          "path": [
            "pallet_staking",
            "slashing",
            "SpanRecord"
          ],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "slashed",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "paid_out",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 422,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 423
            }
          },
          "docs": []
        },
        {
          "id": 423,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                4,
                52
              ]
            }
          },
          "docs": []
        },
        {
          "id": 424,
          "path": [
            "pallet_staking",
            "pallet",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "NotController",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Not a controller account."
                  ]
                },
                {
                  "name": "NotStash",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Not a stash account."
                  ]
                },
                {
                  "name": "AlreadyBonded",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Stash is already bonded."
                  ]
                },
                {
                  "name": "AlreadyPaired",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Controller is already paired."
                  ]
                },
                {
                  "name": "EmptyTargets",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "Targets cannot be empty."
                  ]
                },
                {
                  "name": "DuplicateIndex",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "Duplicate index."
                  ]
                },
                {
                  "name": "InvalidSlashIndex",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "Slash record index out of bounds."
                  ]
                },
                {
                  "name": "InsufficientBond",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "Cannot have a validator or nominator role, with value less than the minimum defined by",
                    "governance (see `MinValidatorBond` and `MinNominatorBond`). If unbonding is the",
                    "intention, `chill` first to remove one's role as validator/nominator."
                  ]
                },
                {
                  "name": "NoMoreChunks",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "Can not schedule more unlock chunks."
                  ]
                },
                {
                  "name": "NoUnlockChunk",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "Can not rebond without unlocking chunks."
                  ]
                },
                {
                  "name": "FundedTarget",
                  "fields": [],
                  "index": 10,
                  "docs": [
                    "Attempting to target a stash that still has funds."
                  ]
                },
                {
                  "name": "InvalidEraToReward",
                  "fields": [],
                  "index": 11,
                  "docs": [
                    "Invalid era to reward."
                  ]
                },
                {
                  "name": "InvalidNumberOfNominations",
                  "fields": [],
                  "index": 12,
                  "docs": [
                    "Invalid number of nominations."
                  ]
                },
                {
                  "name": "NotSortedAndUnique",
                  "fields": [],
                  "index": 13,
                  "docs": [
                    "Items are not sorted and unique."
                  ]
                },
                {
                  "name": "AlreadyClaimed",
                  "fields": [],
                  "index": 14,
                  "docs": [
                    "Rewards for this era have already been claimed for this validator."
                  ]
                },
                {
                  "name": "IncorrectHistoryDepth",
                  "fields": [],
                  "index": 15,
                  "docs": [
                    "Incorrect previous history depth input provided."
                  ]
                },
                {
                  "name": "IncorrectSlashingSpans",
                  "fields": [],
                  "index": 16,
                  "docs": [
                    "Incorrect number of slashing spans provided."
                  ]
                },
                {
                  "name": "BadState",
                  "fields": [],
                  "index": 17,
                  "docs": [
                    "Internal state has become somehow corrupted and the operation cannot continue."
                  ]
                },
                {
                  "name": "TooManyTargets",
                  "fields": [],
                  "index": 18,
                  "docs": [
                    "Too many nomination targets supplied."
                  ]
                },
                {
                  "name": "BadTarget",
                  "fields": [],
                  "index": 19,
                  "docs": [
                    "A nomination target was supplied that was blocked or otherwise not a validator."
                  ]
                },
                {
                  "name": "CannotChillOther",
                  "fields": [],
                  "index": 20,
                  "docs": [
                    "The user has enough bond and thus cannot be chilled forcefully by an external person."
                  ]
                },
                {
                  "name": "TooManyNominators",
                  "fields": [],
                  "index": 21,
                  "docs": [
                    "There are too many nominators in the system. Governance needs to adjust the staking",
                    "settings to keep things safe for the runtime."
                  ]
                },
                {
                  "name": "TooManyValidators",
                  "fields": [],
                  "index": 22,
                  "docs": [
                    "There are too many validator candidates in the system. Governance needs to adjust the",
                    "staking settings to keep things safe for the runtime."
                  ]
                },
                {
                  "name": "CommissionTooLow",
                  "fields": [],
                  "index": 23,
                  "docs": [
                    "Commission is too low. Must be at least `MinCommission`."
                  ]
                },
                {
                  "name": "BoundNotMet",
                  "fields": [],
                  "index": 24,
                  "docs": [
                    "Some bound is not met."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 425,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 426
            }
          },
          "docs": []
        },
        {
          "id": 426,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                0,
                118
              ]
            }
          },
          "docs": []
        },
        {
          "id": 427,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                428,
                12
              ]
            }
          },
          "docs": []
        },
        {
          "id": 428,
          "path": [
            "sp_core",
            "crypto",
            "KeyTypeId"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 16,
                  "typeName": "[u8; 4]",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 429,
          "path": [
            "pallet_session",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "InvalidProof",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Invalid ownership proof."
                  ]
                },
                {
                  "name": "NoAssociatedValidatorId",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "No associated validator ID for account."
                  ]
                },
                {
                  "name": "DuplicatedKey",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Registered duplicate key."
                  ]
                },
                {
                  "name": "NoKeys",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "No keys are associated with this account."
                  ]
                },
                {
                  "name": "NoAccount",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "Key setting account is not live, so it's impossible to associate keys."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Error for the session pallet."
          ]
        },
        {
          "id": 430,
          "path": [
            "pallet_treasury",
            "Proposal"
          ],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "proposer",
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "value",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "bond",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 431,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 4
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 112,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 432,
          "path": [
            "sp_arithmetic",
            "per_things",
            "Permill"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 433,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 6,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 434,
          "path": [
            "frame_support",
            "PalletId"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 154,
                  "typeName": "[u8; 8]",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 435,
          "path": [
            "pallet_treasury",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "InsufficientProposersBalance",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Proposer's balance is too low."
                  ]
                },
                {
                  "name": "InvalidIndex",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "No proposal or bounty at that index."
                  ]
                },
                {
                  "name": "TooManyApprovals",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Too many approvals in the queue."
                  ]
                },
                {
                  "name": "InsufficientPermission",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "The spend origin is valid but the amount it is allowed to spend is lower than the",
                    "amount to be spent."
                  ]
                },
                {
                  "name": "ProposalNotApproved",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "Proposal has not been approved."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Error for the treasury pallet."
          ]
        },
        {
          "id": 436,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                11,
                4
              ]
            }
          },
          "docs": []
        },
        {
          "id": 437,
          "path": [
            "pallet_utility",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "TooManyCalls",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Too many calls batched."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 438,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                0,
                61
              ]
            }
          },
          "docs": []
        },
        {
          "id": 439,
          "path": [
            "pallet_conviction_voting",
            "vote",
            "Voting"
          ],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            },
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "BlockNumber",
              "typeId": 4
            },
            {
              "name": "PollIndex",
              "typeId": 4
            },
            {
              "name": "MaxVotes"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Casting",
                  "fields": [
                    {
                      "typeId": 440,
                      "typeName": "Casting<Balance, BlockNumber, PollIndex, MaxVotes>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Delegating",
                  "fields": [
                    {
                      "typeId": 446,
                      "typeName": "Delegating<Balance, AccountId, BlockNumber>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 440,
          "path": [
            "pallet_conviction_voting",
            "vote",
            "Casting"
          ],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            },
            {
              "name": "BlockNumber",
              "typeId": 4
            },
            {
              "name": "PollIndex",
              "typeId": 4
            },
            {
              "name": "MaxVotes"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "votes",
                  "typeId": 441,
                  "typeName": "BoundedVec<(PollIndex, AccountVote<Balance>), MaxVotes>",
                  "docs": []
                },
                {
                  "name": "delegations",
                  "typeId": 444,
                  "typeName": "Delegations<Balance>",
                  "docs": []
                },
                {
                  "name": "prior",
                  "typeId": 445,
                  "typeName": "PriorLock<BlockNumber, Balance>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 441,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 442
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 443,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 442,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                4,
                128
              ]
            }
          },
          "docs": []
        },
        {
          "id": 443,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 442
            }
          },
          "docs": []
        },
        {
          "id": 444,
          "path": [
            "pallet_conviction_voting",
            "types",
            "Delegations"
          ],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "votes",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "capital",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 445,
          "path": [
            "pallet_conviction_voting",
            "vote",
            "PriorLock"
          ],
          "params": [
            {
              "name": "BlockNumber",
              "typeId": 4
            },
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 446,
          "path": [
            "pallet_conviction_voting",
            "vote",
            "Delegating"
          ],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            },
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "balance",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "target",
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "conviction",
                  "typeId": 130,
                  "typeName": "Conviction",
                  "docs": []
                },
                {
                  "name": "delegations",
                  "typeId": 444,
                  "typeName": "Delegations<Balance>",
                  "docs": []
                },
                {
                  "name": "prior",
                  "typeId": 445,
                  "typeName": "PriorLock<BlockNumber, Balance>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 447,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 448
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 449,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 448,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                61,
                6
              ]
            }
          },
          "docs": []
        },
        {
          "id": 449,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 448
            }
          },
          "docs": []
        },
        {
          "id": 450,
          "path": [
            "pallet_conviction_voting",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "NotOngoing",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Poll is not ongoing."
                  ]
                },
                {
                  "name": "NotVoter",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "The given account did not vote on the poll."
                  ]
                },
                {
                  "name": "NoPermission",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "The actor has no permission to conduct the action."
                  ]
                },
                {
                  "name": "NoPermissionYet",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "The actor has no permission to conduct the action right now but will do in the future."
                  ]
                },
                {
                  "name": "AlreadyDelegating",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "The account is already delegating."
                  ]
                },
                {
                  "name": "AlreadyVoting",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "The account currently has votes attached to it and the operation cannot succeed until",
                    "these are removed, either through `unvote` or `reap_vote`."
                  ]
                },
                {
                  "name": "InsufficientFunds",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "Too high a balance was provided that the account cannot afford."
                  ]
                },
                {
                  "name": "NotDelegating",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "The account is not currently delegating."
                  ]
                },
                {
                  "name": "Nonsense",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "Delegation to oneself makes no sense."
                  ]
                },
                {
                  "name": "MaxVotesReached",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "Maximum number of votes reached."
                  ]
                },
                {
                  "name": "ClassNeeded",
                  "fields": [],
                  "index": 10,
                  "docs": [
                    "The class must be supplied since it is not easily determinable from the state."
                  ]
                },
                {
                  "name": "BadClass",
                  "fields": [],
                  "index": 11,
                  "docs": [
                    "The class ID supplied is invalid."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 451,
          "path": [
            "pallet_referenda",
            "types",
            "ReferendumInfo"
          ],
          "params": [
            {
              "name": "TrackId",
              "typeId": 61
            },
            {
              "name": "RuntimeOrigin",
              "typeId": 123
            },
            {
              "name": "Moment",
              "typeId": 4
            },
            {
              "name": "Call",
              "typeId": 62
            },
            {
              "name": "Balance",
              "typeId": 6
            },
            {
              "name": "Tally",
              "typeId": 281
            },
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "ScheduleAddress",
              "typeId": 140
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Ongoing",
                  "fields": [
                    {
                      "typeId": 452,
                      "typeName": "ReferendumStatus<TrackId, RuntimeOrigin, Moment, Call, Balance, Tally,\nAccountId, ScheduleAddress,>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Approved",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "Moment",
                      "docs": []
                    },
                    {
                      "typeId": 454,
                      "typeName": "Option<Deposit<AccountId, Balance>>",
                      "docs": []
                    },
                    {
                      "typeId": 454,
                      "typeName": "Option<Deposit<AccountId, Balance>>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Rejected",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "Moment",
                      "docs": []
                    },
                    {
                      "typeId": 454,
                      "typeName": "Option<Deposit<AccountId, Balance>>",
                      "docs": []
                    },
                    {
                      "typeId": 454,
                      "typeName": "Option<Deposit<AccountId, Balance>>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Cancelled",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "Moment",
                      "docs": []
                    },
                    {
                      "typeId": 454,
                      "typeName": "Option<Deposit<AccountId, Balance>>",
                      "docs": []
                    },
                    {
                      "typeId": 454,
                      "typeName": "Option<Deposit<AccountId, Balance>>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "TimedOut",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "Moment",
                      "docs": []
                    },
                    {
                      "typeId": 454,
                      "typeName": "Option<Deposit<AccountId, Balance>>",
                      "docs": []
                    },
                    {
                      "typeId": 454,
                      "typeName": "Option<Deposit<AccountId, Balance>>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Killed",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "Moment",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 452,
          "path": [
            "pallet_referenda",
            "types",
            "ReferendumStatus"
          ],
          "params": [
            {
              "name": "TrackId",
              "typeId": 61
            },
            {
              "name": "RuntimeOrigin",
              "typeId": 123
            },
            {
              "name": "Moment",
              "typeId": 4
            },
            {
              "name": "Call",
              "typeId": 62
            },
            {
              "name": "Balance",
              "typeId": 6
            },
            {
              "name": "Tally",
              "typeId": 281
            },
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "ScheduleAddress",
              "typeId": 140
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "track",
                  "typeId": 61,
                  "typeName": "TrackId",
                  "docs": []
                },
                {
                  "name": "origin",
                  "typeId": 123,
                  "typeName": "RuntimeOrigin",
                  "docs": []
                },
                {
                  "name": "proposal",
                  "typeId": 62,
                  "typeName": "Call",
                  "docs": []
                },
                {
                  "name": "enactment",
                  "typeId": 133,
                  "typeName": "DispatchTime<Moment>",
                  "docs": []
                },
                {
                  "name": "submitted",
                  "typeId": 4,
                  "typeName": "Moment",
                  "docs": []
                },
                {
                  "name": "submission_deposit",
                  "typeId": 453,
                  "typeName": "Deposit<AccountId, Balance>",
                  "docs": []
                },
                {
                  "name": "decision_deposit",
                  "typeId": 454,
                  "typeName": "Option<Deposit<AccountId, Balance>>",
                  "docs": []
                },
                {
                  "name": "deciding",
                  "typeId": 455,
                  "typeName": "Option<DecidingStatus<Moment>>",
                  "docs": []
                },
                {
                  "name": "tally",
                  "typeId": 281,
                  "typeName": "Tally",
                  "docs": []
                },
                {
                  "name": "in_queue",
                  "typeId": 52,
                  "typeName": "bool",
                  "docs": []
                },
                {
                  "name": "alarm",
                  "typeId": 457,
                  "typeName": "Option<(Moment, ScheduleAddress)>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 453,
          "path": [
            "pallet_referenda",
            "types",
            "Deposit"
          ],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "who",
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 454,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 453
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 453,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 455,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 456
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 456,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 456,
          "path": [
            "pallet_referenda",
            "types",
            "DecidingStatus"
          ],
          "params": [
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "since",
                  "typeId": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "confirming",
                  "typeId": 251,
                  "typeName": "Option<BlockNumber>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 457,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 458
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 458,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 458,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                4,
                140
              ]
            }
          },
          "docs": []
        },
        {
          "id": 459,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 460
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 461,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 460,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                4,
                6
              ]
            }
          },
          "docs": []
        },
        {
          "id": 461,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 460
            }
          },
          "docs": []
        },
        {
          "id": 462,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 463
            }
          },
          "docs": []
        },
        {
          "id": 463,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                61,
                464
              ]
            }
          },
          "docs": []
        },
        {
          "id": 464,
          "path": [
            "pallet_referenda",
            "types",
            "TrackInfo"
          ],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            },
            {
              "name": "Moment",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "name",
                  "typeId": 344,
                  "typeName": "&'static str",
                  "docs": []
                },
                {
                  "name": "max_deciding",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "decision_deposit",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "prepare_period",
                  "typeId": 4,
                  "typeName": "Moment",
                  "docs": []
                },
                {
                  "name": "decision_period",
                  "typeId": 4,
                  "typeName": "Moment",
                  "docs": []
                },
                {
                  "name": "confirm_period",
                  "typeId": 4,
                  "typeName": "Moment",
                  "docs": []
                },
                {
                  "name": "min_enactment_period",
                  "typeId": 4,
                  "typeName": "Moment",
                  "docs": []
                },
                {
                  "name": "min_approval",
                  "typeId": 465,
                  "typeName": "Curve",
                  "docs": []
                },
                {
                  "name": "min_support",
                  "typeId": 465,
                  "typeName": "Curve",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 465,
          "path": [
            "pallet_referenda",
            "types",
            "Curve"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "LinearDecreasing",
                  "fields": [
                    {
                      "name": "length",
                      "typeId": 49,
                      "typeName": "Perbill",
                      "docs": []
                    },
                    {
                      "name": "floor",
                      "typeId": 49,
                      "typeName": "Perbill",
                      "docs": []
                    },
                    {
                      "name": "ceil",
                      "typeId": 49,
                      "typeName": "Perbill",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "SteppedDecreasing",
                  "fields": [
                    {
                      "name": "begin",
                      "typeId": 49,
                      "typeName": "Perbill",
                      "docs": []
                    },
                    {
                      "name": "end",
                      "typeId": 49,
                      "typeName": "Perbill",
                      "docs": []
                    },
                    {
                      "name": "step",
                      "typeId": 49,
                      "typeName": "Perbill",
                      "docs": []
                    },
                    {
                      "name": "period",
                      "typeId": 49,
                      "typeName": "Perbill",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Reciprocal",
                  "fields": [
                    {
                      "name": "factor",
                      "typeId": 466,
                      "typeName": "FixedI64",
                      "docs": []
                    },
                    {
                      "name": "x_offset",
                      "typeId": 466,
                      "typeName": "FixedI64",
                      "docs": []
                    },
                    {
                      "name": "y_offset",
                      "typeId": 466,
                      "typeName": "FixedI64",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 466,
          "path": [
            "sp_arithmetic",
            "fixed_point",
            "FixedI64"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 467,
                  "typeName": "i64",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 467,
          "path": [],
          "params": [],
          "type": {
            "tag": "Primitive",
            "value": {
              "kind": "i64"
            }
          },
          "docs": []
        },
        {
          "id": 468,
          "path": [
            "pallet_referenda",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "NotOngoing",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Referendum is not ongoing."
                  ]
                },
                {
                  "name": "HasDeposit",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Referendum's decision deposit is already paid."
                  ]
                },
                {
                  "name": "BadTrack",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "The track identifier given was invalid."
                  ]
                },
                {
                  "name": "Full",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "There are already a full complement of referenda in progress for this track."
                  ]
                },
                {
                  "name": "QueueEmpty",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "The queue of the track is empty."
                  ]
                },
                {
                  "name": "BadReferendum",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "The referendum index provided is invalid in this context."
                  ]
                },
                {
                  "name": "NothingToDo",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "There was nothing to do in the advancement."
                  ]
                },
                {
                  "name": "NoTrack",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "No track exists for the proposal origin."
                  ]
                },
                {
                  "name": "Unfinished",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "Any deposit cannot be refunded until after the decision is over."
                  ]
                },
                {
                  "name": "NoPermission",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "The deposit refunder is not the depositor."
                  ]
                },
                {
                  "name": "NoDeposit",
                  "fields": [],
                  "index": 10,
                  "docs": [
                    "The deposit cannot be refunded since none was made."
                  ]
                },
                {
                  "name": "BadStatus",
                  "fields": [],
                  "index": 11,
                  "docs": [
                    "The referendum status is invalid for this operation."
                  ]
                },
                {
                  "name": "PreimageNotExist",
                  "fields": [],
                  "index": 12,
                  "docs": [
                    "The preimage does not exist."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 469,
          "path": [
            "pallet_ranked_collective",
            "MemberRecord"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "rank",
                  "typeId": 61,
                  "typeName": "Rank",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 470,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                61,
                0
              ]
            }
          },
          "docs": []
        },
        {
          "id": 471,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                61,
                4
              ]
            }
          },
          "docs": []
        },
        {
          "id": 472,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 2
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 12,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 473,
          "path": [
            "pallet_ranked_collective",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "AlreadyMember",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Account is already a member."
                  ]
                },
                {
                  "name": "NotMember",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Account is not a member."
                  ]
                },
                {
                  "name": "NotPolling",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "The given poll index is unknown or has closed."
                  ]
                },
                {
                  "name": "Ongoing",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "The given poll is still ongoing."
                  ]
                },
                {
                  "name": "NoneRemaining",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "There are no further records to be removed."
                  ]
                },
                {
                  "name": "Corruption",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "Unexpected error in state."
                  ]
                },
                {
                  "name": "RankTooLow",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "The member's rank is too low to vote."
                  ]
                },
                {
                  "name": "InvalidWitness",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "The information provided is incorrect."
                  ]
                },
                {
                  "name": "NoPermission",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "The origin is not sufficiently privileged to do the operation."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 474,
          "path": [
            "pallet_referenda",
            "types",
            "ReferendumInfo"
          ],
          "params": [
            {
              "name": "TrackId",
              "typeId": 61
            },
            {
              "name": "RuntimeOrigin",
              "typeId": 123
            },
            {
              "name": "Moment",
              "typeId": 4
            },
            {
              "name": "Call",
              "typeId": 62
            },
            {
              "name": "Balance",
              "typeId": 6
            },
            {
              "name": "Tally",
              "typeId": 284
            },
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "ScheduleAddress",
              "typeId": 140
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Ongoing",
                  "fields": [
                    {
                      "typeId": 475,
                      "typeName": "ReferendumStatus<TrackId, RuntimeOrigin, Moment, Call, Balance, Tally,\nAccountId, ScheduleAddress,>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Approved",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "Moment",
                      "docs": []
                    },
                    {
                      "typeId": 454,
                      "typeName": "Option<Deposit<AccountId, Balance>>",
                      "docs": []
                    },
                    {
                      "typeId": 454,
                      "typeName": "Option<Deposit<AccountId, Balance>>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Rejected",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "Moment",
                      "docs": []
                    },
                    {
                      "typeId": 454,
                      "typeName": "Option<Deposit<AccountId, Balance>>",
                      "docs": []
                    },
                    {
                      "typeId": 454,
                      "typeName": "Option<Deposit<AccountId, Balance>>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Cancelled",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "Moment",
                      "docs": []
                    },
                    {
                      "typeId": 454,
                      "typeName": "Option<Deposit<AccountId, Balance>>",
                      "docs": []
                    },
                    {
                      "typeId": 454,
                      "typeName": "Option<Deposit<AccountId, Balance>>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "TimedOut",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "Moment",
                      "docs": []
                    },
                    {
                      "typeId": 454,
                      "typeName": "Option<Deposit<AccountId, Balance>>",
                      "docs": []
                    },
                    {
                      "typeId": 454,
                      "typeName": "Option<Deposit<AccountId, Balance>>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Killed",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "Moment",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 475,
          "path": [
            "pallet_referenda",
            "types",
            "ReferendumStatus"
          ],
          "params": [
            {
              "name": "TrackId",
              "typeId": 61
            },
            {
              "name": "RuntimeOrigin",
              "typeId": 123
            },
            {
              "name": "Moment",
              "typeId": 4
            },
            {
              "name": "Call",
              "typeId": 62
            },
            {
              "name": "Balance",
              "typeId": 6
            },
            {
              "name": "Tally",
              "typeId": 284
            },
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "ScheduleAddress",
              "typeId": 140
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "track",
                  "typeId": 61,
                  "typeName": "TrackId",
                  "docs": []
                },
                {
                  "name": "origin",
                  "typeId": 123,
                  "typeName": "RuntimeOrigin",
                  "docs": []
                },
                {
                  "name": "proposal",
                  "typeId": 62,
                  "typeName": "Call",
                  "docs": []
                },
                {
                  "name": "enactment",
                  "typeId": 133,
                  "typeName": "DispatchTime<Moment>",
                  "docs": []
                },
                {
                  "name": "submitted",
                  "typeId": 4,
                  "typeName": "Moment",
                  "docs": []
                },
                {
                  "name": "submission_deposit",
                  "typeId": 453,
                  "typeName": "Deposit<AccountId, Balance>",
                  "docs": []
                },
                {
                  "name": "decision_deposit",
                  "typeId": 454,
                  "typeName": "Option<Deposit<AccountId, Balance>>",
                  "docs": []
                },
                {
                  "name": "deciding",
                  "typeId": 455,
                  "typeName": "Option<DecidingStatus<Moment>>",
                  "docs": []
                },
                {
                  "name": "tally",
                  "typeId": 284,
                  "typeName": "Tally",
                  "docs": []
                },
                {
                  "name": "in_queue",
                  "typeId": 52,
                  "typeName": "bool",
                  "docs": []
                },
                {
                  "name": "alarm",
                  "typeId": 457,
                  "typeName": "Option<(Moment, ScheduleAddress)>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 476,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 140
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 342,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 477,
          "path": [
            "pallet_referenda",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "NotOngoing",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Referendum is not ongoing."
                  ]
                },
                {
                  "name": "HasDeposit",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Referendum's decision deposit is already paid."
                  ]
                },
                {
                  "name": "BadTrack",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "The track identifier given was invalid."
                  ]
                },
                {
                  "name": "Full",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "There are already a full complement of referenda in progress for this track."
                  ]
                },
                {
                  "name": "QueueEmpty",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "The queue of the track is empty."
                  ]
                },
                {
                  "name": "BadReferendum",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "The referendum index provided is invalid in this context."
                  ]
                },
                {
                  "name": "NothingToDo",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "There was nothing to do in the advancement."
                  ]
                },
                {
                  "name": "NoTrack",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "No track exists for the proposal origin."
                  ]
                },
                {
                  "name": "Unfinished",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "Any deposit cannot be refunded until after the decision is over."
                  ]
                },
                {
                  "name": "NoPermission",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "The deposit refunder is not the depositor."
                  ]
                },
                {
                  "name": "NoDeposit",
                  "fields": [],
                  "index": 10,
                  "docs": [
                    "The deposit cannot be refunded since none was made."
                  ]
                },
                {
                  "name": "BadStatus",
                  "fields": [],
                  "index": 11,
                  "docs": [
                    "The referendum status is invalid for this operation."
                  ]
                },
                {
                  "name": "PreimageNotExist",
                  "fields": [],
                  "index": 12,
                  "docs": [
                    "The preimage does not exist."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 478,
          "path": [
            "pallet_whitelist",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "UnavailablePreImage",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "The preimage of the call hash could not be loaded."
                  ]
                },
                {
                  "name": "UndecodableCall",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "The call could not be decoded."
                  ]
                },
                {
                  "name": "InvalidCallWeightWitness",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "The weight of the decoded call was higher than the witness."
                  ]
                },
                {
                  "name": "CallIsNotWhitelisted",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "The call was not whitelisted."
                  ]
                },
                {
                  "name": "CallAlreadyWhitelisted",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "The call was already whitelisted; No-Op."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 479,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 480
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 482,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 480,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 481
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 481,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 481,
          "path": [
            "pallet_scheduler",
            "Scheduled"
          ],
          "params": [
            {
              "name": "Name",
              "typeId": 1
            },
            {
              "name": "Call",
              "typeId": 62
            },
            {
              "name": "BlockNumber",
              "typeId": 4
            },
            {
              "name": "PalletsOrigin",
              "typeId": 123
            },
            {
              "name": "AccountId",
              "typeId": 0
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "maybe_id",
                  "typeId": 292,
                  "typeName": "Option<Name>",
                  "docs": []
                },
                {
                  "name": "priority",
                  "typeId": 2,
                  "typeName": "schedule::Priority",
                  "docs": []
                },
                {
                  "name": "call",
                  "typeId": 62,
                  "typeName": "Call",
                  "docs": []
                },
                {
                  "name": "maybe_periodic",
                  "typeId": 139,
                  "typeName": "Option<schedule::Period<BlockNumber>>",
                  "docs": []
                },
                {
                  "name": "origin",
                  "typeId": 123,
                  "typeName": "PalletsOrigin",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 482,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 480
            }
          },
          "docs": []
        },
        {
          "id": 483,
          "path": [
            "pallet_scheduler",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "FailedToSchedule",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Failed to schedule a call"
                  ]
                },
                {
                  "name": "NotFound",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Cannot find the scheduled call."
                  ]
                },
                {
                  "name": "TargetBlockNumberInPast",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Given target block number is in the past."
                  ]
                },
                {
                  "name": "RescheduleNoChange",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Reschedule failed because it does not change scheduled time."
                  ]
                },
                {
                  "name": "Named",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "Attempt to use a non-named function on a named task."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 484,
          "path": [
            "pallet_preimage",
            "RequestStatus"
          ],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Unrequested",
                  "fields": [
                    {
                      "name": "deposit",
                      "typeId": 250,
                      "typeName": "(AccountId, Balance)",
                      "docs": []
                    },
                    {
                      "name": "len",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Requested",
                  "fields": [
                    {
                      "name": "deposit",
                      "typeId": 485,
                      "typeName": "Option<(AccountId, Balance)>",
                      "docs": []
                    },
                    {
                      "name": "count",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "len",
                      "typeId": 251,
                      "typeName": "Option<u32>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 485,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 250
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 250,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 486,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 2
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 12,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 487,
          "path": [
            "pallet_preimage",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "TooBig",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Preimage is too large to store on-chain."
                  ]
                },
                {
                  "name": "AlreadyNoted",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Preimage has already been noted on-chain."
                  ]
                },
                {
                  "name": "NotAuthorized",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "The user is not authorized to perform this action."
                  ]
                },
                {
                  "name": "NotNoted",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "The preimage cannot be removed since it has not yet been noted."
                  ]
                },
                {
                  "name": "Requested",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "A preimage may not be removed when there are outstanding requests."
                  ]
                },
                {
                  "name": "NotRequested",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "The preimage request cannot be removed since no outstanding requests exist."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 488,
          "path": [
            "pallet_identity",
            "types",
            "Registration"
          ],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            },
            {
              "name": "MaxJudgements"
            },
            {
              "name": "MaxAdditionalFields"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "judgements",
                  "typeId": 489,
                  "typeName": "BoundedVec<(RegistrarIndex, Judgement<Balance>), MaxJudgements>",
                  "docs": []
                },
                {
                  "name": "deposit",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "info",
                  "typeId": 143,
                  "typeName": "IdentityInfo<MaxAdditionalFields>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 489,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 490
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 491,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 490,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                4,
                183
              ]
            }
          },
          "docs": []
        },
        {
          "id": 491,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 490
            }
          },
          "docs": []
        },
        {
          "id": 492,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                6,
                493
              ]
            }
          },
          "docs": []
        },
        {
          "id": 493,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 0
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 111,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 494,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 495
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 497,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 495,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 496
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 496,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 496,
          "path": [
            "pallet_identity",
            "types",
            "RegistrarInfo"
          ],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            },
            {
              "name": "AccountId",
              "typeId": 0
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "account",
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "fee",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "fields",
                  "typeId": 181,
                  "typeName": "IdentityFields",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 497,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 495
            }
          },
          "docs": []
        },
        {
          "id": 498,
          "path": [
            "pallet_identity",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "TooManySubAccounts",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Too many subs-accounts."
                  ]
                },
                {
                  "name": "NotFound",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Account isn't found."
                  ]
                },
                {
                  "name": "NotNamed",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Account isn't named."
                  ]
                },
                {
                  "name": "EmptyIndex",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Empty index."
                  ]
                },
                {
                  "name": "FeeChanged",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "Fee is changed."
                  ]
                },
                {
                  "name": "NoIdentity",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "No identity found."
                  ]
                },
                {
                  "name": "StickyJudgement",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "Sticky judgement."
                  ]
                },
                {
                  "name": "JudgementGiven",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "Judgement given."
                  ]
                },
                {
                  "name": "InvalidJudgement",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "Invalid judgement."
                  ]
                },
                {
                  "name": "InvalidIndex",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "The index is invalid."
                  ]
                },
                {
                  "name": "InvalidTarget",
                  "fields": [],
                  "index": 10,
                  "docs": [
                    "The target is invalid."
                  ]
                },
                {
                  "name": "TooManyFields",
                  "fields": [],
                  "index": 11,
                  "docs": [
                    "Too many additional fields."
                  ]
                },
                {
                  "name": "TooManyRegistrars",
                  "fields": [],
                  "index": 12,
                  "docs": [
                    "Maximum amount of registrars reached. Cannot add any more."
                  ]
                },
                {
                  "name": "AlreadyClaimed",
                  "fields": [],
                  "index": 13,
                  "docs": [
                    "Account ID is already named."
                  ]
                },
                {
                  "name": "NotSub",
                  "fields": [],
                  "index": 14,
                  "docs": [
                    "Sender is not a sub-account."
                  ]
                },
                {
                  "name": "NotOwned",
                  "fields": [],
                  "index": 15,
                  "docs": [
                    "Sub-account isn't owned by sender."
                  ]
                },
                {
                  "name": "JudgementForDifferentIdentity",
                  "fields": [],
                  "index": 16,
                  "docs": [
                    "The provided judgement was for a different identity."
                  ]
                },
                {
                  "name": "JudgementPaymentFailed",
                  "fields": [],
                  "index": 17,
                  "docs": [
                    "Error that occurs when there is an issue paying for judgement."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 499,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                500,
                6
              ]
            }
          },
          "docs": []
        },
        {
          "id": 500,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 501
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 502,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 501,
          "path": [
            "pallet_proxy",
            "ProxyDefinition"
          ],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "ProxyType",
              "typeId": 186
            },
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "delegate",
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "proxy_type",
                  "typeId": 186,
                  "typeName": "ProxyType",
                  "docs": []
                },
                {
                  "name": "delay",
                  "typeId": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 502,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 501
            }
          },
          "docs": []
        },
        {
          "id": 503,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                504,
                6
              ]
            }
          },
          "docs": []
        },
        {
          "id": 504,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 505
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 506,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 505,
          "path": [
            "pallet_proxy",
            "Announcement"
          ],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "Hash",
              "typeId": 11
            },
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "real",
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "typeId": 11,
                  "typeName": "Hash",
                  "docs": []
                },
                {
                  "name": "height",
                  "typeId": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 506,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 505
            }
          },
          "docs": []
        },
        {
          "id": 507,
          "path": [
            "pallet_proxy",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "TooMany",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "There are too many proxies registered or too many announcements pending."
                  ]
                },
                {
                  "name": "NotFound",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Proxy registration not found."
                  ]
                },
                {
                  "name": "NotProxy",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Sender is not a proxy of the account to be proxied."
                  ]
                },
                {
                  "name": "Unproxyable",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "A call which is incompatible with the proxy type's filter was attempted."
                  ]
                },
                {
                  "name": "Duplicate",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "Account is already a proxy."
                  ]
                },
                {
                  "name": "NoPermission",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "Call may not be made by proxy because it may escalate its privileges."
                  ]
                },
                {
                  "name": "Unannounced",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "Announcement, if made at all, was made too recently."
                  ]
                },
                {
                  "name": "NoSelfProxy",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "Cannot add self as proxy."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 508,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                0,
                1
              ]
            }
          },
          "docs": []
        },
        {
          "id": 509,
          "path": [
            "pallet_multisig",
            "Multisig"
          ],
          "params": [
            {
              "name": "BlockNumber",
              "typeId": 4
            },
            {
              "name": "Balance",
              "typeId": 6
            },
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "MaxApprovals"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "when",
                  "typeId": 189,
                  "typeName": "Timepoint<BlockNumber>",
                  "docs": []
                },
                {
                  "name": "deposit",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "depositor",
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "approvals",
                  "typeId": 510,
                  "typeName": "BoundedVec<AccountId, MaxApprovals>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 510,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 0
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 111,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 511,
          "path": [
            "pallet_multisig",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "MinimumThreshold",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Threshold must be 2 or greater."
                  ]
                },
                {
                  "name": "AlreadyApproved",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Call is already approved by this signatory."
                  ]
                },
                {
                  "name": "NoApprovalsNeeded",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Call doesn't need any (more) approvals."
                  ]
                },
                {
                  "name": "TooFewSignatories",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "There are too few signatories in the list."
                  ]
                },
                {
                  "name": "TooManySignatories",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "There are too many signatories in the list."
                  ]
                },
                {
                  "name": "SignatoriesOutOfOrder",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "The signatories were provided out of order; they should be ordered."
                  ]
                },
                {
                  "name": "SenderInSignatories",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "The sender was contained in the other signatories; it shouldn't be."
                  ]
                },
                {
                  "name": "NotFound",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "Multisig operation not found when attempting to cancel."
                  ]
                },
                {
                  "name": "NotOwner",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "Only the account that originally created the multisig is able to cancel it."
                  ]
                },
                {
                  "name": "NoTimepoint",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "No timepoint was given, yet the multisig operation is already underway."
                  ]
                },
                {
                  "name": "WrongTimepoint",
                  "fields": [],
                  "index": 10,
                  "docs": [
                    "A different timepoint was given to the multisig operation that is underway."
                  ]
                },
                {
                  "name": "UnexpectedTimepoint",
                  "fields": [],
                  "index": 11,
                  "docs": [
                    "A timepoint was given, yet no multisig operation is underway."
                  ]
                },
                {
                  "name": "MaxWeightTooLow",
                  "fields": [],
                  "index": 12,
                  "docs": [
                    "The maximum weight information provided was too low."
                  ]
                },
                {
                  "name": "AlreadyStored",
                  "fields": [],
                  "index": 13,
                  "docs": [
                    "The data to be stored is already stored."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 512,
          "path": [
            "pallet_election_provider_multi_phase",
            "ReadySolution"
          ],
          "params": [
            {
              "name": "AccountId"
            },
            {
              "name": "MaxWinners"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "supports",
                  "typeId": 513,
                  "typeName": "BoundedSupports<AccountId, MaxWinners>",
                  "docs": []
                },
                {
                  "name": "score",
                  "typeId": 243,
                  "typeName": "ElectionScore",
                  "docs": []
                },
                {
                  "name": "compute",
                  "typeId": 298,
                  "typeName": "ElectionCompute",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 513,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 247
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 246,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 514,
          "path": [
            "pallet_election_provider_multi_phase",
            "RoundSnapshot"
          ],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "DataProvider",
              "typeId": 515
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "voters",
                  "typeId": 516,
                  "typeName": "Vec<DataProvider>",
                  "docs": []
                },
                {
                  "name": "targets",
                  "typeId": 111,
                  "typeName": "Vec<AccountId>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 515,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                0,
                10,
                411
              ]
            }
          },
          "docs": []
        },
        {
          "id": 516,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 515
            }
          },
          "docs": []
        },
        {
          "id": 517,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 518
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 519,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 518,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                243,
                4,
                4
              ]
            }
          },
          "docs": []
        },
        {
          "id": 519,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 518
            }
          },
          "docs": []
        },
        {
          "id": 520,
          "path": [
            "pallet_election_provider_multi_phase",
            "signed",
            "SignedSubmission"
          ],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "Balance",
              "typeId": 6
            },
            {
              "name": "Solution",
              "typeId": 192
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "who",
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "deposit",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "raw_solution",
                  "typeId": 191,
                  "typeName": "RawSolution<Solution>",
                  "docs": []
                },
                {
                  "name": "call_fee",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 521,
          "path": [
            "pallet_election_provider_multi_phase",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "PreDispatchEarlySubmission",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Submission was too early."
                  ]
                },
                {
                  "name": "PreDispatchWrongWinnerCount",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Wrong number of winners presented."
                  ]
                },
                {
                  "name": "PreDispatchWeakSubmission",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Submission was too weak, score-wise."
                  ]
                },
                {
                  "name": "SignedQueueFull",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "The queue was full, and the solution was not better than any of the existing ones."
                  ]
                },
                {
                  "name": "SignedCannotPayDeposit",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "The origin failed to pay the deposit."
                  ]
                },
                {
                  "name": "SignedInvalidWitness",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "Witness data to dispatchable is invalid."
                  ]
                },
                {
                  "name": "SignedTooMuchWeight",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "The signed submission consumes too much weight"
                  ]
                },
                {
                  "name": "OcwCallWrongEra",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "OCW submitted solution for wrong round"
                  ]
                },
                {
                  "name": "MissingSnapshotMetadata",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "Snapshot metadata should exist but didn't."
                  ]
                },
                {
                  "name": "InvalidSubmissionIndex",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "`Self::insert_submission` returned an invalid index."
                  ]
                },
                {
                  "name": "CallNotAllowed",
                  "fields": [],
                  "index": 10,
                  "docs": [
                    "The call is not allowed at this point."
                  ]
                },
                {
                  "name": "FallbackFailed",
                  "fields": [],
                  "index": 11,
                  "docs": [
                    "The fallback failed"
                  ]
                },
                {
                  "name": "BoundNotMet",
                  "fields": [],
                  "index": 12,
                  "docs": [
                    "Some bound not met"
                  ]
                },
                {
                  "name": "TooManyWinners",
                  "fields": [],
                  "index": 13,
                  "docs": [
                    "Submitted solution has too many winners"
                  ]
                }
              ]
            }
          },
          "docs": [
            "Error of the pallet that can be returned in response to dispatches."
          ]
        },
        {
          "id": 522,
          "path": [
            "sp_staking",
            "offence",
            "OffenceDetails"
          ],
          "params": [
            {
              "name": "Reporter",
              "typeId": 0
            },
            {
              "name": "Offender",
              "typeId": 43
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "offender",
                  "typeId": 43,
                  "typeName": "Offender",
                  "docs": []
                },
                {
                  "name": "reporters",
                  "typeId": 111,
                  "typeName": "Vec<Reporter>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 523,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                162,
                12
              ]
            }
          },
          "docs": []
        },
        {
          "id": 524,
          "path": [
            "pallet_bounties",
            "Bounty"
          ],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "Balance",
              "typeId": 6
            },
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "proposer",
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "value",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "fee",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "curator_deposit",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "bond",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "status",
                  "typeId": 525,
                  "typeName": "BountyStatus<AccountId, BlockNumber>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 525,
          "path": [
            "pallet_bounties",
            "BountyStatus"
          ],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Proposed",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Approved",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Funded",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "CuratorProposed",
                  "fields": [
                    {
                      "name": "curator",
                      "typeId": 0,
                      "typeName": "AccountId",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Active",
                  "fields": [
                    {
                      "name": "curator",
                      "typeId": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "update_due",
                      "typeId": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "PendingPayout",
                  "fields": [
                    {
                      "name": "curator",
                      "typeId": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "unlock_at",
                      "typeId": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 526,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 2
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 12,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 527,
          "path": [
            "pallet_bounties",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "InsufficientProposersBalance",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Proposer's balance is too low."
                  ]
                },
                {
                  "name": "InvalidIndex",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "No proposal or bounty at that index."
                  ]
                },
                {
                  "name": "ReasonTooBig",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "The reason given is just too big."
                  ]
                },
                {
                  "name": "UnexpectedStatus",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "The bounty status is unexpected."
                  ]
                },
                {
                  "name": "RequireCurator",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "Require bounty curator."
                  ]
                },
                {
                  "name": "InvalidValue",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "Invalid bounty value."
                  ]
                },
                {
                  "name": "InvalidFee",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "Invalid bounty fee."
                  ]
                },
                {
                  "name": "PendingPayout",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "A bounty payout is pending.",
                    "To cancel the bounty, you must unassign and slash the curator."
                  ]
                },
                {
                  "name": "Premature",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "The bounties cannot be claimed/closed because it's still in the countdown period."
                  ]
                },
                {
                  "name": "HasActiveChildBounty",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "The bounty cannot be closed because it has active child bounties."
                  ]
                },
                {
                  "name": "TooManyQueued",
                  "fields": [],
                  "index": 10,
                  "docs": [
                    "Too many approvals are already queued."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 528,
          "path": [
            "pallet_child_bounties",
            "ChildBounty"
          ],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "Balance",
              "typeId": 6
            },
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "parent_bounty",
                  "typeId": 4,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "value",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "fee",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "curator_deposit",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "status",
                  "typeId": 529,
                  "typeName": "ChildBountyStatus<AccountId, BlockNumber>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 529,
          "path": [
            "pallet_child_bounties",
            "ChildBountyStatus"
          ],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Added",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "CuratorProposed",
                  "fields": [
                    {
                      "name": "curator",
                      "typeId": 0,
                      "typeName": "AccountId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Active",
                  "fields": [
                    {
                      "name": "curator",
                      "typeId": 0,
                      "typeName": "AccountId",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "PendingPayout",
                  "fields": [
                    {
                      "name": "curator",
                      "typeId": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "unlock_at",
                      "typeId": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 530,
          "path": [
            "pallet_child_bounties",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "ParentBountyNotActive",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "The parent bounty is not in active state."
                  ]
                },
                {
                  "name": "InsufficientBountyBalance",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "The bounty balance is not enough to add new child-bounty."
                  ]
                },
                {
                  "name": "TooManyChildBounties",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Number of child bounties exceeds limit `MaxActiveChildBountyCount`."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 531,
          "path": [
            "pallet_nomination_pools",
            "PoolMember"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "pool_id",
                  "typeId": 4,
                  "typeName": "PoolId",
                  "docs": []
                },
                {
                  "name": "points",
                  "typeId": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "last_recorded_reward_counter",
                  "typeId": 389,
                  "typeName": "T::RewardCounter",
                  "docs": []
                },
                {
                  "name": "unbonding_eras",
                  "typeId": 532,
                  "typeName": "BoundedBTreeMap<EraIndex, BalanceOf<T>, T::MaxUnbonding>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 532,
          "path": [
            "bounded_collections",
            "bounded_btree_map",
            "BoundedBTreeMap"
          ],
          "params": [
            {
              "name": "K",
              "typeId": 4
            },
            {
              "name": "V",
              "typeId": 6
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 533,
                  "typeName": "BTreeMap<K, V>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 533,
          "path": [
            "BTreeMap"
          ],
          "params": [
            {
              "name": "K",
              "typeId": 4
            },
            {
              "name": "V",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 461,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 534,
          "path": [
            "pallet_nomination_pools",
            "BondedPoolInner"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "commission",
                  "typeId": 535,
                  "typeName": "Commission<T>",
                  "docs": []
                },
                {
                  "name": "member_counter",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "points",
                  "typeId": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "roles",
                  "typeId": 538,
                  "typeName": "PoolRoles<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "state",
                  "typeId": 256,
                  "typeName": "PoolState",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 535,
          "path": [
            "pallet_nomination_pools",
            "Commission"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "current",
                  "typeId": 262,
                  "typeName": "Option<(Perbill, T::AccountId)>",
                  "docs": []
                },
                {
                  "name": "max",
                  "typeId": 536,
                  "typeName": "Option<Perbill>",
                  "docs": []
                },
                {
                  "name": "change_rate",
                  "typeId": 537,
                  "typeName": "Option<CommissionChangeRate<T::BlockNumber>>",
                  "docs": []
                },
                {
                  "name": "throttle_from",
                  "typeId": 251,
                  "typeName": "Option<T::BlockNumber>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 536,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 49
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 49,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 537,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 264
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 264,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 538,
          "path": [
            "pallet_nomination_pools",
            "PoolRoles"
          ],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "depositor",
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "root",
                  "typeId": 299,
                  "typeName": "Option<AccountId>",
                  "docs": []
                },
                {
                  "name": "nominator",
                  "typeId": 299,
                  "typeName": "Option<AccountId>",
                  "docs": []
                },
                {
                  "name": "bouncer",
                  "typeId": 299,
                  "typeName": "Option<AccountId>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 539,
          "path": [
            "pallet_nomination_pools",
            "RewardPool"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "last_recorded_reward_counter",
                  "typeId": 389,
                  "typeName": "T::RewardCounter",
                  "docs": []
                },
                {
                  "name": "last_recorded_total_payouts",
                  "typeId": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "total_rewards_claimed",
                  "typeId": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "total_commission_pending",
                  "typeId": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "total_commission_claimed",
                  "typeId": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 540,
          "path": [
            "pallet_nomination_pools",
            "SubPools"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "no_era",
                  "typeId": 541,
                  "typeName": "UnbondPool<T>",
                  "docs": []
                },
                {
                  "name": "with_era",
                  "typeId": 542,
                  "typeName": "BoundedBTreeMap<EraIndex, UnbondPool<T>, TotalUnbondingPools<T>>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 541,
          "path": [
            "pallet_nomination_pools",
            "UnbondPool"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "points",
                  "typeId": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "balance",
                  "typeId": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 542,
          "path": [
            "bounded_collections",
            "bounded_btree_map",
            "BoundedBTreeMap"
          ],
          "params": [
            {
              "name": "K",
              "typeId": 4
            },
            {
              "name": "V",
              "typeId": 541
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 543,
                  "typeName": "BTreeMap<K, V>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 543,
          "path": [
            "BTreeMap"
          ],
          "params": [
            {
              "name": "K",
              "typeId": 4
            },
            {
              "name": "V",
              "typeId": 541
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 544,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 544,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 545
            }
          },
          "docs": []
        },
        {
          "id": 545,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                4,
                541
              ]
            }
          },
          "docs": []
        },
        {
          "id": 546,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 2
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 12,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 547,
          "path": [
            "pallet_nomination_pools",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "PoolNotFound",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "A (bonded) pool id does not exist."
                  ]
                },
                {
                  "name": "PoolMemberNotFound",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "An account is not a member."
                  ]
                },
                {
                  "name": "RewardPoolNotFound",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "A reward pool does not exist. In all cases this is a system logic error."
                  ]
                },
                {
                  "name": "SubPoolsNotFound",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "A sub pool does not exist."
                  ]
                },
                {
                  "name": "AccountBelongsToOtherPool",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "An account is already delegating in another pool. An account may only belong to one",
                    "pool at a time."
                  ]
                },
                {
                  "name": "FullyUnbonding",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "The member is fully unbonded (and thus cannot access the bonded and reward pool",
                    "anymore to, for example, collect rewards)."
                  ]
                },
                {
                  "name": "MaxUnbondingLimit",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "The member cannot unbond further chunks due to reaching the limit."
                  ]
                },
                {
                  "name": "CannotWithdrawAny",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "None of the funds can be withdrawn yet because the bonding duration has not passed."
                  ]
                },
                {
                  "name": "MinimumBondNotMet",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "The amount does not meet the minimum bond to either join or create a pool.",
                    "",
                    "The depositor can never unbond to a value less than",
                    "`Pallet::depositor_min_bond`. The caller does not have nominating",
                    "permissions for the pool. Members can never unbond to a value below `MinJoinBond`."
                  ]
                },
                {
                  "name": "OverflowRisk",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "The transaction could not be executed due to overflow risk for the pool."
                  ]
                },
                {
                  "name": "NotDestroying",
                  "fields": [],
                  "index": 10,
                  "docs": [
                    "A pool must be in [`PoolState::Destroying`] in order for the depositor to unbond or for",
                    "other members to be permissionlessly unbonded."
                  ]
                },
                {
                  "name": "NotNominator",
                  "fields": [],
                  "index": 11,
                  "docs": [
                    "The caller does not have nominating permissions for the pool."
                  ]
                },
                {
                  "name": "NotKickerOrDestroying",
                  "fields": [],
                  "index": 12,
                  "docs": [
                    "Either a) the caller cannot make a valid kick or b) the pool is not destroying."
                  ]
                },
                {
                  "name": "NotOpen",
                  "fields": [],
                  "index": 13,
                  "docs": [
                    "The pool is not open to join"
                  ]
                },
                {
                  "name": "MaxPools",
                  "fields": [],
                  "index": 14,
                  "docs": [
                    "The system is maxed out on pools."
                  ]
                },
                {
                  "name": "MaxPoolMembers",
                  "fields": [],
                  "index": 15,
                  "docs": [
                    "Too many members in the pool or system."
                  ]
                },
                {
                  "name": "CanNotChangeState",
                  "fields": [],
                  "index": 16,
                  "docs": [
                    "The pools state cannot be changed."
                  ]
                },
                {
                  "name": "DoesNotHavePermission",
                  "fields": [],
                  "index": 17,
                  "docs": [
                    "The caller does not have adequate permissions."
                  ]
                },
                {
                  "name": "MetadataExceedsMaxLen",
                  "fields": [],
                  "index": 18,
                  "docs": [
                    "Metadata exceeds [`Config::MaxMetadataLen`]"
                  ]
                },
                {
                  "name": "Defensive",
                  "fields": [
                    {
                      "typeId": 548,
                      "typeName": "DefensiveError",
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": [
                    "Some error occurred that should never happen. This should be reported to the",
                    "maintainers."
                  ]
                },
                {
                  "name": "PartialUnbondNotAllowedPermissionlessly",
                  "fields": [],
                  "index": 20,
                  "docs": [
                    "Partial unbonding now allowed permissionlessly."
                  ]
                },
                {
                  "name": "MaxCommissionRestricted",
                  "fields": [],
                  "index": 21,
                  "docs": [
                    "The pool's max commission cannot be set higher than the existing value."
                  ]
                },
                {
                  "name": "CommissionExceedsMaximum",
                  "fields": [],
                  "index": 22,
                  "docs": [
                    "The supplied commission exceeds the max allowed commission."
                  ]
                },
                {
                  "name": "CommissionChangeThrottled",
                  "fields": [],
                  "index": 23,
                  "docs": [
                    "Not enough blocks have surpassed since the last commission update."
                  ]
                },
                {
                  "name": "CommissionChangeRateNotAllowed",
                  "fields": [],
                  "index": 24,
                  "docs": [
                    "The submitted changes to commission change rate are not allowed."
                  ]
                },
                {
                  "name": "NoPendingCommission",
                  "fields": [],
                  "index": 25,
                  "docs": [
                    "There is no pending commission to claim."
                  ]
                },
                {
                  "name": "NoCommissionCurrentSet",
                  "fields": [],
                  "index": 26,
                  "docs": [
                    "No commission current has been set."
                  ]
                },
                {
                  "name": "PoolIdInUse",
                  "fields": [],
                  "index": 27,
                  "docs": [
                    "Pool id currently in use."
                  ]
                },
                {
                  "name": "InvalidPoolId",
                  "fields": [],
                  "index": 28,
                  "docs": [
                    "Pool id provided is not correct/usable."
                  ]
                },
                {
                  "name": "BondExtraRestricted",
                  "fields": [],
                  "index": 29,
                  "docs": [
                    "Bonding extra is restricted to the exact pending reward amount."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 548,
          "path": [
            "pallet_nomination_pools",
            "pallet",
            "DefensiveError"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "NotEnoughSpaceInUnbondPool",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "PoolNotFound",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "RewardPoolNotFound",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "SubPoolsNotFound",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "BondedStashKilledPrematurely",
                  "fields": [],
                  "index": 4,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 549,
          "path": [
            "gear_core",
            "code",
            "InstrumentedCode"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "code",
                  "typeId": 12,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "original_code_len",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "exports",
                  "typeId": 550,
                  "typeName": "BTreeSet<DispatchKind>",
                  "docs": []
                },
                {
                  "name": "static_pages",
                  "typeId": 271,
                  "typeName": "WasmPage",
                  "docs": []
                },
                {
                  "name": "version",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 550,
          "path": [
            "BTreeSet"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 551
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 552,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 551,
          "path": [
            "gear_core",
            "message",
            "DispatchKind"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Init",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Handle",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Reply",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Signal",
                  "fields": [],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 552,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 551
            }
          },
          "docs": []
        },
        {
          "id": 553,
          "path": [
            "gear_common",
            "CodeMetadata"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "author",
                  "typeId": 11,
                  "typeName": "H256",
                  "docs": []
                },
                {
                  "name": "block_number",
                  "typeId": 73,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 554,
          "path": [
            "gear_common",
            "Program"
          ],
          "params": [
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Active",
                  "fields": [
                    {
                      "typeId": 555,
                      "typeName": "ActiveProgram<BlockNumber>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Exited",
                  "fields": [
                    {
                      "typeId": 267,
                      "typeName": "ProgramId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Terminated",
                  "fields": [
                    {
                      "typeId": 267,
                      "typeName": "ProgramId",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 555,
          "path": [
            "gear_common",
            "ActiveProgram"
          ],
          "params": [
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "allocations",
                  "typeId": 270,
                  "typeName": "BTreeSet<WasmPage>",
                  "docs": []
                },
                {
                  "name": "pages_with_data",
                  "typeId": 556,
                  "typeName": "BTreeSet<GearPage>",
                  "docs": []
                },
                {
                  "name": "gas_reservation_map",
                  "typeId": 558,
                  "typeName": "GasReservationMap",
                  "docs": []
                },
                {
                  "name": "code_hash",
                  "typeId": 11,
                  "typeName": "H256",
                  "docs": []
                },
                {
                  "name": "code_exports",
                  "typeId": 550,
                  "typeName": "BTreeSet<DispatchKind>",
                  "docs": []
                },
                {
                  "name": "static_pages",
                  "typeId": 271,
                  "typeName": "WasmPage",
                  "docs": []
                },
                {
                  "name": "state",
                  "typeId": 562,
                  "typeName": "ProgramState",
                  "docs": []
                },
                {
                  "name": "expiration_block",
                  "typeId": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 556,
          "path": [
            "BTreeSet"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 275
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 557,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 557,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 275
            }
          },
          "docs": []
        },
        {
          "id": 558,
          "path": [
            "BTreeMap"
          ],
          "params": [
            {
              "name": "K",
              "typeId": 329
            },
            {
              "name": "V",
              "typeId": 559
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 560,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 559,
          "path": [
            "gear_core",
            "reservation",
            "GasReservationSlot"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "amount",
                  "typeId": 10,
                  "typeName": "u64",
                  "docs": []
                },
                {
                  "name": "start",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "finish",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 560,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 561
            }
          },
          "docs": []
        },
        {
          "id": 561,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                329,
                559
              ]
            }
          },
          "docs": []
        },
        {
          "id": 562,
          "path": [
            "gear_common",
            "ProgramState"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Uninitialized",
                  "fields": [
                    {
                      "name": "message_id",
                      "typeId": 268,
                      "typeName": "MessageId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Initialized",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 563,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                267,
                275
              ]
            }
          },
          "docs": []
        },
        {
          "id": 564,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 268
            }
          },
          "docs": []
        },
        {
          "id": 565,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                4,
                11
              ]
            }
          },
          "docs": []
        },
        {
          "id": 566,
          "path": [
            "gear_common",
            "paused_program_storage",
            "ResumeSession"
          ],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "page_count",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "user",
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "program_id",
                  "typeId": 267,
                  "typeName": "ProgramId",
                  "docs": []
                },
                {
                  "name": "allocations",
                  "typeId": 270,
                  "typeName": "BTreeSet<WasmPage>",
                  "docs": []
                },
                {
                  "name": "code_hash",
                  "typeId": 266,
                  "typeName": "CodeId",
                  "docs": []
                },
                {
                  "name": "end_block",
                  "typeId": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 567,
          "path": [
            "pallet_gear_program",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "DuplicateItem",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "ProgramNotFound",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "NotActiveProgram",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "CannotFindDataForPage",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "ResumeSessionNotFound",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "NotSessionOwner",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "ResumeSessionFailed",
                  "fields": [],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "ProgramCodeNotFound",
                  "fields": [],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "DuplicateResumeSession",
                  "fields": [],
                  "index": 8,
                  "docs": []
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 568,
          "path": [
            "gear_common",
            "storage",
            "complicated",
            "dequeue",
            "LinkedNode"
          ],
          "params": [
            {
              "name": "K",
              "typeId": 268
            },
            {
              "name": "V",
              "typeId": 569
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "next",
                  "typeId": 583,
                  "typeName": "Option<K>",
                  "docs": []
                },
                {
                  "name": "value",
                  "typeId": 569,
                  "typeName": "V",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 569,
          "path": [
            "gear_core",
            "message",
            "stored",
            "StoredDispatch"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "kind",
                  "typeId": 551,
                  "typeName": "DispatchKind",
                  "docs": []
                },
                {
                  "name": "message",
                  "typeId": 570,
                  "typeName": "StoredMessage",
                  "docs": []
                },
                {
                  "name": "context",
                  "typeId": 575,
                  "typeName": "Option<ContextStore>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 570,
          "path": [
            "gear_core",
            "message",
            "stored",
            "StoredMessage"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "id",
                  "typeId": 268,
                  "typeName": "MessageId",
                  "docs": []
                },
                {
                  "name": "source",
                  "typeId": 267,
                  "typeName": "ProgramId",
                  "docs": []
                },
                {
                  "name": "destination",
                  "typeId": 267,
                  "typeName": "ProgramId",
                  "docs": []
                },
                {
                  "name": "payload",
                  "typeId": 309,
                  "typeName": "Payload",
                  "docs": []
                },
                {
                  "name": "value",
                  "typeId": 45,
                  "typeName": "Value",
                  "docs": []
                },
                {
                  "name": "details",
                  "typeId": 571,
                  "typeName": "Option<MessageDetails>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 571,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 572
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 572,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 572,
          "path": [
            "gear_core",
            "message",
            "common",
            "MessageDetails"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Reply",
                  "fields": [
                    {
                      "typeId": 312,
                      "typeName": "ReplyDetails",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Signal",
                  "fields": [
                    {
                      "typeId": 573,
                      "typeName": "SignalDetails",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 573,
          "path": [
            "gear_core",
            "message",
            "common",
            "SignalDetails"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "to",
                  "typeId": 268,
                  "typeName": "MessageId",
                  "docs": []
                },
                {
                  "name": "code",
                  "typeId": 574,
                  "typeName": "SignalCode",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 574,
          "path": [
            "gear_core_errors",
            "simple",
            "SignalCode"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Execution",
                  "fields": [
                    {
                      "typeId": 316,
                      "typeName": "SimpleExecutionError",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "RemovedFromWaitlist",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 575,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 576
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 576,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 576,
          "path": [
            "gear_core",
            "message",
            "context",
            "ContextStore"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "outgoing",
                  "typeId": 577,
                  "typeName": "BTreeMap<u32, Option<Payload>>",
                  "docs": []
                },
                {
                  "name": "reply",
                  "typeId": 578,
                  "typeName": "Option<Payload>",
                  "docs": []
                },
                {
                  "name": "initialized",
                  "typeId": 325,
                  "typeName": "BTreeSet<ProgramId>",
                  "docs": []
                },
                {
                  "name": "awaken",
                  "typeId": 581,
                  "typeName": "BTreeSet<MessageId>",
                  "docs": []
                },
                {
                  "name": "reply_sent",
                  "typeId": 52,
                  "typeName": "bool",
                  "docs": []
                },
                {
                  "name": "reservation_nonce",
                  "typeId": 582,
                  "typeName": "ReservationNonce",
                  "docs": []
                },
                {
                  "name": "system_reservation",
                  "typeId": 269,
                  "typeName": "Option<u64>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 577,
          "path": [
            "BTreeMap"
          ],
          "params": [
            {
              "name": "K",
              "typeId": 4
            },
            {
              "name": "V",
              "typeId": 578
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 579,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 578,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 309
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 309,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 579,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 580
            }
          },
          "docs": []
        },
        {
          "id": 580,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                4,
                578
              ]
            }
          },
          "docs": []
        },
        {
          "id": 581,
          "path": [
            "BTreeSet"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 268
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 564,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 582,
          "path": [
            "gear_core",
            "reservation",
            "ReservationNonce"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 10,
                  "typeName": "u64",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 583,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 268
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 268,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 584,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                0,
                268
              ]
            }
          },
          "docs": []
        },
        {
          "id": 585,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                586,
                587
              ]
            }
          },
          "docs": []
        },
        {
          "id": 586,
          "path": [
            "gear_core",
            "message",
            "user",
            "UserStoredMessage"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "id",
                  "typeId": 268,
                  "typeName": "MessageId",
                  "docs": []
                },
                {
                  "name": "source",
                  "typeId": 267,
                  "typeName": "ProgramId",
                  "docs": []
                },
                {
                  "name": "destination",
                  "typeId": 267,
                  "typeName": "ProgramId",
                  "docs": []
                },
                {
                  "name": "payload",
                  "typeId": 309,
                  "typeName": "Payload",
                  "docs": []
                },
                {
                  "name": "value",
                  "typeId": 45,
                  "typeName": "Value",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 587,
          "path": [
            "gear_common",
            "storage",
            "primitives",
            "Interval"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "start",
                  "typeId": 4,
                  "typeName": "T",
                  "docs": []
                },
                {
                  "name": "finish",
                  "typeId": 4,
                  "typeName": "T",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 588,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                267,
                268
              ]
            }
          },
          "docs": []
        },
        {
          "id": 589,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                569,
                587
              ]
            }
          },
          "docs": []
        },
        {
          "id": 590,
          "path": [
            "pallet_gear_messenger",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "QueueDuplicateKey",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Occurs when given key already exists in queue."
                  ]
                },
                {
                  "name": "QueueElementNotFound",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Occurs when queue's element wasn't found in storage."
                  ]
                },
                {
                  "name": "QueueHeadShouldBeSet",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Occurs when queue's head should contain value,",
                    "but it's empty for some reason."
                  ]
                },
                {
                  "name": "QueueHeadShouldNotBeSet",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Occurs when queue's head should be empty,",
                    "but it contains value for some reason."
                  ]
                },
                {
                  "name": "QueueTailHasNextKey",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "Occurs when queue's tail element contains link",
                    "to the next element."
                  ]
                },
                {
                  "name": "QueueTailParentNotFound",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "Occurs when while searching queue's pre-tail,",
                    "element wasn't found."
                  ]
                },
                {
                  "name": "QueueTailShouldBeSet",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "Occurs when queue's tail should contain value,",
                    "but it's empty for some reason."
                  ]
                },
                {
                  "name": "QueueTailShouldNotBeSet",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "Occurs when queue's tail should be empty,",
                    "but it contains value for some reason."
                  ]
                },
                {
                  "name": "MailboxDuplicateKey",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "Occurs when given value already exists in mailbox."
                  ]
                },
                {
                  "name": "MailboxElementNotFound",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "Occurs when mailbox's element wasn't found in storage."
                  ]
                },
                {
                  "name": "WaitlistDuplicateKey",
                  "fields": [],
                  "index": 10,
                  "docs": [
                    "Occurs when given value already exists in waitlist."
                  ]
                },
                {
                  "name": "WaitlistElementNotFound",
                  "fields": [],
                  "index": 11,
                  "docs": [
                    "Occurs when waitlist's element wasn't found in storage."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 591,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                4,
                592
              ]
            }
          },
          "docs": []
        },
        {
          "id": 592,
          "path": [
            "gear_common",
            "scheduler",
            "task",
            "ScheduledTask"
          ],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "PauseProgram",
                  "fields": [
                    {
                      "typeId": 267,
                      "typeName": "ProgramId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "RemoveCode",
                  "fields": [
                    {
                      "typeId": 266,
                      "typeName": "CodeId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "RemoveFromMailbox",
                  "fields": [
                    {
                      "typeId": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "typeId": 268,
                      "typeName": "MessageId",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "RemoveFromWaitlist",
                  "fields": [
                    {
                      "typeId": 267,
                      "typeName": "ProgramId",
                      "docs": []
                    },
                    {
                      "typeId": 268,
                      "typeName": "MessageId",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "RemovePausedProgram",
                  "fields": [
                    {
                      "typeId": 267,
                      "typeName": "ProgramId",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "WakeMessage",
                  "fields": [
                    {
                      "typeId": 267,
                      "typeName": "ProgramId",
                      "docs": []
                    },
                    {
                      "typeId": 268,
                      "typeName": "MessageId",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "SendDispatch",
                  "fields": [
                    {
                      "typeId": 268,
                      "typeName": "MessageId",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "SendUserMessage",
                  "fields": [
                    {
                      "name": "message_id",
                      "typeId": 268,
                      "typeName": "MessageId",
                      "docs": []
                    },
                    {
                      "name": "to_mailbox",
                      "typeId": 52,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "RemoveGasReservation",
                  "fields": [
                    {
                      "typeId": 267,
                      "typeName": "ProgramId",
                      "docs": []
                    },
                    {
                      "typeId": 329,
                      "typeName": "ReservationId",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "RemoveResumeSession",
                  "fields": [
                    {
                      "typeId": 6,
                      "typeName": "SessionId",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 593,
          "path": [
            "pallet_gear_scheduler",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "DuplicateTask",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Occurs when given task already exists in task pool."
                  ]
                },
                {
                  "name": "TaskNotFound",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Occurs when task wasn't found in storage."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 594,
          "path": [
            "gear_common",
            "gas_provider",
            "node",
            "GasNode"
          ],
          "params": [
            {
              "name": "ExternalId",
              "typeId": 0
            },
            {
              "name": "Id",
              "typeId": 328
            },
            {
              "name": "Balance",
              "typeId": 10
            },
            {
              "name": "Funds",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "External",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 0,
                      "typeName": "ExternalId",
                      "docs": []
                    },
                    {
                      "name": "multiplier",
                      "typeId": 595,
                      "typeName": "GasMultiplier<Funds, Balance>",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "typeId": 10,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "lock",
                      "typeId": 596,
                      "typeName": "NodeLock<Balance>",
                      "docs": []
                    },
                    {
                      "name": "system_reserve",
                      "typeId": 10,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "refs",
                      "typeId": 598,
                      "typeName": "ChildrenRefs",
                      "docs": []
                    },
                    {
                      "name": "consumed",
                      "typeId": 52,
                      "typeName": "bool",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "typeId": 52,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Cut",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 0,
                      "typeName": "ExternalId",
                      "docs": []
                    },
                    {
                      "name": "multiplier",
                      "typeId": 595,
                      "typeName": "GasMultiplier<Funds, Balance>",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "typeId": 10,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "lock",
                      "typeId": 596,
                      "typeName": "NodeLock<Balance>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Reserved",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 0,
                      "typeName": "ExternalId",
                      "docs": []
                    },
                    {
                      "name": "multiplier",
                      "typeId": 595,
                      "typeName": "GasMultiplier<Funds, Balance>",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "typeId": 10,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "lock",
                      "typeId": 596,
                      "typeName": "NodeLock<Balance>",
                      "docs": []
                    },
                    {
                      "name": "refs",
                      "typeId": 598,
                      "typeName": "ChildrenRefs",
                      "docs": []
                    },
                    {
                      "name": "consumed",
                      "typeId": 52,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "SpecifiedLocal",
                  "fields": [
                    {
                      "name": "parent",
                      "typeId": 328,
                      "typeName": "Id",
                      "docs": []
                    },
                    {
                      "name": "root",
                      "typeId": 328,
                      "typeName": "Id",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "typeId": 10,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "lock",
                      "typeId": 596,
                      "typeName": "NodeLock<Balance>",
                      "docs": []
                    },
                    {
                      "name": "system_reserve",
                      "typeId": 10,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "refs",
                      "typeId": 598,
                      "typeName": "ChildrenRefs",
                      "docs": []
                    },
                    {
                      "name": "consumed",
                      "typeId": 52,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "UnspecifiedLocal",
                  "fields": [
                    {
                      "name": "parent",
                      "typeId": 328,
                      "typeName": "Id",
                      "docs": []
                    },
                    {
                      "name": "root",
                      "typeId": 328,
                      "typeName": "Id",
                      "docs": []
                    },
                    {
                      "name": "lock",
                      "typeId": 596,
                      "typeName": "NodeLock<Balance>",
                      "docs": []
                    },
                    {
                      "name": "system_reserve",
                      "typeId": 10,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 595,
          "path": [
            "gear_common",
            "GasMultiplier"
          ],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            },
            {
              "name": "Gas",
              "typeId": 10
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "ValuePerGas",
                  "fields": [
                    {
                      "typeId": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "GasPerValue",
                  "fields": [
                    {
                      "typeId": 10,
                      "typeName": "Gas",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 596,
          "path": [
            "gear_common",
            "gas_provider",
            "node",
            "NodeLock"
          ],
          "params": [
            {
              "name": "Balance",
              "typeId": 10
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 597,
                  "typeName": "[Balance; cardinality::<LockId>()]",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 597,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 4,
              "typeParam": 10
            }
          },
          "docs": []
        },
        {
          "id": 598,
          "path": [
            "gear_common",
            "gas_provider",
            "node",
            "ChildrenRefs"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "spec_refs",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "unspec_refs",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 599,
          "path": [
            "pallet_gear_gas",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Forbidden",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "NodeAlreadyExists",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "InsufficientBalance",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "NodeNotFound",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "NodeWasConsumed",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "ParentIsLost",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "Errors stating that gas tree has been invalidated"
                  ]
                },
                {
                  "name": "ParentHasNoChildren",
                  "fields": [],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "UnexpectedConsumeOutput",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "Output of `Tree::consume` procedure that wasn't expected.",
                    "",
                    "Outputs of consumption procedure are determined. The error is returned",
                    "when unexpected one occurred. That signals, that algorithm works wrong",
                    "and expected invariants are not correct."
                  ]
                },
                {
                  "name": "UnexpectedNodeType",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "Node type that can't occur if algorithm work well"
                  ]
                },
                {
                  "name": "ValueIsNotCaught",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "Value must have been caught, but was missed or blocked (for more info see `ValueNode::catch_value`)."
                  ]
                },
                {
                  "name": "ValueIsBlocked",
                  "fields": [],
                  "index": 10,
                  "docs": [
                    "Value must have been caught or moved upstream, but was blocked (for more info see `ValueNode::catch_value`)."
                  ]
                },
                {
                  "name": "ValueIsNotBlocked",
                  "fields": [],
                  "index": 11,
                  "docs": [
                    "Value must have been blocked, but was either moved or caught (for more info see `ValueNode::catch_value`)."
                  ]
                },
                {
                  "name": "ConsumedWithLock",
                  "fields": [],
                  "index": 12,
                  "docs": [
                    "`GasTree::consume` called on node, which has some balance locked."
                  ]
                },
                {
                  "name": "ConsumedWithSystemReservation",
                  "fields": [],
                  "index": 13,
                  "docs": [
                    "`GasTree::consume` called on node, which has some system reservation."
                  ]
                },
                {
                  "name": "TotalValueIsOverflowed",
                  "fields": [],
                  "index": 14,
                  "docs": [
                    "`GasTree::create` called with some value amount leading to",
                    "the total value overflow."
                  ]
                },
                {
                  "name": "TotalValueIsUnderflowed",
                  "fields": [],
                  "index": 15,
                  "docs": [
                    "Either `GasTree::consume` or `GasTree::spent` called on a node creating",
                    "negative imbalance which leads to the total value drop below 0."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 600,
          "path": [
            "pallet_gear",
            "schedule",
            "Schedule"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "limits",
                  "typeId": 601,
                  "typeName": "Limits",
                  "docs": []
                },
                {
                  "name": "instruction_weights",
                  "typeId": 602,
                  "typeName": "InstructionWeights<T>",
                  "docs": []
                },
                {
                  "name": "host_fn_weights",
                  "typeId": 603,
                  "typeName": "HostFnWeights<T>",
                  "docs": []
                },
                {
                  "name": "memory_weights",
                  "typeId": 604,
                  "typeName": "MemoryWeights<T>",
                  "docs": []
                },
                {
                  "name": "module_instantiation_per_byte",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "db_write_per_byte",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "db_read_per_byte",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "code_instrumentation_cost",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "code_instrumentation_byte_cost",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 601,
          "path": [
            "pallet_gear",
            "schedule",
            "Limits"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "stack_height",
                  "typeId": 251,
                  "typeName": "Option<u32>",
                  "docs": []
                },
                {
                  "name": "globals",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "locals",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "parameters",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "memory_pages",
                  "typeId": 61,
                  "typeName": "u16",
                  "docs": []
                },
                {
                  "name": "table_size",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "br_table_size",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "subject_len",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "call_depth",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "payload_len",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "code_len",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 602,
          "path": [
            "pallet_gear",
            "schedule",
            "InstructionWeights"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "version",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i64const",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i64load",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i32load",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i64store",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i32store",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "select",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "r#if",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "br",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "br_if",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "br_table",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "br_table_per_entry",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "call",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "call_indirect",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "call_indirect_per_param",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "call_per_local",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "local_get",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "local_set",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "local_tee",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "global_get",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "global_set",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "memory_current",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i64clz",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i32clz",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i64ctz",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i32ctz",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i64popcnt",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i32popcnt",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i64eqz",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i32eqz",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i32extend8s",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i32extend16s",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i64extend8s",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i64extend16s",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i64extend32s",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i64extendsi32",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i64extendui32",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i32wrapi64",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i64eq",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i32eq",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i64ne",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i32ne",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i64lts",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i32lts",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i64ltu",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i32ltu",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i64gts",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i32gts",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i64gtu",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i32gtu",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i64les",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i32les",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i64leu",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i32leu",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i64ges",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i32ges",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i64geu",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i32geu",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i64add",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i32add",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i64sub",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i32sub",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i64mul",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i32mul",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i64divs",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i32divs",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i64divu",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i32divu",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i64rems",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i32rems",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i64remu",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i32remu",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i64and",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i32and",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i64or",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i32or",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i64xor",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i32xor",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i64shl",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i32shl",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i64shrs",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i32shrs",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i64shru",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i32shru",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i64rotl",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i32rotl",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i64rotr",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "i32rotr",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 603,
          "path": [
            "pallet_gear",
            "schedule",
            "HostFnWeights"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "alloc",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "alloc_per_page",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "free",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_reserve_gas",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_unreserve_gas",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_system_reserve_gas",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_gas_available",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_message_id",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_pay_program_rent",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_program_id",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_source",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_value",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_value_available",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_size",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_read",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_read_per_byte",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_block_height",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_block_timestamp",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_random",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_reply_deposit",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_send",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_send_per_byte",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_send_wgas",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_send_wgas_per_byte",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_send_init",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_send_push",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_send_push_per_byte",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_send_commit",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_send_commit_wgas",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_reservation_send",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_reservation_send_per_byte",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_reservation_send_commit",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_reply_commit",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_reply_commit_wgas",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_reservation_reply",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_reservation_reply_per_byte",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_reservation_reply_commit",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_reply_push",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_reply",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_reply_per_byte",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_reply_wgas",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_reply_wgas_per_byte",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_reply_push_per_byte",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_reply_to",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_signal_from",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_reply_input",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_reply_input_wgas",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_reply_push_input",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_reply_push_input_per_byte",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_send_input",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_send_input_wgas",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_send_push_input",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_send_push_input_per_byte",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_debug",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_debug_per_byte",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_reply_code",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_exit",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_leave",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_wait",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_wait_for",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_wait_up_to",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_wake",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_create_program",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_create_program_payload_per_byte",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_create_program_salt_per_byte",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_create_program_wgas",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_create_program_wgas_payload_per_byte",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "gr_create_program_wgas_salt_per_byte",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 604,
          "path": [
            "pallet_gear",
            "schedule",
            "MemoryWeights"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "lazy_pages_signal_read",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "lazy_pages_signal_write",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "lazy_pages_signal_write_after_read",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "lazy_pages_host_func_read",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "lazy_pages_host_func_write",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "lazy_pages_host_func_write_after_read",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "load_page_data",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "upload_page_data",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "static_page",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "mem_grow",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "parachain_read_heuristic",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 605,
          "path": [
            "pallet_gear",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "MessageNotFound",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Message wasn't found in the mailbox."
                  ]
                },
                {
                  "name": "InsufficientBalance",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Not enough balance to execute an action.",
                    "",
                    "Usually occurs when the gas_limit specified is such that the origin account can't afford the message."
                  ]
                },
                {
                  "name": "GasLimitTooHigh",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Gas limit too high.",
                    "",
                    "Occurs when an extrinsic's declared `gas_limit` is greater than a block's maximum gas limit."
                  ]
                },
                {
                  "name": "ProgramAlreadyExists",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Program already exists.",
                    "",
                    "Occurs if a program with some specific program id already exists in program storage."
                  ]
                },
                {
                  "name": "InactiveProgram",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "Program is terminated.",
                    "",
                    "Program init failed, so such message destination is no longer unavailable."
                  ]
                },
                {
                  "name": "NoMessageTree",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "Message gas tree is not found.",
                    "",
                    "When a message claimed from the mailbox has a corrupted or non-extant gas tree associated."
                  ]
                },
                {
                  "name": "CodeAlreadyExists",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "Code already exists.",
                    "",
                    "Occurs when trying to save to storage a program code that has been saved there."
                  ]
                },
                {
                  "name": "CodeDoesntExist",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "Code does not exist.",
                    "",
                    "Occurs when trying to get a program code from storage, that doesn't exist."
                  ]
                },
                {
                  "name": "CodeTooLarge",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "The code supplied to `upload_code` or `upload_program` exceeds the limit specified in the",
                    "current schedule."
                  ]
                },
                {
                  "name": "ProgramConstructionFailed",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "Failed to create a program."
                  ]
                },
                {
                  "name": "ValueLessThanMinimal",
                  "fields": [],
                  "index": 10,
                  "docs": [
                    "Value doesn't cover ExistentialDeposit."
                  ]
                },
                {
                  "name": "MessageQueueProcessingDisabled",
                  "fields": [],
                  "index": 11,
                  "docs": [
                    "Message queue processing is disabled."
                  ]
                },
                {
                  "name": "ResumePeriodLessThanMinimal",
                  "fields": [],
                  "index": 12,
                  "docs": [
                    "Block count doesn't cover MinimalResumePeriod."
                  ]
                },
                {
                  "name": "ProgramNotFound",
                  "fields": [],
                  "index": 13,
                  "docs": [
                    "Program with the specified id is not found."
                  ]
                },
                {
                  "name": "FailureRedeemingVoucher",
                  "fields": [],
                  "index": 14,
                  "docs": [
                    "Voucher can't be redeemed"
                  ]
                },
                {
                  "name": "GearRunAlreadyInBlock",
                  "fields": [],
                  "index": 15,
                  "docs": [
                    "Gear::run() already included in current block."
                  ]
                },
                {
                  "name": "ProgramRentDisabled",
                  "fields": [],
                  "index": 16,
                  "docs": [
                    "The program rent logic is disabled."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 606,
          "path": [
            "sp_arithmetic",
            "per_things",
            "Perquintill"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 10,
                  "typeName": "u64",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 607,
          "path": [
            "BTreeSet"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 0
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 111,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 608,
          "path": [
            "pallet_gear_staking_rewards",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "FailureToRefillPool",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Pool not replenished due to error."
                  ]
                },
                {
                  "name": "FailureToWithdrawFromPool",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Failure to withdraw funds from the rewards pool."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Error for the staking rewards pallet."
          ]
        },
        {
          "id": 609,
          "path": [
            "pallet_gear_voucher",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "FailureToCreateVoucher",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "FailureToRedeemVoucher",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 610,
          "path": [
            "pallet_gear_bank",
            "pallet",
            "BankAccount"
          ],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "gas",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "value",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 611,
          "path": [
            "pallet_gear_bank",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "InsufficientBalance",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Insufficient user balance."
                  ]
                },
                {
                  "name": "InsufficientGasBalance",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Insufficient user's bank account gas balance."
                  ]
                },
                {
                  "name": "InsufficientValueBalance",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Insufficient user's bank account gas balance."
                  ]
                },
                {
                  "name": "InsufficientBankBalance",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Insufficient bank account balance.",
                    "**Must be unreachable in Gear main protocol.**"
                  ]
                },
                {
                  "name": "InsufficientDeposit",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "Deposit of funds that will not keep bank account alive.",
                    "**Must be unreachable in Gear main protocol.**"
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 612,
          "path": [
            "sp_runtime",
            "generic",
            "unchecked_extrinsic",
            "UncheckedExtrinsic"
          ],
          "params": [
            {
              "name": "Address",
              "typeId": 93
            },
            {
              "name": "Call",
              "typeId": 63
            },
            {
              "name": "Signature",
              "typeId": 613
            },
            {
              "name": "Extra",
              "typeId": 616
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 12,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 613,
          "path": [
            "sp_runtime",
            "MultiSignature"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Ed25519",
                  "fields": [
                    {
                      "typeId": 86,
                      "typeName": "ed25519::Signature",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Sr25519",
                  "fields": [
                    {
                      "typeId": 106,
                      "typeName": "sr25519::Signature",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Ecdsa",
                  "fields": [
                    {
                      "typeId": 614,
                      "typeName": "ecdsa::Signature",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 614,
          "path": [
            "sp_core",
            "ecdsa",
            "Signature"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 615,
                  "typeName": "[u8; 65]",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 615,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 65,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 616,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                617,
                618,
                619,
                620,
                621,
                622,
                624,
                625,
                626
              ]
            }
          },
          "docs": []
        },
        {
          "id": 617,
          "path": [
            "pallet_gear_staking_rewards",
            "extension",
            "StakingBlackList"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": []
            }
          },
          "docs": []
        },
        {
          "id": 618,
          "path": [
            "frame_system",
            "extensions",
            "check_non_zero_sender",
            "CheckNonZeroSender"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": []
            }
          },
          "docs": []
        },
        {
          "id": 619,
          "path": [
            "frame_system",
            "extensions",
            "check_spec_version",
            "CheckSpecVersion"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": []
            }
          },
          "docs": []
        },
        {
          "id": 620,
          "path": [
            "frame_system",
            "extensions",
            "check_tx_version",
            "CheckTxVersion"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": []
            }
          },
          "docs": []
        },
        {
          "id": 621,
          "path": [
            "frame_system",
            "extensions",
            "check_genesis",
            "CheckGenesis"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": []
            }
          },
          "docs": []
        },
        {
          "id": 622,
          "path": [
            "frame_system",
            "extensions",
            "check_mortality",
            "CheckMortality"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 623,
                  "typeName": "Era",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 623,
          "path": [
            "sp_runtime",
            "generic",
            "era",
            "Era"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Immortal",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Mortal1",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Mortal2",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Mortal3",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Mortal4",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Mortal5",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Mortal6",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "Mortal7",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "Mortal8",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "Mortal9",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "Mortal10",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "Mortal11",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "Mortal12",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": []
                },
                {
                  "name": "Mortal13",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": []
                },
                {
                  "name": "Mortal14",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": []
                },
                {
                  "name": "Mortal15",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": []
                },
                {
                  "name": "Mortal16",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 16,
                  "docs": []
                },
                {
                  "name": "Mortal17",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 17,
                  "docs": []
                },
                {
                  "name": "Mortal18",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 18,
                  "docs": []
                },
                {
                  "name": "Mortal19",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": []
                },
                {
                  "name": "Mortal20",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 20,
                  "docs": []
                },
                {
                  "name": "Mortal21",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": []
                },
                {
                  "name": "Mortal22",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 22,
                  "docs": []
                },
                {
                  "name": "Mortal23",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 23,
                  "docs": []
                },
                {
                  "name": "Mortal24",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 24,
                  "docs": []
                },
                {
                  "name": "Mortal25",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 25,
                  "docs": []
                },
                {
                  "name": "Mortal26",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 26,
                  "docs": []
                },
                {
                  "name": "Mortal27",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 27,
                  "docs": []
                },
                {
                  "name": "Mortal28",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 28,
                  "docs": []
                },
                {
                  "name": "Mortal29",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 29,
                  "docs": []
                },
                {
                  "name": "Mortal30",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 30,
                  "docs": []
                },
                {
                  "name": "Mortal31",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 31,
                  "docs": []
                },
                {
                  "name": "Mortal32",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 32,
                  "docs": []
                },
                {
                  "name": "Mortal33",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 33,
                  "docs": []
                },
                {
                  "name": "Mortal34",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 34,
                  "docs": []
                },
                {
                  "name": "Mortal35",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 35,
                  "docs": []
                },
                {
                  "name": "Mortal36",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 36,
                  "docs": []
                },
                {
                  "name": "Mortal37",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 37,
                  "docs": []
                },
                {
                  "name": "Mortal38",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 38,
                  "docs": []
                },
                {
                  "name": "Mortal39",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 39,
                  "docs": []
                },
                {
                  "name": "Mortal40",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 40,
                  "docs": []
                },
                {
                  "name": "Mortal41",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 41,
                  "docs": []
                },
                {
                  "name": "Mortal42",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 42,
                  "docs": []
                },
                {
                  "name": "Mortal43",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 43,
                  "docs": []
                },
                {
                  "name": "Mortal44",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 44,
                  "docs": []
                },
                {
                  "name": "Mortal45",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 45,
                  "docs": []
                },
                {
                  "name": "Mortal46",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 46,
                  "docs": []
                },
                {
                  "name": "Mortal47",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 47,
                  "docs": []
                },
                {
                  "name": "Mortal48",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 48,
                  "docs": []
                },
                {
                  "name": "Mortal49",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 49,
                  "docs": []
                },
                {
                  "name": "Mortal50",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 50,
                  "docs": []
                },
                {
                  "name": "Mortal51",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 51,
                  "docs": []
                },
                {
                  "name": "Mortal52",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 52,
                  "docs": []
                },
                {
                  "name": "Mortal53",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 53,
                  "docs": []
                },
                {
                  "name": "Mortal54",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 54,
                  "docs": []
                },
                {
                  "name": "Mortal55",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 55,
                  "docs": []
                },
                {
                  "name": "Mortal56",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 56,
                  "docs": []
                },
                {
                  "name": "Mortal57",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 57,
                  "docs": []
                },
                {
                  "name": "Mortal58",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 58,
                  "docs": []
                },
                {
                  "name": "Mortal59",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 59,
                  "docs": []
                },
                {
                  "name": "Mortal60",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 60,
                  "docs": []
                },
                {
                  "name": "Mortal61",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 61,
                  "docs": []
                },
                {
                  "name": "Mortal62",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 62,
                  "docs": []
                },
                {
                  "name": "Mortal63",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 63,
                  "docs": []
                },
                {
                  "name": "Mortal64",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 64,
                  "docs": []
                },
                {
                  "name": "Mortal65",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 65,
                  "docs": []
                },
                {
                  "name": "Mortal66",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 66,
                  "docs": []
                },
                {
                  "name": "Mortal67",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 67,
                  "docs": []
                },
                {
                  "name": "Mortal68",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 68,
                  "docs": []
                },
                {
                  "name": "Mortal69",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 69,
                  "docs": []
                },
                {
                  "name": "Mortal70",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 70,
                  "docs": []
                },
                {
                  "name": "Mortal71",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 71,
                  "docs": []
                },
                {
                  "name": "Mortal72",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 72,
                  "docs": []
                },
                {
                  "name": "Mortal73",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 73,
                  "docs": []
                },
                {
                  "name": "Mortal74",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 74,
                  "docs": []
                },
                {
                  "name": "Mortal75",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 75,
                  "docs": []
                },
                {
                  "name": "Mortal76",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 76,
                  "docs": []
                },
                {
                  "name": "Mortal77",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 77,
                  "docs": []
                },
                {
                  "name": "Mortal78",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 78,
                  "docs": []
                },
                {
                  "name": "Mortal79",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 79,
                  "docs": []
                },
                {
                  "name": "Mortal80",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 80,
                  "docs": []
                },
                {
                  "name": "Mortal81",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 81,
                  "docs": []
                },
                {
                  "name": "Mortal82",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 82,
                  "docs": []
                },
                {
                  "name": "Mortal83",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 83,
                  "docs": []
                },
                {
                  "name": "Mortal84",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 84,
                  "docs": []
                },
                {
                  "name": "Mortal85",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 85,
                  "docs": []
                },
                {
                  "name": "Mortal86",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 86,
                  "docs": []
                },
                {
                  "name": "Mortal87",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 87,
                  "docs": []
                },
                {
                  "name": "Mortal88",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 88,
                  "docs": []
                },
                {
                  "name": "Mortal89",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 89,
                  "docs": []
                },
                {
                  "name": "Mortal90",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 90,
                  "docs": []
                },
                {
                  "name": "Mortal91",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 91,
                  "docs": []
                },
                {
                  "name": "Mortal92",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 92,
                  "docs": []
                },
                {
                  "name": "Mortal93",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 93,
                  "docs": []
                },
                {
                  "name": "Mortal94",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 94,
                  "docs": []
                },
                {
                  "name": "Mortal95",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 95,
                  "docs": []
                },
                {
                  "name": "Mortal96",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 96,
                  "docs": []
                },
                {
                  "name": "Mortal97",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 97,
                  "docs": []
                },
                {
                  "name": "Mortal98",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 98,
                  "docs": []
                },
                {
                  "name": "Mortal99",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 99,
                  "docs": []
                },
                {
                  "name": "Mortal100",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 100,
                  "docs": []
                },
                {
                  "name": "Mortal101",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 101,
                  "docs": []
                },
                {
                  "name": "Mortal102",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 102,
                  "docs": []
                },
                {
                  "name": "Mortal103",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 103,
                  "docs": []
                },
                {
                  "name": "Mortal104",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 104,
                  "docs": []
                },
                {
                  "name": "Mortal105",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 105,
                  "docs": []
                },
                {
                  "name": "Mortal106",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 106,
                  "docs": []
                },
                {
                  "name": "Mortal107",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 107,
                  "docs": []
                },
                {
                  "name": "Mortal108",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 108,
                  "docs": []
                },
                {
                  "name": "Mortal109",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 109,
                  "docs": []
                },
                {
                  "name": "Mortal110",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 110,
                  "docs": []
                },
                {
                  "name": "Mortal111",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 111,
                  "docs": []
                },
                {
                  "name": "Mortal112",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 112,
                  "docs": []
                },
                {
                  "name": "Mortal113",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 113,
                  "docs": []
                },
                {
                  "name": "Mortal114",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 114,
                  "docs": []
                },
                {
                  "name": "Mortal115",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 115,
                  "docs": []
                },
                {
                  "name": "Mortal116",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 116,
                  "docs": []
                },
                {
                  "name": "Mortal117",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 117,
                  "docs": []
                },
                {
                  "name": "Mortal118",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 118,
                  "docs": []
                },
                {
                  "name": "Mortal119",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 119,
                  "docs": []
                },
                {
                  "name": "Mortal120",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 120,
                  "docs": []
                },
                {
                  "name": "Mortal121",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 121,
                  "docs": []
                },
                {
                  "name": "Mortal122",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 122,
                  "docs": []
                },
                {
                  "name": "Mortal123",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 123,
                  "docs": []
                },
                {
                  "name": "Mortal124",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 124,
                  "docs": []
                },
                {
                  "name": "Mortal125",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 125,
                  "docs": []
                },
                {
                  "name": "Mortal126",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 126,
                  "docs": []
                },
                {
                  "name": "Mortal127",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 127,
                  "docs": []
                },
                {
                  "name": "Mortal128",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 128,
                  "docs": []
                },
                {
                  "name": "Mortal129",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 129,
                  "docs": []
                },
                {
                  "name": "Mortal130",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 130,
                  "docs": []
                },
                {
                  "name": "Mortal131",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 131,
                  "docs": []
                },
                {
                  "name": "Mortal132",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 132,
                  "docs": []
                },
                {
                  "name": "Mortal133",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 133,
                  "docs": []
                },
                {
                  "name": "Mortal134",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 134,
                  "docs": []
                },
                {
                  "name": "Mortal135",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 135,
                  "docs": []
                },
                {
                  "name": "Mortal136",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 136,
                  "docs": []
                },
                {
                  "name": "Mortal137",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 137,
                  "docs": []
                },
                {
                  "name": "Mortal138",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 138,
                  "docs": []
                },
                {
                  "name": "Mortal139",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 139,
                  "docs": []
                },
                {
                  "name": "Mortal140",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 140,
                  "docs": []
                },
                {
                  "name": "Mortal141",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 141,
                  "docs": []
                },
                {
                  "name": "Mortal142",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 142,
                  "docs": []
                },
                {
                  "name": "Mortal143",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 143,
                  "docs": []
                },
                {
                  "name": "Mortal144",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 144,
                  "docs": []
                },
                {
                  "name": "Mortal145",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 145,
                  "docs": []
                },
                {
                  "name": "Mortal146",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 146,
                  "docs": []
                },
                {
                  "name": "Mortal147",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 147,
                  "docs": []
                },
                {
                  "name": "Mortal148",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 148,
                  "docs": []
                },
                {
                  "name": "Mortal149",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 149,
                  "docs": []
                },
                {
                  "name": "Mortal150",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 150,
                  "docs": []
                },
                {
                  "name": "Mortal151",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 151,
                  "docs": []
                },
                {
                  "name": "Mortal152",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 152,
                  "docs": []
                },
                {
                  "name": "Mortal153",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 153,
                  "docs": []
                },
                {
                  "name": "Mortal154",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 154,
                  "docs": []
                },
                {
                  "name": "Mortal155",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 155,
                  "docs": []
                },
                {
                  "name": "Mortal156",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 156,
                  "docs": []
                },
                {
                  "name": "Mortal157",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 157,
                  "docs": []
                },
                {
                  "name": "Mortal158",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 158,
                  "docs": []
                },
                {
                  "name": "Mortal159",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 159,
                  "docs": []
                },
                {
                  "name": "Mortal160",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 160,
                  "docs": []
                },
                {
                  "name": "Mortal161",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 161,
                  "docs": []
                },
                {
                  "name": "Mortal162",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 162,
                  "docs": []
                },
                {
                  "name": "Mortal163",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 163,
                  "docs": []
                },
                {
                  "name": "Mortal164",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 164,
                  "docs": []
                },
                {
                  "name": "Mortal165",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 165,
                  "docs": []
                },
                {
                  "name": "Mortal166",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 166,
                  "docs": []
                },
                {
                  "name": "Mortal167",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 167,
                  "docs": []
                },
                {
                  "name": "Mortal168",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 168,
                  "docs": []
                },
                {
                  "name": "Mortal169",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 169,
                  "docs": []
                },
                {
                  "name": "Mortal170",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 170,
                  "docs": []
                },
                {
                  "name": "Mortal171",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 171,
                  "docs": []
                },
                {
                  "name": "Mortal172",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 172,
                  "docs": []
                },
                {
                  "name": "Mortal173",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 173,
                  "docs": []
                },
                {
                  "name": "Mortal174",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 174,
                  "docs": []
                },
                {
                  "name": "Mortal175",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 175,
                  "docs": []
                },
                {
                  "name": "Mortal176",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 176,
                  "docs": []
                },
                {
                  "name": "Mortal177",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 177,
                  "docs": []
                },
                {
                  "name": "Mortal178",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 178,
                  "docs": []
                },
                {
                  "name": "Mortal179",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 179,
                  "docs": []
                },
                {
                  "name": "Mortal180",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 180,
                  "docs": []
                },
                {
                  "name": "Mortal181",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 181,
                  "docs": []
                },
                {
                  "name": "Mortal182",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 182,
                  "docs": []
                },
                {
                  "name": "Mortal183",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 183,
                  "docs": []
                },
                {
                  "name": "Mortal184",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 184,
                  "docs": []
                },
                {
                  "name": "Mortal185",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 185,
                  "docs": []
                },
                {
                  "name": "Mortal186",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 186,
                  "docs": []
                },
                {
                  "name": "Mortal187",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 187,
                  "docs": []
                },
                {
                  "name": "Mortal188",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 188,
                  "docs": []
                },
                {
                  "name": "Mortal189",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 189,
                  "docs": []
                },
                {
                  "name": "Mortal190",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 190,
                  "docs": []
                },
                {
                  "name": "Mortal191",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 191,
                  "docs": []
                },
                {
                  "name": "Mortal192",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 192,
                  "docs": []
                },
                {
                  "name": "Mortal193",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 193,
                  "docs": []
                },
                {
                  "name": "Mortal194",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 194,
                  "docs": []
                },
                {
                  "name": "Mortal195",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 195,
                  "docs": []
                },
                {
                  "name": "Mortal196",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 196,
                  "docs": []
                },
                {
                  "name": "Mortal197",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 197,
                  "docs": []
                },
                {
                  "name": "Mortal198",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 198,
                  "docs": []
                },
                {
                  "name": "Mortal199",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 199,
                  "docs": []
                },
                {
                  "name": "Mortal200",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 200,
                  "docs": []
                },
                {
                  "name": "Mortal201",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 201,
                  "docs": []
                },
                {
                  "name": "Mortal202",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 202,
                  "docs": []
                },
                {
                  "name": "Mortal203",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 203,
                  "docs": []
                },
                {
                  "name": "Mortal204",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 204,
                  "docs": []
                },
                {
                  "name": "Mortal205",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 205,
                  "docs": []
                },
                {
                  "name": "Mortal206",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 206,
                  "docs": []
                },
                {
                  "name": "Mortal207",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 207,
                  "docs": []
                },
                {
                  "name": "Mortal208",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 208,
                  "docs": []
                },
                {
                  "name": "Mortal209",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 209,
                  "docs": []
                },
                {
                  "name": "Mortal210",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 210,
                  "docs": []
                },
                {
                  "name": "Mortal211",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 211,
                  "docs": []
                },
                {
                  "name": "Mortal212",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 212,
                  "docs": []
                },
                {
                  "name": "Mortal213",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 213,
                  "docs": []
                },
                {
                  "name": "Mortal214",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 214,
                  "docs": []
                },
                {
                  "name": "Mortal215",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 215,
                  "docs": []
                },
                {
                  "name": "Mortal216",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 216,
                  "docs": []
                },
                {
                  "name": "Mortal217",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 217,
                  "docs": []
                },
                {
                  "name": "Mortal218",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 218,
                  "docs": []
                },
                {
                  "name": "Mortal219",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 219,
                  "docs": []
                },
                {
                  "name": "Mortal220",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 220,
                  "docs": []
                },
                {
                  "name": "Mortal221",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 221,
                  "docs": []
                },
                {
                  "name": "Mortal222",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 222,
                  "docs": []
                },
                {
                  "name": "Mortal223",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 223,
                  "docs": []
                },
                {
                  "name": "Mortal224",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 224,
                  "docs": []
                },
                {
                  "name": "Mortal225",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 225,
                  "docs": []
                },
                {
                  "name": "Mortal226",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 226,
                  "docs": []
                },
                {
                  "name": "Mortal227",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 227,
                  "docs": []
                },
                {
                  "name": "Mortal228",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 228,
                  "docs": []
                },
                {
                  "name": "Mortal229",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 229,
                  "docs": []
                },
                {
                  "name": "Mortal230",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 230,
                  "docs": []
                },
                {
                  "name": "Mortal231",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 231,
                  "docs": []
                },
                {
                  "name": "Mortal232",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 232,
                  "docs": []
                },
                {
                  "name": "Mortal233",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 233,
                  "docs": []
                },
                {
                  "name": "Mortal234",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 234,
                  "docs": []
                },
                {
                  "name": "Mortal235",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 235,
                  "docs": []
                },
                {
                  "name": "Mortal236",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 236,
                  "docs": []
                },
                {
                  "name": "Mortal237",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 237,
                  "docs": []
                },
                {
                  "name": "Mortal238",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 238,
                  "docs": []
                },
                {
                  "name": "Mortal239",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 239,
                  "docs": []
                },
                {
                  "name": "Mortal240",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 240,
                  "docs": []
                },
                {
                  "name": "Mortal241",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 241,
                  "docs": []
                },
                {
                  "name": "Mortal242",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 242,
                  "docs": []
                },
                {
                  "name": "Mortal243",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 243,
                  "docs": []
                },
                {
                  "name": "Mortal244",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 244,
                  "docs": []
                },
                {
                  "name": "Mortal245",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 245,
                  "docs": []
                },
                {
                  "name": "Mortal246",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 246,
                  "docs": []
                },
                {
                  "name": "Mortal247",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 247,
                  "docs": []
                },
                {
                  "name": "Mortal248",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 248,
                  "docs": []
                },
                {
                  "name": "Mortal249",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 249,
                  "docs": []
                },
                {
                  "name": "Mortal250",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 250,
                  "docs": []
                },
                {
                  "name": "Mortal251",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 251,
                  "docs": []
                },
                {
                  "name": "Mortal252",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 252,
                  "docs": []
                },
                {
                  "name": "Mortal253",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 253,
                  "docs": []
                },
                {
                  "name": "Mortal254",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 254,
                  "docs": []
                },
                {
                  "name": "Mortal255",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 255,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 624,
          "path": [
            "frame_system",
            "extensions",
            "check_nonce",
            "CheckNonce"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 73,
                  "typeName": "T::Index",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 625,
          "path": [
            "frame_system",
            "extensions",
            "check_weight",
            "CheckWeight"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": []
            }
          },
          "docs": []
        },
        {
          "id": 626,
          "path": [
            "pallet_gear_payment",
            "CustomChargeTransactionPayment"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 627
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 628,
                  "typeName": "ChargeTransactionPayment<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 627,
          "path": [
            "vara_runtime",
            "Runtime"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": []
            }
          },
          "docs": []
        },
        {
          "id": 628,
          "path": [
            "pallet_transaction_payment",
            "ChargeTransactionPayment"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 45,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        }
      ],
      "pallets": [
        {
          "name": "System",
          "storage": {
            "prefix": "System",
            "entries": [
              {
                "name": "Account",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "keyTypeId": 0,
                    "valueTypeId": 3
                  }
                },
                "default": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " The full account information for a particular account ID."
                ]
              },
              {
                "name": "ExtrinsicCount",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00",
                "docs": [
                  " Total extrinsics count for the current block."
                ]
              },
              {
                "name": "BlockWeight",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 7
                  }
                },
                "default": "0x000000000000",
                "docs": [
                  " The current weight for the block."
                ]
              },
              {
                "name": "AllExtrinsicsLen",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00",
                "docs": [
                  " Total length (in bytes) for all extrinsics put together, for the current block."
                ]
              },
              {
                "name": "BlockHash",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 4,
                    "valueTypeId": 11
                  }
                },
                "default": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Map of block numbers to block hashes."
                ]
              },
              {
                "name": "ExtrinsicData",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 4,
                    "valueTypeId": 12
                  }
                },
                "default": "0x00",
                "docs": [
                  " Extrinsics data for the current block (maps an extrinsic's index to its data)."
                ]
              },
              {
                "name": "Number",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " The current block number being processed. Set by `execute_block`."
                ]
              },
              {
                "name": "ParentHash",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 11
                  }
                },
                "default": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Hash of the previous block."
                ]
              },
              {
                "name": "Digest",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 13
                  }
                },
                "default": "0x00",
                "docs": [
                  " Digest of the current block, also part of the block header."
                ]
              },
              {
                "name": "Events",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 17
                  }
                },
                "default": "0x00",
                "docs": [
                  " Events deposited for the current block.",
                  "",
                  " NOTE: The item is unbound and should therefore never be read on chain.",
                  " It could otherwise inflate the PoV size of a block.",
                  "",
                  " Events have a large in-memory size. Box the events to not go out-of-memory",
                  " just in case someone still reads them from within the runtime."
                ]
              },
              {
                "name": "EventCount",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " The number of events in the `Events<T>` list."
                ]
              },
              {
                "name": "EventTopics",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "keyTypeId": 11,
                    "valueTypeId": 342
                  }
                },
                "default": "0x00",
                "docs": [
                  " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                  " of events in the `<Events<T>>` list.",
                  "",
                  " All topic vectors have deterministic storage locations depending on the topic. This",
                  " allows light-clients to leverage the changes trie storage tracking mechanism and",
                  " in case of changes fetch the list of events of interest.",
                  "",
                  " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just",
                  " the `EventIndex` then in case if the topic has the same contents on the next block",
                  " no notification will be triggered thus the event might be lost."
                ]
              },
              {
                "name": "LastRuntimeUpgrade",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 343
                  }
                },
                "default": "0x00",
                "docs": [
                  " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
                ]
              },
              {
                "name": "UpgradedToU32RefCount",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 52
                  }
                },
                "default": "0x00",
                "docs": [
                  " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
                ]
              },
              {
                "name": "UpgradedToTripleRefCount",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 52
                  }
                },
                "default": "0x00",
                "docs": [
                  " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
                  " (default) if not."
                ]
              },
              {
                "name": "ExecutionPhase",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 340
                  }
                },
                "default": "0x00",
                "docs": [
                  " The execution phase of the block."
                ]
              }
            ]
          },
          "calls": 64,
          "event": 20,
          "constants": [
            {
              "name": "BlockWeights",
              "typeId": 345,
              "value": "0x624fd75a00070010a5d4e813ffffffffffffffff02c0cd17000107002812333313ec51b81e85eb51380107004429353a13000000000000004001000002c0cd1700010700f48dd2e113eb51b81e85eb51f801070010a5d4e813ffffffffffffffff010700cc7b9fae13ffffffffffffffbf02c0cd1700000000",
              "docs": [
                " Block & extrinsics weights: base values and limits."
              ]
            },
            {
              "name": "BlockLength",
              "typeId": 348,
              "value": "0x000014000000500000005000",
              "docs": [
                " The maximum length of a block (in bytes)."
              ]
            },
            {
              "name": "BlockHashCount",
              "typeId": 4,
              "value": "0x60090000",
              "docs": [
                " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
              ]
            },
            {
              "name": "DbWeight",
              "typeId": 350,
              "value": "0x40787d010000000000e1f50500000000",
              "docs": [
                " The weight of runtime database operations the runtime can invoke."
              ]
            },
            {
              "name": "Version",
              "typeId": 351,
              "value": "0x1076617261107661726101000000e8030000010000002ccbca25e39f14238702000000df6acb689907609b0400000037e397fc7c91f5e40100000040fe3ad401f8959a06000000d2bc9897eed08f1503000000f78b278be53f454c02000000ab3c0572291feb8b01000000ed99c5acb25eedf503000000bc9d89904f5b923f0100000037c8bb1350a9a2a803000000ff8dc88037f26223010000000100000001",
              "docs": [
                " Get the chain's current version."
              ]
            },
            {
              "name": "SS58Prefix",
              "typeId": 61,
              "value": "0x8900",
              "docs": [
                " The designated SS58 prefix of this chain.",
                "",
                " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
                " that the runtime should know about the prefix in order to make use of it as",
                " an identifier of the chain."
              ]
            }
          ],
          "error": 355,
          "index": 0
        },
        {
          "name": "Timestamp",
          "storage": {
            "prefix": "Timestamp",
            "entries": [
              {
                "name": "Now",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 10
                  }
                },
                "default": "0x0000000000000000",
                "docs": [
                  " Current time for the current block."
                ]
              },
              {
                "name": "DidUpdate",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 52
                  }
                },
                "default": "0x00",
                "docs": [
                  " Did the timestamp get updated in this block?"
                ]
              }
            ]
          },
          "calls": 68,
          "constants": [
            {
              "name": "MinimumPeriod",
              "typeId": 10,
              "value": "0xdc05000000000000",
              "docs": [
                " The minimum period between blocks. Beware that this is different to the *expected*",
                " period that the block production apparatus provides. Your chosen consensus system will",
                " generally work with this to determine a sensible block time. e.g. For Aura, it will be",
                " double this period on default settings."
              ]
            }
          ],
          "index": 1
        },
        {
          "name": "Authorship",
          "storage": {
            "prefix": "Authorship",
            "entries": [
              {
                "name": "Author",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 0
                  }
                },
                "default": "0x00",
                "docs": [
                  " Author of current block."
                ]
              }
            ]
          },
          "constants": [],
          "index": 2
        },
        {
          "name": "AuthorityDiscovery",
          "storage": {
            "prefix": "AuthorityDiscovery",
            "entries": [
              {
                "name": "Keys",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 356
                  }
                },
                "default": "0x00",
                "docs": [
                  " Keys of the current authority set."
                ]
              },
              {
                "name": "NextKeys",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 356
                  }
                },
                "default": "0x00",
                "docs": [
                  " Keys of the next authority set."
                ]
              }
            ]
          },
          "constants": [],
          "index": 9
        },
        {
          "name": "Babe",
          "storage": {
            "prefix": "Babe",
            "entries": [
              {
                "name": "EpochIndex",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 10
                  }
                },
                "default": "0x0000000000000000",
                "docs": [
                  " Current epoch index."
                ]
              },
              {
                "name": "Authorities",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 358
                  }
                },
                "default": "0x00",
                "docs": [
                  " Current epoch authorities."
                ]
              },
              {
                "name": "GenesisSlot",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 75
                  }
                },
                "default": "0x0000000000000000",
                "docs": [
                  " The slot at which the first epoch actually started. This is 0",
                  " until the first block of the chain."
                ]
              },
              {
                "name": "CurrentSlot",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 75
                  }
                },
                "default": "0x0000000000000000",
                "docs": [
                  " Current slot number."
                ]
              },
              {
                "name": "Randomness",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 1
                  }
                },
                "default": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " The epoch randomness for the *current* epoch.",
                  "",
                  " # Security",
                  "",
                  " This MUST NOT be used for gambling, as it can be influenced by a",
                  " malicious validator in the short term. It MAY be used in many",
                  " cryptographic protocols, however, so long as one remembers that this",
                  " (like everything else on-chain) it is public. For example, it can be",
                  " used where a number is needed that cannot have been chosen by an",
                  " adversary, for purposes such as public-coin zero-knowledge proofs."
                ]
              },
              {
                "name": "PendingEpochConfigChange",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 77
                  }
                },
                "default": "0x00",
                "docs": [
                  " Pending epoch configuration change that will be applied when the next epoch is enacted."
                ]
              },
              {
                "name": "NextRandomness",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 1
                  }
                },
                "default": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Next epoch randomness."
                ]
              },
              {
                "name": "NextAuthorities",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 358
                  }
                },
                "default": "0x00",
                "docs": [
                  " Next epoch authorities."
                ]
              },
              {
                "name": "SegmentIndex",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " Randomness under construction.",
                  "",
                  " We make a trade-off between storage accesses and list length.",
                  " We store the under-construction randomness in segments of up to",
                  " `UNDER_CONSTRUCTION_SEGMENT_LENGTH`.",
                  "",
                  " Once a segment reaches this length, we begin the next one.",
                  " We reset all segments and return to `0` at the beginning of every",
                  " epoch."
                ]
              },
              {
                "name": "UnderConstruction",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 4,
                    "valueTypeId": 361
                  }
                },
                "default": "0x00",
                "docs": [
                  " TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay."
                ]
              },
              {
                "name": "Initialized",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 363
                  }
                },
                "default": "0x00",
                "docs": [
                  " Temporary value (cleared at block finalization) which is `Some`",
                  " if per-block initialization has already been called for current block."
                ]
              },
              {
                "name": "AuthorVrfRandomness",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 292
                  }
                },
                "default": "0x00",
                "docs": [
                  " This field should always be populated during block processing unless",
                  " secondary plain slots are enabled (which don't contain a VRF output).",
                  "",
                  " It is set in `on_finalize`, before it will contain the value from the last block."
                ]
              },
              {
                "name": "EpochStart",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 140
                  }
                },
                "default": "0x0000000000000000",
                "docs": [
                  " The block numbers when the last and current epoch have started, respectively `N-1` and",
                  " `N`.",
                  " NOTE: We track this is in order to annotate the block number when a given pool of",
                  " entropy was fixed (i.e. it was known to chain observers). Since epochs are defined in",
                  " slots, which may be skipped, the block numbers may not line up with the slot numbers."
                ]
              },
              {
                "name": "Lateness",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " How late the current block is compared to its parent.",
                  "",
                  " This entry is populated as part of block execution and is cleaned up",
                  " on block finalization. Querying this storage entry outside of block",
                  " execution context should always yield zero."
                ]
              },
              {
                "name": "EpochConfig",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 368
                  }
                },
                "default": "0x00",
                "docs": [
                  " The configuration for the current epoch. Should never be `None` as it is initialized in",
                  " genesis."
                ]
              },
              {
                "name": "NextEpochConfig",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 368
                  }
                },
                "default": "0x00",
                "docs": [
                  " The configuration for the next epoch, `None` if the config will not change",
                  " (you can fallback to `EpochConfig` instead in that case)."
                ]
              },
              {
                "name": "SkippedEpochs",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 369
                  }
                },
                "default": "0x00",
                "docs": [
                  " A list of the last 100 skipped epochs and the corresponding session index",
                  " when the epoch was skipped.",
                  "",
                  " This is only used for validating equivocation proofs. An equivocation proof",
                  " must contains a key-ownership proof for a given session, therefore we need a",
                  " way to tie together sessions and epoch indices, i.e. we need to validate that",
                  " a validator was the owner of a given key on a given session, and what the",
                  " active epoch index was during that session."
                ]
              }
            ]
          },
          "calls": 69,
          "constants": [
            {
              "name": "EpochDuration",
              "typeId": 10,
              "value": "0x6009000000000000",
              "docs": [
                " The amount of time, in slots, that each epoch should last.",
                " NOTE: Currently it is not possible to change the epoch duration after",
                " the chain has started. Attempting to do so will brick block production."
              ]
            },
            {
              "name": "ExpectedBlockTime",
              "typeId": 10,
              "value": "0xb80b000000000000",
              "docs": [
                " The expected average block time at which BABE should be creating",
                " blocks. Since BABE is probabilistic it is not trivial to figure out",
                " what the expected average block time should be based on the slot",
                " duration and the security parameter `c` (where `1 - c` represents",
                " the probability of a slot being empty)."
              ]
            },
            {
              "name": "MaxAuthorities",
              "typeId": 4,
              "value": "0xa0860100",
              "docs": [
                " Max number of authorities allowed"
              ]
            }
          ],
          "error": 372,
          "index": 3
        },
        {
          "name": "Grandpa",
          "storage": {
            "prefix": "Grandpa",
            "entries": [
              {
                "name": "State",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 373
                  }
                },
                "default": "0x00",
                "docs": [
                  " State of the current authority set."
                ]
              },
              {
                "name": "PendingChange",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 374
                  }
                },
                "default": "0x00",
                "docs": [
                  " Pending change: (signaled at, scheduled change)."
                ]
              },
              {
                "name": "NextForced",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00",
                "docs": [
                  " next block number where we can force a change."
                ]
              },
              {
                "name": "Stalled",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 140
                  }
                },
                "default": "0x00",
                "docs": [
                  " `true` if we are currently stalled."
                ]
              },
              {
                "name": "CurrentSetId",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 10
                  }
                },
                "default": "0x0000000000000000",
                "docs": [
                  " The number of changes (both in terms of keys and underlying economic responsibilities)",
                  " in the \"set\" of Grandpa validators from genesis."
                ]
              },
              {
                "name": "SetIdSession",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 10,
                    "valueTypeId": 4
                  }
                },
                "default": "0x00",
                "docs": [
                  " A mapping from grandpa set ID to the index of the *most recent* session for which its",
                  " members were responsible.",
                  "",
                  " This is only used for validating equivocation proofs. An equivocation proof must",
                  " contains a key-ownership proof for a given session, therefore we need a way to tie",
                  " together sessions and GRANDPA set ids, i.e. we need to validate that a validator",
                  " was the owner of a given key on a given session, and what the active set ID was",
                  " during that session.",
                  "",
                  " TWOX-NOTE: `SetId` is not under user control."
                ]
              }
            ]
          },
          "calls": 80,
          "event": 29,
          "constants": [
            {
              "name": "MaxAuthorities",
              "typeId": 4,
              "value": "0xa0860100",
              "docs": [
                " Max Authorities in use"
              ]
            },
            {
              "name": "MaxSetIdSessionEntries",
              "typeId": 10,
              "value": "0x5400000000000000",
              "docs": [
                " The maximum number of entries to keep in the set id to session index mapping.",
                "",
                " Since the `SetIdSession` map is only used for validating equivocations this",
                " value should relate to the bonding duration of whatever staking system is",
                " being used (if any). If equivocation handling is not enabled then this value",
                " can be zero."
              ]
            }
          ],
          "error": 376,
          "index": 4
        },
        {
          "name": "Balances",
          "storage": {
            "prefix": "Balances",
            "entries": [
              {
                "name": "TotalIssuance",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 6
                  }
                },
                "default": "0x00000000000000000000000000000000",
                "docs": [
                  " The total units issued in the system."
                ]
              },
              {
                "name": "InactiveIssuance",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 6
                  }
                },
                "default": "0x00000000000000000000000000000000",
                "docs": [
                  " The total units of outstanding deactivated balance in the system."
                ]
              },
              {
                "name": "Account",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "keyTypeId": 0,
                    "valueTypeId": 5
                  }
                },
                "default": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " The Balances pallet example of storing the balance of an account.",
                  "",
                  " # Example",
                  "",
                  " ```nocompile",
                  "  impl pallet_balances::Config for Runtime {",
                  "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>",
                  "  }",
                  " ```",
                  "",
                  " You can also store the balance of an account in the `System` pallet.",
                  "",
                  " # Example",
                  "",
                  " ```nocompile",
                  "  impl pallet_balances::Config for Runtime {",
                  "   type AccountStore = System",
                  "  }",
                  " ```",
                  "",
                  " But this comes with tradeoffs, storing account balances in the system pallet stores",
                  " `frame_system` data alongside the account data contrary to storing account balances in the",
                  " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
                  " NOTE: This is only used in the case that this pallet is used to store balances."
                ]
              },
              {
                "name": "Locks",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "keyTypeId": 0,
                    "valueTypeId": 377
                  }
                },
                "default": "0x00",
                "docs": [
                  " Any liquidity locks on some account balances.",
                  " NOTE: Should only be accessed when setting, changing and freeing a lock."
                ]
              },
              {
                "name": "Reserves",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "keyTypeId": 0,
                    "valueTypeId": 381
                  }
                },
                "default": "0x00",
                "docs": [
                  " Named reserves on some account balances."
                ]
              }
            ]
          },
          "calls": 92,
          "event": 34,
          "constants": [
            {
              "name": "ExistentialDeposit",
              "typeId": 6,
              "value": "0x00a0724e180900000000000000000000",
              "docs": [
                " The minimum amount required to keep an account open."
              ]
            },
            {
              "name": "MaxLocks",
              "typeId": 4,
              "value": "0x32000000",
              "docs": [
                " The maximum number of locks that should exist on an account.",
                " Not strictly enforced, but used for weight estimation."
              ]
            },
            {
              "name": "MaxReserves",
              "typeId": 4,
              "value": "0x00000000",
              "docs": [
                " The maximum number of named reserves that can exist on an account."
              ]
            }
          ],
          "error": 384,
          "index": 5
        },
        {
          "name": "Vesting",
          "storage": {
            "prefix": "Vesting",
            "entries": [
              {
                "name": "Vesting",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "keyTypeId": 0,
                    "valueTypeId": 385
                  }
                },
                "default": "0x00",
                "docs": [
                  " Information regarding the vesting of a given account."
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 387
                  }
                },
                "default": "0x00",
                "docs": [
                  " Storage version of the pallet.",
                  "",
                  " New networks start with latest version, as determined by the genesis build."
                ]
              }
            ]
          },
          "calls": 96,
          "event": 36,
          "constants": [
            {
              "name": "MinVestedTransfer",
              "typeId": 6,
              "value": "0x00203d88792d00000000000000000000",
              "docs": [
                " The minimum amount transferred to call `vested_transfer`."
              ]
            },
            {
              "name": "MaxVestingSchedules",
              "typeId": 4,
              "value": "0x1c000000",
              "docs": []
            }
          ],
          "error": 388,
          "index": 10
        },
        {
          "name": "TransactionPayment",
          "storage": {
            "prefix": "TransactionPayment",
            "entries": [
              {
                "name": "NextFeeMultiplier",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 389
                  }
                },
                "default": "0x000064a7b3b6e00d0000000000000000",
                "docs": []
              },
              {
                "name": "StorageVersion",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 390
                  }
                },
                "default": "0x00",
                "docs": []
              }
            ]
          },
          "event": 37,
          "constants": [
            {
              "name": "OperationalFeeMultiplier",
              "typeId": 2,
              "value": "0x05",
              "docs": [
                " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
                " `priority`",
                "",
                " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later",
                " added to a tip component in regular `priority` calculations.",
                " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
                " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
                "",
                " ```rust,ignore",
                " // For `Normal`",
                " let priority = priority_calc(tip);",
                "",
                " // For `Operational`",
                " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
                " let priority = priority_calc(tip + virtual_tip);",
                " ```",
                "",
                " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
                " sent with the transaction. So, not only does the transaction get a priority bump based",
                " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
                " transactions."
              ]
            }
          ],
          "index": 6
        },
        {
          "name": "BagsList",
          "storage": {
            "prefix": "BagsList",
            "entries": [
              {
                "name": "ListNodes",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 0,
                    "valueTypeId": 391
                  }
                },
                "default": "0x00",
                "docs": [
                  " A single node, within some bag.",
                  "",
                  " Nodes store links forward and back within their respective bags."
                ]
              },
              {
                "name": "CounterForListNodes",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  "Counter for the related counted storage map"
                ]
              },
              {
                "name": "ListBags",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 10,
                    "valueTypeId": 392
                  }
                },
                "default": "0x00",
                "docs": [
                  " A bag stored in storage.",
                  "",
                  " Stores a `Bag` struct, which stores head and tail pointers to itself."
                ]
              }
            ]
          },
          "calls": 98,
          "event": 38,
          "constants": [
            {
              "name": "BagThresholds",
              "typeId": 393,
              "value": "0x210300a0724e1809000007a1dc61c70900007005739f830a00000df0a0044e0b00008cc4dfa1270c0000d3f8259c110d0000877b712e0d0e0000b6c26fab1b0f00007fbd457f3e100000940e7a317711000083230467c712000067ee82e430140000ef3c9e90b51500000fe1957657170000601d02c9181900008109c9e4fb1a000017ea4c54031d0000c7c4d7d2311f0000daca48508a210000f98d08f50f240000ab514926c6260000b332998ab0290000ae4bcc0ed32c0000a87445eb31300000d4baa4a9d13300007736e32ab73700005578e4ade73b00003e6686d668400000940839b540450000988128cf754a0000232c04270f500000f7b26e461456000053d523488d5c0000fb81e1e282630000fff82275fe6a000025bfbd110a730000f65d718db07b000044327c8dfd84000070ea4897fd8e000099cf4921be990000258b18a54da50000eecef2b2bbb100000a1cae0619bf000028dd3e9e77cd00007628f1d1eadc0000cdc4736e87ed0000a481d8d063ff00001b94af04981201002d8166e43d2701004729163c713d010060d0eeee4f550100ad83741ffa6e0100d907c25a928a0100598d0cc73da801008fc9a65524c80100edc8c6f870ea010041de56dd510f0200f1841fa9f836020024e69dbd9a610200e2fbe07f718f02004111cea5bac0020019a53489b8f5020015872181b22e0300f06fe941f56b030088606c44d3ad030055cc1c35a5f40300e507606bca4004004cb1e869a992040013deb768b0ea040087d87ee955490500922e295719af0500bad965b1831c0600366e1645289206007b9c9c72a510070035fc1083a5980700a62a828ddf2a0800d3db706d18c80800dcb2d4cb2371090072a90e3ce5260a006aa2486e51ea0a00bc9bde786fbc0b00faf78c3a5a9e0c00e7af40d741910d007d178a516d960e00736ed9423caf0f0026e7d5b428dd10008d5f4c1ec921120074f26286d27e1300360cf2d01af61400ec121b379b891600074170ef723b1800d55a4109ea0d1a00b8c1e57e74031c005f6f2683b51e1e0010fc390e8362200002681aafe9d12200f06358a630702500ecc4f24fde402800682f23e2bc472b0056658387df882e00ce9c69dba7083200567ddecfcbcb3500f88b1d055cd73900f2a8299bca303e00c89aa386f2dd42003c57c1721fe54700f8b8023b164d4d0038980c081e1d5300a8e0ee1b0a5d5900b866065b441560007c28a99fd84e6700d4a7dce780136f00b0947b6db26d7700a0996bbaab6880000074d7cb83108a00c05bce583a729400b8093252c99b9f00207582b3379cab0040e2dbbdad83b800987763b88a63c60088d46a537c4ed500c8d5c6cd9758e50010c933fe7497f600b0f82c654b220901801f5a6e11121d01a0ada60b9e81320120c240d7cc8d490140a424eda4556201f0e681b082fa7c01902d36b544a09901f006d4097c6db80140393823a08bd901904393af4627fd01605c0e9c5f70230220e5d99d759a4c02a0c38695f3dc78022080142a6f73a80200392400f99ddb02e0e44df972a11203e024b4efecc74d03e002ae6a08618d03e022c1d263c2d10340cd3eb50d481b044063b0b200556a0480e0eabea853bf0440b82c6672b61a05409026d864f87c05c02b5088c79de605c0e58242d4345806404b97a37656d2060059caf719a7550700de109486d7e207009656d4cfa57a0800d30eff53de1d0900249466cf5ccd0980c0bb3a840d8a0a8087db9878ee540b807c7386cc102f0c8046dea2299a190d809e0a7f4ec6150e805878afb7e8240f000db9d4686e48100013bc01d8df8111007a7115fee2d21200630ecf8e3d3d14002cb9995bd7c21500c6e545e4bc651700367f24192228190051763a52650c1b007fc88a7f12151d00f6ebc196e6441f001631e042d39e21004681d9da02262400d66a80a4dcdd26005c1f796909ca29002a795f6478ee2c007ed9c18c644f30008a5b12495af13300f01c398e3dd9370094f20575500c3c006c905e4e3a90400044c9b03f0f6b4500e0fde77158a34a001011eadd1c4050000c4974c2ea485600b48b14d0e1c55c00b48df018bebf6300c42614d3e33f6b0034691bfd6b5073004cd73df631fc7b00d8b6071ce24e8500d0cc6e8109558f00a8916ad4261c9a00e830cf88bcb2a500b888e0606428b200582ce96de48dbf0030a31ba545f5cd0068632427ec71dd00883b1c5bb118eeffffffffffffffff",
              "docs": [
                " The list of thresholds separating the various bags.",
                "",
                " Ids are separated into unsorted bags according to their score. This specifies the",
                " thresholds separating the bags. An id's bag is the largest bag for which the id's score",
                " is less than or equal to its upper threshold.",
                "",
                " When ids are iterated, higher bags are iterated completely before lower bags. This means",
                " that iteration is _semi-sorted_: ids of higher score tend to come before ids of lower",
                " score, but peer ids within a particular bag are sorted in insertion order.",
                "",
                " # Expressing the constant",
                "",
                " This constant must be sorted in strictly increasing order. Duplicate items are not",
                " permitted.",
                "",
                " There is an implied upper limit of `Score::MAX`; that value does not need to be",
                " specified within the bag. For any two threshold lists, if one ends with",
                " `Score::MAX`, the other one does not, and they are otherwise equal, the two",
                " lists will behave identically.",
                "",
                " # Calculation",
                "",
                " It is recommended to generate the set of thresholds in a geometric series, such that",
                " there exists some constant ratio such that `threshold[k + 1] == (threshold[k] *",
                " constant_ratio).max(threshold[k] + 1)` for all `k`.",
                "",
                " The helpers in the `/utils/frame/generate-bags` module can simplify this calculation.",
                "",
                " # Examples",
                "",
                " - If `BagThresholds::get().is_empty()`, then all ids are put into the same bag, and",
                "   iteration is strictly in insertion order.",
                " - If `BagThresholds::get().len() == 64`, and the thresholds are determined according to",
                "   the procedure given above, then the constant ratio is equal to 2.",
                " - If `BagThresholds::get().len() == 200`, and the thresholds are determined according to",
                "   the procedure given above, then the constant ratio is approximately equal to 1.248.",
                " - If the threshold list begins `[1, 2, 3, ...]`, then an id with score 0 or 1 will fall",
                "   into bag 0, an id with score 2 will fall into bag 1, etc.",
                "",
                " # Migration",
                "",
                " In the event that this list ever changes, a copy of the old bags list must be retained.",
                " With that `List::migrate` can be called, which will perform the appropriate migration."
              ]
            }
          ],
          "error": 394,
          "index": 11
        },
        {
          "name": "ImOnline",
          "storage": {
            "prefix": "ImOnline",
            "entries": [
              {
                "name": "HeartbeatAfter",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " The block number after which it's ok to send heartbeats in the current",
                  " session.",
                  "",
                  " At the beginning of each session we set this to a value that should fall",
                  " roughly in the middle of the session duration. The idea is to first wait for",
                  " the validators to produce a block in the current session, so that the",
                  " heartbeat later on will not be necessary.",
                  "",
                  " This value will only be used as a fallback if we fail to get a proper session",
                  " progress estimate from `NextSessionRotation`, as those estimates should be",
                  " more accurate then the value we calculate for `HeartbeatAfter`."
                ]
              },
              {
                "name": "Keys",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 396
                  }
                },
                "default": "0x00",
                "docs": [
                  " The current set of keys that may issue a heartbeat."
                ]
              },
              {
                "name": "ReceivedHeartbeats",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat",
                      "twox64Concat"
                    ],
                    "keyTypeId": 140,
                    "valueTypeId": 398
                  }
                },
                "default": "0x00",
                "docs": [
                  " For each session index, we keep a mapping of `SessionIndex` and `AuthIndex` to",
                  " `WrapperOpaque<BoundedOpaqueNetworkState>`."
                ]
              },
              {
                "name": "AuthoredBlocks",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat",
                      "twox64Concat"
                    ],
                    "keyTypeId": 403,
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " For each session index, we keep a mapping of `ValidatorId<T>` to the",
                  " number of blocks authored by the given authority."
                ]
              }
            ]
          },
          "calls": 99,
          "event": 39,
          "constants": [
            {
              "name": "UnsignedPriority",
              "typeId": 10,
              "value": "0xffffffffffffffff",
              "docs": [
                " A configuration for base priority of unsigned transactions.",
                "",
                " This is exposed so that it can be tuned for particular runtime, when",
                " multiple pallets send unsigned transactions."
              ]
            }
          ],
          "error": 404,
          "index": 12
        },
        {
          "name": "Staking",
          "storage": {
            "prefix": "Staking",
            "entries": [
              {
                "name": "ValidatorCount",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " The ideal number of active validators."
                ]
              },
              {
                "name": "MinimumValidatorCount",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " Minimum number of staking participants before emergency conditions are imposed."
                ]
              },
              {
                "name": "Invulnerables",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 111
                  }
                },
                "default": "0x00",
                "docs": [
                  " Any validators that may never be slashed or forcibly kicked. It's a Vec since they're",
                  " easy to initialize and the performance hit is minimal (we expect no more than four",
                  " invulnerables) and restricted to testnets."
                ]
              },
              {
                "name": "Bonded",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 0,
                    "valueTypeId": 0
                  }
                },
                "default": "0x00",
                "docs": [
                  " Map from all locked \"stash\" accounts to the controller account.",
                  "",
                  " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
                ]
              },
              {
                "name": "MinNominatorBond",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 6
                  }
                },
                "default": "0x00000000000000000000000000000000",
                "docs": [
                  " The minimum active bond to become and maintain the role of a nominator."
                ]
              },
              {
                "name": "MinValidatorBond",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 6
                  }
                },
                "default": "0x00000000000000000000000000000000",
                "docs": [
                  " The minimum active bond to become and maintain the role of a validator."
                ]
              },
              {
                "name": "MinimumActiveStake",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 6
                  }
                },
                "default": "0x00000000000000000000000000000000",
                "docs": [
                  " The minimum active nominator stake of the last successful election."
                ]
              },
              {
                "name": "MinCommission",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 49
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " The minimum amount of commission that validators can set.",
                  "",
                  " If set to `0`, no limit exists."
                ]
              },
              {
                "name": "Ledger",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "keyTypeId": 0,
                    "valueTypeId": 405
                  }
                },
                "default": "0x00",
                "docs": [
                  " Map from all (unlocked) \"controller\" accounts to the info regarding the staking."
                ]
              },
              {
                "name": "Payee",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 0,
                    "valueTypeId": 108
                  }
                },
                "default": "0x00",
                "docs": [
                  " Where the reward payment should be made. Keyed by stash.",
                  "",
                  " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
                ]
              },
              {
                "name": "Validators",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 0,
                    "valueTypeId": 50
                  }
                },
                "default": "0x0000",
                "docs": [
                  " The map from (wannabe) validator stash key to the preferences of that validator.",
                  "",
                  " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
                ]
              },
              {
                "name": "CounterForValidators",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  "Counter for the related counted storage map"
                ]
              },
              {
                "name": "MaxValidatorsCount",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00",
                "docs": [
                  " The maximum validator count before we stop allowing new validators to join.",
                  "",
                  " When this value is not set, no limits are enforced."
                ]
              },
              {
                "name": "Nominators",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 0,
                    "valueTypeId": 410
                  }
                },
                "default": "0x00",
                "docs": [
                  " The map from nominator stash key to their nomination preferences, namely the validators that",
                  " they wish to support.",
                  "",
                  " Note that the keys of this storage map might become non-decodable in case the",
                  " [`Config::MaxNominations`] configuration is decreased. In this rare case, these nominators",
                  " are still existent in storage, their key is correct and retrievable (i.e. `contains_key`",
                  " indicates that they exist), but their value cannot be decoded. Therefore, the non-decodable",
                  " nominators will effectively not-exist, until they re-submit their preferences such that it",
                  " is within the bounds of the newly set `Config::MaxNominations`.",
                  "",
                  " This implies that `::iter_keys().count()` and `::iter().count()` might return different",
                  " values for this map. Moreover, the main `::count()` is aligned with the former, namely the",
                  " number of keys that exist.",
                  "",
                  " Lastly, if any of the nominators become non-decodable, they can be chilled immediately via",
                  " [`Call::chill_other`] dispatchable by anyone.",
                  "",
                  " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
                ]
              },
              {
                "name": "CounterForNominators",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  "Counter for the related counted storage map"
                ]
              },
              {
                "name": "MaxNominatorsCount",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00",
                "docs": [
                  " The maximum nominator count before we stop allowing new validators to join.",
                  "",
                  " When this value is not set, no limits are enforced."
                ]
              },
              {
                "name": "CurrentEra",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00",
                "docs": [
                  " The current era index.",
                  "",
                  " This is the latest planned era, depending on how the Session pallet queues the validator",
                  " set, it might be active or not."
                ]
              },
              {
                "name": "ActiveEra",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 412
                  }
                },
                "default": "0x00",
                "docs": [
                  " The active era information, it holds index and start.",
                  "",
                  " The active era is the era being currently rewarded. Validator set of this era must be",
                  " equal to [`SessionInterface::validators`]."
                ]
              },
              {
                "name": "ErasStartSessionIndex",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 4,
                    "valueTypeId": 4
                  }
                },
                "default": "0x00",
                "docs": [
                  " The session index at which the era start for the last `HISTORY_DEPTH` eras.",
                  "",
                  " Note: This tracks the starting session (i.e. session index when era start being active)",
                  " for the eras in `[CurrentEra - HISTORY_DEPTH, CurrentEra]`."
                ]
              },
              {
                "name": "ErasStakers",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat",
                      "twox64Concat"
                    ],
                    "keyTypeId": 403,
                    "valueTypeId": 44
                  }
                },
                "default": "0x000000",
                "docs": [
                  " Exposure of validator at era.",
                  "",
                  " This is keyed first by the era index to allow bulk deletion and then the stash account.",
                  "",
                  " Is it removed after `HISTORY_DEPTH` eras.",
                  " If stakers hasn't been set or has been removed then empty exposure is returned."
                ]
              },
              {
                "name": "ErasStakersClipped",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat",
                      "twox64Concat"
                    ],
                    "keyTypeId": 403,
                    "valueTypeId": 44
                  }
                },
                "default": "0x000000",
                "docs": [
                  " Clipped Exposure of validator at era.",
                  "",
                  " This is similar to [`ErasStakers`] but number of nominators exposed is reduced to the",
                  " `T::MaxNominatorRewardedPerValidator` biggest stakers.",
                  " (Note: the field `total` and `own` of the exposure remains unchanged).",
                  " This is used to limit the i/o cost for the nominator payout.",
                  "",
                  " This is keyed fist by the era index to allow bulk deletion and then the stash account.",
                  "",
                  " Is it removed after `HISTORY_DEPTH` eras.",
                  " If stakers hasn't been set or has been removed then empty exposure is returned."
                ]
              },
              {
                "name": "ErasValidatorPrefs",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat",
                      "twox64Concat"
                    ],
                    "keyTypeId": 403,
                    "valueTypeId": 50
                  }
                },
                "default": "0x0000",
                "docs": [
                  " Similar to `ErasStakers`, this holds the preferences of validators.",
                  "",
                  " This is keyed first by the era index to allow bulk deletion and then the stash account.",
                  "",
                  " Is it removed after `HISTORY_DEPTH` eras."
                ]
              },
              {
                "name": "ErasValidatorReward",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 4,
                    "valueTypeId": 6
                  }
                },
                "default": "0x00",
                "docs": [
                  " The total validator era payout for the last `HISTORY_DEPTH` eras.",
                  "",
                  " Eras that haven't finished yet or has been removed doesn't have reward."
                ]
              },
              {
                "name": "ErasRewardPoints",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 4,
                    "valueTypeId": 413
                  }
                },
                "default": "0x0000000000",
                "docs": [
                  " Rewards for the last `HISTORY_DEPTH` eras.",
                  " If reward hasn't been set or has been removed then 0 reward is returned."
                ]
              },
              {
                "name": "ErasTotalStake",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 4,
                    "valueTypeId": 6
                  }
                },
                "default": "0x00000000000000000000000000000000",
                "docs": [
                  " The total amount staked for the last `HISTORY_DEPTH` eras.",
                  " If total hasn't been set or has been removed then 0 stake is returned."
                ]
              },
              {
                "name": "ForceEra",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 53
                  }
                },
                "default": "0x00",
                "docs": [
                  " Mode of era forcing."
                ]
              },
              {
                "name": "SlashRewardFraction",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 49
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " The percentage of the slash that is distributed to reporters.",
                  "",
                  " The rest of the slashed value is handled by the `Slash`."
                ]
              },
              {
                "name": "CanceledSlashPayout",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 6
                  }
                },
                "default": "0x00000000000000000000000000000000",
                "docs": [
                  " The amount of currency given to reporters of a slash event which was",
                  " canceled by extraordinary circumstances (e.g. governance)."
                ]
              },
              {
                "name": "UnappliedSlashes",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 4,
                    "valueTypeId": 417
                  }
                },
                "default": "0x00",
                "docs": [
                  " All unapplied slashes that are queued for later."
                ]
              },
              {
                "name": "BondedEras",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 342
                  }
                },
                "default": "0x00",
                "docs": [
                  " A mapping from still-bonded eras to the first session index of that era.",
                  "",
                  " Must contains information for eras for the range:",
                  " `[active_era - bounding_duration; active_era]`"
                ]
              },
              {
                "name": "ValidatorSlashInEra",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat",
                      "twox64Concat"
                    ],
                    "keyTypeId": 403,
                    "valueTypeId": 419
                  }
                },
                "default": "0x00",
                "docs": [
                  " All slashing events on validators, mapped by era to the highest slash proportion",
                  " and slash value of the era."
                ]
              },
              {
                "name": "NominatorSlashInEra",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat",
                      "twox64Concat"
                    ],
                    "keyTypeId": 403,
                    "valueTypeId": 6
                  }
                },
                "default": "0x00",
                "docs": [
                  " All slashing events on nominators, mapped by era to the highest slash value of the era."
                ]
              },
              {
                "name": "SlashingSpans",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 0,
                    "valueTypeId": 420
                  }
                },
                "default": "0x00",
                "docs": [
                  " Slashing spans for stash accounts."
                ]
              },
              {
                "name": "SpanSlash",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 416,
                    "valueTypeId": 421
                  }
                },
                "default": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Records information about the maximum slash of a stash within a slashing span,",
                  " as well as how much reward has been paid out."
                ]
              },
              {
                "name": "CurrentPlannedSession",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " The last planned session scheduled by the session pallet.",
                  "",
                  " This is basically in sync with the call to [`pallet_session::SessionManager::new_session`]."
                ]
              },
              {
                "name": "OffendingValidators",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 422
                  }
                },
                "default": "0x00",
                "docs": [
                  " Indices of validators that have offended in the active era and whether they are currently",
                  " disabled.",
                  "",
                  " This value should be a superset of disabled validators since not all offences lead to the",
                  " validator being disabled (if there was no slash). This is needed to track the percentage of",
                  " validators that have offended in the current era, ensuring a new era is forced if",
                  " `OffendingValidatorsThreshold` is reached. The vec is always kept sorted so that we can find",
                  " whether a given validator has previously offended using binary search. It gets cleared when",
                  " the era ends."
                ]
              },
              {
                "name": "ChillThreshold",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 110
                  }
                },
                "default": "0x00",
                "docs": [
                  " The threshold for when users can start calling `chill_other` for other validators /",
                  " nominators. The threshold is compared to the actual number of validators / nominators",
                  " (`CountFor*`) in the system compared to the configured max (`Max*Count`)."
                ]
              }
            ]
          },
          "calls": 107,
          "event": 48,
          "constants": [
            {
              "name": "MaxNominations",
              "typeId": 4,
              "value": "0x10000000",
              "docs": [
                " Maximum number of nominations per nominator."
              ]
            },
            {
              "name": "HistoryDepth",
              "typeId": 4,
              "value": "0x54000000",
              "docs": [
                " Number of eras to keep in history.",
                "",
                " Following information is kept for eras in `[current_era -",
                " HistoryDepth, current_era]`: `ErasStakers`, `ErasStakersClipped`,",
                " `ErasValidatorPrefs`, `ErasValidatorReward`, `ErasRewardPoints`,",
                " `ErasTotalStake`, `ErasStartSessionIndex`,",
                " `StakingLedger.claimed_rewards`.",
                "",
                " Must be more than the number of eras delayed by session.",
                " I.e. active era must always be in history. I.e. `active_era >",
                " current_era - history_depth` must be guaranteed.",
                "",
                " If migrating an existing pallet from storage value to config value,",
                " this should be set to same value or greater as in storage.",
                "",
                " Note: `HistoryDepth` is used as the upper bound for the `BoundedVec`",
                " item `StakingLedger.claimed_rewards`. Setting this value lower than",
                " the existing value can lead to inconsistencies in the",
                " `StakingLedger` and will need to be handled properly in a migration.",
                " The test `reducing_history_depth_abrupt` shows this effect."
              ]
            },
            {
              "name": "SessionsPerEra",
              "typeId": 4,
              "value": "0x06000000",
              "docs": [
                " Number of sessions per era."
              ]
            },
            {
              "name": "BondingDuration",
              "typeId": 4,
              "value": "0x0e000000",
              "docs": [
                " Number of eras that staked funds must remain bonded for."
              ]
            },
            {
              "name": "SlashDeferDuration",
              "typeId": 4,
              "value": "0x0d000000",
              "docs": [
                " Number of eras that slashes are deferred by, after computation.",
                "",
                " This should be less than the bonding duration. Set to 0 if slashes",
                " should be applied immediately, without opportunity for intervention."
              ]
            },
            {
              "name": "MaxNominatorRewardedPerValidator",
              "typeId": 4,
              "value": "0x00010000",
              "docs": [
                " The maximum number of nominators rewarded for each validator.",
                "",
                " For each validator only the `$MaxNominatorRewardedPerValidator` biggest stakers can",
                " claim their reward. This used to limit the i/o cost for the nominator payout."
              ]
            },
            {
              "name": "MaxUnlockingChunks",
              "typeId": 4,
              "value": "0x20000000",
              "docs": [
                " The maximum number of `unlocking` chunks a [`StakingLedger`] can",
                " have. Effectively determines how many unique eras a staker may be",
                " unbonding in.",
                "",
                " Note: `MaxUnlockingChunks` is used as the upper bound for the",
                " `BoundedVec` item `StakingLedger.unlocking`. Setting this value",
                " lower than the existing value can lead to inconsistencies in the",
                " `StakingLedger` and will need to be handled properly in a runtime",
                " migration. The test `reducing_max_unlocking_chunks_abrupt` shows",
                " this effect."
              ]
            }
          ],
          "error": 424,
          "index": 13
        },
        {
          "name": "Session",
          "storage": {
            "prefix": "Session",
            "entries": [
              {
                "name": "Validators",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 111
                  }
                },
                "default": "0x00",
                "docs": [
                  " The current set of validators."
                ]
              },
              {
                "name": "CurrentIndex",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " Current index of the session."
                ]
              },
              {
                "name": "QueuedChanged",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 52
                  }
                },
                "default": "0x00",
                "docs": [
                  " True if the underlying economic identities or weighting behind the validators",
                  " has changed in the queued validator set."
                ]
              },
              {
                "name": "QueuedKeys",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 425
                  }
                },
                "default": "0x00",
                "docs": [
                  " The queued keys for the next session. When the next session begins, these keys",
                  " will be used to determine the validator's session keys."
                ]
              },
              {
                "name": "DisabledValidators",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 112
                  }
                },
                "default": "0x00",
                "docs": [
                  " Indices of disabled validators.",
                  "",
                  " The vec is always kept sorted so that we can find whether a given validator is",
                  " disabled using binary search. It gets cleared when `on_session_ending` returns",
                  " a new set of identities."
                ]
              },
              {
                "name": "NextKeys",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 0,
                    "valueTypeId": 118
                  }
                },
                "default": "0x00",
                "docs": [
                  " The next session keys for a validator."
                ]
              },
              {
                "name": "KeyOwner",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 427,
                    "valueTypeId": 0
                  }
                },
                "default": "0x00",
                "docs": [
                  " The owner of a key. The key is the `KeyTypeId` + the encoded key."
                ]
              }
            ]
          },
          "calls": 117,
          "event": 54,
          "constants": [],
          "error": 429,
          "index": 7
        },
        {
          "name": "Treasury",
          "storage": {
            "prefix": "Treasury",
            "entries": [
              {
                "name": "ProposalCount",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " Number of proposals that have been made."
                ]
              },
              {
                "name": "Proposals",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 4,
                    "valueTypeId": 430
                  }
                },
                "default": "0x00",
                "docs": [
                  " Proposals that have been made."
                ]
              },
              {
                "name": "Deactivated",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 6
                  }
                },
                "default": "0x00000000000000000000000000000000",
                "docs": [
                  " The amount which has been reported as inactive to Currency."
                ]
              },
              {
                "name": "Approvals",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 431
                  }
                },
                "default": "0x00",
                "docs": [
                  " Proposal indices that have been approved but not yet awarded."
                ]
              }
            ]
          },
          "calls": 120,
          "event": 55,
          "constants": [
            {
              "name": "ProposalBond",
              "typeId": 432,
              "value": "0x50c30000",
              "docs": [
                " Fraction of a proposal's value that should be bonded in order to place the proposal.",
                " An accepted proposal gets these back. A rejected proposal does not."
              ]
            },
            {
              "name": "ProposalBondMinimum",
              "typeId": 6,
              "value": "0x00203d88792d00000000000000000000",
              "docs": [
                " Minimum amount of funds that should be placed in a deposit for making a proposal."
              ]
            },
            {
              "name": "ProposalBondMaximum",
              "typeId": 433,
              "value": "0x00",
              "docs": [
                " Maximum amount of funds that should be placed in a deposit for making a proposal."
              ]
            },
            {
              "name": "SpendPeriod",
              "typeId": 4,
              "value": "0x80700000",
              "docs": [
                " Period between successive spends."
              ]
            },
            {
              "name": "Burn",
              "typeId": 432,
              "value": "0x20a10700",
              "docs": [
                " Percentage of spare funds (if any) that are burnt per spend period."
              ]
            },
            {
              "name": "PalletId",
              "typeId": 434,
              "value": "0x70792f7472737279",
              "docs": [
                " The treasury's pallet id, used for deriving its sovereign account ID."
              ]
            },
            {
              "name": "MaxApprovals",
              "typeId": 4,
              "value": "0x64000000",
              "docs": [
                " The maximum number of approvals that can wait in the spending queue.",
                "",
                " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."
              ]
            }
          ],
          "error": 435,
          "index": 14
        },
        {
          "name": "Historical",
          "storage": {
            "prefix": "Historical",
            "entries": [
              {
                "name": "HistoricalSessions",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 4,
                    "valueTypeId": 436
                  }
                },
                "default": "0x00",
                "docs": [
                  " Mapping from historical session indices to session-data root hash and validator count."
                ]
              },
              {
                "name": "StoredRange",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 140
                  }
                },
                "default": "0x00",
                "docs": [
                  " The range of historical sessions we store. [first, last)"
                ]
              }
            ]
          },
          "constants": [],
          "index": 15
        },
        {
          "name": "Utility",
          "calls": 121,
          "event": 56,
          "constants": [
            {
              "name": "batched_calls_limit",
              "typeId": 4,
              "value": "0xaa2a0000",
              "docs": [
                " The limit on the number of batched calls."
              ]
            }
          ],
          "error": 437,
          "index": 8
        },
        {
          "name": "ConvictionVoting",
          "storage": {
            "prefix": "ConvictionVoting",
            "entries": [
              {
                "name": "VotingFor",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat",
                      "twox64Concat"
                    ],
                    "keyTypeId": 438,
                    "valueTypeId": 439
                  }
                },
                "default": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " All voting for a particular voter in a particular voting class. We store the balance for the",
                  " number of votes that we have recorded."
                ]
              },
              {
                "name": "ClassLocksFor",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 0,
                    "valueTypeId": 447
                  }
                },
                "default": "0x00",
                "docs": [
                  " The voting classes which have a non-zero lock requirement and the lock amounts which they",
                  " require. The actual amount locked on behalf of this pallet should always be the maximum of",
                  " this list."
                ]
              }
            ]
          },
          "calls": 127,
          "event": 59,
          "constants": [
            {
              "name": "MaxVotes",
              "typeId": 4,
              "value": "0x00020000",
              "docs": [
                " The maximum number of concurrent votes an account may have.",
                "",
                " Also used to compute weight, an overly large value can lead to extrinsics with large",
                " weight estimation: see `delegate` for instance."
              ]
            },
            {
              "name": "VoteLockingPeriod",
              "typeId": 4,
              "value": "0x80130300",
              "docs": [
                " The minimum period of vote locking.",
                "",
                " It should be no shorter than enactment period to ensure that in the case of an approval,",
                " those successful voters are locked into the consequences that their votes entail."
              ]
            }
          ],
          "error": 450,
          "index": 16
        },
        {
          "name": "Referenda",
          "storage": {
            "prefix": "Referenda",
            "entries": [
              {
                "name": "ReferendumCount",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " The next free referendum index, aka the number of referenda started so far."
                ]
              },
              {
                "name": "ReferendumInfoFor",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "keyTypeId": 4,
                    "valueTypeId": 451
                  }
                },
                "default": "0x00",
                "docs": [
                  " Information concerning any given referendum."
                ]
              },
              {
                "name": "TrackQueue",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 61,
                    "valueTypeId": 459
                  }
                },
                "default": "0x00",
                "docs": [
                  " The sorted list of referenda ready to be decided but not yet being decided, ordered by",
                  " conviction-weighted approvals.",
                  "",
                  " This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`."
                ]
              },
              {
                "name": "DecidingCount",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 61,
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " The number of referenda being decided currently."
                ]
              },
              {
                "name": "MetadataOf",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "keyTypeId": 4,
                    "valueTypeId": 11
                  }
                },
                "default": "0x00",
                "docs": [
                  " The metadata is a general information concerning the referendum.",
                  " The `PreimageHash` refers to the preimage of the `Preimages` provider which can be a JSON",
                  " dump or IPFS hash of a JSON file.",
                  "",
                  " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)",
                  " large preimages."
                ]
              }
            ]
          },
          "calls": 132,
          "event": 60,
          "constants": [
            {
              "name": "SubmissionDeposit",
              "typeId": 6,
              "value": "0x00406352bfc601000000000000000000",
              "docs": [
                " The minimum amount to be used as a deposit for a public referendum proposal."
              ]
            },
            {
              "name": "MaxQueued",
              "typeId": 4,
              "value": "0x64000000",
              "docs": [
                " Maximum size of the referendum queue for a single track."
              ]
            },
            {
              "name": "UndecidingTimeout",
              "typeId": 4,
              "value": "0x00270600",
              "docs": [
                " The number of blocks after submission that a referendum must begin being decided by.",
                " Once this passes, then anyone may cancel the referendum."
              ]
            },
            {
              "name": "AlarmInterval",
              "typeId": 4,
              "value": "0x01000000",
              "docs": [
                " Quantization level for the referendum wakeup scheduler. A higher number will result in",
                " fewer storage reads/writes needed for smaller voters, but also result in delays to the",
                " automatic referendum status changes. Explicit servicing instructions are unaffected."
              ]
            },
            {
              "name": "Tracks",
              "typeId": 462,
              "value": "0x34000010726f6f74010000000000f444829163450000000000000000600900000027060080700000807000000290d73e0d000000005743de13000000005443de13000000000000ca9a3b000000000065cd1d01004877686974656c69737465645f63616c6c6572640000000000b2d3595bf00600000000000000005802000000270600c8000000c800000002ec972510000000007b573c170000000042392f1200000000020e00840000000000d6e61f010000000039627902000000000a00347374616b696e675f61646d696e0a0000000000d9e9ac2d780300000000000000006009000000270600100e0000c800000000c94330240065cd1d00ca9a3b025d6f780000000000e82eed00000000008c6889ffffffffff0b00247472656173757265720a0000000000c52ebca2b10000000000000000006009000000270600100e0000807000000290d73e0d000000005743de13000000005443de13000000000000ca9a3b000000000065cd1d0c004066656c6c6f77736869705f61646d696e0a0000000000d9e9ac2d780300000000000000006009000000270600100e0000c800000000c94330240065cd1d00ca9a3b025d6f780000000000e82eed00000000008c6889ffffffffff0d003467656e6572616c5f61646d696e0a0000000000d9e9ac2d780300000000000000006009000000270600100e0000c80000000290d73e0d000000005743de13000000005443de13000000000259a2f40200000000a3296b05000000002e6b4afdffffffff1400507265666572656e64756d5f63616e63656c6c6572e80300000000b2d3595bf00600000000000000006009000080130300100e0000c800000000c94330240065cd1d00ca9a3b025d6f780000000000e82eed00000000008c6889ffffffffff1500447265666572656e64756d5f6b696c6c6572e803000000007a22c1c8b12200000000000000006009000000270600100e0000c800000000c94330240065cd1d00ca9a3b025d6f780000000000e82eed00000000008c6889ffffffffff1e0030736d616c6c5f746970706572c800000000203d88792d000000000000000000001400000080130300c80000001400000000499149150065cd1d00ca9a3b02f9ba1800000000002a4d3100000000006b59e7ffffffffff1f00286269675f7469707065726400000000406352bfc601000000000000000000c800000080130300b0040000c800000000499149150065cd1d00ca9a3b02694f3f000000000035967d0000000000e534c1ffffffffff200034736d616c6c5f7370656e646572320000000080e03779c311000000000000000000c012000000270600403800008070000000c94330240065cd1d00ca9a3b025d6f780000000000e82eed00000000008c6889ffffffffff2100386d656469756d5f7370656e646572320000000000c16ff28623000000000000000000c0120000002706008070000080700000005b01f6300065cd1d00ca9a3b021161db0000000000bfd1aa010000000020972affffffffff22002c6269675f7370656e64657232000000000082dfe40d47000000000000000000c01200000027060000e10000807000000000ca9a3b0065cd1d00ca9a3b02413cb00100000000755d34030000000045d165feffffffff",
              "docs": [
                " Information concerning the different referendum tracks."
              ]
            }
          ],
          "error": 468,
          "index": 17
        },
        {
          "name": "FellowshipCollective",
          "storage": {
            "prefix": "FellowshipCollective",
            "entries": [
              {
                "name": "MemberCount",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 61,
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " The number of members in the collective who have at least the rank according to the index",
                  " of the vec."
                ]
              },
              {
                "name": "Members",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 0,
                    "valueTypeId": 469
                  }
                },
                "default": "0x00",
                "docs": [
                  " The current members of the collective."
                ]
              },
              {
                "name": "IdToIndex",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat",
                      "twox64Concat"
                    ],
                    "keyTypeId": 470,
                    "valueTypeId": 4
                  }
                },
                "default": "0x00",
                "docs": [
                  " The index of each ranks's member into the group of members who have at least that rank."
                ]
              },
              {
                "name": "IndexToId",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat",
                      "twox64Concat"
                    ],
                    "keyTypeId": 471,
                    "valueTypeId": 0
                  }
                },
                "default": "0x00",
                "docs": [
                  " The members in the collective by index. All indices in the range `0..MemberCount` will",
                  " return `Some`, however a member's index is not guaranteed to remain unchanged over time."
                ]
              },
              {
                "name": "Voting",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat",
                      "twox64Concat"
                    ],
                    "keyTypeId": 403,
                    "valueTypeId": 283
                  }
                },
                "default": "0x00",
                "docs": [
                  " Votes on a given proposal, if it is ongoing."
                ]
              },
              {
                "name": "VotingCleanup",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "keyTypeId": 4,
                    "valueTypeId": 472
                  }
                },
                "default": "0x00",
                "docs": []
              }
            ]
          },
          "calls": 135,
          "event": 282,
          "constants": [],
          "error": 473,
          "index": 18
        },
        {
          "name": "FellowshipReferenda",
          "storage": {
            "prefix": "FellowshipReferenda",
            "entries": [
              {
                "name": "ReferendumCount",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " The next free referendum index, aka the number of referenda started so far."
                ]
              },
              {
                "name": "ReferendumInfoFor",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "keyTypeId": 4,
                    "valueTypeId": 474
                  }
                },
                "default": "0x00",
                "docs": [
                  " Information concerning any given referendum."
                ]
              },
              {
                "name": "TrackQueue",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 61,
                    "valueTypeId": 476
                  }
                },
                "default": "0x00",
                "docs": [
                  " The sorted list of referenda ready to be decided but not yet being decided, ordered by",
                  " conviction-weighted approvals.",
                  "",
                  " This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`."
                ]
              },
              {
                "name": "DecidingCount",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 61,
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " The number of referenda being decided currently."
                ]
              },
              {
                "name": "MetadataOf",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "keyTypeId": 4,
                    "valueTypeId": 11
                  }
                },
                "default": "0x00",
                "docs": [
                  " The metadata is a general information concerning the referendum.",
                  " The `PreimageHash` refers to the preimage of the `Preimages` provider which can be a JSON",
                  " dump or IPFS hash of a JSON file.",
                  "",
                  " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)",
                  " large preimages."
                ]
              }
            ]
          },
          "calls": 136,
          "event": 285,
          "constants": [
            {
              "name": "SubmissionDeposit",
              "typeId": 6,
              "value": "0x00000000000000000000000000000000",
              "docs": [
                " The minimum amount to be used as a deposit for a public referendum proposal."
              ]
            },
            {
              "name": "MaxQueued",
              "typeId": 4,
              "value": "0x64000000",
              "docs": [
                " Maximum size of the referendum queue for a single track."
              ]
            },
            {
              "name": "UndecidingTimeout",
              "typeId": 4,
              "value": "0x80130300",
              "docs": [
                " The number of blocks after submission that a referendum must begin being decided by.",
                " Once this passes, then anyone may cancel the referendum."
              ]
            },
            {
              "name": "AlarmInterval",
              "typeId": 4,
              "value": "0x01000000",
              "docs": [
                " Quantization level for the referendum wakeup scheduler. A higher number will result in",
                " fewer storage reads/writes needed for smaller voters, but also result in delays to the",
                " automatic referendum status changes. Explicit servicing instructions are unaffected."
              ]
            },
            {
              "name": "Tracks",
              "typeId": 462,
              "value": "0x2800002863616e646964617465730a0000000080e03779c311000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d01001c6d656d626572730a00000000406352bfc601000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d02002c70726f66696369656e74730a00000000406352bfc601000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d03001c66656c6c6f77730a00000000406352bfc601000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d04003873656e696f722066656c6c6f77730a00000000406352bfc601000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d05001c657870657274730a00000000203d88792d00000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d06003873656e696f7220657870657274730a00000000203d88792d00000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d07001c6d6173746572730a00000000203d88792d00000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d08003873656e696f72206d6173746572730a00000000203d88792d00000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d0900346772616e64206d6173746572730a00000000203d88792d00000000000000000000580200008013030058020000140000000000ca9a3b0065cd1d00ca9a3b0000ca9a3b000000000065cd1d",
              "docs": [
                " Information concerning the different referendum tracks."
              ]
            }
          ],
          "error": 477,
          "index": 19
        },
        {
          "name": "Origins",
          "constants": [],
          "index": 20
        },
        {
          "name": "Whitelist",
          "storage": {
            "prefix": "Whitelist",
            "entries": [
              {
                "name": "WhitelistedCall",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 11,
                    "valueTypeId": 58
                  }
                },
                "default": "0x00",
                "docs": []
              }
            ]
          },
          "calls": 137,
          "event": 286,
          "constants": [],
          "error": 478,
          "index": 21
        },
        {
          "name": "Scheduler",
          "storage": {
            "prefix": "Scheduler",
            "entries": [
              {
                "name": "IncompleteSince",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00",
                "docs": []
              },
              {
                "name": "Agenda",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 4,
                    "valueTypeId": 479
                  }
                },
                "default": "0x00",
                "docs": [
                  " Items to be executed, indexed by the block number that they should be executed on."
                ]
              },
              {
                "name": "Lookup",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 1,
                    "valueTypeId": 140
                  }
                },
                "default": "0x00",
                "docs": [
                  " Lookup from a name to the block number and index of the task.",
                  "",
                  " For v3 -> v4 the previously unbounded identities are Blake2-256 hashed to form the v4",
                  " identities."
                ]
              }
            ]
          },
          "calls": 138,
          "event": 291,
          "constants": [
            {
              "name": "MaximumWeight",
              "typeId": 8,
              "value": "0x070040b743ba13cccccccccccccccc",
              "docs": [
                " The maximum weight that may be scheduled per block for any dispatchables."
              ]
            },
            {
              "name": "MaxScheduledPerBlock",
              "typeId": 4,
              "value": "0x00020000",
              "docs": [
                " The maximum number of scheduled calls in the queue for a single block."
              ]
            }
          ],
          "error": 483,
          "index": 22
        },
        {
          "name": "Preimage",
          "storage": {
            "prefix": "Preimage",
            "entries": [
              {
                "name": "StatusFor",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "identity"
                    ],
                    "keyTypeId": 11,
                    "valueTypeId": 484
                  }
                },
                "default": "0x00",
                "docs": [
                  " The request status of a given hash."
                ]
              },
              {
                "name": "PreimageFor",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "identity"
                    ],
                    "keyTypeId": 436,
                    "valueTypeId": 486
                  }
                },
                "default": "0x00",
                "docs": []
              }
            ]
          },
          "calls": 141,
          "event": 293,
          "constants": [],
          "error": 487,
          "index": 23
        },
        {
          "name": "Identity",
          "storage": {
            "prefix": "Identity",
            "entries": [
              {
                "name": "IdentityOf",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 0,
                    "valueTypeId": 488
                  }
                },
                "default": "0x00",
                "docs": [
                  " Information that is pertinent to identify the entity behind an account.",
                  "",
                  " TWOX-NOTE: OK ― `AccountId` is a secure hash."
                ]
              },
              {
                "name": "SuperOf",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "keyTypeId": 0,
                    "valueTypeId": 180
                  }
                },
                "default": "0x00",
                "docs": [
                  " The super-identity of an alternative \"sub\" identity together with its name, within that",
                  " context. If the account is not some other account's sub-identity, then just `None`."
                ]
              },
              {
                "name": "SubsOf",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 0,
                    "valueTypeId": 492
                  }
                },
                "default": "0x0000000000000000000000000000000000",
                "docs": [
                  " Alternative \"sub\" identities of this account.",
                  "",
                  " The first item is the deposit, the second is a vector of the accounts.",
                  "",
                  " TWOX-NOTE: OK ― `AccountId` is a secure hash."
                ]
              },
              {
                "name": "Registrars",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 494
                  }
                },
                "default": "0x00",
                "docs": [
                  " The set of registrars. Not expected to get very big as can only be added through a",
                  " special origin (likely a council motion).",
                  "",
                  " The index into this can be cast to `RegistrarIndex` to get a valid value."
                ]
              }
            ]
          },
          "calls": 142,
          "event": 294,
          "constants": [
            {
              "name": "BasicDeposit",
              "typeId": 6,
              "value": "0x00406352bfc601000000000000000000",
              "docs": [
                " The amount held on deposit for a registered identity"
              ]
            },
            {
              "name": "FieldDeposit",
              "typeId": 6,
              "value": "0x00d098d4af7100000000000000000000",
              "docs": [
                " The amount held on deposit per additional field for a registered identity."
              ]
            },
            {
              "name": "SubAccountDeposit",
              "typeId": 6,
              "value": "0x00407a10f35a00000000000000000000",
              "docs": [
                " The amount held on deposit for a registered subaccount. This should account for the fact",
                " that one storage item's value will increase by the size of an account ID, and there will",
                " be another trie item whose value is the size of an account ID plus 32 bytes."
              ]
            },
            {
              "name": "MaxSubAccounts",
              "typeId": 4,
              "value": "0x64000000",
              "docs": [
                " The maximum number of sub-accounts allowed per identified account."
              ]
            },
            {
              "name": "MaxAdditionalFields",
              "typeId": 4,
              "value": "0x64000000",
              "docs": [
                " Maximum number of additional fields that may be stored in an ID. Needed to bound the I/O",
                " required to access an identity, but can be pretty high."
              ]
            },
            {
              "name": "MaxRegistrars",
              "typeId": 4,
              "value": "0x14000000",
              "docs": [
                " Maxmimum number of registrars allowed in the system. Needed to bound the complexity",
                " of, e.g., updating judgements."
              ]
            }
          ],
          "error": 498,
          "index": 24
        },
        {
          "name": "Proxy",
          "storage": {
            "prefix": "Proxy",
            "entries": [
              {
                "name": "Proxies",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 0,
                    "valueTypeId": 499
                  }
                },
                "default": "0x0000000000000000000000000000000000",
                "docs": [
                  " The set of account proxies. Maps the account which has delegated to the accounts",
                  " which are being delegated to, together with the amount held on deposit."
                ]
              },
              {
                "name": "Announcements",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 0,
                    "valueTypeId": 503
                  }
                },
                "default": "0x0000000000000000000000000000000000",
                "docs": [
                  " The announcements made by the proxy (key)."
                ]
              }
            ]
          },
          "calls": 184,
          "event": 295,
          "constants": [
            {
              "name": "ProxyDepositBase",
              "typeId": 6,
              "value": "0x00784f2aa61c00000000000000000000",
              "docs": [
                " The base amount of currency needed to reserve for creating a proxy.",
                "",
                " This is held for an additional storage item whose value size is",
                " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."
              ]
            },
            {
              "name": "ProxyDepositFactor",
              "typeId": 6,
              "value": "0x0030d53b0a5a00000000000000000000",
              "docs": [
                " The amount of currency needed per proxy added.",
                "",
                " This is held for adding 32 bytes plus an instance of `ProxyType` more into a",
                " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take",
                " into account `32 + proxy_type.encode().len()` bytes of data."
              ]
            },
            {
              "name": "MaxProxies",
              "typeId": 4,
              "value": "0x20000000",
              "docs": [
                " The maximum amount of proxies allowed for a single account."
              ]
            },
            {
              "name": "MaxPending",
              "typeId": 4,
              "value": "0x20000000",
              "docs": [
                " The maximum amount of time-delayed announcements that are allowed to be pending."
              ]
            },
            {
              "name": "AnnouncementDepositBase",
              "typeId": 6,
              "value": "0x00784f2aa61c00000000000000000000",
              "docs": [
                " The base amount of currency needed to reserve for creating an announcement.",
                "",
                " This is held when a new storage item holding a `Balance` is created (typically 16",
                " bytes)."
              ]
            },
            {
              "name": "AnnouncementDepositFactor",
              "typeId": 6,
              "value": "0x0060aa7714b400000000000000000000",
              "docs": [
                " The amount of currency needed per announcement made.",
                "",
                " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)",
                " into a pre-existing storage value."
              ]
            }
          ],
          "error": 507,
          "index": 25
        },
        {
          "name": "Multisig",
          "storage": {
            "prefix": "Multisig",
            "entries": [
              {
                "name": "Multisigs",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat",
                      "blake2_128Concat"
                    ],
                    "keyTypeId": 508,
                    "valueTypeId": 509
                  }
                },
                "default": "0x00",
                "docs": [
                  " The set of open multisig operations."
                ]
              }
            ]
          },
          "calls": 187,
          "event": 296,
          "constants": [
            {
              "name": "DepositBase",
              "typeId": 6,
              "value": "0x00780e85edf600000000000000000000",
              "docs": [
                " The base amount of currency needed to reserve for creating a multisig execution or to",
                " store a dispatch call for later.",
                "",
                " This is held for an additional storage item whose value size is",
                " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is",
                " `32 + sizeof(AccountId)` bytes."
              ]
            },
            {
              "name": "DepositFactor",
              "typeId": 6,
              "value": "0x0000e6bd4f5700000000000000000000",
              "docs": [
                " The amount of currency needed per unit threshold when creating a multisig execution.",
                "",
                " This is held for adding 32 bytes more into a pre-existing storage value."
              ]
            },
            {
              "name": "MaxSignatories",
              "typeId": 4,
              "value": "0x64000000",
              "docs": [
                " The maximum amount of signatories allowed in the multisig."
              ]
            }
          ],
          "error": 511,
          "index": 26
        },
        {
          "name": "ElectionProviderMultiPhase",
          "storage": {
            "prefix": "ElectionProviderMultiPhase",
            "entries": [
              {
                "name": "Round",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x01000000",
                "docs": [
                  " Internal counter for the number of rounds.",
                  "",
                  " This is useful for de-duplication of transactions submitted to the pool, and general",
                  " diagnostics of the pallet.",
                  "",
                  " This is merely incremented once per every time that an upstream `elect` is called."
                ]
              },
              {
                "name": "CurrentPhase",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 300
                  }
                },
                "default": "0x00",
                "docs": [
                  " Current phase."
                ]
              },
              {
                "name": "QueuedSolution",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 512
                  }
                },
                "default": "0x00",
                "docs": [
                  " Current best solution, signed or unsigned, queued to be returned upon `elect`."
                ]
              },
              {
                "name": "Snapshot",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 514
                  }
                },
                "default": "0x00",
                "docs": [
                  " Snapshot data of the round.",
                  "",
                  " This is created at the beginning of the signed phase and cleared upon calling `elect`."
                ]
              },
              {
                "name": "DesiredTargets",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00",
                "docs": [
                  " Desired number of targets to elect for this round.",
                  "",
                  " Only exists when [`Snapshot`] is present."
                ]
              },
              {
                "name": "SnapshotMetadata",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 244
                  }
                },
                "default": "0x00",
                "docs": [
                  " The metadata of the [`RoundSnapshot`]",
                  "",
                  " Only exists when [`Snapshot`] is present."
                ]
              },
              {
                "name": "SignedSubmissionNextIndex",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " The next index to be assigned to an incoming signed submission.",
                  "",
                  " Every accepted submission is assigned a unique index; that index is bound to that particular",
                  " submission for the duration of the election. On election finalization, the next index is",
                  " reset to 0.",
                  "",
                  " We can't just use `SignedSubmissionIndices.len()`, because that's a bounded set; past its",
                  " capacity, it will simply saturate. We can't just iterate over `SignedSubmissionsMap`,",
                  " because iteration is slow. Instead, we store the value here."
                ]
              },
              {
                "name": "SignedSubmissionIndices",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 517
                  }
                },
                "default": "0x00",
                "docs": [
                  " A sorted, bounded vector of `(score, block_number, index)`, where each `index` points to a",
                  " value in `SignedSubmissions`.",
                  "",
                  " We never need to process more than a single signed submission at a time. Signed submissions",
                  " can be quite large, so we're willing to pay the cost of multiple database accesses to access",
                  " them one at a time instead of reading and decoding all of them at once."
                ]
              },
              {
                "name": "SignedSubmissionsMap",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 4,
                    "valueTypeId": 520
                  }
                },
                "default": "0x00",
                "docs": [
                  " Unchecked, signed solutions.",
                  "",
                  " Together with `SubmissionIndices`, this stores a bounded set of `SignedSubmissions` while",
                  " allowing us to keep only a single one in memory at a time.",
                  "",
                  " Twox note: the key of the map is an auto-incrementing index which users cannot inspect or",
                  " affect; we shouldn't need a cryptographically secure hasher."
                ]
              },
              {
                "name": "MinimumUntrustedScore",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 243
                  }
                },
                "default": "0x00",
                "docs": [
                  " The minimum score that each 'untrusted' solution must attain in order to be considered",
                  " feasible.",
                  "",
                  " Can be set via `set_minimum_untrusted_score`."
                ]
              }
            ]
          },
          "calls": 190,
          "event": 297,
          "constants": [
            {
              "name": "UnsignedPhase",
              "typeId": 4,
              "value": "0x58020000",
              "docs": [
                " Duration of the unsigned phase."
              ]
            },
            {
              "name": "SignedPhase",
              "typeId": 4,
              "value": "0x58020000",
              "docs": [
                " Duration of the signed phase."
              ]
            },
            {
              "name": "BetterSignedThreshold",
              "typeId": 49,
              "value": "0x00000000",
              "docs": [
                " The minimum amount of improvement to the solution score that defines a solution as",
                " \"better\" in the Signed phase."
              ]
            },
            {
              "name": "BetterUnsignedThreshold",
              "typeId": 49,
              "value": "0xa0860100",
              "docs": [
                " The minimum amount of improvement to the solution score that defines a solution as",
                " \"better\" in the Unsigned phase."
              ]
            },
            {
              "name": "OffchainRepeat",
              "typeId": 4,
              "value": "0x25000000",
              "docs": [
                " The repeat threshold of the offchain worker.",
                "",
                " For example, if it is 5, that means that at least 5 blocks will elapse between attempts",
                " to submit the worker's solution."
              ]
            },
            {
              "name": "MinerTxPriority",
              "typeId": 10,
              "value": "0xfeffffffffffff7f",
              "docs": [
                " The priority of the unsigned transaction submitted in the unsigned-phase"
              ]
            },
            {
              "name": "SignedMaxSubmissions",
              "typeId": 4,
              "value": "0x0a000000",
              "docs": [
                " Maximum number of signed submissions that can be queued.",
                "",
                " It is best to avoid adjusting this during an election, as it impacts downstream data",
                " structures. In particular, `SignedSubmissionIndices<T>` is bounded on this value. If you",
                " update this value during an election, you _must_ ensure that",
                " `SignedSubmissionIndices.len()` is less than or equal to the new value. Otherwise,",
                " attempts to submit new solutions may cause a runtime panic."
              ]
            },
            {
              "name": "SignedMaxWeight",
              "typeId": 8,
              "value": "0x0728545c1c3313ec51b81e85eb5138",
              "docs": [
                " Maximum weight of a signed solution.",
                "",
                " If [`Config::MinerConfig`] is being implemented to submit signed solutions (outside of",
                " this pallet), then [`MinerConfig::solution_weight`] is used to compare against",
                " this value."
              ]
            },
            {
              "name": "SignedMaxRefunds",
              "typeId": 4,
              "value": "0x03000000",
              "docs": [
                " The maximum amount of unchecked solutions to refund the call fee for."
              ]
            },
            {
              "name": "SignedRewardBase",
              "typeId": 6,
              "value": "0x00203d88792d00000000000000000000",
              "docs": [
                " Base reward for a signed solution"
              ]
            },
            {
              "name": "SignedDepositBase",
              "typeId": 6,
              "value": "0x00203d88792d00000000000000000000",
              "docs": [
                " Base deposit for a signed solution."
              ]
            },
            {
              "name": "SignedDepositByte",
              "typeId": 6,
              "value": "0x0088526a740000000000000000000000",
              "docs": [
                " Per-byte deposit for a signed solution."
              ]
            },
            {
              "name": "SignedDepositWeight",
              "typeId": 6,
              "value": "0x00000000000000000000000000000000",
              "docs": [
                " Per-weight deposit for a signed solution."
              ]
            },
            {
              "name": "MaxElectingVoters",
              "typeId": 4,
              "value": "0x409c0000",
              "docs": [
                " The maximum number of electing voters to put in the snapshot. At the moment, snapshots",
                " are only over a single block, but once multi-block elections are introduced they will",
                " take place over multiple blocks."
              ]
            },
            {
              "name": "MaxElectableTargets",
              "typeId": 61,
              "value": "0x1027",
              "docs": [
                " The maximum number of electable targets to put in the snapshot."
              ]
            },
            {
              "name": "MaxWinners",
              "typeId": 4,
              "value": "0xe8030000",
              "docs": [
                " The maximum number of winners that can be elected by this `ElectionProvider`",
                " implementation.",
                "",
                " Note: This must always be greater or equal to `T::DataProvider::desired_targets()`."
              ]
            },
            {
              "name": "MinerMaxLength",
              "typeId": 4,
              "value": "0x00001200",
              "docs": []
            },
            {
              "name": "MinerMaxWeight",
              "typeId": 8,
              "value": "0x0728545c1c3313ec51b81e85eb5138",
              "docs": []
            },
            {
              "name": "MinerMaxVotesPerVoter",
              "typeId": 4,
              "value": "0x10000000",
              "docs": []
            },
            {
              "name": "MinerMaxWinners",
              "typeId": 4,
              "value": "0xe8030000",
              "docs": []
            }
          ],
          "error": 521,
          "index": 27
        },
        {
          "name": "Offences",
          "storage": {
            "prefix": "Offences",
            "entries": [
              {
                "name": "Reports",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 11,
                    "valueTypeId": 522
                  }
                },
                "default": "0x00",
                "docs": [
                  " The primary structure that holds all offence records keyed by report identifiers."
                ]
              },
              {
                "name": "ConcurrentReportsIndex",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat",
                      "twox64Concat"
                    ],
                    "keyTypeId": 523,
                    "valueTypeId": 341
                  }
                },
                "default": "0x00",
                "docs": [
                  " A vector of reports of the same kind that happened at the same time slot."
                ]
              },
              {
                "name": "ReportsByKindIndex",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 162,
                    "valueTypeId": 12
                  }
                },
                "default": "0x00",
                "docs": [
                  " Enumerates all reports of a kind along with the time they happened.",
                  "",
                  " All reports are sorted by the time of offence.",
                  "",
                  " Note that the actual type of this mapping is `Vec<u8>`, this is because values of",
                  " different types are not supported at the moment so we are doing the manual serialization."
                ]
              }
            ]
          },
          "event": 302,
          "constants": [],
          "index": 28
        },
        {
          "name": "Bounties",
          "storage": {
            "prefix": "Bounties",
            "entries": [
              {
                "name": "BountyCount",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " Number of bounty proposals that have been made."
                ]
              },
              {
                "name": "Bounties",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 4,
                    "valueTypeId": 524
                  }
                },
                "default": "0x00",
                "docs": [
                  " Bounties that have been made."
                ]
              },
              {
                "name": "BountyDescriptions",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 4,
                    "valueTypeId": 526
                  }
                },
                "default": "0x00",
                "docs": [
                  " The description of each bounty."
                ]
              },
              {
                "name": "BountyApprovals",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 431
                  }
                },
                "default": "0x00",
                "docs": [
                  " Bounty indices that have been approved but not yet funded."
                ]
              }
            ]
          },
          "calls": 252,
          "event": 303,
          "constants": [
            {
              "name": "BountyDepositBase",
              "typeId": 6,
              "value": "0x00203d88792d00000000000000000000",
              "docs": [
                " The amount held on deposit for placing a bounty proposal."
              ]
            },
            {
              "name": "BountyDepositPayoutDelay",
              "typeId": 4,
              "value": "0x80700000",
              "docs": [
                " The delay period for which a bounty beneficiary need to wait before claim the payout."
              ]
            },
            {
              "name": "BountyUpdatePeriod",
              "typeId": 4,
              "value": "0x00270600",
              "docs": [
                " Bounty duration in blocks."
              ]
            },
            {
              "name": "CuratorDepositMultiplier",
              "typeId": 432,
              "value": "0x20a10700",
              "docs": [
                " The curator deposit is calculated as a percentage of the curator fee.",
                "",
                " This deposit has optional upper and lower bounds with `CuratorDepositMax` and",
                " `CuratorDepositMin`."
              ]
            },
            {
              "name": "CuratorDepositMax",
              "typeId": 433,
              "value": "0x010080e03779c311000000000000000000",
              "docs": [
                " Maximum amount of funds that should be placed in a deposit for making a proposal."
              ]
            },
            {
              "name": "CuratorDepositMin",
              "typeId": 433,
              "value": "0x0100203d88792d00000000000000000000",
              "docs": [
                " Minimum amount of funds that should be placed in a deposit for making a proposal."
              ]
            },
            {
              "name": "BountyValueMinimum",
              "typeId": 6,
              "value": "0x00a031a95fe300000000000000000000",
              "docs": [
                " Minimum value for a bounty."
              ]
            },
            {
              "name": "DataDepositPerByte",
              "typeId": 6,
              "value": "0x0088526a740000000000000000000000",
              "docs": [
                " The amount held on deposit per byte within the tip report reason or bounty description."
              ]
            },
            {
              "name": "MaximumReasonLength",
              "typeId": 4,
              "value": "0x2c010000",
              "docs": [
                " Maximum acceptable reason length.",
                "",
                " Benchmarks depend on this value, be sure to update weights file when changing this value"
              ]
            }
          ],
          "error": 527,
          "index": 29
        },
        {
          "name": "ChildBounties",
          "storage": {
            "prefix": "ChildBounties",
            "entries": [
              {
                "name": "ChildBountyCount",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " Number of total child bounties."
                ]
              },
              {
                "name": "ParentChildBounties",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 4,
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " Number of child bounties per parent bounty.",
                  " Map of parent bounty index to number of child bounties."
                ]
              },
              {
                "name": "ChildBounties",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat",
                      "twox64Concat"
                    ],
                    "keyTypeId": 140,
                    "valueTypeId": 528
                  }
                },
                "default": "0x00",
                "docs": [
                  " Child bounties that have been added."
                ]
              },
              {
                "name": "ChildBountyDescriptions",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 4,
                    "valueTypeId": 526
                  }
                },
                "default": "0x00",
                "docs": [
                  " The description of each child-bounty."
                ]
              },
              {
                "name": "ChildrenCuratorFees",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 4,
                    "valueTypeId": 6
                  }
                },
                "default": "0x00000000000000000000000000000000",
                "docs": [
                  " The cumulative child-bounty curator fee for each parent bounty."
                ]
              }
            ]
          },
          "calls": 253,
          "event": 304,
          "constants": [
            {
              "name": "MaxActiveChildBountyCount",
              "typeId": 4,
              "value": "0x05000000",
              "docs": [
                " Maximum number of child bounties that can be added to a parent bounty."
              ]
            },
            {
              "name": "ChildBountyValueMinimum",
              "typeId": 6,
              "value": "0x00203d88792d00000000000000000000",
              "docs": [
                " Minimum value for a child-bounty."
              ]
            }
          ],
          "error": 530,
          "index": 30
        },
        {
          "name": "NominationPools",
          "storage": {
            "prefix": "NominationPools",
            "entries": [
              {
                "name": "MinJoinBond",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 6
                  }
                },
                "default": "0x00000000000000000000000000000000",
                "docs": [
                  " Minimum amount to bond to join a pool."
                ]
              },
              {
                "name": "MinCreateBond",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 6
                  }
                },
                "default": "0x00000000000000000000000000000000",
                "docs": [
                  " Minimum bond required to create a pool.",
                  "",
                  " This is the amount that the depositor must put as their initial stake in the pool, as an",
                  " indication of \"skin in the game\".",
                  "",
                  " This is the value that will always exist in the staking ledger of the pool bonded account",
                  " while all other accounts leave."
                ]
              },
              {
                "name": "MaxPools",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00",
                "docs": [
                  " Maximum number of nomination pools that can exist. If `None`, then an unbounded number of",
                  " pools can exist."
                ]
              },
              {
                "name": "MaxPoolMembers",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00",
                "docs": [
                  " Maximum number of members that can exist in the system. If `None`, then the count",
                  " members are not bound on a system wide basis."
                ]
              },
              {
                "name": "MaxPoolMembersPerPool",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00",
                "docs": [
                  " Maximum number of members that may belong to pool. If `None`, then the count of",
                  " members is not bound on a per pool basis."
                ]
              },
              {
                "name": "GlobalMaxCommission",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 49
                  }
                },
                "default": "0x00",
                "docs": [
                  " The maximum commission that can be charged by a pool. Used on commission payouts to bound",
                  " pool commissions that are > `GlobalMaxCommission`, necessary if a future",
                  " `GlobalMaxCommission` is lower than some current pool commissions."
                ]
              },
              {
                "name": "PoolMembers",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 0,
                    "valueTypeId": 531
                  }
                },
                "default": "0x00",
                "docs": [
                  " Active members.",
                  "",
                  " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
                ]
              },
              {
                "name": "CounterForPoolMembers",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  "Counter for the related counted storage map"
                ]
              },
              {
                "name": "BondedPools",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 4,
                    "valueTypeId": 534
                  }
                },
                "default": "0x00",
                "docs": [
                  " Storage for bonded pools."
                ]
              },
              {
                "name": "CounterForBondedPools",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  "Counter for the related counted storage map"
                ]
              },
              {
                "name": "RewardPools",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 4,
                    "valueTypeId": 539
                  }
                },
                "default": "0x00",
                "docs": [
                  " Reward pools. This is where there rewards for each pool accumulate. When a members payout is",
                  " claimed, the balance comes out fo the reward pool. Keyed by the bonded pools account."
                ]
              },
              {
                "name": "CounterForRewardPools",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  "Counter for the related counted storage map"
                ]
              },
              {
                "name": "SubPoolsStorage",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 4,
                    "valueTypeId": 540
                  }
                },
                "default": "0x00",
                "docs": [
                  " Groups of unbonding pools. Each group of unbonding pools belongs to a",
                  " bonded pool, hence the name sub-pools. Keyed by the bonded pools account."
                ]
              },
              {
                "name": "CounterForSubPoolsStorage",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  "Counter for the related counted storage map"
                ]
              },
              {
                "name": "Metadata",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 4,
                    "valueTypeId": 546
                  }
                },
                "default": "0x00",
                "docs": [
                  " Metadata for the pool."
                ]
              },
              {
                "name": "CounterForMetadata",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  "Counter for the related counted storage map"
                ]
              },
              {
                "name": "LastPoolId",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " Ever increasing number of all pools created so far."
                ]
              },
              {
                "name": "ReversePoolIdLookup",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 0,
                    "valueTypeId": 4
                  }
                },
                "default": "0x00",
                "docs": [
                  " A reverse lookup from the pool's account id to its id.",
                  "",
                  " This is only used for slashing. In all other instances, the pool id is used, and the",
                  " accounts are deterministically derived from it."
                ]
              },
              {
                "name": "CounterForReversePoolIdLookup",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  "Counter for the related counted storage map"
                ]
              },
              {
                "name": "ClaimPermissions",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "keyTypeId": 0,
                    "valueTypeId": 261
                  }
                },
                "default": "0x00",
                "docs": [
                  " Map from a pool member account to their opted claim permission."
                ]
              }
            ]
          },
          "calls": 254,
          "event": 305,
          "constants": [
            {
              "name": "PalletId",
              "typeId": 434,
              "value": "0x70792f6e6f706c73",
              "docs": [
                " The nomination pool's pallet id."
              ]
            },
            {
              "name": "MaxPointsToBalance",
              "typeId": 2,
              "value": "0x0a",
              "docs": [
                " The maximum pool points-to-balance ratio that an `open` pool can have.",
                "",
                " This is important in the event slashing takes place and the pool's points-to-balance",
                " ratio becomes disproportional.",
                "",
                " Moreover, this relates to the `RewardCounter` type as well, as the arithmetic operations",
                " are a function of number of points, and by setting this value to e.g. 10, you ensure",
                " that the total number of points in the system are at most 10 times the total_issuance of",
                " the chain, in the absolute worse case.",
                "",
                " For a value of 10, the threshold would be a pool points-to-balance ratio of 10:1.",
                " Such a scenario would also be the equivalent of the pool being 90% slashed."
              ]
            }
          ],
          "error": 547,
          "index": 31
        },
        {
          "name": "GearProgram",
          "storage": {
            "prefix": "GearProgram",
            "entries": [
              {
                "name": "CodeStorage",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "identity"
                    ],
                    "keyTypeId": 266,
                    "valueTypeId": 549
                  }
                },
                "default": "0x00",
                "docs": []
              },
              {
                "name": "CodeLenStorage",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "identity"
                    ],
                    "keyTypeId": 266,
                    "valueTypeId": 4
                  }
                },
                "default": "0x00",
                "docs": []
              },
              {
                "name": "OriginalCodeStorage",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "identity"
                    ],
                    "keyTypeId": 266,
                    "valueTypeId": 12
                  }
                },
                "default": "0x00",
                "docs": []
              },
              {
                "name": "MetadataStorage",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "identity"
                    ],
                    "keyTypeId": 266,
                    "valueTypeId": 553
                  }
                },
                "default": "0x00",
                "docs": []
              },
              {
                "name": "ProgramStorage",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "identity"
                    ],
                    "keyTypeId": 267,
                    "valueTypeId": 554
                  }
                },
                "default": "0x00",
                "docs": []
              },
              {
                "name": "MemoryPageStorage",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "identity",
                      "identity"
                    ],
                    "keyTypeId": 563,
                    "valueTypeId": 276
                  }
                },
                "default": "0x00",
                "docs": []
              },
              {
                "name": "WaitingInitStorage",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "identity"
                    ],
                    "keyTypeId": 267,
                    "valueTypeId": 564
                  }
                },
                "default": "0x00",
                "docs": []
              },
              {
                "name": "PausedProgramStorage",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "identity"
                    ],
                    "keyTypeId": 267,
                    "valueTypeId": 565
                  }
                },
                "default": "0x00",
                "docs": []
              },
              {
                "name": "ResumeSessionsNonce",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 6
                  }
                },
                "default": "0x00",
                "docs": []
              },
              {
                "name": "ResumeSessions",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "identity"
                    ],
                    "keyTypeId": 6,
                    "valueTypeId": 566
                  }
                },
                "default": "0x00",
                "docs": []
              },
              {
                "name": "SessionMemoryPages",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "identity"
                    ],
                    "keyTypeId": 6,
                    "valueTypeId": 273
                  }
                },
                "default": "0x00",
                "docs": []
              }
            ]
          },
          "constants": [],
          "error": 567,
          "index": 100
        },
        {
          "name": "GearMessenger",
          "storage": {
            "prefix": "GearMessenger",
            "entries": [
              {
                "name": "Dequeued",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00",
                "docs": []
              },
              {
                "name": "Dispatches",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "identity"
                    ],
                    "keyTypeId": 268,
                    "valueTypeId": 568
                  }
                },
                "default": "0x00",
                "docs": []
              },
              {
                "name": "CounterForDispatches",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  "Counter for the related counted storage map"
                ]
              },
              {
                "name": "Head",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 268
                  }
                },
                "default": "0x00",
                "docs": []
              },
              {
                "name": "Mailbox",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "identity",
                      "identity"
                    ],
                    "keyTypeId": 584,
                    "valueTypeId": 585
                  }
                },
                "default": "0x00",
                "docs": []
              },
              {
                "name": "QueueProcessing",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 52
                  }
                },
                "default": "0x00",
                "docs": []
              },
              {
                "name": "Sent",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00",
                "docs": []
              },
              {
                "name": "Tail",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 268
                  }
                },
                "default": "0x00",
                "docs": []
              },
              {
                "name": "Waitlist",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "identity",
                      "identity"
                    ],
                    "keyTypeId": 588,
                    "valueTypeId": 589
                  }
                },
                "default": "0x00",
                "docs": []
              },
              {
                "name": "DispatchStash",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "identity"
                    ],
                    "keyTypeId": 268,
                    "valueTypeId": 589
                  }
                },
                "default": "0x00",
                "docs": []
              }
            ]
          },
          "constants": [],
          "error": 590,
          "index": 101
        },
        {
          "name": "GearScheduler",
          "storage": {
            "prefix": "GearScheduler",
            "entries": [
              {
                "name": "FirstIncompleteTasksBlock",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00",
                "docs": []
              },
              {
                "name": "TaskPool",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "identity",
                      "identity"
                    ],
                    "keyTypeId": 591,
                    "valueTypeId": 58
                  }
                },
                "default": "0x00",
                "docs": []
              }
            ]
          },
          "constants": [
            {
              "name": "ReserveThreshold",
              "typeId": 4,
              "value": "0x01000000",
              "docs": [
                " Amount of blocks for extra delay used to secure from outdated tasks."
              ]
            },
            {
              "name": "WaitlistCost",
              "typeId": 10,
              "value": "0x6400000000000000",
              "docs": [
                " Cost for storing in waitlist per block."
              ]
            },
            {
              "name": "MailboxCost",
              "typeId": 10,
              "value": "0x6400000000000000",
              "docs": [
                " Cost for storing in mailbox per block."
              ]
            },
            {
              "name": "ReservationCost",
              "typeId": 10,
              "value": "0x6400000000000000",
              "docs": [
                " Cost for reservation holding."
              ]
            },
            {
              "name": "DispatchHoldCost",
              "typeId": 10,
              "value": "0x6400000000000000",
              "docs": [
                " Cost for reservation holding."
              ]
            }
          ],
          "error": 593,
          "index": 102
        },
        {
          "name": "GearGas",
          "storage": {
            "prefix": "GearGas",
            "entries": [
              {
                "name": "TotalIssuance",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 10
                  }
                },
                "default": "0x00",
                "docs": []
              },
              {
                "name": "GasNodes",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "identity"
                    ],
                    "keyTypeId": 328,
                    "valueTypeId": 594
                  }
                },
                "default": "0x00",
                "docs": []
              },
              {
                "name": "Allowance",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 10
                  }
                },
                "default": "0x00cc7b9fae000000",
                "docs": []
              }
            ]
          },
          "constants": [
            {
              "name": "BlockGasLimit",
              "typeId": 10,
              "value": "0x00cc7b9fae000000",
              "docs": [
                " The maximum amount of gas that can be used within a single block."
              ]
            }
          ],
          "error": 599,
          "index": 103
        },
        {
          "name": "Gear",
          "storage": {
            "prefix": "Gear",
            "entries": [
              {
                "name": "ExecuteInherent",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 52
                  }
                },
                "default": "0x01",
                "docs": [
                  " A flag indicating whether the message queue should be processed at the end of a block",
                  "",
                  " If not set, the inherent extrinsic that processes the queue will keep throwing an error",
                  " thereby making the block builder exclude it from the block."
                ]
              },
              {
                "name": "BlockNumber",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " The current block number being processed.",
                  "",
                  " It shows block number in which queue is processed.",
                  " May be less than system pallet block number if panic occurred previously."
                ]
              },
              {
                "name": "GearRunInBlock",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 58
                  }
                },
                "default": "0x00",
                "docs": [
                  " A guard to prohibit all but the first execution of `pallet_gear::run()` call in a block.",
                  "",
                  " Set to `Some(())` if the extrinsic is executed for the first time in a block.",
                  " All subsequent attempts would fail with `Error::<T>::GearRunAlreadyInBlock` error.",
                  " Set back to `None` in the `on_finalize()` hook at the end of the block."
                ]
              }
            ]
          },
          "calls": 265,
          "event": 306,
          "constants": [
            {
              "name": "Schedule",
              "typeId": 600,
              "value": "0x01204e000000010000000400008000000000020010000000010000200000002000000000008000000008000a000000d0000000132d00003c290000f84b00006d460000901c0000611800003a0c00001916000024290000560100004b110000494b00000509000000000000f5020000700700000307000048060000dd0a0000c137000050190000aa17000021180000261400001f040000b8020000280e000039080000f20200001703000038030000890300005f030000e102000061010000a9000000810d0000ed070000170d0000c00700000b0d0000e3070000a80d0000db070000c00d0000460800004c0d000031070000320d00002b070000d00c000090070000ba0c0000fe070000650d0000bd0700006d0800006a0300000008000053030000420c0000c3070000181000006d0f0000f4130000221100001a470000113900007815000080120000b3080000c3030000310800001e0300002108000019030000c2060000050300000c070000100300006507000004030000970600006d0300009b0600005e030000e2a5b201007a6f160000ca08300000ba8e9400007289790000b6d84a00008a4e4100003a03420000567601000016d9480000f2614100001e904000005a56410000865440000032fb710000810200966a4600000ad7400000164f8300003285c0010032c3c40000190400bec1c8000011040092e7460000fe34780000a1050092e3a300006e52a60000fa9bca0000210400e666b100005adbf70400c60ad003004e35a502007add190000a6d34301008a1d6f00001acc030400950600b678e50400950600c5090076894100004e674100005e7c3805000000fefb5200005902000a56d200009aeed800003e496200005d02004a89570000e90400e2803f0000da70a505002a71e80200aa02230300b2ab550300ea7aea02001ebc77000082650201007501002922007a390801006d01002d22005ab9e40600220955080086146602003ee51207004eb31b0800a2ab5b020082a55802004244a818009101003af73800000000c52500410300850a00a2a19d43ed3c0a7b030000",
              "docs": [
                " Cost schedule and limits."
              ]
            },
            {
              "name": "OutgoingLimit",
              "typeId": 4,
              "value": "0x00040000",
              "docs": [
                " The maximum amount of messages that can be produced in single run."
              ]
            },
            {
              "name": "MailboxThreshold",
              "typeId": 10,
              "value": "0xb80b000000000000",
              "docs": [
                " The minimal gas amount for message to be inserted in mailbox.",
                "",
                " This gas will be consuming as rent for storing and message will be available",
                " for reply or claim, once gas ends, message removes.",
                "",
                " Messages with gas limit less than that minimum will not be added in mailbox,",
                " but will be seen in events."
              ]
            },
            {
              "name": "ReservationsLimit",
              "typeId": 10,
              "value": "0x0001000000000000",
              "docs": [
                " Amount of reservations can exist for 1 program."
              ]
            },
            {
              "name": "ProgramRentFreePeriod",
              "typeId": 4,
              "value": "0x00d44900",
              "docs": [
                " The free of charge period of rent."
              ]
            },
            {
              "name": "ProgramResumeMinimalRentPeriod",
              "typeId": 4,
              "value": "0x004e0c00",
              "docs": [
                " The minimal amount of blocks to resume."
              ]
            },
            {
              "name": "ProgramRentCostPerBlock",
              "typeId": 6,
              "value": "0x40597307000000000000000000000000",
              "docs": [
                " The program rent cost per block."
              ]
            },
            {
              "name": "ProgramResumeSessionDuration",
              "typeId": 4,
              "value": "0xb0040000",
              "docs": [
                " The amount of blocks for processing resume session."
              ]
            },
            {
              "name": "ProgramRentEnabled",
              "typeId": 52,
              "value": "0x00",
              "docs": [
                " The flag determines if program rent mechanism enabled."
              ]
            },
            {
              "name": "ProgramRentDisabledDelta",
              "typeId": 4,
              "value": "0x80130300",
              "docs": [
                " The constant defines value that is added if the program",
                " rent is disabled."
              ]
            }
          ],
          "error": 605,
          "index": 104
        },
        {
          "name": "GearPayment",
          "constants": [],
          "index": 105
        },
        {
          "name": "StakingRewards",
          "storage": {
            "prefix": "StakingRewards",
            "entries": [
              {
                "name": "TargetInflation",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 606
                  }
                },
                "default": "0x0000000000000000",
                "docs": [
                  " Target inflation (at ideal stake)"
                ]
              },
              {
                "name": "IdealStakingRatio",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 606
                  }
                },
                "default": "0x0000000000000000",
                "docs": [
                  " Ideal staking ratio"
                ]
              },
              {
                "name": "NonStakeableShare",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 606
                  }
                },
                "default": "0x0000000000000000",
                "docs": [
                  " The current share of issued tokens that cannot be staked (e.g. being vested)",
                  " This value is guaranteed to remain unchanged for the first year until vesting kicks in.",
                  " Subsequently, the non-stakeable share should be calculated based on the vesting balances."
                ]
              },
              {
                "name": "FilteredAccounts",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 607
                  }
                },
                "default": "0x00",
                "docs": [
                  " List of accounts whose locked balance (due to incomplete vesting) should be excluded from",
                  " the total stakeable quantity.",
                  " During the 1st year the non-stakeable amount is accounted for as a fixed fraction of TTS."
                ]
              }
            ]
          },
          "calls": 278,
          "event": 338,
          "constants": [
            {
              "name": "PalletId",
              "typeId": 434,
              "value": "0x70792f7374727764",
              "docs": [
                " The staking rewards' pallet id, used for deriving its sovereign account ID."
              ]
            },
            {
              "name": "MillisecondsPerYear",
              "typeId": 10,
              "value": "0x00c3fa5807000000",
              "docs": [
                " Milliseconds per year to calculate inflation."
              ]
            },
            {
              "name": "MinInflation",
              "typeId": 606,
              "value": "0x0000c16ff2862300",
              "docs": [
                " Minimum annual inflation."
              ]
            },
            {
              "name": "MaxROI",
              "typeId": 606,
              "value": "0x00009e1869d02904",
              "docs": [
                " ROI cap."
              ]
            },
            {
              "name": "Falloff",
              "typeId": 606,
              "value": "0x000082dfe40d4700",
              "docs": [
                " Exponential decay (fall-off) parameter."
              ]
            }
          ],
          "error": 608,
          "index": 106
        },
        {
          "name": "GearVoucher",
          "calls": 279,
          "event": 339,
          "constants": [
            {
              "name": "PalletId",
              "typeId": 434,
              "value": "0x70792f766f756368",
              "docs": [
                " The pallet id, used for deriving its sovereign account ID."
              ]
            }
          ],
          "error": 609,
          "index": 107
        },
        {
          "name": "GearBank",
          "storage": {
            "prefix": "GearBank",
            "entries": [
              {
                "name": "Bank",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "identity"
                    ],
                    "keyTypeId": 0,
                    "valueTypeId": 610
                  }
                },
                "default": "0x00",
                "docs": []
              },
              {
                "name": "UnusedValue",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "valueTypeId": 6
                  }
                },
                "default": "0x00000000000000000000000000000000",
                "docs": []
              }
            ]
          },
          "constants": [
            {
              "name": "BankAddress",
              "typeId": 0,
              "value": "0x6765617262616e6b6765617262616e6b6765617262616e6b6765617262616e6b",
              "docs": [
                " Bank account address, that will keep all reserved funds."
              ]
            },
            {
              "name": "GasMultiplier",
              "typeId": 595,
              "value": "0x0019000000000000000000000000000000",
              "docs": [
                " Gas price converter."
              ]
            }
          ],
          "error": 611,
          "index": 108
        }
      ],
      "extrinsic": {
        "typeId": 612,
        "version": 4,
        "signedExtensions": [
          {
            "ident": "StakingBlackList",
            "typeId": 617,
            "additionalSigned": 58
          },
          {
            "ident": "CheckNonZeroSender",
            "typeId": 618,
            "additionalSigned": 58
          },
          {
            "ident": "CheckSpecVersion",
            "typeId": 619,
            "additionalSigned": 4
          },
          {
            "ident": "CheckTxVersion",
            "typeId": 620,
            "additionalSigned": 4
          },
          {
            "ident": "CheckGenesis",
            "typeId": 621,
            "additionalSigned": 11
          },
          {
            "ident": "CheckMortality",
            "typeId": 622,
            "additionalSigned": 11
          },
          {
            "ident": "CheckNonce",
            "typeId": 624,
            "additionalSigned": 58
          },
          {
            "ident": "CheckWeight",
            "typeId": 625,
            "additionalSigned": 58
          },
          {
            "ident": "ChargeTransactionPayment",
            "typeId": 626,
            "additionalSigned": 58
          }
        ]
      },
      "runtimeType": 627
    }
  }
}