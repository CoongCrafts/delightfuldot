{
  "magicNumber": 1635018093,
  "metadataVersioned": {
    "tag": "V14",
    "value": {
      "types": [
        {
          "id": 0,
          "path": [
            "account",
            "AccountId20"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 1,
                  "typeName": "[u8; 20]",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 1,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 20,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 2,
          "path": [],
          "params": [],
          "type": {
            "tag": "Primitive",
            "value": {
              "kind": "u8"
            }
          },
          "docs": []
        },
        {
          "id": 3,
          "path": [
            "frame_system",
            "AccountInfo"
          ],
          "params": [
            {
              "name": "Index",
              "typeId": 4
            },
            {
              "name": "AccountData",
              "typeId": 5
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "nonce",
                  "typeId": 4,
                  "typeName": "Index",
                  "docs": []
                },
                {
                  "name": "consumers",
                  "typeId": 4,
                  "typeName": "RefCount",
                  "docs": []
                },
                {
                  "name": "providers",
                  "typeId": 4,
                  "typeName": "RefCount",
                  "docs": []
                },
                {
                  "name": "sufficients",
                  "typeId": 4,
                  "typeName": "RefCount",
                  "docs": []
                },
                {
                  "name": "data",
                  "typeId": 5,
                  "typeName": "AccountData",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 4,
          "path": [],
          "params": [],
          "type": {
            "tag": "Primitive",
            "value": {
              "kind": "u32"
            }
          },
          "docs": []
        },
        {
          "id": 5,
          "path": [
            "pallet_balances",
            "types",
            "AccountData"
          ],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "free",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "reserved",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "frozen",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "flags",
                  "typeId": 7,
                  "typeName": "ExtraFlags",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 6,
          "path": [],
          "params": [],
          "type": {
            "tag": "Primitive",
            "value": {
              "kind": "u128"
            }
          },
          "docs": []
        },
        {
          "id": 7,
          "path": [
            "pallet_balances",
            "types",
            "ExtraFlags"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 6,
                  "typeName": "u128",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 8,
          "path": [
            "frame_support",
            "dispatch",
            "PerDispatchClass"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 9
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "normal",
                  "typeId": 9,
                  "typeName": "T",
                  "docs": []
                },
                {
                  "name": "operational",
                  "typeId": 9,
                  "typeName": "T",
                  "docs": []
                },
                {
                  "name": "mandatory",
                  "typeId": 9,
                  "typeName": "T",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 9,
          "path": [
            "sp_weights",
            "weight_v2",
            "Weight"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "ref_time",
                  "typeId": 10,
                  "typeName": "u64",
                  "docs": []
                },
                {
                  "name": "proof_size",
                  "typeId": 10,
                  "typeName": "u64",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 10,
          "path": [],
          "params": [],
          "type": {
            "tag": "Compact",
            "value": {
              "typeParam": 11
            }
          },
          "docs": []
        },
        {
          "id": 11,
          "path": [],
          "params": [],
          "type": {
            "tag": "Primitive",
            "value": {
              "kind": "u64"
            }
          },
          "docs": []
        },
        {
          "id": 12,
          "path": [
            "primitive_types",
            "H256"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 13,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 13,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 32,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 14,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 15,
          "path": [
            "sp_runtime",
            "generic",
            "digest",
            "Digest"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "logs",
                  "typeId": 16,
                  "typeName": "Vec<DigestItem>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 16,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 17
            }
          },
          "docs": []
        },
        {
          "id": 17,
          "path": [
            "sp_runtime",
            "generic",
            "digest",
            "DigestItem"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "PreRuntime",
                  "fields": [
                    {
                      "typeId": 18,
                      "typeName": "ConsensusEngineId",
                      "docs": []
                    },
                    {
                      "typeId": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "Consensus",
                  "fields": [
                    {
                      "typeId": 18,
                      "typeName": "ConsensusEngineId",
                      "docs": []
                    },
                    {
                      "typeId": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Seal",
                  "fields": [
                    {
                      "typeId": 18,
                      "typeName": "ConsensusEngineId",
                      "docs": []
                    },
                    {
                      "typeId": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Other",
                  "fields": [
                    {
                      "typeId": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "RuntimeEnvironmentUpdated",
                  "fields": [],
                  "index": 8,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 18,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 4,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 19,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 20
            }
          },
          "docs": []
        },
        {
          "id": 20,
          "path": [
            "frame_system",
            "EventRecord"
          ],
          "params": [
            {
              "name": "E",
              "typeId": 21
            },
            {
              "name": "T",
              "typeId": 12
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "phase",
                  "typeId": 350,
                  "typeName": "Phase",
                  "docs": []
                },
                {
                  "name": "event",
                  "typeId": 21,
                  "typeName": "E",
                  "docs": []
                },
                {
                  "name": "topics",
                  "typeId": 65,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 21,
          "path": [
            "moonbeam_runtime",
            "RuntimeEvent"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "System",
                  "fields": [
                    {
                      "typeId": 22,
                      "typeName": "frame_system::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "ParachainSystem",
                  "fields": [
                    {
                      "typeId": 31,
                      "typeName": "cumulus_pallet_parachain_system::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Balances",
                  "fields": [
                    {
                      "typeId": 33,
                      "typeName": "pallet_balances::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "TransactionPayment",
                  "fields": [
                    {
                      "typeId": 35,
                      "typeName": "pallet_transaction_payment::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "ParachainStaking",
                  "fields": [
                    {
                      "typeId": 36,
                      "typeName": "pallet_parachain_staking::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 20,
                  "docs": []
                },
                {
                  "name": "AuthorFilter",
                  "fields": [
                    {
                      "typeId": 43,
                      "typeName": "pallet_author_slot_filter::Event",
                      "docs": []
                    }
                  ],
                  "index": 22,
                  "docs": []
                },
                {
                  "name": "AuthorMapping",
                  "fields": [
                    {
                      "typeId": 45,
                      "typeName": "pallet_author_mapping::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 23,
                  "docs": []
                },
                {
                  "name": "MoonbeamOrbiters",
                  "fields": [
                    {
                      "typeId": 49,
                      "typeName": "pallet_moonbeam_orbiters::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 24,
                  "docs": []
                },
                {
                  "name": "Utility",
                  "fields": [
                    {
                      "typeId": 51,
                      "typeName": "pallet_utility::Event",
                      "docs": []
                    }
                  ],
                  "index": 30,
                  "docs": []
                },
                {
                  "name": "Proxy",
                  "fields": [
                    {
                      "typeId": 54,
                      "typeName": "pallet_proxy::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 31,
                  "docs": []
                },
                {
                  "name": "MaintenanceMode",
                  "fields": [
                    {
                      "typeId": 57,
                      "typeName": "pallet_maintenance_mode::Event",
                      "docs": []
                    }
                  ],
                  "index": 32,
                  "docs": []
                },
                {
                  "name": "Identity",
                  "fields": [
                    {
                      "typeId": 58,
                      "typeName": "pallet_identity::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 33,
                  "docs": []
                },
                {
                  "name": "Migrations",
                  "fields": [
                    {
                      "typeId": 59,
                      "typeName": "pallet_migrations::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 34,
                  "docs": []
                },
                {
                  "name": "Multisig",
                  "fields": [
                    {
                      "typeId": 60,
                      "typeName": "pallet_multisig::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 36,
                  "docs": []
                },
                {
                  "name": "EVM",
                  "fields": [
                    {
                      "typeId": 62,
                      "typeName": "pallet_evm::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 51,
                  "docs": []
                },
                {
                  "name": "Ethereum",
                  "fields": [
                    {
                      "typeId": 66,
                      "typeName": "pallet_ethereum::Event",
                      "docs": []
                    }
                  ],
                  "index": 52,
                  "docs": []
                },
                {
                  "name": "Scheduler",
                  "fields": [
                    {
                      "typeId": 75,
                      "typeName": "pallet_scheduler::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 60,
                  "docs": []
                },
                {
                  "name": "Democracy",
                  "fields": [
                    {
                      "typeId": 77,
                      "typeName": "pallet_democracy::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 61,
                  "docs": []
                },
                {
                  "name": "Preimage",
                  "fields": [
                    {
                      "typeId": 82,
                      "typeName": "pallet_preimage::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 62,
                  "docs": []
                },
                {
                  "name": "ConvictionVoting",
                  "fields": [
                    {
                      "typeId": 83,
                      "typeName": "pallet_conviction_voting::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 63,
                  "docs": []
                },
                {
                  "name": "Referenda",
                  "fields": [
                    {
                      "typeId": 84,
                      "typeName": "pallet_referenda::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 64,
                  "docs": []
                },
                {
                  "name": "Whitelist",
                  "fields": [
                    {
                      "typeId": 328,
                      "typeName": "pallet_whitelist::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 66,
                  "docs": []
                },
                {
                  "name": "CouncilCollective",
                  "fields": [
                    {
                      "typeId": 332,
                      "typeName": "pallet_collective::Event<Runtime, pallet_collective::Instance1>",
                      "docs": []
                    }
                  ],
                  "index": 70,
                  "docs": []
                },
                {
                  "name": "TechCommitteeCollective",
                  "fields": [
                    {
                      "typeId": 333,
                      "typeName": "pallet_collective::Event<Runtime, pallet_collective::Instance2>",
                      "docs": []
                    }
                  ],
                  "index": 71,
                  "docs": []
                },
                {
                  "name": "TreasuryCouncilCollective",
                  "fields": [
                    {
                      "typeId": 334,
                      "typeName": "pallet_collective::Event<Runtime, pallet_collective::Instance3>",
                      "docs": []
                    }
                  ],
                  "index": 72,
                  "docs": []
                },
                {
                  "name": "OpenTechCommitteeCollective",
                  "fields": [
                    {
                      "typeId": 335,
                      "typeName": "pallet_collective::Event<Runtime, pallet_collective::Instance4>",
                      "docs": []
                    }
                  ],
                  "index": 73,
                  "docs": []
                },
                {
                  "name": "Treasury",
                  "fields": [
                    {
                      "typeId": 336,
                      "typeName": "pallet_treasury::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 80,
                  "docs": []
                },
                {
                  "name": "CrowdloanRewards",
                  "fields": [
                    {
                      "typeId": 337,
                      "typeName": "pallet_crowdloan_rewards::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 90,
                  "docs": []
                },
                {
                  "name": "XcmpQueue",
                  "fields": [
                    {
                      "typeId": 338,
                      "typeName": "cumulus_pallet_xcmp_queue::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 100,
                  "docs": []
                },
                {
                  "name": "CumulusXcm",
                  "fields": [
                    {
                      "typeId": 339,
                      "typeName": "cumulus_pallet_xcm::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 101,
                  "docs": []
                },
                {
                  "name": "DmpQueue",
                  "fields": [
                    {
                      "typeId": 341,
                      "typeName": "cumulus_pallet_dmp_queue::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 102,
                  "docs": []
                },
                {
                  "name": "PolkadotXcm",
                  "fields": [
                    {
                      "typeId": 342,
                      "typeName": "pallet_xcm::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 103,
                  "docs": []
                },
                {
                  "name": "Assets",
                  "fields": [
                    {
                      "typeId": 343,
                      "typeName": "pallet_assets::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 104,
                  "docs": []
                },
                {
                  "name": "AssetManager",
                  "fields": [
                    {
                      "typeId": 344,
                      "typeName": "pallet_asset_manager::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 105,
                  "docs": []
                },
                {
                  "name": "XTokens",
                  "fields": [
                    {
                      "typeId": 345,
                      "typeName": "orml_xtokens::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 106,
                  "docs": []
                },
                {
                  "name": "XcmTransactor",
                  "fields": [
                    {
                      "typeId": 346,
                      "typeName": "pallet_xcm_transactor::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 107,
                  "docs": []
                },
                {
                  "name": "LocalAssets",
                  "fields": [
                    {
                      "typeId": 348,
                      "typeName": "pallet_assets::Event<Runtime, pallet_assets::Instance1>",
                      "docs": []
                    }
                  ],
                  "index": 108,
                  "docs": []
                },
                {
                  "name": "Randomness",
                  "fields": [
                    {
                      "typeId": 349,
                      "typeName": "pallet_randomness::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 120,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 22,
          "path": [
            "frame_system",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "ExtrinsicSuccess",
                  "fields": [
                    {
                      "name": "dispatch_info",
                      "typeId": 23,
                      "typeName": "DispatchInfo",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "An extrinsic completed successfully."
                  ]
                },
                {
                  "name": "ExtrinsicFailed",
                  "fields": [
                    {
                      "name": "dispatch_error",
                      "typeId": 26,
                      "typeName": "DispatchError",
                      "docs": []
                    },
                    {
                      "name": "dispatch_info",
                      "typeId": 23,
                      "typeName": "DispatchInfo",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "An extrinsic failed."
                  ]
                },
                {
                  "name": "CodeUpdated",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "`:code` was updated."
                  ]
                },
                {
                  "name": "NewAccount",
                  "fields": [
                    {
                      "name": "account",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A new account was created."
                  ]
                },
                {
                  "name": "KilledAccount",
                  "fields": [
                    {
                      "name": "account",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "An account was reaped."
                  ]
                },
                {
                  "name": "Remarked",
                  "fields": [
                    {
                      "name": "sender",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "On on-chain remark happened."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Event for the System pallet."
          ]
        },
        {
          "id": 23,
          "path": [
            "frame_support",
            "dispatch",
            "DispatchInfo"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "weight",
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "class",
                  "typeId": 24,
                  "typeName": "DispatchClass",
                  "docs": []
                },
                {
                  "name": "pays_fee",
                  "typeId": 25,
                  "typeName": "Pays",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 24,
          "path": [
            "frame_support",
            "dispatch",
            "DispatchClass"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Normal",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Operational",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Mandatory",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 25,
          "path": [
            "frame_support",
            "dispatch",
            "Pays"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Yes",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "No",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 26,
          "path": [
            "sp_runtime",
            "DispatchError"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Other",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "CannotLookup",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "BadOrigin",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Module",
                  "fields": [
                    {
                      "typeId": 27,
                      "typeName": "ModuleError",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "ConsumerRemaining",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "NoProviders",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "TooManyConsumers",
                  "fields": [],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "Token",
                  "fields": [
                    {
                      "typeId": 28,
                      "typeName": "TokenError",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "Arithmetic",
                  "fields": [
                    {
                      "typeId": 29,
                      "typeName": "ArithmeticError",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "Transactional",
                  "fields": [
                    {
                      "typeId": 30,
                      "typeName": "TransactionalError",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "Exhausted",
                  "fields": [],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "Corruption",
                  "fields": [],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "Unavailable",
                  "fields": [],
                  "index": 12,
                  "docs": []
                },
                {
                  "name": "RootNotAllowed",
                  "fields": [],
                  "index": 13,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 27,
          "path": [
            "sp_runtime",
            "ModuleError"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "index",
                  "typeId": 2,
                  "typeName": "u8",
                  "docs": []
                },
                {
                  "name": "error",
                  "typeId": 18,
                  "typeName": "[u8; MAX_MODULE_ERROR_ENCODED_SIZE]",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 28,
          "path": [
            "sp_runtime",
            "TokenError"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "FundsUnavailable",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "OnlyProvider",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "BelowMinimum",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "CannotCreate",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "UnknownAsset",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Frozen",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Unsupported",
                  "fields": [],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "CannotCreateHold",
                  "fields": [],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "NotExpendable",
                  "fields": [],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "Blocked",
                  "fields": [],
                  "index": 9,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 29,
          "path": [
            "sp_arithmetic",
            "ArithmeticError"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Underflow",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Overflow",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "DivisionByZero",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 30,
          "path": [
            "sp_runtime",
            "TransactionalError"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "LimitReached",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "NoLayer",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 31,
          "path": [
            "cumulus_pallet_parachain_system",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "ValidationFunctionStored",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "The validation function has been scheduled to apply."
                  ]
                },
                {
                  "name": "ValidationFunctionApplied",
                  "fields": [
                    {
                      "name": "relay_chain_block_num",
                      "typeId": 4,
                      "typeName": "RelayChainBlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "The validation function was applied as of the contained relay chain block number."
                  ]
                },
                {
                  "name": "ValidationFunctionDiscarded",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "The relay-chain aborted the upgrade process."
                  ]
                },
                {
                  "name": "UpgradeAuthorized",
                  "fields": [
                    {
                      "name": "code_hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "An upgrade has been authorized."
                  ]
                },
                {
                  "name": "DownwardMessagesReceived",
                  "fields": [
                    {
                      "name": "count",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Some downward messages have been received and will be processed."
                  ]
                },
                {
                  "name": "DownwardMessagesProcessed",
                  "fields": [
                    {
                      "name": "weight_used",
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "dmq_head",
                      "typeId": 12,
                      "typeName": "relay_chain::Hash",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Downward messages were processed using the given weight."
                  ]
                },
                {
                  "name": "UpwardMessageSent",
                  "fields": [
                    {
                      "name": "message_hash",
                      "typeId": 32,
                      "typeName": "Option<XcmHash>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "An upward message was sent to the relay chain."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 32,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 13
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 13,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 33,
          "path": [
            "pallet_balances",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Endowed",
                  "fields": [
                    {
                      "name": "account",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "free_balance",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "An account was created with some free balance."
                  ]
                },
                {
                  "name": "DustLost",
                  "fields": [
                    {
                      "name": "account",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "An account was removed whose balance was non-zero but below ExistentialDeposit,",
                    "resulting in an outright loss."
                  ]
                },
                {
                  "name": "Transfer",
                  "fields": [
                    {
                      "name": "from",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "to",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Transfer succeeded."
                  ]
                },
                {
                  "name": "BalanceSet",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "free",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A balance was set by root."
                  ]
                },
                {
                  "name": "Reserved",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Some balance was reserved (moved from free to reserved)."
                  ]
                },
                {
                  "name": "Unreserved",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Some balance was unreserved (moved from reserved to free)."
                  ]
                },
                {
                  "name": "ReserveRepatriated",
                  "fields": [
                    {
                      "name": "from",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "to",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    },
                    {
                      "name": "destination_status",
                      "typeId": 34,
                      "typeName": "Status",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Some balance was moved from the reserve of the first account to the second account.",
                    "Final argument indicates the destination balance type."
                  ]
                },
                {
                  "name": "Deposit",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Some amount was deposited (e.g. for transaction fees)."
                  ]
                },
                {
                  "name": "Withdraw",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "Some amount was withdrawn from the account (e.g. for transaction fees)."
                  ]
                },
                {
                  "name": "Slashed",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "Some amount was removed from the account (e.g. for misbehavior)."
                  ]
                },
                {
                  "name": "Minted",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": [
                    "Some amount was minted into an account."
                  ]
                },
                {
                  "name": "Burned",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": [
                    "Some amount was burned from an account."
                  ]
                },
                {
                  "name": "Suspended",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": [
                    "Some amount was suspended from an account (it can be restored later)."
                  ]
                },
                {
                  "name": "Restored",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": [
                    "Some amount was restored into an account."
                  ]
                },
                {
                  "name": "Upgraded",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": [
                    "An account was upgraded."
                  ]
                },
                {
                  "name": "Issued",
                  "fields": [
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": [
                    "Total issuance was increased by `amount`, creating a credit to be balanced."
                  ]
                },
                {
                  "name": "Rescinded",
                  "fields": [
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 16,
                  "docs": [
                    "Total issuance was decreased by `amount`, creating a debt to be balanced."
                  ]
                },
                {
                  "name": "Locked",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 17,
                  "docs": [
                    "Some balance was locked."
                  ]
                },
                {
                  "name": "Unlocked",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 18,
                  "docs": [
                    "Some balance was unlocked."
                  ]
                },
                {
                  "name": "Frozen",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": [
                    "Some balance was frozen."
                  ]
                },
                {
                  "name": "Thawed",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 20,
                  "docs": [
                    "Some balance was thawed."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 34,
          "path": [
            "frame_support",
            "traits",
            "tokens",
            "misc",
            "BalanceStatus"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Free",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Reserved",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 35,
          "path": [
            "pallet_transaction_payment",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "TransactionFeePaid",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "actual_fee",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "tip",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
                    "has been paid by `who`."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 36,
          "path": [
            "pallet_parachain_staking",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "NewRound",
                  "fields": [
                    {
                      "name": "starting_block",
                      "typeId": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "round",
                      "typeId": 4,
                      "typeName": "RoundIndex",
                      "docs": []
                    },
                    {
                      "name": "selected_collators_number",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "total_balance",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Started new round."
                  ]
                },
                {
                  "name": "JoinedCollatorCandidates",
                  "fields": [
                    {
                      "name": "account",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount_locked",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "new_total_amt_locked",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Account joined the set of collator candidates."
                  ]
                },
                {
                  "name": "CollatorChosen",
                  "fields": [
                    {
                      "name": "round",
                      "typeId": 4,
                      "typeName": "RoundIndex",
                      "docs": []
                    },
                    {
                      "name": "collator_account",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "total_exposed_amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Candidate selected for collators. Total Exposed Amount includes all delegations."
                  ]
                },
                {
                  "name": "CandidateBondLessRequested",
                  "fields": [
                    {
                      "name": "candidate",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount_to_decrease",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "execute_round",
                      "typeId": 4,
                      "typeName": "RoundIndex",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Candidate requested to decrease a self bond."
                  ]
                },
                {
                  "name": "CandidateBondedMore",
                  "fields": [
                    {
                      "name": "candidate",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "new_total_bond",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Candidate has increased a self bond."
                  ]
                },
                {
                  "name": "CandidateBondedLess",
                  "fields": [
                    {
                      "name": "candidate",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "new_bond",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Candidate has decreased a self bond."
                  ]
                },
                {
                  "name": "CandidateWentOffline",
                  "fields": [
                    {
                      "name": "candidate",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Candidate temporarily leave the set of collator candidates without unbonding."
                  ]
                },
                {
                  "name": "CandidateBackOnline",
                  "fields": [
                    {
                      "name": "candidate",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Candidate rejoins the set of collator candidates."
                  ]
                },
                {
                  "name": "CandidateScheduledExit",
                  "fields": [
                    {
                      "name": "exit_allowed_round",
                      "typeId": 4,
                      "typeName": "RoundIndex",
                      "docs": []
                    },
                    {
                      "name": "candidate",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "scheduled_exit",
                      "typeId": 4,
                      "typeName": "RoundIndex",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "Candidate has requested to leave the set of candidates."
                  ]
                },
                {
                  "name": "CancelledCandidateExit",
                  "fields": [
                    {
                      "name": "candidate",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "Cancelled request to leave the set of candidates."
                  ]
                },
                {
                  "name": "CancelledCandidateBondLess",
                  "fields": [
                    {
                      "name": "candidate",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "execute_round",
                      "typeId": 4,
                      "typeName": "RoundIndex",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": [
                    "Cancelled request to decrease candidate's bond."
                  ]
                },
                {
                  "name": "CandidateLeft",
                  "fields": [
                    {
                      "name": "ex_candidate",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "unlocked_amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "new_total_amt_locked",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": [
                    "Candidate has left the set of candidates."
                  ]
                },
                {
                  "name": "DelegationDecreaseScheduled",
                  "fields": [
                    {
                      "name": "delegator",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "candidate",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount_to_decrease",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "execute_round",
                      "typeId": 4,
                      "typeName": "RoundIndex",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": [
                    "Delegator requested to decrease a bond for the collator candidate."
                  ]
                },
                {
                  "name": "DelegationIncreased",
                  "fields": [
                    {
                      "name": "delegator",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "candidate",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "in_top",
                      "typeId": 37,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": []
                },
                {
                  "name": "DelegationDecreased",
                  "fields": [
                    {
                      "name": "delegator",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "candidate",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "in_top",
                      "typeId": 37,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": []
                },
                {
                  "name": "DelegatorExitScheduled",
                  "fields": [
                    {
                      "name": "round",
                      "typeId": 4,
                      "typeName": "RoundIndex",
                      "docs": []
                    },
                    {
                      "name": "delegator",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "scheduled_exit",
                      "typeId": 4,
                      "typeName": "RoundIndex",
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": [
                    "Delegator requested to leave the set of delegators."
                  ]
                },
                {
                  "name": "DelegationRevocationScheduled",
                  "fields": [
                    {
                      "name": "round",
                      "typeId": 4,
                      "typeName": "RoundIndex",
                      "docs": []
                    },
                    {
                      "name": "delegator",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "candidate",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "scheduled_exit",
                      "typeId": 4,
                      "typeName": "RoundIndex",
                      "docs": []
                    }
                  ],
                  "index": 16,
                  "docs": [
                    "Delegator requested to revoke delegation."
                  ]
                },
                {
                  "name": "DelegatorLeft",
                  "fields": [
                    {
                      "name": "delegator",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "unstaked_amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 17,
                  "docs": [
                    "Delegator has left the set of delegators."
                  ]
                },
                {
                  "name": "DelegationRevoked",
                  "fields": [
                    {
                      "name": "delegator",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "candidate",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "unstaked_amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 18,
                  "docs": [
                    "Delegation revoked."
                  ]
                },
                {
                  "name": "DelegationKicked",
                  "fields": [
                    {
                      "name": "delegator",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "candidate",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "unstaked_amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": [
                    "Delegation kicked."
                  ]
                },
                {
                  "name": "DelegatorExitCancelled",
                  "fields": [
                    {
                      "name": "delegator",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 20,
                  "docs": [
                    "Cancelled a pending request to exit the set of delegators."
                  ]
                },
                {
                  "name": "CancelledDelegationRequest",
                  "fields": [
                    {
                      "name": "delegator",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "cancelled_request",
                      "typeId": 38,
                      "typeName": "CancelledScheduledRequest<BalanceOf<T>>",
                      "docs": []
                    },
                    {
                      "name": "collator",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": [
                    "Cancelled request to change an existing delegation."
                  ]
                },
                {
                  "name": "Delegation",
                  "fields": [
                    {
                      "name": "delegator",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "locked_amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "candidate",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "delegator_position",
                      "typeId": 40,
                      "typeName": "DelegatorAdded<BalanceOf<T>>",
                      "docs": []
                    },
                    {
                      "name": "auto_compound",
                      "typeId": 41,
                      "typeName": "Percent",
                      "docs": []
                    }
                  ],
                  "index": 22,
                  "docs": [
                    "New delegation (increase of the existing one)."
                  ]
                },
                {
                  "name": "DelegatorLeftCandidate",
                  "fields": [
                    {
                      "name": "delegator",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "candidate",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "unstaked_amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "total_candidate_staked",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 23,
                  "docs": [
                    "Delegation from candidate state has been remove."
                  ]
                },
                {
                  "name": "Rewarded",
                  "fields": [
                    {
                      "name": "account",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "rewards",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 24,
                  "docs": [
                    "Paid the account (delegator or collator) the balance as liquid rewards."
                  ]
                },
                {
                  "name": "ReservedForParachainBond",
                  "fields": [
                    {
                      "name": "account",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 25,
                  "docs": [
                    "Transferred to account which holds funds reserved for parachain bond."
                  ]
                },
                {
                  "name": "ParachainBondAccountSet",
                  "fields": [
                    {
                      "name": "old",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "new",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 26,
                  "docs": [
                    "Account (re)set for parachain bond treasury."
                  ]
                },
                {
                  "name": "ParachainBondReservePercentSet",
                  "fields": [
                    {
                      "name": "old",
                      "typeId": 41,
                      "typeName": "Percent",
                      "docs": []
                    },
                    {
                      "name": "new",
                      "typeId": 41,
                      "typeName": "Percent",
                      "docs": []
                    }
                  ],
                  "index": 27,
                  "docs": [
                    "Percent of inflation reserved for parachain bond (re)set."
                  ]
                },
                {
                  "name": "InflationSet",
                  "fields": [
                    {
                      "name": "annual_min",
                      "typeId": 42,
                      "typeName": "Perbill",
                      "docs": []
                    },
                    {
                      "name": "annual_ideal",
                      "typeId": 42,
                      "typeName": "Perbill",
                      "docs": []
                    },
                    {
                      "name": "annual_max",
                      "typeId": 42,
                      "typeName": "Perbill",
                      "docs": []
                    },
                    {
                      "name": "round_min",
                      "typeId": 42,
                      "typeName": "Perbill",
                      "docs": []
                    },
                    {
                      "name": "round_ideal",
                      "typeId": 42,
                      "typeName": "Perbill",
                      "docs": []
                    },
                    {
                      "name": "round_max",
                      "typeId": 42,
                      "typeName": "Perbill",
                      "docs": []
                    }
                  ],
                  "index": 28,
                  "docs": [
                    "Annual inflation input (first 3) was used to derive new per-round inflation (last 3)"
                  ]
                },
                {
                  "name": "StakeExpectationsSet",
                  "fields": [
                    {
                      "name": "expect_min",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "expect_ideal",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "expect_max",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 29,
                  "docs": [
                    "Staking expectations set."
                  ]
                },
                {
                  "name": "TotalSelectedSet",
                  "fields": [
                    {
                      "name": "old",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "new",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 30,
                  "docs": [
                    "Set total selected candidates to this value."
                  ]
                },
                {
                  "name": "CollatorCommissionSet",
                  "fields": [
                    {
                      "name": "old",
                      "typeId": 42,
                      "typeName": "Perbill",
                      "docs": []
                    },
                    {
                      "name": "new",
                      "typeId": 42,
                      "typeName": "Perbill",
                      "docs": []
                    }
                  ],
                  "index": 31,
                  "docs": [
                    "Set collator commission to this value."
                  ]
                },
                {
                  "name": "BlocksPerRoundSet",
                  "fields": [
                    {
                      "name": "current_round",
                      "typeId": 4,
                      "typeName": "RoundIndex",
                      "docs": []
                    },
                    {
                      "name": "first_block",
                      "typeId": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "old",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "new",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "new_per_round_inflation_min",
                      "typeId": 42,
                      "typeName": "Perbill",
                      "docs": []
                    },
                    {
                      "name": "new_per_round_inflation_ideal",
                      "typeId": 42,
                      "typeName": "Perbill",
                      "docs": []
                    },
                    {
                      "name": "new_per_round_inflation_max",
                      "typeId": 42,
                      "typeName": "Perbill",
                      "docs": []
                    }
                  ],
                  "index": 32,
                  "docs": [
                    "Set blocks per round"
                  ]
                },
                {
                  "name": "AutoCompoundSet",
                  "fields": [
                    {
                      "name": "candidate",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "delegator",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "typeId": 41,
                      "typeName": "Percent",
                      "docs": []
                    }
                  ],
                  "index": 33,
                  "docs": [
                    "Auto-compounding reward percent was set for a delegation."
                  ]
                },
                {
                  "name": "Compounded",
                  "fields": [
                    {
                      "name": "candidate",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "delegator",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 34,
                  "docs": [
                    "Compounded a portion of rewards towards the delegation."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 37,
          "path": [],
          "params": [],
          "type": {
            "tag": "Primitive",
            "value": {
              "kind": "bool"
            }
          },
          "docs": []
        },
        {
          "id": 38,
          "path": [
            "pallet_parachain_staking",
            "delegation_requests",
            "CancelledScheduledRequest"
          ],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "when_executable",
                  "typeId": 4,
                  "typeName": "RoundIndex",
                  "docs": []
                },
                {
                  "name": "action",
                  "typeId": 39,
                  "typeName": "DelegationAction<Balance>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 39,
          "path": [
            "pallet_parachain_staking",
            "delegation_requests",
            "DelegationAction"
          ],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Revoke",
                  "fields": [
                    {
                      "typeId": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Decrease",
                  "fields": [
                    {
                      "typeId": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 40,
          "path": [
            "pallet_parachain_staking",
            "types",
            "DelegatorAdded"
          ],
          "params": [
            {
              "name": "B",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "AddedToTop",
                  "fields": [
                    {
                      "name": "new_total",
                      "typeId": 6,
                      "typeName": "B",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "AddedToBottom",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 41,
          "path": [
            "sp_arithmetic",
            "per_things",
            "Percent"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 2,
                  "typeName": "u8",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 42,
          "path": [
            "sp_arithmetic",
            "per_things",
            "Perbill"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 43,
          "path": [
            "pallet_author_slot_filter",
            "pallet",
            "Event"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "EligibleUpdated",
                  "fields": [
                    {
                      "typeId": 44,
                      "typeName": "EligibilityValue",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "The amount of eligible authors for the filter to select has been changed."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 44,
          "path": [
            "pallet_author_slot_filter",
            "num",
            "NonZeroU32"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 45,
          "path": [
            "pallet_author_mapping",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "KeysRegistered",
                  "fields": [
                    {
                      "name": "nimbus_id",
                      "typeId": 46,
                      "typeName": "NimbusId",
                      "docs": []
                    },
                    {
                      "name": "account_id",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "keys",
                      "typeId": 48,
                      "typeName": "T::Keys",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A NimbusId has been registered and mapped to an AccountId."
                  ]
                },
                {
                  "name": "KeysRemoved",
                  "fields": [
                    {
                      "name": "nimbus_id",
                      "typeId": 46,
                      "typeName": "NimbusId",
                      "docs": []
                    },
                    {
                      "name": "account_id",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "keys",
                      "typeId": 48,
                      "typeName": "T::Keys",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "An NimbusId has been de-registered, and its AccountId mapping removed."
                  ]
                },
                {
                  "name": "KeysRotated",
                  "fields": [
                    {
                      "name": "new_nimbus_id",
                      "typeId": 46,
                      "typeName": "NimbusId",
                      "docs": []
                    },
                    {
                      "name": "account_id",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "new_keys",
                      "typeId": 48,
                      "typeName": "T::Keys",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "An NimbusId has been registered, replacing a previous registration and its mapping."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 46,
          "path": [
            "nimbus_primitives",
            "nimbus_crypto",
            "Public"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 47,
                  "typeName": "sr25519::Public",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 47,
          "path": [
            "sp_core",
            "sr25519",
            "Public"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 13,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 48,
          "path": [
            "session_keys_primitives",
            "vrf",
            "vrf_crypto",
            "Public"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 47,
                  "typeName": "sr25519::Public",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 49,
          "path": [
            "pallet_moonbeam_orbiters",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "OrbiterJoinCollatorPool",
                  "fields": [
                    {
                      "name": "collator",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "orbiter",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "An orbiter join a collator pool"
                  ]
                },
                {
                  "name": "OrbiterLeaveCollatorPool",
                  "fields": [
                    {
                      "name": "collator",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "orbiter",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "An orbiter leave a collator pool"
                  ]
                },
                {
                  "name": "OrbiterRewarded",
                  "fields": [
                    {
                      "name": "account",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "rewards",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Paid the orbiter account the balance as liquid rewards."
                  ]
                },
                {
                  "name": "OrbiterRotation",
                  "fields": [
                    {
                      "name": "collator",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "old_orbiter",
                      "typeId": 50,
                      "typeName": "Option<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "new_orbiter",
                      "typeId": 50,
                      "typeName": "Option<T::AccountId>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "OrbiterRegistered",
                  "fields": [
                    {
                      "name": "account",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "An orbiter has registered"
                  ]
                },
                {
                  "name": "OrbiterUnregistered",
                  "fields": [
                    {
                      "name": "account",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "An orbiter has unregistered"
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 50,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 0
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 0,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 51,
          "path": [
            "pallet_utility",
            "pallet",
            "Event"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "BatchInterrupted",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "error",
                      "typeId": 26,
                      "typeName": "DispatchError",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
                    "well as the error."
                  ]
                },
                {
                  "name": "BatchCompleted",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Batch of dispatches completed fully with no error."
                  ]
                },
                {
                  "name": "BatchCompletedWithErrors",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Batch of dispatches completed but has errors."
                  ]
                },
                {
                  "name": "ItemCompleted",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "A single item within a Batch of dispatches has completed with no error."
                  ]
                },
                {
                  "name": "ItemFailed",
                  "fields": [
                    {
                      "name": "error",
                      "typeId": 26,
                      "typeName": "DispatchError",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "A single item within a Batch of dispatches has completed with error."
                  ]
                },
                {
                  "name": "DispatchedAs",
                  "fields": [
                    {
                      "name": "result",
                      "typeId": 52,
                      "typeName": "DispatchResult",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "A call was dispatched."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 52,
          "path": [
            "Result"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 53
            },
            {
              "name": "E",
              "typeId": 26
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Ok",
                  "fields": [
                    {
                      "typeId": 53,
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Err",
                  "fields": [
                    {
                      "typeId": 26,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 53,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": []
            }
          },
          "docs": []
        },
        {
          "id": 54,
          "path": [
            "pallet_proxy",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "ProxyExecuted",
                  "fields": [
                    {
                      "name": "result",
                      "typeId": 52,
                      "typeName": "DispatchResult",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A proxy was executed correctly, with the given."
                  ]
                },
                {
                  "name": "PureCreated",
                  "fields": [
                    {
                      "name": "pure",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "proxy_type",
                      "typeId": 55,
                      "typeName": "T::ProxyType",
                      "docs": []
                    },
                    {
                      "name": "disambiguation_index",
                      "typeId": 56,
                      "typeName": "u16",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "A pure account has been created by new proxy with given",
                    "disambiguation index and proxy type."
                  ]
                },
                {
                  "name": "Announced",
                  "fields": [
                    {
                      "name": "real",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "proxy",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "typeId": 12,
                      "typeName": "CallHashOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "An announcement was placed to make a call in the future."
                  ]
                },
                {
                  "name": "ProxyAdded",
                  "fields": [
                    {
                      "name": "delegator",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "delegatee",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "proxy_type",
                      "typeId": 55,
                      "typeName": "T::ProxyType",
                      "docs": []
                    },
                    {
                      "name": "delay",
                      "typeId": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A proxy was added."
                  ]
                },
                {
                  "name": "ProxyRemoved",
                  "fields": [
                    {
                      "name": "delegator",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "delegatee",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "proxy_type",
                      "typeId": 55,
                      "typeName": "T::ProxyType",
                      "docs": []
                    },
                    {
                      "name": "delay",
                      "typeId": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "A proxy was removed."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 55,
          "path": [
            "moonbeam_runtime",
            "ProxyType"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Any",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "NonTransfer",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Governance",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Staking",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "CancelProxy",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Balances",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "AuthorMapping",
                  "fields": [],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "IdentityJudgement",
                  "fields": [],
                  "index": 7,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 56,
          "path": [],
          "params": [],
          "type": {
            "tag": "Primitive",
            "value": {
              "kind": "u16"
            }
          },
          "docs": []
        },
        {
          "id": 57,
          "path": [
            "pallet_maintenance_mode",
            "pallet",
            "Event"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "EnteredMaintenanceMode",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "The chain was put into Maintenance Mode"
                  ]
                },
                {
                  "name": "NormalOperationResumed",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "The chain returned to its normal operating state"
                  ]
                },
                {
                  "name": "FailedToSuspendIdleXcmExecution",
                  "fields": [
                    {
                      "name": "error",
                      "typeId": 26,
                      "typeName": "DispatchError",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "The call to suspend on_idle XCM execution failed with inner error"
                  ]
                },
                {
                  "name": "FailedToResumeIdleXcmExecution",
                  "fields": [
                    {
                      "name": "error",
                      "typeId": 26,
                      "typeName": "DispatchError",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "The call to resume on_idle XCM execution failed with inner error"
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 58,
          "path": [
            "pallet_identity",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "IdentitySet",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A name was set or reset (which will remove all judgements)."
                  ]
                },
                {
                  "name": "IdentityCleared",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "A name was cleared, and the given balance returned."
                  ]
                },
                {
                  "name": "IdentityKilled",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "A name was removed and the given balance slashed."
                  ]
                },
                {
                  "name": "JudgementRequested",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "registrar_index",
                      "typeId": 4,
                      "typeName": "RegistrarIndex",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A judgement was asked from a registrar."
                  ]
                },
                {
                  "name": "JudgementUnrequested",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "registrar_index",
                      "typeId": 4,
                      "typeName": "RegistrarIndex",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "A judgement request was retracted."
                  ]
                },
                {
                  "name": "JudgementGiven",
                  "fields": [
                    {
                      "name": "target",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "registrar_index",
                      "typeId": 4,
                      "typeName": "RegistrarIndex",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "A judgement was given by a registrar."
                  ]
                },
                {
                  "name": "RegistrarAdded",
                  "fields": [
                    {
                      "name": "registrar_index",
                      "typeId": 4,
                      "typeName": "RegistrarIndex",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "A registrar was added."
                  ]
                },
                {
                  "name": "SubIdentityAdded",
                  "fields": [
                    {
                      "name": "sub",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "main",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "A sub-identity was added to an identity and the deposit paid."
                  ]
                },
                {
                  "name": "SubIdentityRemoved",
                  "fields": [
                    {
                      "name": "sub",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "main",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "A sub-identity was removed from an identity and the deposit freed."
                  ]
                },
                {
                  "name": "SubIdentityRevoked",
                  "fields": [
                    {
                      "name": "sub",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "main",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "A sub-identity was cleared, and the given deposit repatriated from the",
                    "main identity account to the sub-identity account."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 59,
          "path": [
            "pallet_migrations",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "RuntimeUpgradeStarted",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Runtime upgrade started"
                  ]
                },
                {
                  "name": "RuntimeUpgradeCompleted",
                  "fields": [
                    {
                      "name": "weight",
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Runtime upgrade completed"
                  ]
                },
                {
                  "name": "MigrationStarted",
                  "fields": [
                    {
                      "name": "migration_name",
                      "typeId": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Migration started"
                  ]
                },
                {
                  "name": "MigrationCompleted",
                  "fields": [
                    {
                      "name": "migration_name",
                      "typeId": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "consumed_weight",
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Migration completed"
                  ]
                },
                {
                  "name": "FailedToSuspendIdleXcmExecution",
                  "fields": [
                    {
                      "name": "error",
                      "typeId": 26,
                      "typeName": "DispatchError",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "XCM execution suspension failed with inner error"
                  ]
                },
                {
                  "name": "FailedToResumeIdleXcmExecution",
                  "fields": [
                    {
                      "name": "error",
                      "typeId": 26,
                      "typeName": "DispatchError",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "XCM execution resume failed with inner error"
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 60,
          "path": [
            "pallet_multisig",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "NewMultisig",
                  "fields": [
                    {
                      "name": "approving",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "multisig",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "typeId": 13,
                      "typeName": "CallHash",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A new multisig operation has begun."
                  ]
                },
                {
                  "name": "MultisigApproval",
                  "fields": [
                    {
                      "name": "approving",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "timepoint",
                      "typeId": 61,
                      "typeName": "Timepoint<T::BlockNumber>",
                      "docs": []
                    },
                    {
                      "name": "multisig",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "typeId": 13,
                      "typeName": "CallHash",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "A multisig operation has been approved by someone."
                  ]
                },
                {
                  "name": "MultisigExecuted",
                  "fields": [
                    {
                      "name": "approving",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "timepoint",
                      "typeId": 61,
                      "typeName": "Timepoint<T::BlockNumber>",
                      "docs": []
                    },
                    {
                      "name": "multisig",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "typeId": 13,
                      "typeName": "CallHash",
                      "docs": []
                    },
                    {
                      "name": "result",
                      "typeId": 52,
                      "typeName": "DispatchResult",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "A multisig operation has been executed."
                  ]
                },
                {
                  "name": "MultisigCancelled",
                  "fields": [
                    {
                      "name": "cancelling",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "timepoint",
                      "typeId": 61,
                      "typeName": "Timepoint<T::BlockNumber>",
                      "docs": []
                    },
                    {
                      "name": "multisig",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "typeId": 13,
                      "typeName": "CallHash",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A multisig operation has been cancelled."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 61,
          "path": [
            "pallet_multisig",
            "Timepoint"
          ],
          "params": [
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "height",
                  "typeId": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "index",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 62,
          "path": [
            "pallet_evm",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Log",
                  "fields": [
                    {
                      "name": "log",
                      "typeId": 63,
                      "typeName": "Log",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Ethereum events from contracts."
                  ]
                },
                {
                  "name": "Created",
                  "fields": [
                    {
                      "name": "address",
                      "typeId": 64,
                      "typeName": "H160",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "A contract has been created at given address."
                  ]
                },
                {
                  "name": "CreatedFailed",
                  "fields": [
                    {
                      "name": "address",
                      "typeId": 64,
                      "typeName": "H160",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "A contract was attempted to be created, but the execution failed."
                  ]
                },
                {
                  "name": "Executed",
                  "fields": [
                    {
                      "name": "address",
                      "typeId": 64,
                      "typeName": "H160",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A contract has been executed successfully with states applied."
                  ]
                },
                {
                  "name": "ExecutedFailed",
                  "fields": [
                    {
                      "name": "address",
                      "typeId": 64,
                      "typeName": "H160",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "A contract has been executed with errors. States are reverted with only gas fees applied."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 63,
          "path": [
            "ethereum",
            "log",
            "Log"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "address",
                  "typeId": 64,
                  "typeName": "H160",
                  "docs": []
                },
                {
                  "name": "topics",
                  "typeId": 65,
                  "typeName": "Vec<H256>",
                  "docs": []
                },
                {
                  "name": "data",
                  "typeId": 14,
                  "typeName": "Bytes",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 64,
          "path": [
            "primitive_types",
            "H160"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 1,
                  "typeName": "[u8; 20]",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 65,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 12
            }
          },
          "docs": []
        },
        {
          "id": 66,
          "path": [
            "pallet_ethereum",
            "pallet",
            "Event"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Executed",
                  "fields": [
                    {
                      "name": "from",
                      "typeId": 64,
                      "typeName": "H160",
                      "docs": []
                    },
                    {
                      "name": "to",
                      "typeId": 64,
                      "typeName": "H160",
                      "docs": []
                    },
                    {
                      "name": "transaction_hash",
                      "typeId": 12,
                      "typeName": "H256",
                      "docs": []
                    },
                    {
                      "name": "exit_reason",
                      "typeId": 67,
                      "typeName": "ExitReason",
                      "docs": []
                    },
                    {
                      "name": "extra_data",
                      "typeId": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "An ethereum transaction was successfully executed."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 67,
          "path": [
            "evm_core",
            "error",
            "ExitReason"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Succeed",
                  "fields": [
                    {
                      "typeId": 68,
                      "typeName": "ExitSucceed",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Error",
                  "fields": [
                    {
                      "typeId": 69,
                      "typeName": "ExitError",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Revert",
                  "fields": [
                    {
                      "typeId": 73,
                      "typeName": "ExitRevert",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Fatal",
                  "fields": [
                    {
                      "typeId": 74,
                      "typeName": "ExitFatal",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 68,
          "path": [
            "evm_core",
            "error",
            "ExitSucceed"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Stopped",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Returned",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Suicided",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 69,
          "path": [
            "evm_core",
            "error",
            "ExitError"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "StackUnderflow",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "StackOverflow",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "InvalidJump",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "InvalidRange",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "DesignatedInvalid",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "CallTooDeep",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "CreateCollision",
                  "fields": [],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "CreateContractLimit",
                  "fields": [],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "InvalidCode",
                  "fields": [
                    {
                      "typeId": 70,
                      "typeName": "Opcode",
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": []
                },
                {
                  "name": "OutOfOffset",
                  "fields": [],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "OutOfGas",
                  "fields": [],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "OutOfFund",
                  "fields": [],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "PCUnderflow",
                  "fields": [],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "CreateEmpty",
                  "fields": [],
                  "index": 12,
                  "docs": []
                },
                {
                  "name": "Other",
                  "fields": [
                    {
                      "typeId": 71,
                      "typeName": "Cow<'static, str>",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": []
                },
                {
                  "name": "MaxNonce",
                  "fields": [],
                  "index": 14,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 70,
          "path": [
            "evm_core",
            "opcode",
            "Opcode"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 2,
                  "typeName": "u8",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 71,
          "path": [
            "Cow"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 72
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 72,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 72,
          "path": [],
          "params": [],
          "type": {
            "tag": "Primitive",
            "value": {
              "kind": "str"
            }
          },
          "docs": []
        },
        {
          "id": 73,
          "path": [
            "evm_core",
            "error",
            "ExitRevert"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Reverted",
                  "fields": [],
                  "index": 0,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 74,
          "path": [
            "evm_core",
            "error",
            "ExitFatal"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "NotSupported",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "UnhandledInterrupt",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "CallErrorAsFatal",
                  "fields": [
                    {
                      "typeId": 69,
                      "typeName": "ExitError",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Other",
                  "fields": [
                    {
                      "typeId": 71,
                      "typeName": "Cow<'static, str>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 75,
          "path": [
            "pallet_scheduler",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Scheduled",
                  "fields": [
                    {
                      "name": "when",
                      "typeId": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Scheduled some task."
                  ]
                },
                {
                  "name": "Canceled",
                  "fields": [
                    {
                      "name": "when",
                      "typeId": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Canceled some task."
                  ]
                },
                {
                  "name": "Dispatched",
                  "fields": [
                    {
                      "name": "task",
                      "typeId": 76,
                      "typeName": "TaskAddress<T::BlockNumber>",
                      "docs": []
                    },
                    {
                      "name": "id",
                      "typeId": 32,
                      "typeName": "Option<TaskName>",
                      "docs": []
                    },
                    {
                      "name": "result",
                      "typeId": 52,
                      "typeName": "DispatchResult",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Dispatched some task."
                  ]
                },
                {
                  "name": "CallUnavailable",
                  "fields": [
                    {
                      "name": "task",
                      "typeId": 76,
                      "typeName": "TaskAddress<T::BlockNumber>",
                      "docs": []
                    },
                    {
                      "name": "id",
                      "typeId": 32,
                      "typeName": "Option<TaskName>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "The call for the provided hash was not found so the task has been aborted."
                  ]
                },
                {
                  "name": "PeriodicFailed",
                  "fields": [
                    {
                      "name": "task",
                      "typeId": 76,
                      "typeName": "TaskAddress<T::BlockNumber>",
                      "docs": []
                    },
                    {
                      "name": "id",
                      "typeId": 32,
                      "typeName": "Option<TaskName>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "The given task was unable to be renewed since the agenda is full at that block."
                  ]
                },
                {
                  "name": "PermanentlyOverweight",
                  "fields": [
                    {
                      "name": "task",
                      "typeId": 76,
                      "typeName": "TaskAddress<T::BlockNumber>",
                      "docs": []
                    },
                    {
                      "name": "id",
                      "typeId": 32,
                      "typeName": "Option<TaskName>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "The given task can never be executed since it is overweight."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Events type."
          ]
        },
        {
          "id": 76,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                4,
                4
              ]
            }
          },
          "docs": []
        },
        {
          "id": 77,
          "path": [
            "pallet_democracy",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Proposed",
                  "fields": [
                    {
                      "name": "proposal_index",
                      "typeId": 4,
                      "typeName": "PropIndex",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A motion has been proposed by a public account."
                  ]
                },
                {
                  "name": "Tabled",
                  "fields": [
                    {
                      "name": "proposal_index",
                      "typeId": 4,
                      "typeName": "PropIndex",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "A public proposal has been tabled for referendum vote."
                  ]
                },
                {
                  "name": "ExternalTabled",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "An external proposal has been tabled."
                  ]
                },
                {
                  "name": "Started",
                  "fields": [
                    {
                      "name": "ref_index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    },
                    {
                      "name": "threshold",
                      "typeId": 78,
                      "typeName": "VoteThreshold",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A referendum has begun."
                  ]
                },
                {
                  "name": "Passed",
                  "fields": [
                    {
                      "name": "ref_index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "A proposal has been approved by referendum."
                  ]
                },
                {
                  "name": "NotPassed",
                  "fields": [
                    {
                      "name": "ref_index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "A proposal has been rejected by referendum."
                  ]
                },
                {
                  "name": "Cancelled",
                  "fields": [
                    {
                      "name": "ref_index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "A referendum has been cancelled."
                  ]
                },
                {
                  "name": "Delegated",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "target",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "An account has delegated their vote to another account."
                  ]
                },
                {
                  "name": "Undelegated",
                  "fields": [
                    {
                      "name": "account",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "An account has cancelled a previous delegation operation."
                  ]
                },
                {
                  "name": "Vetoed",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "proposal_hash",
                      "typeId": 12,
                      "typeName": "H256",
                      "docs": []
                    },
                    {
                      "name": "until",
                      "typeId": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "An external proposal has been vetoed."
                  ]
                },
                {
                  "name": "Blacklisted",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "typeId": 12,
                      "typeName": "H256",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": [
                    "A proposal_hash has been blacklisted permanently."
                  ]
                },
                {
                  "name": "Voted",
                  "fields": [
                    {
                      "name": "voter",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "ref_index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    },
                    {
                      "name": "vote",
                      "typeId": 79,
                      "typeName": "AccountVote<BalanceOf<T>>",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": [
                    "An account has voted in a referendum"
                  ]
                },
                {
                  "name": "Seconded",
                  "fields": [
                    {
                      "name": "seconder",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "prop_index",
                      "typeId": 4,
                      "typeName": "PropIndex",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": [
                    "An account has secconded a proposal"
                  ]
                },
                {
                  "name": "ProposalCanceled",
                  "fields": [
                    {
                      "name": "prop_index",
                      "typeId": 4,
                      "typeName": "PropIndex",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": [
                    "A proposal got canceled."
                  ]
                },
                {
                  "name": "MetadataSet",
                  "fields": [
                    {
                      "name": "owner",
                      "typeId": 81,
                      "typeName": "MetadataOwner",
                      "docs": [
                        "Metadata owner."
                      ]
                    },
                    {
                      "name": "hash",
                      "typeId": 12,
                      "typeName": "PreimageHash",
                      "docs": [
                        "Preimage hash."
                      ]
                    }
                  ],
                  "index": 14,
                  "docs": [
                    "Metadata for a proposal or a referendum has been set."
                  ]
                },
                {
                  "name": "MetadataCleared",
                  "fields": [
                    {
                      "name": "owner",
                      "typeId": 81,
                      "typeName": "MetadataOwner",
                      "docs": [
                        "Metadata owner."
                      ]
                    },
                    {
                      "name": "hash",
                      "typeId": 12,
                      "typeName": "PreimageHash",
                      "docs": [
                        "Preimage hash."
                      ]
                    }
                  ],
                  "index": 15,
                  "docs": [
                    "Metadata for a proposal or a referendum has been cleared."
                  ]
                },
                {
                  "name": "MetadataTransferred",
                  "fields": [
                    {
                      "name": "prev_owner",
                      "typeId": 81,
                      "typeName": "MetadataOwner",
                      "docs": [
                        "Previous metadata owner."
                      ]
                    },
                    {
                      "name": "owner",
                      "typeId": 81,
                      "typeName": "MetadataOwner",
                      "docs": [
                        "New metadata owner."
                      ]
                    },
                    {
                      "name": "hash",
                      "typeId": 12,
                      "typeName": "PreimageHash",
                      "docs": [
                        "Preimage hash."
                      ]
                    }
                  ],
                  "index": 16,
                  "docs": [
                    "Metadata has been transferred to new owner."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 78,
          "path": [
            "pallet_democracy",
            "vote_threshold",
            "VoteThreshold"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "SuperMajorityApprove",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "SuperMajorityAgainst",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "SimpleMajority",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 79,
          "path": [
            "pallet_democracy",
            "vote",
            "AccountVote"
          ],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Standard",
                  "fields": [
                    {
                      "name": "vote",
                      "typeId": 80,
                      "typeName": "Vote",
                      "docs": []
                    },
                    {
                      "name": "balance",
                      "typeId": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Split",
                  "fields": [
                    {
                      "name": "aye",
                      "typeId": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "nay",
                      "typeId": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 80,
          "path": [
            "pallet_democracy",
            "vote",
            "Vote"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 81,
          "path": [
            "pallet_democracy",
            "types",
            "MetadataOwner"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "External",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Proposal",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "PropIndex",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Referendum",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 82,
          "path": [
            "pallet_preimage",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Noted",
                  "fields": [
                    {
                      "name": "hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A preimage has been noted."
                  ]
                },
                {
                  "name": "Requested",
                  "fields": [
                    {
                      "name": "hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "A preimage has been requested."
                  ]
                },
                {
                  "name": "Cleared",
                  "fields": [
                    {
                      "name": "hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "A preimage has ben cleared."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 83,
          "path": [
            "pallet_conviction_voting",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Delegated",
                  "fields": [
                    {
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "An account has delegated their vote to another account. \\[who, target\\]"
                  ]
                },
                {
                  "name": "Undelegated",
                  "fields": [
                    {
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "An \\[account\\] has cancelled a previous delegation operation."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 84,
          "path": [
            "pallet_referenda",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Submitted",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    },
                    {
                      "name": "track",
                      "typeId": 56,
                      "typeName": "TrackIdOf<T, I>",
                      "docs": [
                        "The track (and by extension proposal dispatch origin) of this referendum."
                      ]
                    },
                    {
                      "name": "proposal",
                      "typeId": 85,
                      "typeName": "BoundedCallOf<T, I>",
                      "docs": [
                        "The proposal for the referendum."
                      ]
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A referendum has been submitted."
                  ]
                },
                {
                  "name": "DecisionDepositPlaced",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    },
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": [
                        "The account who placed the deposit."
                      ]
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": [
                        "The amount placed by the account."
                      ]
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "The decision deposit has been placed."
                  ]
                },
                {
                  "name": "DecisionDepositRefunded",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    },
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": [
                        "The account who placed the deposit."
                      ]
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": [
                        "The amount placed by the account."
                      ]
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "The decision deposit has been refunded."
                  ]
                },
                {
                  "name": "DepositSlashed",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": [
                        "The account who placed the deposit."
                      ]
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": [
                        "The amount placed by the account."
                      ]
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A deposit has been slashaed."
                  ]
                },
                {
                  "name": "DecisionStarted",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    },
                    {
                      "name": "track",
                      "typeId": 56,
                      "typeName": "TrackIdOf<T, I>",
                      "docs": [
                        "The track (and by extension proposal dispatch origin) of this referendum."
                      ]
                    },
                    {
                      "name": "proposal",
                      "typeId": 85,
                      "typeName": "BoundedCallOf<T, I>",
                      "docs": [
                        "The proposal for the referendum."
                      ]
                    },
                    {
                      "name": "tally",
                      "typeId": 327,
                      "typeName": "T::Tally",
                      "docs": [
                        "The current tally of votes in this referendum."
                      ]
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "A referendum has moved into the deciding phase."
                  ]
                },
                {
                  "name": "ConfirmStarted",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "ConfirmAborted",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "Confirmed",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    },
                    {
                      "name": "tally",
                      "typeId": 327,
                      "typeName": "T::Tally",
                      "docs": [
                        "The final tally of votes in this referendum."
                      ]
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "A referendum has ended its confirmation phase and is ready for approval."
                  ]
                },
                {
                  "name": "Approved",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "A referendum has been approved and its proposal has been scheduled."
                  ]
                },
                {
                  "name": "Rejected",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    },
                    {
                      "name": "tally",
                      "typeId": 327,
                      "typeName": "T::Tally",
                      "docs": [
                        "The final tally of votes in this referendum."
                      ]
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "A proposal has been rejected by referendum."
                  ]
                },
                {
                  "name": "TimedOut",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    },
                    {
                      "name": "tally",
                      "typeId": 327,
                      "typeName": "T::Tally",
                      "docs": [
                        "The final tally of votes in this referendum."
                      ]
                    }
                  ],
                  "index": 10,
                  "docs": [
                    "A referendum has been timed out without being decided."
                  ]
                },
                {
                  "name": "Cancelled",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    },
                    {
                      "name": "tally",
                      "typeId": 327,
                      "typeName": "T::Tally",
                      "docs": [
                        "The final tally of votes in this referendum."
                      ]
                    }
                  ],
                  "index": 11,
                  "docs": [
                    "A referendum has been cancelled."
                  ]
                },
                {
                  "name": "Killed",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    },
                    {
                      "name": "tally",
                      "typeId": 327,
                      "typeName": "T::Tally",
                      "docs": [
                        "The final tally of votes in this referendum."
                      ]
                    }
                  ],
                  "index": 12,
                  "docs": [
                    "A referendum has been killed."
                  ]
                },
                {
                  "name": "SubmissionDepositRefunded",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    },
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": [
                        "The account who placed the deposit."
                      ]
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": [
                        "The amount placed by the account."
                      ]
                    }
                  ],
                  "index": 13,
                  "docs": [
                    "The submission deposit has been refunded."
                  ]
                },
                {
                  "name": "MetadataSet",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    },
                    {
                      "name": "hash",
                      "typeId": 12,
                      "typeName": "PreimageHash",
                      "docs": [
                        "Preimage hash."
                      ]
                    }
                  ],
                  "index": 14,
                  "docs": [
                    "Metadata for a referendum has been set."
                  ]
                },
                {
                  "name": "MetadataCleared",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    },
                    {
                      "name": "hash",
                      "typeId": 12,
                      "typeName": "PreimageHash",
                      "docs": [
                        "Preimage hash."
                      ]
                    }
                  ],
                  "index": 15,
                  "docs": [
                    "Metadata for a referendum has been cleared."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 85,
          "path": [
            "frame_support",
            "traits",
            "preimages",
            "Bounded"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 86
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Legacy",
                  "fields": [
                    {
                      "name": "hash",
                      "typeId": 12,
                      "typeName": "Hash",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Inline",
                  "fields": [
                    {
                      "typeId": 326,
                      "typeName": "BoundedInline",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Lookup",
                  "fields": [
                    {
                      "name": "hash",
                      "typeId": 12,
                      "typeName": "Hash",
                      "docs": []
                    },
                    {
                      "name": "len",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 86,
          "path": [
            "moonbeam_runtime",
            "RuntimeCall"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "System",
                  "fields": [
                    {
                      "typeId": 87,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "ParachainSystem",
                  "fields": [
                    {
                      "typeId": 91,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParachainSystem, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Timestamp",
                  "fields": [
                    {
                      "typeId": 105,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "RootTesting",
                  "fields": [
                    {
                      "typeId": 106,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<RootTesting, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Balances",
                  "fields": [
                    {
                      "typeId": 107,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "ParachainStaking",
                  "fields": [
                    {
                      "typeId": 110,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParachainStaking, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 20,
                  "docs": []
                },
                {
                  "name": "AuthorInherent",
                  "fields": [
                    {
                      "typeId": 113,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AuthorInherent, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": []
                },
                {
                  "name": "AuthorFilter",
                  "fields": [
                    {
                      "typeId": 114,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AuthorFilter, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 22,
                  "docs": []
                },
                {
                  "name": "AuthorMapping",
                  "fields": [
                    {
                      "typeId": 115,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AuthorMapping, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 23,
                  "docs": []
                },
                {
                  "name": "MoonbeamOrbiters",
                  "fields": [
                    {
                      "typeId": 116,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<MoonbeamOrbiters, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 24,
                  "docs": []
                },
                {
                  "name": "Utility",
                  "fields": [
                    {
                      "typeId": 117,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 30,
                  "docs": []
                },
                {
                  "name": "Proxy",
                  "fields": [
                    {
                      "typeId": 139,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Proxy, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 31,
                  "docs": []
                },
                {
                  "name": "MaintenanceMode",
                  "fields": [
                    {
                      "typeId": 141,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<MaintenanceMode, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 32,
                  "docs": []
                },
                {
                  "name": "Identity",
                  "fields": [
                    {
                      "typeId": 142,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Identity, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 33,
                  "docs": []
                },
                {
                  "name": "Multisig",
                  "fields": [
                    {
                      "typeId": 184,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Multisig, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 36,
                  "docs": []
                },
                {
                  "name": "EVM",
                  "fields": [
                    {
                      "typeId": 186,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<EVM, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 51,
                  "docs": []
                },
                {
                  "name": "Ethereum",
                  "fields": [
                    {
                      "typeId": 192,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Ethereum, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 52,
                  "docs": []
                },
                {
                  "name": "Scheduler",
                  "fields": [
                    {
                      "typeId": 202,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Scheduler, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 60,
                  "docs": []
                },
                {
                  "name": "Democracy",
                  "fields": [
                    {
                      "typeId": 204,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Democracy, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 61,
                  "docs": []
                },
                {
                  "name": "Preimage",
                  "fields": [
                    {
                      "typeId": 208,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Preimage, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 62,
                  "docs": []
                },
                {
                  "name": "ConvictionVoting",
                  "fields": [
                    {
                      "typeId": 209,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ConvictionVoting, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 63,
                  "docs": []
                },
                {
                  "name": "Referenda",
                  "fields": [
                    {
                      "typeId": 214,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Referenda, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 64,
                  "docs": []
                },
                {
                  "name": "Whitelist",
                  "fields": [
                    {
                      "typeId": 216,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Whitelist, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 66,
                  "docs": []
                },
                {
                  "name": "CouncilCollective",
                  "fields": [
                    {
                      "typeId": 217,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CouncilCollective, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 70,
                  "docs": []
                },
                {
                  "name": "TechCommitteeCollective",
                  "fields": [
                    {
                      "typeId": 218,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TechCommitteeCollective, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 71,
                  "docs": []
                },
                {
                  "name": "TreasuryCouncilCollective",
                  "fields": [
                    {
                      "typeId": 219,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TreasuryCouncilCollective, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 72,
                  "docs": []
                },
                {
                  "name": "OpenTechCommitteeCollective",
                  "fields": [
                    {
                      "typeId": 220,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<OpenTechCommitteeCollective, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 73,
                  "docs": []
                },
                {
                  "name": "Treasury",
                  "fields": [
                    {
                      "typeId": 221,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Treasury, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 80,
                  "docs": []
                },
                {
                  "name": "CrowdloanRewards",
                  "fields": [
                    {
                      "typeId": 222,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CrowdloanRewards, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 90,
                  "docs": []
                },
                {
                  "name": "DmpQueue",
                  "fields": [
                    {
                      "typeId": 233,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<DmpQueue, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 102,
                  "docs": []
                },
                {
                  "name": "PolkadotXcm",
                  "fields": [
                    {
                      "typeId": 234,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<PolkadotXcm, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 103,
                  "docs": []
                },
                {
                  "name": "Assets",
                  "fields": [
                    {
                      "typeId": 297,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Assets, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 104,
                  "docs": []
                },
                {
                  "name": "AssetManager",
                  "fields": [
                    {
                      "typeId": 298,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AssetManager, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 105,
                  "docs": []
                },
                {
                  "name": "XTokens",
                  "fields": [
                    {
                      "typeId": 301,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XTokens, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 106,
                  "docs": []
                },
                {
                  "name": "XcmTransactor",
                  "fields": [
                    {
                      "typeId": 306,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XcmTransactor, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 107,
                  "docs": []
                },
                {
                  "name": "LocalAssets",
                  "fields": [
                    {
                      "typeId": 316,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<LocalAssets, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 108,
                  "docs": []
                },
                {
                  "name": "EthereumXcm",
                  "fields": [
                    {
                      "typeId": 317,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<EthereumXcm, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 109,
                  "docs": []
                },
                {
                  "name": "Randomness",
                  "fields": [
                    {
                      "typeId": 325,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Randomness, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 120,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 87,
          "path": [
            "frame_system",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "remark",
                  "fields": [
                    {
                      "name": "remark",
                      "typeId": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Make some on-chain remark.",
                    "",
                    "- `O(1)`"
                  ]
                },
                {
                  "name": "set_heap_pages",
                  "fields": [
                    {
                      "name": "pages",
                      "typeId": 11,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Set the number of pages in the WebAssembly environment's heap."
                  ]
                },
                {
                  "name": "set_code",
                  "fields": [
                    {
                      "name": "code",
                      "typeId": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Set the new runtime code."
                  ]
                },
                {
                  "name": "set_code_without_checks",
                  "fields": [
                    {
                      "name": "code",
                      "typeId": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Set the new runtime code without doing any checks of the given `code`."
                  ]
                },
                {
                  "name": "set_storage",
                  "fields": [
                    {
                      "name": "items",
                      "typeId": 88,
                      "typeName": "Vec<KeyValue>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Set some items of storage."
                  ]
                },
                {
                  "name": "kill_storage",
                  "fields": [
                    {
                      "name": "keys",
                      "typeId": 90,
                      "typeName": "Vec<Key>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Kill some items from storage."
                  ]
                },
                {
                  "name": "kill_prefix",
                  "fields": [
                    {
                      "name": "prefix",
                      "typeId": 14,
                      "typeName": "Key",
                      "docs": []
                    },
                    {
                      "name": "subkeys",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Kill all storage items with a key that starts with the given prefix.",
                    "",
                    "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
                    "the prefix we are removing to accurately calculate the weight of this function."
                  ]
                },
                {
                  "name": "remark_with_event",
                  "fields": [
                    {
                      "name": "remark",
                      "typeId": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Make some on-chain remark and emit event."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 88,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 89
            }
          },
          "docs": []
        },
        {
          "id": 89,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                14,
                14
              ]
            }
          },
          "docs": []
        },
        {
          "id": 90,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 14
            }
          },
          "docs": []
        },
        {
          "id": 91,
          "path": [
            "cumulus_pallet_parachain_system",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "set_validation_data",
                  "fields": [
                    {
                      "name": "data",
                      "typeId": 92,
                      "typeName": "ParachainInherentData",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Set the current validation data.",
                    "",
                    "This should be invoked exactly once per block. It will panic at the finalization",
                    "phase if the call was not invoked.",
                    "",
                    "The dispatch origin for this call must be `Inherent`",
                    "",
                    "As a side effect, this function upgrades the current validation function",
                    "if the appropriate time has come."
                  ]
                },
                {
                  "name": "sudo_send_upward_message",
                  "fields": [
                    {
                      "name": "message",
                      "typeId": 14,
                      "typeName": "UpwardMessage",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "authorize_upgrade",
                  "fields": [
                    {
                      "name": "code_hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "check_version",
                      "typeId": 37,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied",
                    "later.",
                    "",
                    "The `check_version` parameter sets a boolean flag for whether or not the runtime's spec",
                    "version and name should be verified on upgrade. Since the authorization only has a hash,",
                    "it cannot actually perform the verification.",
                    "",
                    "This call requires Root origin."
                  ]
                },
                {
                  "name": "enact_authorized_upgrade",
                  "fields": [
                    {
                      "name": "code",
                      "typeId": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Provide the preimage (runtime binary) `code` for an upgrade that has been authorized.",
                    "",
                    "If the authorization required a version check, this call will ensure the spec name",
                    "remains unchanged and that the spec version has increased.",
                    "",
                    "Note that this function will not apply the new `code`, but only attempt to schedule the",
                    "upgrade with the Relay Chain.",
                    "",
                    "All origins are allowed."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 92,
          "path": [
            "cumulus_primitives_parachain_inherent",
            "ParachainInherentData"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "validation_data",
                  "typeId": 93,
                  "typeName": "PersistedValidationData",
                  "docs": []
                },
                {
                  "name": "relay_chain_state",
                  "typeId": 95,
                  "typeName": "sp_trie::StorageProof",
                  "docs": []
                },
                {
                  "name": "downward_messages",
                  "typeId": 97,
                  "typeName": "Vec<InboundDownwardMessage>",
                  "docs": []
                },
                {
                  "name": "horizontal_messages",
                  "typeId": 99,
                  "typeName": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 93,
          "path": [
            "polkadot_primitives",
            "v4",
            "PersistedValidationData"
          ],
          "params": [
            {
              "name": "H",
              "typeId": 12
            },
            {
              "name": "N",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "parent_head",
                  "typeId": 94,
                  "typeName": "HeadData",
                  "docs": []
                },
                {
                  "name": "relay_parent_number",
                  "typeId": 4,
                  "typeName": "N",
                  "docs": []
                },
                {
                  "name": "relay_parent_storage_root",
                  "typeId": 12,
                  "typeName": "H",
                  "docs": []
                },
                {
                  "name": "max_pov_size",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 94,
          "path": [
            "polkadot_parachain",
            "primitives",
            "HeadData"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 95,
          "path": [
            "sp_trie",
            "storage_proof",
            "StorageProof"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "trie_nodes",
                  "typeId": 96,
                  "typeName": "BTreeSet<Vec<u8>>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 96,
          "path": [
            "BTreeSet"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 14
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 90,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 97,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 98
            }
          },
          "docs": []
        },
        {
          "id": 98,
          "path": [
            "polkadot_core_primitives",
            "InboundDownwardMessage"
          ],
          "params": [
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "sent_at",
                  "typeId": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "msg",
                  "typeId": 14,
                  "typeName": "DownwardMessage",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 99,
          "path": [
            "BTreeMap"
          ],
          "params": [
            {
              "name": "K",
              "typeId": 100
            },
            {
              "name": "V",
              "typeId": 101
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 103,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 100,
          "path": [
            "polkadot_parachain",
            "primitives",
            "Id"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 101,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 102
            }
          },
          "docs": []
        },
        {
          "id": 102,
          "path": [
            "polkadot_core_primitives",
            "InboundHrmpMessage"
          ],
          "params": [
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "sent_at",
                  "typeId": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "data",
                  "typeId": 14,
                  "typeName": "sp_std::vec::Vec<u8>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 103,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 104
            }
          },
          "docs": []
        },
        {
          "id": 104,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                100,
                101
              ]
            }
          },
          "docs": []
        },
        {
          "id": 105,
          "path": [
            "pallet_timestamp",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "set",
                  "fields": [
                    {
                      "name": "now",
                      "typeId": 10,
                      "typeName": "T::Moment",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Set the current time.",
                    "",
                    "This call should be invoked exactly once per block. It will panic at the finalization",
                    "phase, if this call hasn't been invoked by that time.",
                    "",
                    "The timestamp should be greater than the previous one by the amount specified by",
                    "`MinimumPeriod`.",
                    "",
                    "The dispatch origin for this call must be `Inherent`.",
                    "",
                    "## Complexity",
                    "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
                    "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in",
                    "  `on_finalize`)",
                    "- 1 event handler `on_timestamp_set`. Must be `O(1)`."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 106,
          "path": [
            "pallet_root_testing",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "fill_block",
                  "fields": [
                    {
                      "name": "ratio",
                      "typeId": 42,
                      "typeName": "Perbill",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A dispatch that will fill the block weight up to the given ratio."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 107,
          "path": [
            "pallet_balances",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "transfer_allow_death",
                  "fields": [
                    {
                      "name": "dest",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "typeId": 108,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Transfer some liquid free balance to another account.",
                    "",
                    "`transfer_allow_death` will set the `FreeBalance` of the sender and receiver.",
                    "If the sender's account is below the existential deposit as a result",
                    "of the transfer, the account will be reaped.",
                    "",
                    "The dispatch origin for this call must be `Signed` by the transactor."
                  ]
                },
                {
                  "name": "set_balance_deprecated",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "new_free",
                      "typeId": 108,
                      "typeName": "T::Balance",
                      "docs": []
                    },
                    {
                      "name": "old_reserved",
                      "typeId": 108,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Set the regular balance of a given account; it also takes a reserved balance but this",
                    "must be the same as the account's current reserved balance.",
                    "",
                    "The dispatch origin for this call is `root`.",
                    "",
                    "WARNING: This call is DEPRECATED! Use `force_set_balance` instead."
                  ]
                },
                {
                  "name": "force_transfer",
                  "fields": [
                    {
                      "name": "source",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "typeId": 108,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Exactly as `transfer_allow_death`, except the origin must be root and the source account",
                    "may be specified."
                  ]
                },
                {
                  "name": "transfer_keep_alive",
                  "fields": [
                    {
                      "name": "dest",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "typeId": 108,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Same as the [`transfer_allow_death`] call, but with a check that the transfer will not",
                    "kill the origin account.",
                    "",
                    "99% of the time you want [`transfer_allow_death`] instead.",
                    "",
                    "[`transfer_allow_death`]: struct.Pallet.html#method.transfer"
                  ]
                },
                {
                  "name": "transfer_all",
                  "fields": [
                    {
                      "name": "dest",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "keep_alive",
                      "typeId": 37,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Transfer the entire transferable balance from the caller account.",
                    "",
                    "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
                    "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
                    "transferred by this function. To ensure that this function results in a killed account,",
                    "you might need to prepare the account by removing any reference counters, storage",
                    "deposits, etc...",
                    "",
                    "The dispatch origin of this call must be Signed.",
                    "",
                    "- `dest`: The recipient of the transfer.",
                    "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
                    "  of the funds the account has, causing the sender account to be killed (false), or",
                    "  transfer everything except at least the existential deposit, which will guarantee to",
                    "  keep the sender account alive (true)."
                  ]
                },
                {
                  "name": "force_unreserve",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Unreserve some balance from a user by force.",
                    "",
                    "Can only be called by ROOT."
                  ]
                },
                {
                  "name": "upgrade_accounts",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 109,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Upgrade a specified account.",
                    "",
                    "- `origin`: Must be `Signed`.",
                    "- `who`: The account to be upgraded.",
                    "",
                    "This will waive the transaction fee if at least all but 10% of the accounts needed to",
                    "be upgraded. (We let some not have to be upgraded just in order to allow for the",
                    "possibililty of churn)."
                  ]
                },
                {
                  "name": "transfer",
                  "fields": [
                    {
                      "name": "dest",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "typeId": 108,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Alias for `transfer_allow_death`, provided only for name-wise compatibility.",
                    "",
                    "WARNING: DEPRECATED! Will be released in approximately 3 months."
                  ]
                },
                {
                  "name": "force_set_balance",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "new_free",
                      "typeId": 108,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "Set the regular balance of a given account.",
                    "",
                    "The dispatch origin for this call is `root`."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 108,
          "path": [],
          "params": [],
          "type": {
            "tag": "Compact",
            "value": {
              "typeParam": 6
            }
          },
          "docs": []
        },
        {
          "id": 109,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 0
            }
          },
          "docs": []
        },
        {
          "id": 110,
          "path": [
            "pallet_parachain_staking",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "set_staking_expectations",
                  "fields": [
                    {
                      "name": "expectations",
                      "typeId": 111,
                      "typeName": "Range<BalanceOf<T>>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Set the expectations for total staked. These expectations determine the issuance for",
                    "the round according to logic in `fn compute_issuance`"
                  ]
                },
                {
                  "name": "set_inflation",
                  "fields": [
                    {
                      "name": "schedule",
                      "typeId": 112,
                      "typeName": "Range<Perbill>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Set the annual inflation rate to derive per-round inflation"
                  ]
                },
                {
                  "name": "set_parachain_bond_account",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Set the account that will hold funds set aside for parachain bond"
                  ]
                },
                {
                  "name": "set_parachain_bond_reserve_percent",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 41,
                      "typeName": "Percent",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Set the percent of inflation set aside for parachain bond"
                  ]
                },
                {
                  "name": "set_total_selected",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Set the total number of collator candidates selected per round",
                    "- changes are not applied until the start of the next round"
                  ]
                },
                {
                  "name": "set_collator_commission",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 42,
                      "typeName": "Perbill",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Set the commission for all collators"
                  ]
                },
                {
                  "name": "set_blocks_per_round",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Set blocks per round",
                    "- if called with `new` less than length of current round, will transition immediately",
                    "in the next block",
                    "- also updates per-round inflation config"
                  ]
                },
                {
                  "name": "join_candidates",
                  "fields": [
                    {
                      "name": "bond",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "candidate_count",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Join the set of collator candidates"
                  ]
                },
                {
                  "name": "schedule_leave_candidates",
                  "fields": [
                    {
                      "name": "candidate_count",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "Request to leave the set of candidates. If successful, the account is immediately",
                    "removed from the candidate pool to prevent selection as a collator."
                  ]
                },
                {
                  "name": "execute_leave_candidates",
                  "fields": [
                    {
                      "name": "candidate",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "candidate_delegation_count",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "Execute leave candidates request"
                  ]
                },
                {
                  "name": "cancel_leave_candidates",
                  "fields": [
                    {
                      "name": "candidate_count",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": [
                    "Cancel open request to leave candidates",
                    "- only callable by collator account",
                    "- result upon successful call is the candidate is active in the candidate pool"
                  ]
                },
                {
                  "name": "go_offline",
                  "fields": [],
                  "index": 11,
                  "docs": [
                    "Temporarily leave the set of collator candidates without unbonding"
                  ]
                },
                {
                  "name": "go_online",
                  "fields": [],
                  "index": 12,
                  "docs": [
                    "Rejoin the set of collator candidates if previously had called `go_offline`"
                  ]
                },
                {
                  "name": "candidate_bond_more",
                  "fields": [
                    {
                      "name": "more",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": [
                    "Increase collator candidate self bond by `more`"
                  ]
                },
                {
                  "name": "schedule_candidate_bond_less",
                  "fields": [
                    {
                      "name": "less",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": [
                    "Request by collator candidate to decrease self bond by `less`"
                  ]
                },
                {
                  "name": "execute_candidate_bond_less",
                  "fields": [
                    {
                      "name": "candidate",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": [
                    "Execute pending request to adjust the collator candidate self bond"
                  ]
                },
                {
                  "name": "cancel_candidate_bond_less",
                  "fields": [],
                  "index": 16,
                  "docs": [
                    "Cancel pending request to adjust the collator candidate self bond"
                  ]
                },
                {
                  "name": "delegate",
                  "fields": [
                    {
                      "name": "candidate",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "candidate_delegation_count",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "delegation_count",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 17,
                  "docs": [
                    "DEPRECATED use delegateWithAutoCompound",
                    "If caller is not a delegator and not a collator, then join the set of delegators",
                    "If caller is a delegator, then makes delegation to change their delegation state"
                  ]
                },
                {
                  "name": "delegate_with_auto_compound",
                  "fields": [
                    {
                      "name": "candidate",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "auto_compound",
                      "typeId": 41,
                      "typeName": "Percent",
                      "docs": []
                    },
                    {
                      "name": "candidate_delegation_count",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "candidate_auto_compounding_delegation_count",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "delegation_count",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 18,
                  "docs": [
                    "If caller is not a delegator and not a collator, then join the set of delegators",
                    "If caller is a delegator, then makes delegation to change their delegation state",
                    "Sets the auto-compound config for the delegation"
                  ]
                },
                {
                  "name": "removed_call_19",
                  "fields": [],
                  "index": 19,
                  "docs": [
                    "REMOVED, was schedule_leave_delegators"
                  ]
                },
                {
                  "name": "removed_call_20",
                  "fields": [],
                  "index": 20,
                  "docs": [
                    "REMOVED, was execute_leave_delegators"
                  ]
                },
                {
                  "name": "removed_call_21",
                  "fields": [],
                  "index": 21,
                  "docs": [
                    "REMOVED, was cancel_leave_delegators"
                  ]
                },
                {
                  "name": "schedule_revoke_delegation",
                  "fields": [
                    {
                      "name": "collator",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 22,
                  "docs": [
                    "Request to revoke an existing delegation. If successful, the delegation is scheduled",
                    "to be allowed to be revoked via the `execute_delegation_request` extrinsic.",
                    "The delegation receives no rewards for the rounds while a revoke is pending.",
                    "A revoke may not be performed if any other scheduled request is pending."
                  ]
                },
                {
                  "name": "delegator_bond_more",
                  "fields": [
                    {
                      "name": "candidate",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "more",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 23,
                  "docs": [
                    "Bond more for delegators wrt a specific collator candidate."
                  ]
                },
                {
                  "name": "schedule_delegator_bond_less",
                  "fields": [
                    {
                      "name": "candidate",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "less",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 24,
                  "docs": [
                    "Request bond less for delegators wrt a specific collator candidate. The delegation's",
                    "rewards for rounds while the request is pending use the reduced bonded amount.",
                    "A bond less may not be performed if any other scheduled request is pending."
                  ]
                },
                {
                  "name": "execute_delegation_request",
                  "fields": [
                    {
                      "name": "delegator",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "candidate",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 25,
                  "docs": [
                    "Execute pending request to change an existing delegation"
                  ]
                },
                {
                  "name": "cancel_delegation_request",
                  "fields": [
                    {
                      "name": "candidate",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 26,
                  "docs": [
                    "Cancel request to change an existing delegation."
                  ]
                },
                {
                  "name": "set_auto_compound",
                  "fields": [
                    {
                      "name": "candidate",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "typeId": 41,
                      "typeName": "Percent",
                      "docs": []
                    },
                    {
                      "name": "candidate_auto_compounding_delegation_count_hint",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "delegation_count_hint",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 27,
                  "docs": [
                    "Sets the auto-compounding reward percentage for a delegation."
                  ]
                },
                {
                  "name": "hotfix_remove_delegation_requests_exited_candidates",
                  "fields": [
                    {
                      "name": "candidates",
                      "typeId": 109,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    }
                  ],
                  "index": 28,
                  "docs": [
                    "Hotfix to remove existing empty entries for candidates that have left."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 111,
          "path": [
            "pallet_parachain_staking",
            "inflation",
            "Range"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "min",
                  "typeId": 6,
                  "typeName": "T",
                  "docs": []
                },
                {
                  "name": "ideal",
                  "typeId": 6,
                  "typeName": "T",
                  "docs": []
                },
                {
                  "name": "max",
                  "typeId": 6,
                  "typeName": "T",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 112,
          "path": [
            "pallet_parachain_staking",
            "inflation",
            "Range"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 42
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "min",
                  "typeId": 42,
                  "typeName": "T",
                  "docs": []
                },
                {
                  "name": "ideal",
                  "typeId": 42,
                  "typeName": "T",
                  "docs": []
                },
                {
                  "name": "max",
                  "typeId": 42,
                  "typeName": "T",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 113,
          "path": [
            "pallet_author_inherent",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "kick_off_authorship_validation",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "This inherent is a workaround to run code after the \"real\" inherents have executed,",
                    "but before transactions are executed."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 114,
          "path": [
            "pallet_author_slot_filter",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "set_eligible",
                  "fields": [
                    {
                      "name": "new",
                      "typeId": 44,
                      "typeName": "EligibilityValue",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Update the eligible count. Intended to be called by governance."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 115,
          "path": [
            "pallet_author_mapping",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "add_association",
                  "fields": [
                    {
                      "name": "nimbus_id",
                      "typeId": 46,
                      "typeName": "NimbusId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Register your NimbusId onchain so blocks you author are associated with your account.",
                    "",
                    "Users who have been (or will soon be) elected active collators in staking,",
                    "should submit this extrinsic to have their blocks accepted and earn rewards."
                  ]
                },
                {
                  "name": "update_association",
                  "fields": [
                    {
                      "name": "old_nimbus_id",
                      "typeId": 46,
                      "typeName": "NimbusId",
                      "docs": []
                    },
                    {
                      "name": "new_nimbus_id",
                      "typeId": 46,
                      "typeName": "NimbusId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Change your Mapping.",
                    "",
                    "This is useful for normal key rotation or for when switching from one physical collator",
                    "machine to another. No new security deposit is required.",
                    "This sets keys to new_nimbus_id.into() by default."
                  ]
                },
                {
                  "name": "clear_association",
                  "fields": [
                    {
                      "name": "nimbus_id",
                      "typeId": 46,
                      "typeName": "NimbusId",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Clear your Mapping.",
                    "",
                    "This is useful when you are no longer an author and would like to re-claim your security",
                    "deposit."
                  ]
                },
                {
                  "name": "remove_keys",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Remove your Mapping.",
                    "",
                    "This is useful when you are no longer an author and would like to re-claim your security",
                    "deposit."
                  ]
                },
                {
                  "name": "set_keys",
                  "fields": [
                    {
                      "name": "keys",
                      "typeId": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Set association and session keys at once.",
                    "",
                    "This is useful for key rotation to update Nimbus and VRF keys in one call.",
                    "No new security deposit is required. Will replace `update_association` which is kept",
                    "now for backwards compatibility reasons."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 116,
          "path": [
            "pallet_moonbeam_orbiters",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "collator_add_orbiter",
                  "fields": [
                    {
                      "name": "orbiter",
                      "typeId": 0,
                      "typeName": "<T::Lookup as StaticLookup>::Source",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Add an orbiter in a collator pool"
                  ]
                },
                {
                  "name": "collator_remove_orbiter",
                  "fields": [
                    {
                      "name": "orbiter",
                      "typeId": 0,
                      "typeName": "<T::Lookup as StaticLookup>::Source",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Remove an orbiter from the caller collator pool"
                  ]
                },
                {
                  "name": "orbiter_leave_collator_pool",
                  "fields": [
                    {
                      "name": "collator",
                      "typeId": 0,
                      "typeName": "<T::Lookup as StaticLookup>::Source",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Remove the caller from the specified collator pool"
                  ]
                },
                {
                  "name": "orbiter_register",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Registering as an orbiter"
                  ]
                },
                {
                  "name": "orbiter_unregister",
                  "fields": [
                    {
                      "name": "collators_pool_count",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Deregistering from orbiters"
                  ]
                },
                {
                  "name": "add_collator",
                  "fields": [
                    {
                      "name": "collator",
                      "typeId": 0,
                      "typeName": "<T::Lookup as StaticLookup>::Source",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Add a collator to orbiters program."
                  ]
                },
                {
                  "name": "remove_collator",
                  "fields": [
                    {
                      "name": "collator",
                      "typeId": 0,
                      "typeName": "<T::Lookup as StaticLookup>::Source",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Remove a collator from orbiters program."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 117,
          "path": [
            "pallet_utility",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "batch",
                  "fields": [
                    {
                      "name": "calls",
                      "typeId": 118,
                      "typeName": "Vec<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Send a batch of dispatch calls.",
                    "",
                    "May be called from any origin except `None`.",
                    "",
                    "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                    "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                    "",
                    "If origin is root then the calls are dispatched without checking origin filter. (This",
                    "includes bypassing `frame_system::Config::BaseCallFilter`).",
                    "",
                    "## Complexity",
                    "- O(C) where C is the number of calls to be batched.",
                    "",
                    "This will return `Ok` in all circumstances. To determine the success of the batch, an",
                    "event is deposited. If a call failed and the batch was interrupted, then the",
                    "`BatchInterrupted` event is deposited, along with the number of successful calls made",
                    "and the error of the failed call. If all were successful, then the `BatchCompleted`",
                    "event is deposited."
                  ]
                },
                {
                  "name": "as_derivative",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 56,
                      "typeName": "u16",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "typeId": 86,
                      "typeName": "Box<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Send a call through an indexed pseudonym of the sender.",
                    "",
                    "Filter from origin are passed along. The call will be dispatched with an origin which",
                    "use the same filter as the origin of this call.",
                    "",
                    "NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
                    "because you expect `proxy` to have been used prior in the call stack and you do not want",
                    "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
                    "in the Multisig pallet instead.",
                    "",
                    "NOTE: Prior to version *12, this was called `as_limited_sub`.",
                    "",
                    "The dispatch origin for this call must be _Signed_."
                  ]
                },
                {
                  "name": "batch_all",
                  "fields": [
                    {
                      "name": "calls",
                      "typeId": 118,
                      "typeName": "Vec<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Send a batch of dispatch calls and atomically execute them.",
                    "The whole transaction will rollback and fail if any of the calls failed.",
                    "",
                    "May be called from any origin except `None`.",
                    "",
                    "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                    "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                    "",
                    "If origin is root then the calls are dispatched without checking origin filter. (This",
                    "includes bypassing `frame_system::Config::BaseCallFilter`).",
                    "",
                    "## Complexity",
                    "- O(C) where C is the number of calls to be batched."
                  ]
                },
                {
                  "name": "dispatch_as",
                  "fields": [
                    {
                      "name": "as_origin",
                      "typeId": 119,
                      "typeName": "Box<T::PalletsOrigin>",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "typeId": 86,
                      "typeName": "Box<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Dispatches a function call with a provided origin.",
                    "",
                    "The dispatch origin for this call must be _Root_.",
                    "",
                    "## Complexity",
                    "- O(1)."
                  ]
                },
                {
                  "name": "force_batch",
                  "fields": [
                    {
                      "name": "calls",
                      "typeId": 118,
                      "typeName": "Vec<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Send a batch of dispatch calls.",
                    "Unlike `batch`, it allows errors and won't interrupt.",
                    "",
                    "May be called from any origin except `None`.",
                    "",
                    "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                    "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                    "",
                    "If origin is root then the calls are dispatch without checking origin filter. (This",
                    "includes bypassing `frame_system::Config::BaseCallFilter`).",
                    "",
                    "## Complexity",
                    "- O(C) where C is the number of calls to be batched."
                  ]
                },
                {
                  "name": "with_weight",
                  "fields": [
                    {
                      "name": "call",
                      "typeId": 86,
                      "typeName": "Box<<T as Config>::RuntimeCall>",
                      "docs": []
                    },
                    {
                      "name": "weight",
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Dispatch a function call with a specified weight.",
                    "",
                    "This function does not check the weight of the call, and instead allows the",
                    "Root origin to specify the weight of the call.",
                    "",
                    "The dispatch origin for this call must be _Root_."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 118,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 86
            }
          },
          "docs": []
        },
        {
          "id": 119,
          "path": [
            "moonbeam_runtime",
            "OriginCaller"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "system",
                  "fields": [
                    {
                      "typeId": 120,
                      "typeName": "frame_system::Origin<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Ethereum",
                  "fields": [
                    {
                      "typeId": 121,
                      "typeName": "pallet_ethereum::Origin",
                      "docs": []
                    }
                  ],
                  "index": 52,
                  "docs": []
                },
                {
                  "name": "Origins",
                  "fields": [
                    {
                      "typeId": 122,
                      "typeName": "governance::custom_origins::Origin",
                      "docs": []
                    }
                  ],
                  "index": 65,
                  "docs": []
                },
                {
                  "name": "CouncilCollective",
                  "fields": [
                    {
                      "typeId": 123,
                      "typeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance1>",
                      "docs": []
                    }
                  ],
                  "index": 70,
                  "docs": []
                },
                {
                  "name": "TechCommitteeCollective",
                  "fields": [
                    {
                      "typeId": 124,
                      "typeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance2>",
                      "docs": []
                    }
                  ],
                  "index": 71,
                  "docs": []
                },
                {
                  "name": "TreasuryCouncilCollective",
                  "fields": [
                    {
                      "typeId": 125,
                      "typeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance3>",
                      "docs": []
                    }
                  ],
                  "index": 72,
                  "docs": []
                },
                {
                  "name": "OpenTechCommitteeCollective",
                  "fields": [
                    {
                      "typeId": 126,
                      "typeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance4>",
                      "docs": []
                    }
                  ],
                  "index": 73,
                  "docs": []
                },
                {
                  "name": "CumulusXcm",
                  "fields": [
                    {
                      "typeId": 127,
                      "typeName": "cumulus_pallet_xcm::Origin",
                      "docs": []
                    }
                  ],
                  "index": 101,
                  "docs": []
                },
                {
                  "name": "PolkadotXcm",
                  "fields": [
                    {
                      "typeId": 128,
                      "typeName": "pallet_xcm::Origin",
                      "docs": []
                    }
                  ],
                  "index": 103,
                  "docs": []
                },
                {
                  "name": "EthereumXcm",
                  "fields": [
                    {
                      "typeId": 137,
                      "typeName": "pallet_ethereum_xcm::Origin",
                      "docs": []
                    }
                  ],
                  "index": 109,
                  "docs": []
                },
                {
                  "name": "Void",
                  "fields": [
                    {
                      "typeId": 138,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::Void",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 120,
          "path": [
            "frame_support",
            "dispatch",
            "RawOrigin"
          ],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Root",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Signed",
                  "fields": [
                    {
                      "typeId": 0,
                      "typeName": "AccountId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "None",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 121,
          "path": [
            "pallet_ethereum",
            "RawOrigin"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "EthereumTransaction",
                  "fields": [
                    {
                      "typeId": 64,
                      "typeName": "H160",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 122,
          "path": [
            "moonbeam_runtime",
            "governance",
            "origins",
            "custom_origins",
            "Origin"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "WhitelistedCaller",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "GeneralAdmin",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "ReferendumCanceller",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "ReferendumKiller",
                  "fields": [],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 123,
          "path": [
            "pallet_collective",
            "RawOrigin"
          ],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Members",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    },
                    {
                      "typeId": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Member",
                  "fields": [
                    {
                      "typeId": 0,
                      "typeName": "AccountId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "_Phantom",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 124,
          "path": [
            "pallet_collective",
            "RawOrigin"
          ],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Members",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    },
                    {
                      "typeId": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Member",
                  "fields": [
                    {
                      "typeId": 0,
                      "typeName": "AccountId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "_Phantom",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 125,
          "path": [
            "pallet_collective",
            "RawOrigin"
          ],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Members",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    },
                    {
                      "typeId": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Member",
                  "fields": [
                    {
                      "typeId": 0,
                      "typeName": "AccountId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "_Phantom",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 126,
          "path": [
            "pallet_collective",
            "RawOrigin"
          ],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Members",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    },
                    {
                      "typeId": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Member",
                  "fields": [
                    {
                      "typeId": 0,
                      "typeName": "AccountId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "_Phantom",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 127,
          "path": [
            "cumulus_pallet_xcm",
            "pallet",
            "Origin"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Relay",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "SiblingParachain",
                  "fields": [
                    {
                      "typeId": 100,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 128,
          "path": [
            "pallet_xcm",
            "pallet",
            "Origin"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Xcm",
                  "fields": [
                    {
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Response",
                  "fields": [
                    {
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 129,
          "path": [
            "xcm",
            "v3",
            "multilocation",
            "MultiLocation"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "parents",
                  "typeId": 2,
                  "typeName": "u8",
                  "docs": []
                },
                {
                  "name": "interior",
                  "typeId": 130,
                  "typeName": "Junctions",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 130,
          "path": [
            "xcm",
            "v3",
            "junctions",
            "Junctions"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Here",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "X1",
                  "fields": [
                    {
                      "typeId": 131,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "X2",
                  "fields": [
                    {
                      "typeId": 131,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 131,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "X3",
                  "fields": [
                    {
                      "typeId": 131,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 131,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 131,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "X4",
                  "fields": [
                    {
                      "typeId": 131,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 131,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 131,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 131,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "X5",
                  "fields": [
                    {
                      "typeId": 131,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 131,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 131,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 131,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 131,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "X6",
                  "fields": [
                    {
                      "typeId": 131,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 131,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 131,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 131,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 131,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 131,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "X7",
                  "fields": [
                    {
                      "typeId": 131,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 131,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 131,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 131,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 131,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 131,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 131,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "X8",
                  "fields": [
                    {
                      "typeId": 131,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 131,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 131,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 131,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 131,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 131,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 131,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 131,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 131,
          "path": [
            "xcm",
            "v3",
            "junction",
            "Junction"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Parachain",
                  "fields": [
                    {
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "AccountId32",
                  "fields": [
                    {
                      "name": "network",
                      "typeId": 133,
                      "typeName": "Option<NetworkId>",
                      "docs": []
                    },
                    {
                      "name": "id",
                      "typeId": 13,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "AccountIndex64",
                  "fields": [
                    {
                      "name": "network",
                      "typeId": 133,
                      "typeName": "Option<NetworkId>",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "typeId": 10,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "AccountKey20",
                  "fields": [
                    {
                      "name": "network",
                      "typeId": 133,
                      "typeName": "Option<NetworkId>",
                      "docs": []
                    },
                    {
                      "name": "key",
                      "typeId": 1,
                      "typeName": "[u8; 20]",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "PalletInstance",
                  "fields": [
                    {
                      "typeId": 2,
                      "typeName": "u8",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "GeneralIndex",
                  "fields": [
                    {
                      "typeId": 108,
                      "typeName": "u128",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "GeneralKey",
                  "fields": [
                    {
                      "name": "length",
                      "typeId": 2,
                      "typeName": "u8",
                      "docs": []
                    },
                    {
                      "name": "data",
                      "typeId": 13,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "OnlyChild",
                  "fields": [],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "Plurality",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 135,
                      "typeName": "BodyId",
                      "docs": []
                    },
                    {
                      "name": "part",
                      "typeId": 136,
                      "typeName": "BodyPart",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "GlobalConsensus",
                  "fields": [
                    {
                      "typeId": 134,
                      "typeName": "NetworkId",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 132,
          "path": [],
          "params": [],
          "type": {
            "tag": "Compact",
            "value": {
              "typeParam": 4
            }
          },
          "docs": []
        },
        {
          "id": 133,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 134
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 134,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 134,
          "path": [
            "xcm",
            "v3",
            "junction",
            "NetworkId"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "ByGenesis",
                  "fields": [
                    {
                      "typeId": 13,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "ByFork",
                  "fields": [
                    {
                      "name": "block_number",
                      "typeId": 11,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "block_hash",
                      "typeId": 13,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Polkadot",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Kusama",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Westend",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Rococo",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Wococo",
                  "fields": [],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "Ethereum",
                  "fields": [
                    {
                      "name": "chain_id",
                      "typeId": 10,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "BitcoinCore",
                  "fields": [],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "BitcoinCash",
                  "fields": [],
                  "index": 9,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 135,
          "path": [
            "xcm",
            "v3",
            "junction",
            "BodyId"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Unit",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Moniker",
                  "fields": [
                    {
                      "typeId": 18,
                      "typeName": "[u8; 4]",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Index",
                  "fields": [
                    {
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Executive",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Technical",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Legislative",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Judicial",
                  "fields": [],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "Defense",
                  "fields": [],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "Administration",
                  "fields": [],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "Treasury",
                  "fields": [],
                  "index": 9,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 136,
          "path": [
            "xcm",
            "v3",
            "junction",
            "BodyPart"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Voice",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Members",
                  "fields": [
                    {
                      "name": "count",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Fraction",
                  "fields": [
                    {
                      "name": "nom",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "denom",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "AtLeastProportion",
                  "fields": [
                    {
                      "name": "nom",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "denom",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "MoreThanProportion",
                  "fields": [
                    {
                      "name": "nom",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "denom",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 137,
          "path": [
            "pallet_ethereum_xcm",
            "RawOrigin"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "XcmEthereumTransaction",
                  "fields": [
                    {
                      "typeId": 64,
                      "typeName": "H160",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 138,
          "path": [
            "sp_core",
            "Void"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": []
            }
          },
          "docs": []
        },
        {
          "id": 139,
          "path": [
            "pallet_proxy",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "proxy",
                  "fields": [
                    {
                      "name": "real",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "force_proxy_type",
                      "typeId": 140,
                      "typeName": "Option<T::ProxyType>",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "typeId": 86,
                      "typeName": "Box<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Dispatch the given `call` from an account that the sender is authorised for through",
                    "`add_proxy`.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "Parameters:",
                    "- `real`: The account that the proxy will make a call on behalf of.",
                    "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                    "- `call`: The call to be made by the `real` account."
                  ]
                },
                {
                  "name": "add_proxy",
                  "fields": [
                    {
                      "name": "delegate",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "proxy_type",
                      "typeId": 55,
                      "typeName": "T::ProxyType",
                      "docs": []
                    },
                    {
                      "name": "delay",
                      "typeId": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Register a proxy account for the sender that is able to make calls on its behalf.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "Parameters:",
                    "- `proxy`: The account that the `caller` would like to make a proxy.",
                    "- `proxy_type`: The permissions allowed for this proxy account.",
                    "- `delay`: The announcement period required of the initial proxy. Will generally be",
                    "zero."
                  ]
                },
                {
                  "name": "remove_proxy",
                  "fields": [
                    {
                      "name": "delegate",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "proxy_type",
                      "typeId": 55,
                      "typeName": "T::ProxyType",
                      "docs": []
                    },
                    {
                      "name": "delay",
                      "typeId": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Unregister a proxy account for the sender.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "Parameters:",
                    "- `proxy`: The account that the `caller` would like to remove as a proxy.",
                    "- `proxy_type`: The permissions currently enabled for the removed proxy account."
                  ]
                },
                {
                  "name": "remove_proxies",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Unregister all proxy accounts for the sender.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "WARNING: This may be called on accounts created by `pure`, however if done, then",
                    "the unreserved fees will be inaccessible. **All access to this account will be lost.**"
                  ]
                },
                {
                  "name": "create_pure",
                  "fields": [
                    {
                      "name": "proxy_type",
                      "typeId": 55,
                      "typeName": "T::ProxyType",
                      "docs": []
                    },
                    {
                      "name": "delay",
                      "typeId": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "typeId": 56,
                      "typeName": "u16",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and",
                    "initialize it with a proxy of `proxy_type` for `origin` sender.",
                    "",
                    "Requires a `Signed` origin.",
                    "",
                    "- `proxy_type`: The type of the proxy that the sender will be registered as over the",
                    "new account. This will almost always be the most permissive `ProxyType` possible to",
                    "allow for maximum flexibility.",
                    "- `index`: A disambiguation index, in case this is called multiple times in the same",
                    "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just",
                    "want to use `0`.",
                    "- `delay`: The announcement period required of the initial proxy. Will generally be",
                    "zero.",
                    "",
                    "Fails with `Duplicate` if this has already been called in this transaction, from the",
                    "same sender, with the same parameters.",
                    "",
                    "Fails if there are insufficient funds to pay for deposit."
                  ]
                },
                {
                  "name": "kill_pure",
                  "fields": [
                    {
                      "name": "spawner",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "proxy_type",
                      "typeId": 55,
                      "typeName": "T::ProxyType",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "typeId": 56,
                      "typeName": "u16",
                      "docs": []
                    },
                    {
                      "name": "height",
                      "typeId": 132,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "ext_index",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Removes a previously spawned pure proxy.",
                    "",
                    "WARNING: **All access to this account will be lost.** Any funds held in it will be",
                    "inaccessible.",
                    "",
                    "Requires a `Signed` origin, and the sender account must have been created by a call to",
                    "`pure` with corresponding parameters.",
                    "",
                    "- `spawner`: The account that originally called `pure` to create this account.",
                    "- `index`: The disambiguation index originally passed to `pure`. Probably `0`.",
                    "- `proxy_type`: The proxy type originally passed to `pure`.",
                    "- `height`: The height of the chain when the call to `pure` was processed.",
                    "- `ext_index`: The extrinsic index in which the call to `pure` was processed.",
                    "",
                    "Fails with `NoPermission` in case the caller is not a previously created pure",
                    "account whose `pure` call has corresponding parameters."
                  ]
                },
                {
                  "name": "announce",
                  "fields": [
                    {
                      "name": "real",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "typeId": 12,
                      "typeName": "CallHashOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Publish the hash of a proxy-call that will be made in the future.",
                    "",
                    "This must be called some number of blocks before the corresponding `proxy` is attempted",
                    "if the delay associated with the proxy relationship is greater than zero.",
                    "",
                    "No more than `MaxPending` announcements may be made at any one time.",
                    "",
                    "This will take a deposit of `AnnouncementDepositFactor` as well as",
                    "`AnnouncementDepositBase` if there are no other pending announcements.",
                    "",
                    "The dispatch origin for this call must be _Signed_ and a proxy of `real`.",
                    "",
                    "Parameters:",
                    "- `real`: The account that the proxy will make a call on behalf of.",
                    "- `call_hash`: The hash of the call to be made by the `real` account."
                  ]
                },
                {
                  "name": "remove_announcement",
                  "fields": [
                    {
                      "name": "real",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "typeId": 12,
                      "typeName": "CallHashOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Remove a given announcement.",
                    "",
                    "May be called by a proxy account to remove a call they previously announced and return",
                    "the deposit.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "Parameters:",
                    "- `real`: The account that the proxy will make a call on behalf of.",
                    "- `call_hash`: The hash of the call to be made by the `real` account."
                  ]
                },
                {
                  "name": "reject_announcement",
                  "fields": [
                    {
                      "name": "delegate",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "typeId": 12,
                      "typeName": "CallHashOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "Remove the given announcement of a delegate.",
                    "",
                    "May be called by a target (proxied) account to remove a call that one of their delegates",
                    "(`delegate`) has announced they want to execute. The deposit is returned.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "Parameters:",
                    "- `delegate`: The account that previously announced the call.",
                    "- `call_hash`: The hash of the call to be made."
                  ]
                },
                {
                  "name": "proxy_announced",
                  "fields": [
                    {
                      "name": "delegate",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "real",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "force_proxy_type",
                      "typeId": 140,
                      "typeName": "Option<T::ProxyType>",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "typeId": 86,
                      "typeName": "Box<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "Dispatch the given `call` from an account that the sender is authorized for through",
                    "`add_proxy`.",
                    "",
                    "Removes any corresponding announcement(s).",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "Parameters:",
                    "- `real`: The account that the proxy will make a call on behalf of.",
                    "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                    "- `call`: The call to be made by the `real` account."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 140,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 55
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 55,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 141,
          "path": [
            "pallet_maintenance_mode",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "enter_maintenance_mode",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Place the chain in maintenance mode",
                    "",
                    "Weight cost is:",
                    "* One DB read to ensure we're not already in maintenance mode",
                    "* Three DB writes - 1 for the mode, 1 for suspending xcm execution, 1 for the event"
                  ]
                },
                {
                  "name": "resume_normal_operation",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Return the chain to normal operating mode",
                    "",
                    "Weight cost is:",
                    "* One DB read to ensure we're in maintenance mode",
                    "* Three DB writes - 1 for the mode, 1 for resuming xcm execution, 1 for the event"
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 142,
          "path": [
            "pallet_identity",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "add_registrar",
                  "fields": [
                    {
                      "name": "account",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Add a registrar to the system.",
                    "",
                    "The dispatch origin for this call must be `T::RegistrarOrigin`.",
                    "",
                    "- `account`: the account of the registrar.",
                    "",
                    "Emits `RegistrarAdded` if successful.",
                    "",
                    "## Complexity",
                    "- `O(R)` where `R` registrar-count (governance-bounded and code-bounded)."
                  ]
                },
                {
                  "name": "set_identity",
                  "fields": [
                    {
                      "name": "info",
                      "typeId": 143,
                      "typeName": "Box<IdentityInfo<T::MaxAdditionalFields>>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Set an account's identity information and reserve the appropriate deposit.",
                    "",
                    "If the account already has identity information, the deposit is taken as part payment",
                    "for the new deposit.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "- `info`: The identity information.",
                    "",
                    "Emits `IdentitySet` if successful.",
                    "",
                    "## Complexity",
                    "- `O(X + X' + R)`",
                    "  - where `X` additional-field-count (deposit-bounded and code-bounded)",
                    "  - where `R` judgements-count (registrar-count-bounded)"
                  ]
                },
                {
                  "name": "set_subs",
                  "fields": [
                    {
                      "name": "subs",
                      "typeId": 179,
                      "typeName": "Vec<(T::AccountId, Data)>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Set the sub-accounts of the sender.",
                    "",
                    "Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned",
                    "and an amount `SubAccountDeposit` will be reserved for each item in `subs`.",
                    "",
                    "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                    "identity.",
                    "",
                    "- `subs`: The identity's (new) sub-accounts.",
                    "",
                    "## Complexity",
                    "- `O(P + S)`",
                    "  - where `P` old-subs-count (hard- and deposit-bounded).",
                    "  - where `S` subs-count (hard- and deposit-bounded)."
                  ]
                },
                {
                  "name": "clear_identity",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Clear an account's identity info and all sub-accounts and return all deposits.",
                    "",
                    "Payment: All reserved balances on the account are returned.",
                    "",
                    "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                    "identity.",
                    "",
                    "Emits `IdentityCleared` if successful.",
                    "",
                    "## Complexity",
                    "- `O(R + S + X)`",
                    "  - where `R` registrar-count (governance-bounded).",
                    "  - where `S` subs-count (hard- and deposit-bounded).",
                    "  - where `X` additional-field-count (deposit-bounded and code-bounded)."
                  ]
                },
                {
                  "name": "request_judgement",
                  "fields": [
                    {
                      "name": "reg_index",
                      "typeId": 132,
                      "typeName": "RegistrarIndex",
                      "docs": []
                    },
                    {
                      "name": "max_fee",
                      "typeId": 108,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Request a judgement from a registrar.",
                    "",
                    "Payment: At most `max_fee` will be reserved for payment to the registrar if judgement",
                    "given.",
                    "",
                    "The dispatch origin for this call must be _Signed_ and the sender must have a",
                    "registered identity.",
                    "",
                    "- `reg_index`: The index of the registrar whose judgement is requested.",
                    "- `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:",
                    "",
                    "```nocompile",
                    "Self::registrars().get(reg_index).unwrap().fee",
                    "```",
                    "",
                    "Emits `JudgementRequested` if successful.",
                    "",
                    "## Complexity",
                    "- `O(R + X)`.",
                    "  - where `R` registrar-count (governance-bounded).",
                    "  - where `X` additional-field-count (deposit-bounded and code-bounded)."
                  ]
                },
                {
                  "name": "cancel_request",
                  "fields": [
                    {
                      "name": "reg_index",
                      "typeId": 4,
                      "typeName": "RegistrarIndex",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Cancel a previous request.",
                    "",
                    "Payment: A previously reserved deposit is returned on success.",
                    "",
                    "The dispatch origin for this call must be _Signed_ and the sender must have a",
                    "registered identity.",
                    "",
                    "- `reg_index`: The index of the registrar whose judgement is no longer requested.",
                    "",
                    "Emits `JudgementUnrequested` if successful.",
                    "",
                    "## Complexity",
                    "- `O(R + X)`.",
                    "  - where `R` registrar-count (governance-bounded).",
                    "  - where `X` additional-field-count (deposit-bounded and code-bounded)."
                  ]
                },
                {
                  "name": "set_fee",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 132,
                      "typeName": "RegistrarIndex",
                      "docs": []
                    },
                    {
                      "name": "fee",
                      "typeId": 108,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Set the fee required for a judgement to be requested from a registrar.",
                    "",
                    "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                    "of the registrar whose index is `index`.",
                    "",
                    "- `index`: the index of the registrar whose fee is to be set.",
                    "- `fee`: the new fee.",
                    "",
                    "## Complexity",
                    "- `O(R)`.",
                    "  - where `R` registrar-count (governance-bounded)."
                  ]
                },
                {
                  "name": "set_account_id",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 132,
                      "typeName": "RegistrarIndex",
                      "docs": []
                    },
                    {
                      "name": "new",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Change the account associated with a registrar.",
                    "",
                    "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                    "of the registrar whose index is `index`.",
                    "",
                    "- `index`: the index of the registrar whose fee is to be set.",
                    "- `new`: the new account ID.",
                    "",
                    "## Complexity",
                    "- `O(R)`.",
                    "  - where `R` registrar-count (governance-bounded)."
                  ]
                },
                {
                  "name": "set_fields",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 132,
                      "typeName": "RegistrarIndex",
                      "docs": []
                    },
                    {
                      "name": "fields",
                      "typeId": 181,
                      "typeName": "IdentityFields",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "Set the field information for a registrar.",
                    "",
                    "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                    "of the registrar whose index is `index`.",
                    "",
                    "- `index`: the index of the registrar whose fee is to be set.",
                    "- `fields`: the fields that the registrar concerns themselves with.",
                    "",
                    "## Complexity",
                    "- `O(R)`.",
                    "  - where `R` registrar-count (governance-bounded)."
                  ]
                },
                {
                  "name": "provide_judgement",
                  "fields": [
                    {
                      "name": "reg_index",
                      "typeId": 132,
                      "typeName": "RegistrarIndex",
                      "docs": []
                    },
                    {
                      "name": "target",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "judgement",
                      "typeId": 183,
                      "typeName": "Judgement<BalanceOf<T>>",
                      "docs": []
                    },
                    {
                      "name": "identity",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "Provide a judgement for an account's identity.",
                    "",
                    "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                    "of the registrar whose index is `reg_index`.",
                    "",
                    "- `reg_index`: the index of the registrar whose judgement is being made.",
                    "- `target`: the account whose identity the judgement is upon. This must be an account",
                    "  with a registered identity.",
                    "- `judgement`: the judgement of the registrar of index `reg_index` about `target`.",
                    "- `identity`: The hash of the [`IdentityInfo`] for that the judgement is provided.",
                    "",
                    "Emits `JudgementGiven` if successful.",
                    "",
                    "## Complexity",
                    "- `O(R + X)`.",
                    "  - where `R` registrar-count (governance-bounded).",
                    "  - where `X` additional-field-count (deposit-bounded and code-bounded)."
                  ]
                },
                {
                  "name": "kill_identity",
                  "fields": [
                    {
                      "name": "target",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": [
                    "Remove an account's identity and sub-account information and slash the deposits.",
                    "",
                    "Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by",
                    "`Slash`. Verification request deposits are not returned; they should be cancelled",
                    "manually using `cancel_request`.",
                    "",
                    "The dispatch origin for this call must match `T::ForceOrigin`.",
                    "",
                    "- `target`: the account whose identity the judgement is upon. This must be an account",
                    "  with a registered identity.",
                    "",
                    "Emits `IdentityKilled` if successful.",
                    "",
                    "## Complexity",
                    "- `O(R + S + X)`",
                    "  - where `R` registrar-count (governance-bounded).",
                    "  - where `S` subs-count (hard- and deposit-bounded).",
                    "  - where `X` additional-field-count (deposit-bounded and code-bounded)."
                  ]
                },
                {
                  "name": "add_sub",
                  "fields": [
                    {
                      "name": "sub",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "data",
                      "typeId": 146,
                      "typeName": "Data",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": [
                    "Add the given account to the sender's subs.",
                    "",
                    "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                    "to the sender.",
                    "",
                    "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                    "sub identity of `sub`."
                  ]
                },
                {
                  "name": "rename_sub",
                  "fields": [
                    {
                      "name": "sub",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "data",
                      "typeId": 146,
                      "typeName": "Data",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": [
                    "Alter the associated name of the given sub-account.",
                    "",
                    "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                    "sub identity of `sub`."
                  ]
                },
                {
                  "name": "remove_sub",
                  "fields": [
                    {
                      "name": "sub",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": [
                    "Remove the given account from the sender's subs.",
                    "",
                    "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                    "to the sender.",
                    "",
                    "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                    "sub identity of `sub`."
                  ]
                },
                {
                  "name": "quit_sub",
                  "fields": [],
                  "index": 14,
                  "docs": [
                    "Remove the sender as a sub-account.",
                    "",
                    "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                    "to the sender (*not* the original depositor).",
                    "",
                    "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                    "super-identity.",
                    "",
                    "NOTE: This should not normally be used, but is provided in the case that the non-",
                    "controller of an account is maliciously registered as a sub-account."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Identity pallet declaration."
          ]
        },
        {
          "id": 143,
          "path": [
            "pallet_identity",
            "types",
            "IdentityInfo"
          ],
          "params": [
            {
              "name": "FieldLimit"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "additional",
                  "typeId": 144,
                  "typeName": "BoundedVec<(Data, Data), FieldLimit>",
                  "docs": []
                },
                {
                  "name": "display",
                  "typeId": 146,
                  "typeName": "Data",
                  "docs": []
                },
                {
                  "name": "legal",
                  "typeId": 146,
                  "typeName": "Data",
                  "docs": []
                },
                {
                  "name": "web",
                  "typeId": 146,
                  "typeName": "Data",
                  "docs": []
                },
                {
                  "name": "riot",
                  "typeId": 146,
                  "typeName": "Data",
                  "docs": []
                },
                {
                  "name": "email",
                  "typeId": 146,
                  "typeName": "Data",
                  "docs": []
                },
                {
                  "name": "pgp_fingerprint",
                  "typeId": 178,
                  "typeName": "Option<[u8; 20]>",
                  "docs": []
                },
                {
                  "name": "image",
                  "typeId": 146,
                  "typeName": "Data",
                  "docs": []
                },
                {
                  "name": "twitter",
                  "typeId": 146,
                  "typeName": "Data",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 144,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 145
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 177,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 145,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                146,
                146
              ]
            }
          },
          "docs": []
        },
        {
          "id": 146,
          "path": [
            "pallet_identity",
            "types",
            "Data"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Raw0",
                  "fields": [
                    {
                      "typeId": 147,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Raw1",
                  "fields": [
                    {
                      "typeId": 148,
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Raw2",
                  "fields": [
                    {
                      "typeId": 149,
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Raw3",
                  "fields": [
                    {
                      "typeId": 150,
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Raw4",
                  "fields": [
                    {
                      "typeId": 18,
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Raw5",
                  "fields": [
                    {
                      "typeId": 151,
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "Raw6",
                  "fields": [
                    {
                      "typeId": 152,
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "Raw7",
                  "fields": [
                    {
                      "typeId": 153,
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "Raw8",
                  "fields": [
                    {
                      "typeId": 154,
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "Raw9",
                  "fields": [
                    {
                      "typeId": 155,
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "Raw10",
                  "fields": [
                    {
                      "typeId": 156,
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "Raw11",
                  "fields": [
                    {
                      "typeId": 157,
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": []
                },
                {
                  "name": "Raw12",
                  "fields": [
                    {
                      "typeId": 158,
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": []
                },
                {
                  "name": "Raw13",
                  "fields": [
                    {
                      "typeId": 159,
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": []
                },
                {
                  "name": "Raw14",
                  "fields": [
                    {
                      "typeId": 160,
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": []
                },
                {
                  "name": "Raw15",
                  "fields": [
                    {
                      "typeId": 161,
                      "docs": []
                    }
                  ],
                  "index": 16,
                  "docs": []
                },
                {
                  "name": "Raw16",
                  "fields": [
                    {
                      "typeId": 162,
                      "docs": []
                    }
                  ],
                  "index": 17,
                  "docs": []
                },
                {
                  "name": "Raw17",
                  "fields": [
                    {
                      "typeId": 163,
                      "docs": []
                    }
                  ],
                  "index": 18,
                  "docs": []
                },
                {
                  "name": "Raw18",
                  "fields": [
                    {
                      "typeId": 164,
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": []
                },
                {
                  "name": "Raw19",
                  "fields": [
                    {
                      "typeId": 165,
                      "docs": []
                    }
                  ],
                  "index": 20,
                  "docs": []
                },
                {
                  "name": "Raw20",
                  "fields": [
                    {
                      "typeId": 1,
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": []
                },
                {
                  "name": "Raw21",
                  "fields": [
                    {
                      "typeId": 166,
                      "docs": []
                    }
                  ],
                  "index": 22,
                  "docs": []
                },
                {
                  "name": "Raw22",
                  "fields": [
                    {
                      "typeId": 167,
                      "docs": []
                    }
                  ],
                  "index": 23,
                  "docs": []
                },
                {
                  "name": "Raw23",
                  "fields": [
                    {
                      "typeId": 168,
                      "docs": []
                    }
                  ],
                  "index": 24,
                  "docs": []
                },
                {
                  "name": "Raw24",
                  "fields": [
                    {
                      "typeId": 169,
                      "docs": []
                    }
                  ],
                  "index": 25,
                  "docs": []
                },
                {
                  "name": "Raw25",
                  "fields": [
                    {
                      "typeId": 170,
                      "docs": []
                    }
                  ],
                  "index": 26,
                  "docs": []
                },
                {
                  "name": "Raw26",
                  "fields": [
                    {
                      "typeId": 171,
                      "docs": []
                    }
                  ],
                  "index": 27,
                  "docs": []
                },
                {
                  "name": "Raw27",
                  "fields": [
                    {
                      "typeId": 172,
                      "docs": []
                    }
                  ],
                  "index": 28,
                  "docs": []
                },
                {
                  "name": "Raw28",
                  "fields": [
                    {
                      "typeId": 173,
                      "docs": []
                    }
                  ],
                  "index": 29,
                  "docs": []
                },
                {
                  "name": "Raw29",
                  "fields": [
                    {
                      "typeId": 174,
                      "docs": []
                    }
                  ],
                  "index": 30,
                  "docs": []
                },
                {
                  "name": "Raw30",
                  "fields": [
                    {
                      "typeId": 175,
                      "docs": []
                    }
                  ],
                  "index": 31,
                  "docs": []
                },
                {
                  "name": "Raw31",
                  "fields": [
                    {
                      "typeId": 176,
                      "docs": []
                    }
                  ],
                  "index": 32,
                  "docs": []
                },
                {
                  "name": "Raw32",
                  "fields": [
                    {
                      "typeId": 13,
                      "docs": []
                    }
                  ],
                  "index": 33,
                  "docs": []
                },
                {
                  "name": "BlakeTwo256",
                  "fields": [
                    {
                      "typeId": 13,
                      "docs": []
                    }
                  ],
                  "index": 34,
                  "docs": []
                },
                {
                  "name": "Sha256",
                  "fields": [
                    {
                      "typeId": 13,
                      "docs": []
                    }
                  ],
                  "index": 35,
                  "docs": []
                },
                {
                  "name": "Keccak256",
                  "fields": [
                    {
                      "typeId": 13,
                      "docs": []
                    }
                  ],
                  "index": 36,
                  "docs": []
                },
                {
                  "name": "ShaThree256",
                  "fields": [
                    {
                      "typeId": 13,
                      "docs": []
                    }
                  ],
                  "index": 37,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 147,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 0,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 148,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 1,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 149,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 2,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 150,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 3,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 151,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 5,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 152,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 6,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 153,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 7,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 154,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 8,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 155,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 9,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 156,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 10,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 157,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 11,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 158,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 12,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 159,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 13,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 160,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 14,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 161,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 15,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 162,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 16,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 163,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 17,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 164,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 18,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 165,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 19,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 166,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 21,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 167,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 22,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 168,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 23,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 169,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 24,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 170,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 25,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 171,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 26,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 172,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 27,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 173,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 28,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 174,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 29,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 175,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 30,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 176,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 31,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 177,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 145
            }
          },
          "docs": []
        },
        {
          "id": 178,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 1
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 1,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 179,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 180
            }
          },
          "docs": []
        },
        {
          "id": 180,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                0,
                146
              ]
            }
          },
          "docs": []
        },
        {
          "id": 181,
          "path": [
            "pallet_identity",
            "types",
            "BitFlags"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 182
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 11,
                  "typeName": "IdentityField",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 182,
          "path": [
            "pallet_identity",
            "types",
            "IdentityField"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Display",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Legal",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Web",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Riot",
                  "fields": [],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "Email",
                  "fields": [],
                  "index": 16,
                  "docs": []
                },
                {
                  "name": "PgpFingerprint",
                  "fields": [],
                  "index": 32,
                  "docs": []
                },
                {
                  "name": "Image",
                  "fields": [],
                  "index": 64,
                  "docs": []
                },
                {
                  "name": "Twitter",
                  "fields": [],
                  "index": 128,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 183,
          "path": [
            "pallet_identity",
            "types",
            "Judgement"
          ],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Unknown",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "FeePaid",
                  "fields": [
                    {
                      "typeId": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Reasonable",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "KnownGood",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "OutOfDate",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "LowQuality",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Erroneous",
                  "fields": [],
                  "index": 6,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 184,
          "path": [
            "pallet_multisig",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "as_multi_threshold_1",
                  "fields": [
                    {
                      "name": "other_signatories",
                      "typeId": 109,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "typeId": 86,
                      "typeName": "Box<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Immediately dispatch a multi-signature call using a single approval from the caller.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "- `other_signatories`: The accounts (other than the sender) who are part of the",
                    "multi-signature, but do not participate in the approval process.",
                    "- `call`: The call to be executed.",
                    "",
                    "Result is equivalent to the dispatched result.",
                    "",
                    "## Complexity",
                    "O(Z + C) where Z is the length of the call and C its execution weight."
                  ]
                },
                {
                  "name": "as_multi",
                  "fields": [
                    {
                      "name": "threshold",
                      "typeId": 56,
                      "typeName": "u16",
                      "docs": []
                    },
                    {
                      "name": "other_signatories",
                      "typeId": 109,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "maybe_timepoint",
                      "typeId": 185,
                      "typeName": "Option<Timepoint<T::BlockNumber>>",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "typeId": 86,
                      "typeName": "Box<<T as Config>::RuntimeCall>",
                      "docs": []
                    },
                    {
                      "name": "max_weight",
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Register approval for a dispatch to be made from a deterministic composite account if",
                    "approved by a total of `threshold - 1` of `other_signatories`.",
                    "",
                    "If there are enough, then dispatch the call.",
                    "",
                    "Payment: `DepositBase` will be reserved if this is the first approval, plus",
                    "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                    "is cancelled.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                    "- `other_signatories`: The accounts (other than the sender) who can approve this",
                    "dispatch. May not be empty.",
                    "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                    "not the first approval, then it must be `Some`, with the timepoint (block number and",
                    "transaction index) of the first approval transaction.",
                    "- `call`: The call to be executed.",
                    "",
                    "NOTE: Unless this is the final approval, you will generally want to use",
                    "`approve_as_multi` instead, since it only requires a hash of the call.",
                    "",
                    "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise",
                    "on success, result is `Ok` and the result from the interior call, if it was executed,",
                    "may be found in the deposited `MultisigExecuted` event.",
                    "",
                    "## Complexity",
                    "- `O(S + Z + Call)`.",
                    "- Up to one balance-reserve or unreserve operation.",
                    "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                    "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                    "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.",
                    "- One encode & hash, both of complexity `O(S)`.",
                    "- Up to one binary search and insert (`O(logS + S)`).",
                    "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                    "- One event.",
                    "- The weight of the `call`.",
                    "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
                    "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
                  ]
                },
                {
                  "name": "approve_as_multi",
                  "fields": [
                    {
                      "name": "threshold",
                      "typeId": 56,
                      "typeName": "u16",
                      "docs": []
                    },
                    {
                      "name": "other_signatories",
                      "typeId": 109,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "maybe_timepoint",
                      "typeId": 185,
                      "typeName": "Option<Timepoint<T::BlockNumber>>",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "typeId": 13,
                      "typeName": "[u8; 32]",
                      "docs": []
                    },
                    {
                      "name": "max_weight",
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Register approval for a dispatch to be made from a deterministic composite account if",
                    "approved by a total of `threshold - 1` of `other_signatories`.",
                    "",
                    "Payment: `DepositBase` will be reserved if this is the first approval, plus",
                    "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                    "is cancelled.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                    "- `other_signatories`: The accounts (other than the sender) who can approve this",
                    "dispatch. May not be empty.",
                    "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                    "not the first approval, then it must be `Some`, with the timepoint (block number and",
                    "transaction index) of the first approval transaction.",
                    "- `call_hash`: The hash of the call to be executed.",
                    "",
                    "NOTE: If this is the final approval, you will want to use `as_multi` instead.",
                    "",
                    "## Complexity",
                    "- `O(S)`.",
                    "- Up to one balance-reserve or unreserve operation.",
                    "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                    "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                    "- One encode & hash, both of complexity `O(S)`.",
                    "- Up to one binary search and insert (`O(logS + S)`).",
                    "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                    "- One event.",
                    "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
                    "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
                  ]
                },
                {
                  "name": "cancel_as_multi",
                  "fields": [
                    {
                      "name": "threshold",
                      "typeId": 56,
                      "typeName": "u16",
                      "docs": []
                    },
                    {
                      "name": "other_signatories",
                      "typeId": 109,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "timepoint",
                      "typeId": 61,
                      "typeName": "Timepoint<T::BlockNumber>",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "typeId": 13,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously",
                    "for this operation will be unreserved on success.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                    "- `other_signatories`: The accounts (other than the sender) who can approve this",
                    "dispatch. May not be empty.",
                    "- `timepoint`: The timepoint (block number and transaction index) of the first approval",
                    "transaction for this dispatch.",
                    "- `call_hash`: The hash of the call to be executed.",
                    "",
                    "## Complexity",
                    "- `O(S)`.",
                    "- Up to one balance-reserve or unreserve operation.",
                    "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                    "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                    "- One encode & hash, both of complexity `O(S)`.",
                    "- One event.",
                    "- I/O: 1 read `O(S)`, one remove.",
                    "- Storage: removes one item."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 185,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 61
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 61,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 186,
          "path": [
            "pallet_evm",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "withdraw",
                  "fields": [
                    {
                      "name": "address",
                      "typeId": 64,
                      "typeName": "H160",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Withdraw balance from EVM into currency/balances pallet."
                  ]
                },
                {
                  "name": "call",
                  "fields": [
                    {
                      "name": "source",
                      "typeId": 64,
                      "typeName": "H160",
                      "docs": []
                    },
                    {
                      "name": "target",
                      "typeId": 64,
                      "typeName": "H160",
                      "docs": []
                    },
                    {
                      "name": "input",
                      "typeId": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "typeId": 187,
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "gas_limit",
                      "typeId": 11,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "max_fee_per_gas",
                      "typeId": 187,
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "max_priority_fee_per_gas",
                      "typeId": 189,
                      "typeName": "Option<U256>",
                      "docs": []
                    },
                    {
                      "name": "nonce",
                      "typeId": 189,
                      "typeName": "Option<U256>",
                      "docs": []
                    },
                    {
                      "name": "access_list",
                      "typeId": 190,
                      "typeName": "Vec<(H160, Vec<H256>)>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Issue an EVM call operation. This is similar to a message call transaction in Ethereum."
                  ]
                },
                {
                  "name": "create",
                  "fields": [
                    {
                      "name": "source",
                      "typeId": 64,
                      "typeName": "H160",
                      "docs": []
                    },
                    {
                      "name": "init",
                      "typeId": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "typeId": 187,
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "gas_limit",
                      "typeId": 11,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "max_fee_per_gas",
                      "typeId": 187,
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "max_priority_fee_per_gas",
                      "typeId": 189,
                      "typeName": "Option<U256>",
                      "docs": []
                    },
                    {
                      "name": "nonce",
                      "typeId": 189,
                      "typeName": "Option<U256>",
                      "docs": []
                    },
                    {
                      "name": "access_list",
                      "typeId": 190,
                      "typeName": "Vec<(H160, Vec<H256>)>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Issue an EVM create operation. This is similar to a contract creation transaction in",
                    "Ethereum."
                  ]
                },
                {
                  "name": "create2",
                  "fields": [
                    {
                      "name": "source",
                      "typeId": 64,
                      "typeName": "H160",
                      "docs": []
                    },
                    {
                      "name": "init",
                      "typeId": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "salt",
                      "typeId": 12,
                      "typeName": "H256",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "typeId": 187,
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "gas_limit",
                      "typeId": 11,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "max_fee_per_gas",
                      "typeId": 187,
                      "typeName": "U256",
                      "docs": []
                    },
                    {
                      "name": "max_priority_fee_per_gas",
                      "typeId": 189,
                      "typeName": "Option<U256>",
                      "docs": []
                    },
                    {
                      "name": "nonce",
                      "typeId": 189,
                      "typeName": "Option<U256>",
                      "docs": []
                    },
                    {
                      "name": "access_list",
                      "typeId": 190,
                      "typeName": "Vec<(H160, Vec<H256>)>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Issue an EVM create2 operation."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 187,
          "path": [
            "primitive_types",
            "U256"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 188,
                  "typeName": "[u64; 4]",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 188,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 4,
              "typeParam": 11
            }
          },
          "docs": []
        },
        {
          "id": 189,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 187
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 187,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 190,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 191
            }
          },
          "docs": []
        },
        {
          "id": 191,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                64,
                65
              ]
            }
          },
          "docs": []
        },
        {
          "id": 192,
          "path": [
            "pallet_ethereum",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "transact",
                  "fields": [
                    {
                      "name": "transaction",
                      "typeId": 193,
                      "typeName": "Transaction",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Transact an Ethereum transaction."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 193,
          "path": [
            "ethereum",
            "transaction",
            "TransactionV2"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Legacy",
                  "fields": [
                    {
                      "typeId": 194,
                      "typeName": "LegacyTransaction",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "EIP2930",
                  "fields": [
                    {
                      "typeId": 198,
                      "typeName": "EIP2930Transaction",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "EIP1559",
                  "fields": [
                    {
                      "typeId": 201,
                      "typeName": "EIP1559Transaction",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 194,
          "path": [
            "ethereum",
            "transaction",
            "LegacyTransaction"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "nonce",
                  "typeId": 187,
                  "typeName": "U256",
                  "docs": []
                },
                {
                  "name": "gas_price",
                  "typeId": 187,
                  "typeName": "U256",
                  "docs": []
                },
                {
                  "name": "gas_limit",
                  "typeId": 187,
                  "typeName": "U256",
                  "docs": []
                },
                {
                  "name": "action",
                  "typeId": 195,
                  "typeName": "TransactionAction",
                  "docs": []
                },
                {
                  "name": "value",
                  "typeId": 187,
                  "typeName": "U256",
                  "docs": []
                },
                {
                  "name": "input",
                  "typeId": 14,
                  "typeName": "Bytes",
                  "docs": []
                },
                {
                  "name": "signature",
                  "typeId": 196,
                  "typeName": "TransactionSignature",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 195,
          "path": [
            "ethereum",
            "transaction",
            "TransactionAction"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Call",
                  "fields": [
                    {
                      "typeId": 64,
                      "typeName": "H160",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Create",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 196,
          "path": [
            "ethereum",
            "transaction",
            "TransactionSignature"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "v",
                  "typeId": 197,
                  "typeName": "TransactionRecoveryId",
                  "docs": []
                },
                {
                  "name": "r",
                  "typeId": 12,
                  "typeName": "H256",
                  "docs": []
                },
                {
                  "name": "s",
                  "typeId": 12,
                  "typeName": "H256",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 197,
          "path": [
            "ethereum",
            "transaction",
            "TransactionRecoveryId"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 198,
          "path": [
            "ethereum",
            "transaction",
            "EIP2930Transaction"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "chain_id",
                  "typeId": 11,
                  "typeName": "u64",
                  "docs": []
                },
                {
                  "name": "nonce",
                  "typeId": 187,
                  "typeName": "U256",
                  "docs": []
                },
                {
                  "name": "gas_price",
                  "typeId": 187,
                  "typeName": "U256",
                  "docs": []
                },
                {
                  "name": "gas_limit",
                  "typeId": 187,
                  "typeName": "U256",
                  "docs": []
                },
                {
                  "name": "action",
                  "typeId": 195,
                  "typeName": "TransactionAction",
                  "docs": []
                },
                {
                  "name": "value",
                  "typeId": 187,
                  "typeName": "U256",
                  "docs": []
                },
                {
                  "name": "input",
                  "typeId": 14,
                  "typeName": "Bytes",
                  "docs": []
                },
                {
                  "name": "access_list",
                  "typeId": 199,
                  "typeName": "AccessList",
                  "docs": []
                },
                {
                  "name": "odd_y_parity",
                  "typeId": 37,
                  "typeName": "bool",
                  "docs": []
                },
                {
                  "name": "r",
                  "typeId": 12,
                  "typeName": "H256",
                  "docs": []
                },
                {
                  "name": "s",
                  "typeId": 12,
                  "typeName": "H256",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 199,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 200
            }
          },
          "docs": []
        },
        {
          "id": 200,
          "path": [
            "ethereum",
            "transaction",
            "AccessListItem"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "address",
                  "typeId": 64,
                  "typeName": "Address",
                  "docs": []
                },
                {
                  "name": "storage_keys",
                  "typeId": 65,
                  "typeName": "Vec<H256>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 201,
          "path": [
            "ethereum",
            "transaction",
            "EIP1559Transaction"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "chain_id",
                  "typeId": 11,
                  "typeName": "u64",
                  "docs": []
                },
                {
                  "name": "nonce",
                  "typeId": 187,
                  "typeName": "U256",
                  "docs": []
                },
                {
                  "name": "max_priority_fee_per_gas",
                  "typeId": 187,
                  "typeName": "U256",
                  "docs": []
                },
                {
                  "name": "max_fee_per_gas",
                  "typeId": 187,
                  "typeName": "U256",
                  "docs": []
                },
                {
                  "name": "gas_limit",
                  "typeId": 187,
                  "typeName": "U256",
                  "docs": []
                },
                {
                  "name": "action",
                  "typeId": 195,
                  "typeName": "TransactionAction",
                  "docs": []
                },
                {
                  "name": "value",
                  "typeId": 187,
                  "typeName": "U256",
                  "docs": []
                },
                {
                  "name": "input",
                  "typeId": 14,
                  "typeName": "Bytes",
                  "docs": []
                },
                {
                  "name": "access_list",
                  "typeId": 199,
                  "typeName": "AccessList",
                  "docs": []
                },
                {
                  "name": "odd_y_parity",
                  "typeId": 37,
                  "typeName": "bool",
                  "docs": []
                },
                {
                  "name": "r",
                  "typeId": 12,
                  "typeName": "H256",
                  "docs": []
                },
                {
                  "name": "s",
                  "typeId": 12,
                  "typeName": "H256",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 202,
          "path": [
            "pallet_scheduler",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "schedule",
                  "fields": [
                    {
                      "name": "when",
                      "typeId": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "maybe_periodic",
                      "typeId": 203,
                      "typeName": "Option<schedule::Period<T::BlockNumber>>",
                      "docs": []
                    },
                    {
                      "name": "priority",
                      "typeId": 2,
                      "typeName": "schedule::Priority",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "typeId": 86,
                      "typeName": "Box<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Anonymously schedule a task."
                  ]
                },
                {
                  "name": "cancel",
                  "fields": [
                    {
                      "name": "when",
                      "typeId": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Cancel an anonymously scheduled task."
                  ]
                },
                {
                  "name": "schedule_named",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 13,
                      "typeName": "TaskName",
                      "docs": []
                    },
                    {
                      "name": "when",
                      "typeId": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "maybe_periodic",
                      "typeId": 203,
                      "typeName": "Option<schedule::Period<T::BlockNumber>>",
                      "docs": []
                    },
                    {
                      "name": "priority",
                      "typeId": 2,
                      "typeName": "schedule::Priority",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "typeId": 86,
                      "typeName": "Box<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Schedule a named task."
                  ]
                },
                {
                  "name": "cancel_named",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 13,
                      "typeName": "TaskName",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Cancel a named scheduled task."
                  ]
                },
                {
                  "name": "schedule_after",
                  "fields": [
                    {
                      "name": "after",
                      "typeId": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "maybe_periodic",
                      "typeId": 203,
                      "typeName": "Option<schedule::Period<T::BlockNumber>>",
                      "docs": []
                    },
                    {
                      "name": "priority",
                      "typeId": 2,
                      "typeName": "schedule::Priority",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "typeId": 86,
                      "typeName": "Box<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Anonymously schedule a task after a delay."
                  ]
                },
                {
                  "name": "schedule_named_after",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 13,
                      "typeName": "TaskName",
                      "docs": []
                    },
                    {
                      "name": "after",
                      "typeId": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "maybe_periodic",
                      "typeId": 203,
                      "typeName": "Option<schedule::Period<T::BlockNumber>>",
                      "docs": []
                    },
                    {
                      "name": "priority",
                      "typeId": 2,
                      "typeName": "schedule::Priority",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "typeId": 86,
                      "typeName": "Box<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Schedule a named task after a delay."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 203,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 76
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 76,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 204,
          "path": [
            "pallet_democracy",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "propose",
                  "fields": [
                    {
                      "name": "proposal",
                      "typeId": 85,
                      "typeName": "BoundedCallOf<T>",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "typeId": 108,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Propose a sensitive action to be taken.",
                    "",
                    "The dispatch origin of this call must be _Signed_ and the sender must",
                    "have funds to cover the deposit.",
                    "",
                    "- `proposal_hash`: The hash of the proposal preimage.",
                    "- `value`: The amount of deposit (must be at least `MinimumDeposit`).",
                    "",
                    "Emits `Proposed`."
                  ]
                },
                {
                  "name": "second",
                  "fields": [
                    {
                      "name": "proposal",
                      "typeId": 132,
                      "typeName": "PropIndex",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Signals agreement with a particular proposal.",
                    "",
                    "The dispatch origin of this call must be _Signed_ and the sender",
                    "must have funds to cover the deposit, equal to the original deposit.",
                    "",
                    "- `proposal`: The index of the proposal to second."
                  ]
                },
                {
                  "name": "vote",
                  "fields": [
                    {
                      "name": "ref_index",
                      "typeId": 132,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    },
                    {
                      "name": "vote",
                      "typeId": 79,
                      "typeName": "AccountVote<BalanceOf<T>>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;",
                    "otherwise it is a vote to keep the status quo.",
                    "",
                    "The dispatch origin of this call must be _Signed_.",
                    "",
                    "- `ref_index`: The index of the referendum to vote for.",
                    "- `vote`: The vote configuration."
                  ]
                },
                {
                  "name": "emergency_cancel",
                  "fields": [
                    {
                      "name": "ref_index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Schedule an emergency cancellation of a referendum. Cannot happen twice to the same",
                    "referendum.",
                    "",
                    "The dispatch origin of this call must be `CancellationOrigin`.",
                    "",
                    "-`ref_index`: The index of the referendum to cancel.",
                    "",
                    "Weight: `O(1)`."
                  ]
                },
                {
                  "name": "external_propose",
                  "fields": [
                    {
                      "name": "proposal",
                      "typeId": 85,
                      "typeName": "BoundedCallOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Schedule a referendum to be tabled once it is legal to schedule an external",
                    "referendum.",
                    "",
                    "The dispatch origin of this call must be `ExternalOrigin`.",
                    "",
                    "- `proposal_hash`: The preimage hash of the proposal."
                  ]
                },
                {
                  "name": "external_propose_majority",
                  "fields": [
                    {
                      "name": "proposal",
                      "typeId": 85,
                      "typeName": "BoundedCallOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Schedule a majority-carries referendum to be tabled next once it is legal to schedule",
                    "an external referendum.",
                    "",
                    "The dispatch of this call must be `ExternalMajorityOrigin`.",
                    "",
                    "- `proposal_hash`: The preimage hash of the proposal.",
                    "",
                    "Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
                    "pre-scheduled `external_propose` call.",
                    "",
                    "Weight: `O(1)`"
                  ]
                },
                {
                  "name": "external_propose_default",
                  "fields": [
                    {
                      "name": "proposal",
                      "typeId": 85,
                      "typeName": "BoundedCallOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Schedule a negative-turnout-bias referendum to be tabled next once it is legal to",
                    "schedule an external referendum.",
                    "",
                    "The dispatch of this call must be `ExternalDefaultOrigin`.",
                    "",
                    "- `proposal_hash`: The preimage hash of the proposal.",
                    "",
                    "Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
                    "pre-scheduled `external_propose` call.",
                    "",
                    "Weight: `O(1)`"
                  ]
                },
                {
                  "name": "fast_track",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "typeId": 12,
                      "typeName": "H256",
                      "docs": []
                    },
                    {
                      "name": "voting_period",
                      "typeId": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "delay",
                      "typeId": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Schedule the currently externally-proposed majority-carries referendum to be tabled",
                    "immediately. If there is no externally-proposed referendum currently, or if there is one",
                    "but it is not a majority-carries referendum then it fails.",
                    "",
                    "The dispatch of this call must be `FastTrackOrigin`.",
                    "",
                    "- `proposal_hash`: The hash of the current external proposal.",
                    "- `voting_period`: The period that is allowed for voting on this proposal. Increased to",
                    "\tMust be always greater than zero.",
                    "\tFor `FastTrackOrigin` must be equal or greater than `FastTrackVotingPeriod`.",
                    "- `delay`: The number of block after voting has ended in approval and this should be",
                    "  enacted. This doesn't have a minimum amount.",
                    "",
                    "Emits `Started`.",
                    "",
                    "Weight: `O(1)`"
                  ]
                },
                {
                  "name": "veto_external",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "typeId": 12,
                      "typeName": "H256",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "Veto and blacklist the external proposal hash.",
                    "",
                    "The dispatch origin of this call must be `VetoOrigin`.",
                    "",
                    "- `proposal_hash`: The preimage hash of the proposal to veto and blacklist.",
                    "",
                    "Emits `Vetoed`.",
                    "",
                    "Weight: `O(V + log(V))` where V is number of `existing vetoers`"
                  ]
                },
                {
                  "name": "cancel_referendum",
                  "fields": [
                    {
                      "name": "ref_index",
                      "typeId": 132,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "Remove a referendum.",
                    "",
                    "The dispatch origin of this call must be _Root_.",
                    "",
                    "- `ref_index`: The index of the referendum to cancel.",
                    "",
                    "# Weight: `O(1)`."
                  ]
                },
                {
                  "name": "delegate",
                  "fields": [
                    {
                      "name": "to",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "conviction",
                      "typeId": 205,
                      "typeName": "Conviction",
                      "docs": []
                    },
                    {
                      "name": "balance",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": [
                    "Delegate the voting power (with some given conviction) of the sending account.",
                    "",
                    "The balance delegated is locked for as long as it's delegated, and thereafter for the",
                    "time appropriate for the conviction's lock period.",
                    "",
                    "The dispatch origin of this call must be _Signed_, and the signing account must either:",
                    "  - be delegating already; or",
                    "  - have no voting activity (if there is, then it will need to be removed/consolidated",
                    "    through `reap_vote` or `unvote`).",
                    "",
                    "- `to`: The account whose voting the `target` account's voting power will follow.",
                    "- `conviction`: The conviction that will be attached to the delegated votes. When the",
                    "  account is undelegated, the funds will be locked for the corresponding period.",
                    "- `balance`: The amount of the account's balance to be used in delegating. This must not",
                    "  be more than the account's current balance.",
                    "",
                    "Emits `Delegated`.",
                    "",
                    "Weight: `O(R)` where R is the number of referendums the voter delegating to has",
                    "  voted on. Weight is charged as if maximum votes."
                  ]
                },
                {
                  "name": "undelegate",
                  "fields": [],
                  "index": 11,
                  "docs": [
                    "Undelegate the voting power of the sending account.",
                    "",
                    "Tokens may be unlocked following once an amount of time consistent with the lock period",
                    "of the conviction with which the delegation was issued.",
                    "",
                    "The dispatch origin of this call must be _Signed_ and the signing account must be",
                    "currently delegating.",
                    "",
                    "Emits `Undelegated`.",
                    "",
                    "Weight: `O(R)` where R is the number of referendums the voter delegating to has",
                    "  voted on. Weight is charged as if maximum votes."
                  ]
                },
                {
                  "name": "clear_public_proposals",
                  "fields": [],
                  "index": 12,
                  "docs": [
                    "Clears all public proposals.",
                    "",
                    "The dispatch origin of this call must be _Root_.",
                    "",
                    "Weight: `O(1)`."
                  ]
                },
                {
                  "name": "unlock",
                  "fields": [
                    {
                      "name": "target",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": [
                    "Unlock tokens that have an expired lock.",
                    "",
                    "The dispatch origin of this call must be _Signed_.",
                    "",
                    "- `target`: The account to remove the lock on.",
                    "",
                    "Weight: `O(R)` with R number of vote of target."
                  ]
                },
                {
                  "name": "remove_vote",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": [
                    "Remove a vote for a referendum.",
                    "",
                    "If:",
                    "- the referendum was cancelled, or",
                    "- the referendum is ongoing, or",
                    "- the referendum has ended such that",
                    "  - the vote of the account was in opposition to the result; or",
                    "  - there was no conviction to the account's vote; or",
                    "  - the account made a split vote",
                    "...then the vote is removed cleanly and a following call to `unlock` may result in more",
                    "funds being available.",
                    "",
                    "If, however, the referendum has ended and:",
                    "- it finished corresponding to the vote of the account, and",
                    "- the account made a standard vote with conviction, and",
                    "- the lock period of the conviction is not over",
                    "...then the lock will be aggregated into the overall account's lock, which may involve",
                    "*overlocking* (where the two locks are combined into a single lock that is the maximum",
                    "of both the amount locked and the time is it locked for).",
                    "",
                    "The dispatch origin of this call must be _Signed_, and the signer must have a vote",
                    "registered for referendum `index`.",
                    "",
                    "- `index`: The index of referendum of the vote to be removed.",
                    "",
                    "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.",
                    "  Weight is calculated for the maximum number of vote."
                  ]
                },
                {
                  "name": "remove_other_vote",
                  "fields": [
                    {
                      "name": "target",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": [
                    "Remove a vote for a referendum.",
                    "",
                    "If the `target` is equal to the signer, then this function is exactly equivalent to",
                    "`remove_vote`. If not equal to the signer, then the vote must have expired,",
                    "either because the referendum was cancelled, because the voter lost the referendum or",
                    "because the conviction period is over.",
                    "",
                    "The dispatch origin of this call must be _Signed_.",
                    "",
                    "- `target`: The account of the vote to be removed; this account must have voted for",
                    "  referendum `index`.",
                    "- `index`: The index of referendum of the vote to be removed.",
                    "",
                    "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.",
                    "  Weight is calculated for the maximum number of vote."
                  ]
                },
                {
                  "name": "blacklist",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "typeId": 12,
                      "typeName": "H256",
                      "docs": []
                    },
                    {
                      "name": "maybe_ref_index",
                      "typeId": 206,
                      "typeName": "Option<ReferendumIndex>",
                      "docs": []
                    }
                  ],
                  "index": 16,
                  "docs": [
                    "Permanently place a proposal into the blacklist. This prevents it from ever being",
                    "proposed again.",
                    "",
                    "If called on a queued public or external proposal, then this will result in it being",
                    "removed. If the `ref_index` supplied is an active referendum with the proposal hash,",
                    "then it will be cancelled.",
                    "",
                    "The dispatch origin of this call must be `BlacklistOrigin`.",
                    "",
                    "- `proposal_hash`: The proposal hash to blacklist permanently.",
                    "- `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which will be",
                    "cancelled.",
                    "",
                    "Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it has a",
                    "  reasonable value)."
                  ]
                },
                {
                  "name": "cancel_proposal",
                  "fields": [
                    {
                      "name": "prop_index",
                      "typeId": 132,
                      "typeName": "PropIndex",
                      "docs": []
                    }
                  ],
                  "index": 17,
                  "docs": [
                    "Remove a proposal.",
                    "",
                    "The dispatch origin of this call must be `CancelProposalOrigin`.",
                    "",
                    "- `prop_index`: The index of the proposal to cancel.",
                    "",
                    "Weight: `O(p)` where `p = PublicProps::<T>::decode_len()`"
                  ]
                },
                {
                  "name": "set_metadata",
                  "fields": [
                    {
                      "name": "owner",
                      "typeId": 81,
                      "typeName": "MetadataOwner",
                      "docs": []
                    },
                    {
                      "name": "maybe_hash",
                      "typeId": 207,
                      "typeName": "Option<PreimageHash>",
                      "docs": []
                    }
                  ],
                  "index": 18,
                  "docs": [
                    "Set or clear a metadata of a proposal or a referendum.",
                    "",
                    "Parameters:",
                    "- `origin`: Must correspond to the `MetadataOwner`.",
                    "    - `ExternalOrigin` for an external proposal with the `SuperMajorityApprove`",
                    "      threshold.",
                    "    - `ExternalDefaultOrigin` for an external proposal with the `SuperMajorityAgainst`",
                    "      threshold.",
                    "    - `ExternalMajorityOrigin` for an external proposal with the `SimpleMajority`",
                    "      threshold.",
                    "    - `Signed` by a creator for a public proposal.",
                    "    - `Signed` to clear a metadata for a finished referendum.",
                    "    - `Root` to set a metadata for an ongoing referendum.",
                    "- `owner`: an identifier of a metadata owner.",
                    "- `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 205,
          "path": [
            "pallet_democracy",
            "conviction",
            "Conviction"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Locked1x",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Locked2x",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Locked3x",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Locked4x",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Locked5x",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Locked6x",
                  "fields": [],
                  "index": 6,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 206,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 4,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 207,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 12
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 12,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 208,
          "path": [
            "pallet_preimage",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "note_preimage",
                  "fields": [
                    {
                      "name": "bytes",
                      "typeId": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Register a preimage on-chain.",
                    "",
                    "If the preimage was previously requested, no fees or deposits are taken for providing",
                    "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."
                  ]
                },
                {
                  "name": "unnote_preimage",
                  "fields": [
                    {
                      "name": "hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Clear an unrequested preimage from the runtime storage.",
                    "",
                    "If `len` is provided, then it will be a much cheaper operation.",
                    "",
                    "- `hash`: The hash of the preimage to be removed from the store.",
                    "- `len`: The length of the preimage of `hash`."
                  ]
                },
                {
                  "name": "request_preimage",
                  "fields": [
                    {
                      "name": "hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Request a preimage be uploaded to the chain without paying any fees or deposits.",
                    "",
                    "If the preimage requests has already been provided on-chain, we unreserve any deposit",
                    "a user may have paid, and take the control of the preimage out of their hands."
                  ]
                },
                {
                  "name": "unrequest_preimage",
                  "fields": [
                    {
                      "name": "hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Clear a previously made request for a preimage.",
                    "",
                    "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 209,
          "path": [
            "pallet_conviction_voting",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "vote",
                  "fields": [
                    {
                      "name": "poll_index",
                      "typeId": 132,
                      "typeName": "PollIndexOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "vote",
                      "typeId": 210,
                      "typeName": "AccountVote<BalanceOf<T, I>>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Vote in a poll. If `vote.is_aye()`, the vote is to enact the proposal;",
                    "otherwise it is a vote to keep the status quo.",
                    "",
                    "The dispatch origin of this call must be _Signed_.",
                    "",
                    "- `poll_index`: The index of the poll to vote for.",
                    "- `vote`: The vote configuration.",
                    "",
                    "Weight: `O(R)` where R is the number of polls the voter has voted on."
                  ]
                },
                {
                  "name": "delegate",
                  "fields": [
                    {
                      "name": "class",
                      "typeId": 56,
                      "typeName": "ClassOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "to",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "conviction",
                      "typeId": 212,
                      "typeName": "Conviction",
                      "docs": []
                    },
                    {
                      "name": "balance",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Delegate the voting power (with some given conviction) of the sending account for a",
                    "particular class of polls.",
                    "",
                    "The balance delegated is locked for as long as it's delegated, and thereafter for the",
                    "time appropriate for the conviction's lock period.",
                    "",
                    "The dispatch origin of this call must be _Signed_, and the signing account must either:",
                    "  - be delegating already; or",
                    "  - have no voting activity (if there is, then it will need to be removed/consolidated",
                    "    through `reap_vote` or `unvote`).",
                    "",
                    "- `to`: The account whose voting the `target` account's voting power will follow.",
                    "- `class`: The class of polls to delegate. To delegate multiple classes, multiple calls",
                    "  to this function are required.",
                    "- `conviction`: The conviction that will be attached to the delegated votes. When the",
                    "  account is undelegated, the funds will be locked for the corresponding period.",
                    "- `balance`: The amount of the account's balance to be used in delegating. This must not",
                    "  be more than the account's current balance.",
                    "",
                    "Emits `Delegated`.",
                    "",
                    "Weight: `O(R)` where R is the number of polls the voter delegating to has",
                    "  voted on. Weight is initially charged as if maximum votes, but is refunded later."
                  ]
                },
                {
                  "name": "undelegate",
                  "fields": [
                    {
                      "name": "class",
                      "typeId": 56,
                      "typeName": "ClassOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Undelegate the voting power of the sending account for a particular class of polls.",
                    "",
                    "Tokens may be unlocked following once an amount of time consistent with the lock period",
                    "of the conviction with which the delegation was issued has passed.",
                    "",
                    "The dispatch origin of this call must be _Signed_ and the signing account must be",
                    "currently delegating.",
                    "",
                    "- `class`: The class of polls to remove the delegation from.",
                    "",
                    "Emits `Undelegated`.",
                    "",
                    "Weight: `O(R)` where R is the number of polls the voter delegating to has",
                    "  voted on. Weight is initially charged as if maximum votes, but is refunded later."
                  ]
                },
                {
                  "name": "unlock",
                  "fields": [
                    {
                      "name": "class",
                      "typeId": 56,
                      "typeName": "ClassOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "target",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Remove the lock caused by prior voting/delegating which has expired within a particular",
                    "class.",
                    "",
                    "The dispatch origin of this call must be _Signed_.",
                    "",
                    "- `class`: The class of polls to unlock.",
                    "- `target`: The account to remove the lock on.",
                    "",
                    "Weight: `O(R)` with R number of vote of target."
                  ]
                },
                {
                  "name": "remove_vote",
                  "fields": [
                    {
                      "name": "class",
                      "typeId": 213,
                      "typeName": "Option<ClassOf<T, I>>",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "PollIndexOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Remove a vote for a poll.",
                    "",
                    "If:",
                    "- the poll was cancelled, or",
                    "- the poll is ongoing, or",
                    "- the poll has ended such that",
                    "  - the vote of the account was in opposition to the result; or",
                    "  - there was no conviction to the account's vote; or",
                    "  - the account made a split vote",
                    "...then the vote is removed cleanly and a following call to `unlock` may result in more",
                    "funds being available.",
                    "",
                    "If, however, the poll has ended and:",
                    "- it finished corresponding to the vote of the account, and",
                    "- the account made a standard vote with conviction, and",
                    "- the lock period of the conviction is not over",
                    "...then the lock will be aggregated into the overall account's lock, which may involve",
                    "*overlocking* (where the two locks are combined into a single lock that is the maximum",
                    "of both the amount locked and the time is it locked for).",
                    "",
                    "The dispatch origin of this call must be _Signed_, and the signer must have a vote",
                    "registered for poll `index`.",
                    "",
                    "- `index`: The index of poll of the vote to be removed.",
                    "- `class`: Optional parameter, if given it indicates the class of the poll. For polls",
                    "  which have finished or are cancelled, this must be `Some`.",
                    "",
                    "Weight: `O(R + log R)` where R is the number of polls that `target` has voted on.",
                    "  Weight is calculated for the maximum number of vote."
                  ]
                },
                {
                  "name": "remove_other_vote",
                  "fields": [
                    {
                      "name": "target",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "class",
                      "typeId": 56,
                      "typeName": "ClassOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "PollIndexOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Remove a vote for a poll.",
                    "",
                    "If the `target` is equal to the signer, then this function is exactly equivalent to",
                    "`remove_vote`. If not equal to the signer, then the vote must have expired,",
                    "either because the poll was cancelled, because the voter lost the poll or",
                    "because the conviction period is over.",
                    "",
                    "The dispatch origin of this call must be _Signed_.",
                    "",
                    "- `target`: The account of the vote to be removed; this account must have voted for poll",
                    "  `index`.",
                    "- `index`: The index of poll of the vote to be removed.",
                    "- `class`: The class of the poll.",
                    "",
                    "Weight: `O(R + log R)` where R is the number of polls that `target` has voted on.",
                    "  Weight is calculated for the maximum number of vote."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 210,
          "path": [
            "pallet_conviction_voting",
            "vote",
            "AccountVote"
          ],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Standard",
                  "fields": [
                    {
                      "name": "vote",
                      "typeId": 211,
                      "typeName": "Vote",
                      "docs": []
                    },
                    {
                      "name": "balance",
                      "typeId": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Split",
                  "fields": [
                    {
                      "name": "aye",
                      "typeId": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "nay",
                      "typeId": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "SplitAbstain",
                  "fields": [
                    {
                      "name": "aye",
                      "typeId": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "nay",
                      "typeId": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "abstain",
                      "typeId": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 211,
          "path": [
            "pallet_conviction_voting",
            "vote",
            "Vote"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 212,
          "path": [
            "pallet_conviction_voting",
            "conviction",
            "Conviction"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Locked1x",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Locked2x",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Locked3x",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Locked4x",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Locked5x",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Locked6x",
                  "fields": [],
                  "index": 6,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 213,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 56
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 56,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 214,
          "path": [
            "pallet_referenda",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "submit",
                  "fields": [
                    {
                      "name": "proposal_origin",
                      "typeId": 119,
                      "typeName": "Box<PalletsOriginOf<T>>",
                      "docs": []
                    },
                    {
                      "name": "proposal",
                      "typeId": 85,
                      "typeName": "BoundedCallOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "enactment_moment",
                      "typeId": 215,
                      "typeName": "DispatchTime<T::BlockNumber>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Propose a referendum on a privileged action.",
                    "",
                    "- `origin`: must be `SubmitOrigin` and the account must have `SubmissionDeposit` funds",
                    "  available.",
                    "- `proposal_origin`: The origin from which the proposal should be executed.",
                    "- `proposal`: The proposal.",
                    "- `enactment_moment`: The moment that the proposal should be enacted.",
                    "",
                    "Emits `Submitted`."
                  ]
                },
                {
                  "name": "place_decision_deposit",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Post the Decision Deposit for a referendum.",
                    "",
                    "- `origin`: must be `Signed` and the account must have funds available for the",
                    "  referendum's track's Decision Deposit.",
                    "- `index`: The index of the submitted referendum whose Decision Deposit is yet to be",
                    "  posted.",
                    "",
                    "Emits `DecisionDepositPlaced`."
                  ]
                },
                {
                  "name": "refund_decision_deposit",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Refund the Decision Deposit for a closed referendum back to the depositor.",
                    "",
                    "- `origin`: must be `Signed` or `Root`.",
                    "- `index`: The index of a closed referendum whose Decision Deposit has not yet been",
                    "  refunded.",
                    "",
                    "Emits `DecisionDepositRefunded`."
                  ]
                },
                {
                  "name": "cancel",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Cancel an ongoing referendum.",
                    "",
                    "- `origin`: must be the `CancelOrigin`.",
                    "- `index`: The index of the referendum to be cancelled.",
                    "",
                    "Emits `Cancelled`."
                  ]
                },
                {
                  "name": "kill",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Cancel an ongoing referendum and slash the deposits.",
                    "",
                    "- `origin`: must be the `KillOrigin`.",
                    "- `index`: The index of the referendum to be cancelled.",
                    "",
                    "Emits `Killed` and `DepositSlashed`."
                  ]
                },
                {
                  "name": "nudge_referendum",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Advance a referendum onto its next logical state. Only used internally.",
                    "",
                    "- `origin`: must be `Root`.",
                    "- `index`: the referendum to be advanced."
                  ]
                },
                {
                  "name": "one_fewer_deciding",
                  "fields": [
                    {
                      "name": "track",
                      "typeId": 56,
                      "typeName": "TrackIdOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Advance a track onto its next logical state. Only used internally.",
                    "",
                    "- `origin`: must be `Root`.",
                    "- `track`: the track to be advanced.",
                    "",
                    "Action item for when there is now one fewer referendum in the deciding phase and the",
                    "`DecidingCount` is not yet updated. This means that we should either:",
                    "- begin deciding another referendum (and leave `DecidingCount` alone); or",
                    "- decrement `DecidingCount`."
                  ]
                },
                {
                  "name": "refund_submission_deposit",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Refund the Submission Deposit for a closed referendum back to the depositor.",
                    "",
                    "- `origin`: must be `Signed` or `Root`.",
                    "- `index`: The index of a closed referendum whose Submission Deposit has not yet been",
                    "  refunded.",
                    "",
                    "Emits `SubmissionDepositRefunded`."
                  ]
                },
                {
                  "name": "set_metadata",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    },
                    {
                      "name": "maybe_hash",
                      "typeId": 207,
                      "typeName": "Option<PreimageHash>",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "Set or clear metadata of a referendum.",
                    "",
                    "Parameters:",
                    "- `origin`: Must be `Signed` by a creator of a referendum or by anyone to clear a",
                    "  metadata of a finished referendum.",
                    "- `index`:  The index of a referendum to set or clear metadata for.",
                    "- `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 215,
          "path": [
            "frame_support",
            "traits",
            "schedule",
            "DispatchTime"
          ],
          "params": [
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "At",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "After",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 216,
          "path": [
            "pallet_whitelist",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "whitelist_call",
                  "fields": [
                    {
                      "name": "call_hash",
                      "typeId": 12,
                      "typeName": "PreimageHash",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "remove_whitelisted_call",
                  "fields": [
                    {
                      "name": "call_hash",
                      "typeId": 12,
                      "typeName": "PreimageHash",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "dispatch_whitelisted_call",
                  "fields": [
                    {
                      "name": "call_hash",
                      "typeId": 12,
                      "typeName": "PreimageHash",
                      "docs": []
                    },
                    {
                      "name": "call_encoded_len",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "call_weight_witness",
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "dispatch_whitelisted_call_with_preimage",
                  "fields": [
                    {
                      "name": "call",
                      "typeId": 86,
                      "typeName": "Box<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 217,
          "path": [
            "pallet_collective",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "set_members",
                  "fields": [
                    {
                      "name": "new_members",
                      "typeId": 109,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "prime",
                      "typeId": 50,
                      "typeName": "Option<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "old_count",
                      "typeId": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Set the collective's membership.",
                    "",
                    "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                    "- `prime`: The prime member whose vote sets the default.",
                    "- `old_count`: The upper bound for the previous number of members in storage. Used for",
                    "  weight estimation.",
                    "",
                    "The dispatch of this call must be `SetMembersOrigin`.",
                    "",
                    "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                    "      the weight estimations rely on it to estimate dispatchable weight.",
                    "",
                    "# WARNING:",
                    "",
                    "The `pallet-collective` can also be managed by logic outside of the pallet through the",
                    "implementation of the trait [`ChangeMembers`].",
                    "Any call to `set_members` must be careful that the member set doesn't get out of sync",
                    "with other logic managing the member set.",
                    "",
                    "## Complexity:",
                    "- `O(MP + N)` where:",
                    "  - `M` old-members-count (code- and governance-bounded)",
                    "  - `N` new-members-count (code- and governance-bounded)",
                    "  - `P` proposals-count (code-bounded)"
                  ]
                },
                {
                  "name": "execute",
                  "fields": [
                    {
                      "name": "proposal",
                      "typeId": 86,
                      "typeName": "Box<<T as Config<I>>::Proposal>",
                      "docs": []
                    },
                    {
                      "name": "length_bound",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Dispatch a proposal from a member using the `Member` origin.",
                    "",
                    "Origin must be a member of the collective.",
                    "",
                    "## Complexity:",
                    "- `O(B + M + P)` where:",
                    "- `B` is `proposal` size in bytes (length-fee-bounded)",
                    "- `M` members-count (code-bounded)",
                    "- `P` complexity of dispatching `proposal`"
                  ]
                },
                {
                  "name": "propose",
                  "fields": [
                    {
                      "name": "threshold",
                      "typeId": 132,
                      "typeName": "MemberCount",
                      "docs": []
                    },
                    {
                      "name": "proposal",
                      "typeId": 86,
                      "typeName": "Box<<T as Config<I>>::Proposal>",
                      "docs": []
                    },
                    {
                      "name": "length_bound",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Add a new proposal to either be voted on or executed directly.",
                    "",
                    "Requires the sender to be member.",
                    "",
                    "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                    "or put up for voting.",
                    "",
                    "## Complexity",
                    "- `O(B + M + P1)` or `O(B + M + P2)` where:",
                    "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                    "  - `M` is members-count (code- and governance-bounded)",
                    "  - branching is influenced by `threshold` where:",
                    "    - `P1` is proposal execution complexity (`threshold < 2`)",
                    "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"
                  ]
                },
                {
                  "name": "vote",
                  "fields": [
                    {
                      "name": "proposal",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "typeId": 132,
                      "typeName": "ProposalIndex",
                      "docs": []
                    },
                    {
                      "name": "approve",
                      "typeId": 37,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Add an aye or nay vote for the sender to the given proposal.",
                    "",
                    "Requires the sender to be a member.",
                    "",
                    "Transaction fees will be waived if the member is voting on any particular proposal",
                    "for the first time and the call is successful. Subsequent vote changes will charge a",
                    "fee.",
                    "## Complexity",
                    "- `O(M)` where `M` is members-count (code- and governance-bounded)"
                  ]
                },
                {
                  "name": "disapprove_proposal",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Disapprove a proposal, close, and remove it from the system, regardless of its current",
                    "state.",
                    "",
                    "Must be called by the Root origin.",
                    "",
                    "Parameters:",
                    "* `proposal_hash`: The hash of the proposal that should be disapproved.",
                    "",
                    "## Complexity",
                    "O(P) where P is the number of max proposals"
                  ]
                },
                {
                  "name": "close",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "typeId": 132,
                      "typeName": "ProposalIndex",
                      "docs": []
                    },
                    {
                      "name": "proposal_weight_bound",
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "length_bound",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Close a vote that is either approved, disapproved or whose voting period has ended.",
                    "",
                    "May be called by any signed account in order to finish voting and close the proposal.",
                    "",
                    "If called before the end of the voting period it will only close the vote if it is",
                    "has enough votes to be approved or disapproved.",
                    "",
                    "If called after the end of the voting period abstentions are counted as rejections",
                    "unless there is a prime member set and the prime member cast an approval.",
                    "",
                    "If the close operation completes successfully with disapproval, the transaction fee will",
                    "be waived. Otherwise execution of the approved operation will be charged to the caller.",
                    "",
                    "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
                    "proposal.",
                    "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                    "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                    "",
                    "## Complexity",
                    "- `O(B + M + P1 + P2)` where:",
                    "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                    "  - `M` is members-count (code- and governance-bounded)",
                    "  - `P1` is the complexity of `proposal` preimage.",
                    "  - `P2` is proposal-count (code-bounded)"
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 218,
          "path": [
            "pallet_collective",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "set_members",
                  "fields": [
                    {
                      "name": "new_members",
                      "typeId": 109,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "prime",
                      "typeId": 50,
                      "typeName": "Option<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "old_count",
                      "typeId": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Set the collective's membership.",
                    "",
                    "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                    "- `prime`: The prime member whose vote sets the default.",
                    "- `old_count`: The upper bound for the previous number of members in storage. Used for",
                    "  weight estimation.",
                    "",
                    "The dispatch of this call must be `SetMembersOrigin`.",
                    "",
                    "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                    "      the weight estimations rely on it to estimate dispatchable weight.",
                    "",
                    "# WARNING:",
                    "",
                    "The `pallet-collective` can also be managed by logic outside of the pallet through the",
                    "implementation of the trait [`ChangeMembers`].",
                    "Any call to `set_members` must be careful that the member set doesn't get out of sync",
                    "with other logic managing the member set.",
                    "",
                    "## Complexity:",
                    "- `O(MP + N)` where:",
                    "  - `M` old-members-count (code- and governance-bounded)",
                    "  - `N` new-members-count (code- and governance-bounded)",
                    "  - `P` proposals-count (code-bounded)"
                  ]
                },
                {
                  "name": "execute",
                  "fields": [
                    {
                      "name": "proposal",
                      "typeId": 86,
                      "typeName": "Box<<T as Config<I>>::Proposal>",
                      "docs": []
                    },
                    {
                      "name": "length_bound",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Dispatch a proposal from a member using the `Member` origin.",
                    "",
                    "Origin must be a member of the collective.",
                    "",
                    "## Complexity:",
                    "- `O(B + M + P)` where:",
                    "- `B` is `proposal` size in bytes (length-fee-bounded)",
                    "- `M` members-count (code-bounded)",
                    "- `P` complexity of dispatching `proposal`"
                  ]
                },
                {
                  "name": "propose",
                  "fields": [
                    {
                      "name": "threshold",
                      "typeId": 132,
                      "typeName": "MemberCount",
                      "docs": []
                    },
                    {
                      "name": "proposal",
                      "typeId": 86,
                      "typeName": "Box<<T as Config<I>>::Proposal>",
                      "docs": []
                    },
                    {
                      "name": "length_bound",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Add a new proposal to either be voted on or executed directly.",
                    "",
                    "Requires the sender to be member.",
                    "",
                    "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                    "or put up for voting.",
                    "",
                    "## Complexity",
                    "- `O(B + M + P1)` or `O(B + M + P2)` where:",
                    "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                    "  - `M` is members-count (code- and governance-bounded)",
                    "  - branching is influenced by `threshold` where:",
                    "    - `P1` is proposal execution complexity (`threshold < 2`)",
                    "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"
                  ]
                },
                {
                  "name": "vote",
                  "fields": [
                    {
                      "name": "proposal",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "typeId": 132,
                      "typeName": "ProposalIndex",
                      "docs": []
                    },
                    {
                      "name": "approve",
                      "typeId": 37,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Add an aye or nay vote for the sender to the given proposal.",
                    "",
                    "Requires the sender to be a member.",
                    "",
                    "Transaction fees will be waived if the member is voting on any particular proposal",
                    "for the first time and the call is successful. Subsequent vote changes will charge a",
                    "fee.",
                    "## Complexity",
                    "- `O(M)` where `M` is members-count (code- and governance-bounded)"
                  ]
                },
                {
                  "name": "disapprove_proposal",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Disapprove a proposal, close, and remove it from the system, regardless of its current",
                    "state.",
                    "",
                    "Must be called by the Root origin.",
                    "",
                    "Parameters:",
                    "* `proposal_hash`: The hash of the proposal that should be disapproved.",
                    "",
                    "## Complexity",
                    "O(P) where P is the number of max proposals"
                  ]
                },
                {
                  "name": "close",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "typeId": 132,
                      "typeName": "ProposalIndex",
                      "docs": []
                    },
                    {
                      "name": "proposal_weight_bound",
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "length_bound",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Close a vote that is either approved, disapproved or whose voting period has ended.",
                    "",
                    "May be called by any signed account in order to finish voting and close the proposal.",
                    "",
                    "If called before the end of the voting period it will only close the vote if it is",
                    "has enough votes to be approved or disapproved.",
                    "",
                    "If called after the end of the voting period abstentions are counted as rejections",
                    "unless there is a prime member set and the prime member cast an approval.",
                    "",
                    "If the close operation completes successfully with disapproval, the transaction fee will",
                    "be waived. Otherwise execution of the approved operation will be charged to the caller.",
                    "",
                    "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
                    "proposal.",
                    "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                    "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                    "",
                    "## Complexity",
                    "- `O(B + M + P1 + P2)` where:",
                    "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                    "  - `M` is members-count (code- and governance-bounded)",
                    "  - `P1` is the complexity of `proposal` preimage.",
                    "  - `P2` is proposal-count (code-bounded)"
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 219,
          "path": [
            "pallet_collective",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "set_members",
                  "fields": [
                    {
                      "name": "new_members",
                      "typeId": 109,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "prime",
                      "typeId": 50,
                      "typeName": "Option<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "old_count",
                      "typeId": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Set the collective's membership.",
                    "",
                    "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                    "- `prime`: The prime member whose vote sets the default.",
                    "- `old_count`: The upper bound for the previous number of members in storage. Used for",
                    "  weight estimation.",
                    "",
                    "The dispatch of this call must be `SetMembersOrigin`.",
                    "",
                    "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                    "      the weight estimations rely on it to estimate dispatchable weight.",
                    "",
                    "# WARNING:",
                    "",
                    "The `pallet-collective` can also be managed by logic outside of the pallet through the",
                    "implementation of the trait [`ChangeMembers`].",
                    "Any call to `set_members` must be careful that the member set doesn't get out of sync",
                    "with other logic managing the member set.",
                    "",
                    "## Complexity:",
                    "- `O(MP + N)` where:",
                    "  - `M` old-members-count (code- and governance-bounded)",
                    "  - `N` new-members-count (code- and governance-bounded)",
                    "  - `P` proposals-count (code-bounded)"
                  ]
                },
                {
                  "name": "execute",
                  "fields": [
                    {
                      "name": "proposal",
                      "typeId": 86,
                      "typeName": "Box<<T as Config<I>>::Proposal>",
                      "docs": []
                    },
                    {
                      "name": "length_bound",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Dispatch a proposal from a member using the `Member` origin.",
                    "",
                    "Origin must be a member of the collective.",
                    "",
                    "## Complexity:",
                    "- `O(B + M + P)` where:",
                    "- `B` is `proposal` size in bytes (length-fee-bounded)",
                    "- `M` members-count (code-bounded)",
                    "- `P` complexity of dispatching `proposal`"
                  ]
                },
                {
                  "name": "propose",
                  "fields": [
                    {
                      "name": "threshold",
                      "typeId": 132,
                      "typeName": "MemberCount",
                      "docs": []
                    },
                    {
                      "name": "proposal",
                      "typeId": 86,
                      "typeName": "Box<<T as Config<I>>::Proposal>",
                      "docs": []
                    },
                    {
                      "name": "length_bound",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Add a new proposal to either be voted on or executed directly.",
                    "",
                    "Requires the sender to be member.",
                    "",
                    "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                    "or put up for voting.",
                    "",
                    "## Complexity",
                    "- `O(B + M + P1)` or `O(B + M + P2)` where:",
                    "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                    "  - `M` is members-count (code- and governance-bounded)",
                    "  - branching is influenced by `threshold` where:",
                    "    - `P1` is proposal execution complexity (`threshold < 2`)",
                    "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"
                  ]
                },
                {
                  "name": "vote",
                  "fields": [
                    {
                      "name": "proposal",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "typeId": 132,
                      "typeName": "ProposalIndex",
                      "docs": []
                    },
                    {
                      "name": "approve",
                      "typeId": 37,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Add an aye or nay vote for the sender to the given proposal.",
                    "",
                    "Requires the sender to be a member.",
                    "",
                    "Transaction fees will be waived if the member is voting on any particular proposal",
                    "for the first time and the call is successful. Subsequent vote changes will charge a",
                    "fee.",
                    "## Complexity",
                    "- `O(M)` where `M` is members-count (code- and governance-bounded)"
                  ]
                },
                {
                  "name": "disapprove_proposal",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Disapprove a proposal, close, and remove it from the system, regardless of its current",
                    "state.",
                    "",
                    "Must be called by the Root origin.",
                    "",
                    "Parameters:",
                    "* `proposal_hash`: The hash of the proposal that should be disapproved.",
                    "",
                    "## Complexity",
                    "O(P) where P is the number of max proposals"
                  ]
                },
                {
                  "name": "close",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "typeId": 132,
                      "typeName": "ProposalIndex",
                      "docs": []
                    },
                    {
                      "name": "proposal_weight_bound",
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "length_bound",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Close a vote that is either approved, disapproved or whose voting period has ended.",
                    "",
                    "May be called by any signed account in order to finish voting and close the proposal.",
                    "",
                    "If called before the end of the voting period it will only close the vote if it is",
                    "has enough votes to be approved or disapproved.",
                    "",
                    "If called after the end of the voting period abstentions are counted as rejections",
                    "unless there is a prime member set and the prime member cast an approval.",
                    "",
                    "If the close operation completes successfully with disapproval, the transaction fee will",
                    "be waived. Otherwise execution of the approved operation will be charged to the caller.",
                    "",
                    "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
                    "proposal.",
                    "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                    "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                    "",
                    "## Complexity",
                    "- `O(B + M + P1 + P2)` where:",
                    "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                    "  - `M` is members-count (code- and governance-bounded)",
                    "  - `P1` is the complexity of `proposal` preimage.",
                    "  - `P2` is proposal-count (code-bounded)"
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 220,
          "path": [
            "pallet_collective",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "set_members",
                  "fields": [
                    {
                      "name": "new_members",
                      "typeId": 109,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "prime",
                      "typeId": 50,
                      "typeName": "Option<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "old_count",
                      "typeId": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Set the collective's membership.",
                    "",
                    "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                    "- `prime`: The prime member whose vote sets the default.",
                    "- `old_count`: The upper bound for the previous number of members in storage. Used for",
                    "  weight estimation.",
                    "",
                    "The dispatch of this call must be `SetMembersOrigin`.",
                    "",
                    "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                    "      the weight estimations rely on it to estimate dispatchable weight.",
                    "",
                    "# WARNING:",
                    "",
                    "The `pallet-collective` can also be managed by logic outside of the pallet through the",
                    "implementation of the trait [`ChangeMembers`].",
                    "Any call to `set_members` must be careful that the member set doesn't get out of sync",
                    "with other logic managing the member set.",
                    "",
                    "## Complexity:",
                    "- `O(MP + N)` where:",
                    "  - `M` old-members-count (code- and governance-bounded)",
                    "  - `N` new-members-count (code- and governance-bounded)",
                    "  - `P` proposals-count (code-bounded)"
                  ]
                },
                {
                  "name": "execute",
                  "fields": [
                    {
                      "name": "proposal",
                      "typeId": 86,
                      "typeName": "Box<<T as Config<I>>::Proposal>",
                      "docs": []
                    },
                    {
                      "name": "length_bound",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Dispatch a proposal from a member using the `Member` origin.",
                    "",
                    "Origin must be a member of the collective.",
                    "",
                    "## Complexity:",
                    "- `O(B + M + P)` where:",
                    "- `B` is `proposal` size in bytes (length-fee-bounded)",
                    "- `M` members-count (code-bounded)",
                    "- `P` complexity of dispatching `proposal`"
                  ]
                },
                {
                  "name": "propose",
                  "fields": [
                    {
                      "name": "threshold",
                      "typeId": 132,
                      "typeName": "MemberCount",
                      "docs": []
                    },
                    {
                      "name": "proposal",
                      "typeId": 86,
                      "typeName": "Box<<T as Config<I>>::Proposal>",
                      "docs": []
                    },
                    {
                      "name": "length_bound",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Add a new proposal to either be voted on or executed directly.",
                    "",
                    "Requires the sender to be member.",
                    "",
                    "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                    "or put up for voting.",
                    "",
                    "## Complexity",
                    "- `O(B + M + P1)` or `O(B + M + P2)` where:",
                    "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                    "  - `M` is members-count (code- and governance-bounded)",
                    "  - branching is influenced by `threshold` where:",
                    "    - `P1` is proposal execution complexity (`threshold < 2`)",
                    "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"
                  ]
                },
                {
                  "name": "vote",
                  "fields": [
                    {
                      "name": "proposal",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "typeId": 132,
                      "typeName": "ProposalIndex",
                      "docs": []
                    },
                    {
                      "name": "approve",
                      "typeId": 37,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Add an aye or nay vote for the sender to the given proposal.",
                    "",
                    "Requires the sender to be a member.",
                    "",
                    "Transaction fees will be waived if the member is voting on any particular proposal",
                    "for the first time and the call is successful. Subsequent vote changes will charge a",
                    "fee.",
                    "## Complexity",
                    "- `O(M)` where `M` is members-count (code- and governance-bounded)"
                  ]
                },
                {
                  "name": "disapprove_proposal",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Disapprove a proposal, close, and remove it from the system, regardless of its current",
                    "state.",
                    "",
                    "Must be called by the Root origin.",
                    "",
                    "Parameters:",
                    "* `proposal_hash`: The hash of the proposal that should be disapproved.",
                    "",
                    "## Complexity",
                    "O(P) where P is the number of max proposals"
                  ]
                },
                {
                  "name": "close",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "typeId": 132,
                      "typeName": "ProposalIndex",
                      "docs": []
                    },
                    {
                      "name": "proposal_weight_bound",
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "length_bound",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Close a vote that is either approved, disapproved or whose voting period has ended.",
                    "",
                    "May be called by any signed account in order to finish voting and close the proposal.",
                    "",
                    "If called before the end of the voting period it will only close the vote if it is",
                    "has enough votes to be approved or disapproved.",
                    "",
                    "If called after the end of the voting period abstentions are counted as rejections",
                    "unless there is a prime member set and the prime member cast an approval.",
                    "",
                    "If the close operation completes successfully with disapproval, the transaction fee will",
                    "be waived. Otherwise execution of the approved operation will be charged to the caller.",
                    "",
                    "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
                    "proposal.",
                    "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                    "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                    "",
                    "## Complexity",
                    "- `O(B + M + P1 + P2)` where:",
                    "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                    "  - `M` is members-count (code- and governance-bounded)",
                    "  - `P1` is the complexity of `proposal` preimage.",
                    "  - `P2` is proposal-count (code-bounded)"
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 221,
          "path": [
            "pallet_treasury",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "propose_spend",
                  "fields": [
                    {
                      "name": "value",
                      "typeId": 108,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Put forward a suggestion for spending. A deposit proportional to the value",
                    "is reserved and slashed if the proposal is rejected. It is returned once the",
                    "proposal is awarded.",
                    "",
                    "## Complexity",
                    "- O(1)"
                  ]
                },
                {
                  "name": "reject_proposal",
                  "fields": [
                    {
                      "name": "proposal_id",
                      "typeId": 132,
                      "typeName": "ProposalIndex",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Reject a proposed spend. The original deposit will be slashed.",
                    "",
                    "May only be called from `T::RejectOrigin`.",
                    "",
                    "## Complexity",
                    "- O(1)"
                  ]
                },
                {
                  "name": "approve_proposal",
                  "fields": [
                    {
                      "name": "proposal_id",
                      "typeId": 132,
                      "typeName": "ProposalIndex",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Approve a proposal. At a later time, the proposal will be allocated to the beneficiary",
                    "and the original deposit will be returned.",
                    "",
                    "May only be called from `T::ApproveOrigin`.",
                    "",
                    "## Complexity",
                    " - O(1)."
                  ]
                },
                {
                  "name": "spend",
                  "fields": [
                    {
                      "name": "amount",
                      "typeId": 108,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Propose and approve a spend of treasury funds.",
                    "",
                    "- `origin`: Must be `SpendOrigin` with the `Success` value being at least `amount`.",
                    "- `amount`: The amount to be transferred from the treasury to the `beneficiary`.",
                    "- `beneficiary`: The destination account for the transfer.",
                    "",
                    "NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the",
                    "beneficiary."
                  ]
                },
                {
                  "name": "remove_approval",
                  "fields": [
                    {
                      "name": "proposal_id",
                      "typeId": 132,
                      "typeName": "ProposalIndex",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Force a previously approved proposal to be removed from the approval queue.",
                    "The original deposit will no longer be returned.",
                    "",
                    "May only be called from `T::RejectOrigin`.",
                    "- `proposal_id`: The index of a proposal",
                    "",
                    "## Complexity",
                    "- O(A) where `A` is the number of approvals",
                    "",
                    "Errors:",
                    "- `ProposalNotApproved`: The `proposal_id` supplied was not found in the approval queue,",
                    "i.e., the proposal has not been approved. This could also mean the proposal does not",
                    "exist altogether, thus there is no way it would have been approved in the first place."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 222,
          "path": [
            "pallet_crowdloan_rewards",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "associate_native_identity",
                  "fields": [
                    {
                      "name": "reward_account",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "relay_account",
                      "typeId": 13,
                      "typeName": "T::RelayChainAccountId",
                      "docs": []
                    },
                    {
                      "name": "proof",
                      "typeId": 223,
                      "typeName": "MultiSignature",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Associate a native rewards_destination identity with a crowdloan contribution.",
                    "",
                    "The caller needs to provide the unassociated relay account and a proof to succeed",
                    "with the association",
                    "The proof is nothing but a signature over the reward_address using the relay keys"
                  ]
                },
                {
                  "name": "change_association_with_relay_keys",
                  "fields": [
                    {
                      "name": "reward_account",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "previous_account",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "proofs",
                      "typeId": 229,
                      "typeName": "Vec<(T::RelayChainAccountId, MultiSignature)>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Change reward account by submitting proofs from relay accounts",
                    "",
                    "The number of valid proofs needs to be bigger than 'RewardAddressRelayVoteThreshold'",
                    "The account to be changed needs to be submitted as 'previous_account'",
                    "Origin must be RewardAddressChangeOrigin"
                  ]
                },
                {
                  "name": "claim",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Collect whatever portion of your reward are currently vested."
                  ]
                },
                {
                  "name": "update_reward_address",
                  "fields": [
                    {
                      "name": "new_reward_account",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Update reward address, proving that the caller owns the current native key"
                  ]
                },
                {
                  "name": "complete_initialization",
                  "fields": [
                    {
                      "name": "lease_ending_block",
                      "typeId": 4,
                      "typeName": "T::VestingBlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "This extrinsic completes the initialization if some checks are fullfiled. These checks are:",
                    " -The reward contribution money matches the crowdloan pot",
                    " -The end vesting block is higher than the init vesting block",
                    " -The initialization has not complete yet"
                  ]
                },
                {
                  "name": "initialize_reward_vec",
                  "fields": [
                    {
                      "name": "rewards",
                      "typeId": 231,
                      "typeName": "Vec<(T::RelayChainAccountId, Option<T::AccountId>, BalanceOf<T>)>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Initialize the reward distribution storage. It shortcuts whenever an error is found",
                    "This does not enforce any checks other than making sure we dont go over funds",
                    "complete_initialization should perform any additional"
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 223,
          "path": [
            "sp_runtime",
            "MultiSignature"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Ed25519",
                  "fields": [
                    {
                      "typeId": 224,
                      "typeName": "ed25519::Signature",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Sr25519",
                  "fields": [
                    {
                      "typeId": 226,
                      "typeName": "sr25519::Signature",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Ecdsa",
                  "fields": [
                    {
                      "typeId": 227,
                      "typeName": "ecdsa::Signature",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 224,
          "path": [
            "sp_core",
            "ed25519",
            "Signature"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 225,
                  "typeName": "[u8; 64]",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 225,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 64,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 226,
          "path": [
            "sp_core",
            "sr25519",
            "Signature"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 225,
                  "typeName": "[u8; 64]",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 227,
          "path": [
            "sp_core",
            "ecdsa",
            "Signature"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 228,
                  "typeName": "[u8; 65]",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 228,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 65,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 229,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 230
            }
          },
          "docs": []
        },
        {
          "id": 230,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                13,
                223
              ]
            }
          },
          "docs": []
        },
        {
          "id": 231,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 232
            }
          },
          "docs": []
        },
        {
          "id": 232,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                13,
                50,
                6
              ]
            }
          },
          "docs": []
        },
        {
          "id": 233,
          "path": [
            "cumulus_pallet_dmp_queue",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "service_overweight",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 11,
                      "typeName": "OverweightIndex",
                      "docs": []
                    },
                    {
                      "name": "weight_limit",
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Service a single overweight message."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 234,
          "path": [
            "pallet_xcm",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "send",
                  "fields": [
                    {
                      "name": "dest",
                      "typeId": 235,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "message",
                      "typeId": 243,
                      "typeName": "Box<VersionedXcm<()>>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "teleport_assets",
                  "fields": [
                    {
                      "name": "dest",
                      "typeId": 235,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 235,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "assets",
                      "typeId": 288,
                      "typeName": "Box<VersionedMultiAssets>",
                      "docs": []
                    },
                    {
                      "name": "fee_asset_item",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Teleport some assets from the local chain to some destination chain.",
                    "",
                    "Fee payment on the destination side is made from the asset in the `assets` vector of",
                    "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
                    "with all fees taken as needed from the asset.",
                    "",
                    "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                    "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                    "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                    "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                    "  an `AccountId32` value.",
                    "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the",
                    "  `dest` side. May not be empty.",
                    "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                    "  fees."
                  ]
                },
                {
                  "name": "reserve_transfer_assets",
                  "fields": [
                    {
                      "name": "dest",
                      "typeId": 235,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 235,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "assets",
                      "typeId": 288,
                      "typeName": "Box<VersionedMultiAssets>",
                      "docs": []
                    },
                    {
                      "name": "fee_asset_item",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Transfer some assets from the local chain to the sovereign account of a destination",
                    "chain and forward a notification XCM.",
                    "",
                    "Fee payment on the destination side is made from the asset in the `assets` vector of",
                    "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
                    "with all fees taken as needed from the asset.",
                    "",
                    "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                    "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                    "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                    "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                    "  an `AccountId32` value.",
                    "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
                    "  `dest` side.",
                    "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                    "  fees."
                  ]
                },
                {
                  "name": "execute",
                  "fields": [
                    {
                      "name": "message",
                      "typeId": 289,
                      "typeName": "Box<VersionedXcm<<T as SysConfig>::RuntimeCall>>",
                      "docs": []
                    },
                    {
                      "name": "max_weight",
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Execute an XCM message from a local, signed, origin.",
                    "",
                    "An event is deposited indicating whether `msg` could be executed completely or only",
                    "partially.",
                    "",
                    "No more than `max_weight` will be used in its attempted execution. If this is less than the",
                    "maximum amount of weight that the message could take to be executed, then no execution",
                    "attempt will be made.",
                    "",
                    "NOTE: A successful return to this does *not* imply that the `msg` was executed successfully",
                    "to completion; only that *some* of it was executed."
                  ]
                },
                {
                  "name": "force_xcm_version",
                  "fields": [
                    {
                      "name": "location",
                      "typeId": 129,
                      "typeName": "Box<MultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "xcm_version",
                      "typeId": 4,
                      "typeName": "XcmVersion",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Extoll that a particular destination can be communicated with through a particular",
                    "version of XCM.",
                    "",
                    "- `origin`: Must be an origin specified by AdminOrigin.",
                    "- `location`: The destination that is being described.",
                    "- `xcm_version`: The latest version of XCM that `location` supports."
                  ]
                },
                {
                  "name": "force_default_xcm_version",
                  "fields": [
                    {
                      "name": "maybe_xcm_version",
                      "typeId": 206,
                      "typeName": "Option<XcmVersion>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Set a safe XCM version (the version that XCM should be encoded with if the most recent",
                    "version a destination can accept is unknown).",
                    "",
                    "- `origin`: Must be an origin specified by AdminOrigin.",
                    "- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable."
                  ]
                },
                {
                  "name": "force_subscribe_version_notify",
                  "fields": [
                    {
                      "name": "location",
                      "typeId": 235,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Ask a location to notify us regarding their XCM version and any changes to it.",
                    "",
                    "- `origin`: Must be an origin specified by AdminOrigin.",
                    "- `location`: The location to which we should subscribe for XCM version notifications."
                  ]
                },
                {
                  "name": "force_unsubscribe_version_notify",
                  "fields": [
                    {
                      "name": "location",
                      "typeId": 235,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Require that a particular destination should no longer notify us regarding any XCM",
                    "version changes.",
                    "",
                    "- `origin`: Must be an origin specified by AdminOrigin.",
                    "- `location`: The location to which we are currently subscribed for XCM version",
                    "  notifications which we no longer desire."
                  ]
                },
                {
                  "name": "limited_reserve_transfer_assets",
                  "fields": [
                    {
                      "name": "dest",
                      "typeId": 235,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 235,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "assets",
                      "typeId": 288,
                      "typeName": "Box<VersionedMultiAssets>",
                      "docs": []
                    },
                    {
                      "name": "fee_asset_item",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "weight_limit",
                      "typeId": 287,
                      "typeName": "WeightLimit",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "Transfer some assets from the local chain to the sovereign account of a destination",
                    "chain and forward a notification XCM.",
                    "",
                    "Fee payment on the destination side is made from the asset in the `assets` vector of",
                    "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
                    "is needed than `weight_limit`, then the operation will fail and the assets send may be",
                    "at risk.",
                    "",
                    "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                    "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                    "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                    "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                    "  an `AccountId32` value.",
                    "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
                    "  `dest` side.",
                    "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                    "  fees.",
                    "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
                  ]
                },
                {
                  "name": "limited_teleport_assets",
                  "fields": [
                    {
                      "name": "dest",
                      "typeId": 235,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 235,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "assets",
                      "typeId": 288,
                      "typeName": "Box<VersionedMultiAssets>",
                      "docs": []
                    },
                    {
                      "name": "fee_asset_item",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "weight_limit",
                      "typeId": 287,
                      "typeName": "WeightLimit",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "Teleport some assets from the local chain to some destination chain.",
                    "",
                    "Fee payment on the destination side is made from the asset in the `assets` vector of",
                    "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
                    "is needed than `weight_limit`, then the operation will fail and the assets send may be",
                    "at risk.",
                    "",
                    "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                    "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                    "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                    "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                    "  an `AccountId32` value.",
                    "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the",
                    "  `dest` side. May not be empty.",
                    "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                    "  fees.",
                    "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
                  ]
                },
                {
                  "name": "force_suspension",
                  "fields": [
                    {
                      "name": "suspended",
                      "typeId": 37,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": [
                    "Set or unset the global suspension state of the XCM executor.",
                    "",
                    "- `origin`: Must be an origin specified by AdminOrigin.",
                    "- `suspended`: `true` to suspend, `false` to resume."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 235,
          "path": [
            "xcm",
            "VersionedMultiLocation"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "V2",
                  "fields": [
                    {
                      "typeId": 236,
                      "typeName": "v2::MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "V3",
                  "fields": [
                    {
                      "typeId": 129,
                      "typeName": "v3::MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 236,
          "path": [
            "xcm",
            "v2",
            "multilocation",
            "MultiLocation"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "parents",
                  "typeId": 2,
                  "typeName": "u8",
                  "docs": []
                },
                {
                  "name": "interior",
                  "typeId": 237,
                  "typeName": "Junctions",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 237,
          "path": [
            "xcm",
            "v2",
            "multilocation",
            "Junctions"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Here",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "X1",
                  "fields": [
                    {
                      "typeId": 238,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "X2",
                  "fields": [
                    {
                      "typeId": 238,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 238,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "X3",
                  "fields": [
                    {
                      "typeId": 238,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 238,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 238,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "X4",
                  "fields": [
                    {
                      "typeId": 238,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 238,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 238,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 238,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "X5",
                  "fields": [
                    {
                      "typeId": 238,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 238,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 238,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 238,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 238,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "X6",
                  "fields": [
                    {
                      "typeId": 238,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 238,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 238,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 238,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 238,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 238,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "X7",
                  "fields": [
                    {
                      "typeId": 238,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 238,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 238,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 238,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 238,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 238,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 238,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "X8",
                  "fields": [
                    {
                      "typeId": 238,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 238,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 238,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 238,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 238,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 238,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 238,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "typeId": 238,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 238,
          "path": [
            "xcm",
            "v2",
            "junction",
            "Junction"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Parachain",
                  "fields": [
                    {
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "AccountId32",
                  "fields": [
                    {
                      "name": "network",
                      "typeId": 239,
                      "typeName": "NetworkId",
                      "docs": []
                    },
                    {
                      "name": "id",
                      "typeId": 13,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "AccountIndex64",
                  "fields": [
                    {
                      "name": "network",
                      "typeId": 239,
                      "typeName": "NetworkId",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "typeId": 10,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "AccountKey20",
                  "fields": [
                    {
                      "name": "network",
                      "typeId": 239,
                      "typeName": "NetworkId",
                      "docs": []
                    },
                    {
                      "name": "key",
                      "typeId": 1,
                      "typeName": "[u8; 20]",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "PalletInstance",
                  "fields": [
                    {
                      "typeId": 2,
                      "typeName": "u8",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "GeneralIndex",
                  "fields": [
                    {
                      "typeId": 108,
                      "typeName": "u128",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "GeneralKey",
                  "fields": [
                    {
                      "typeId": 240,
                      "typeName": "WeakBoundedVec<u8, ConstU32<32>>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "OnlyChild",
                  "fields": [],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "Plurality",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 241,
                      "typeName": "BodyId",
                      "docs": []
                    },
                    {
                      "name": "part",
                      "typeId": 242,
                      "typeName": "BodyPart",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 239,
          "path": [
            "xcm",
            "v2",
            "NetworkId"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Any",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Named",
                  "fields": [
                    {
                      "typeId": 240,
                      "typeName": "WeakBoundedVec<u8, ConstU32<32>>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Polkadot",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Kusama",
                  "fields": [],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 240,
          "path": [
            "bounded_collections",
            "weak_bounded_vec",
            "WeakBoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 2
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 14,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 241,
          "path": [
            "xcm",
            "v2",
            "BodyId"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Unit",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Named",
                  "fields": [
                    {
                      "typeId": 240,
                      "typeName": "WeakBoundedVec<u8, ConstU32<32>>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Index",
                  "fields": [
                    {
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Executive",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Technical",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Legislative",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Judicial",
                  "fields": [],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "Defense",
                  "fields": [],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "Administration",
                  "fields": [],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "Treasury",
                  "fields": [],
                  "index": 9,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 242,
          "path": [
            "xcm",
            "v2",
            "BodyPart"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Voice",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Members",
                  "fields": [
                    {
                      "name": "count",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Fraction",
                  "fields": [
                    {
                      "name": "nom",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "denom",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "AtLeastProportion",
                  "fields": [
                    {
                      "name": "nom",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "denom",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "MoreThanProportion",
                  "fields": [
                    {
                      "name": "nom",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "denom",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 243,
          "path": [
            "xcm",
            "VersionedXcm"
          ],
          "params": [
            {
              "name": "RuntimeCall"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "V2",
                  "fields": [
                    {
                      "typeId": 244,
                      "typeName": "v2::Xcm<RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "V3",
                  "fields": [
                    {
                      "typeId": 263,
                      "typeName": "v3::Xcm<RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 244,
          "path": [
            "xcm",
            "v2",
            "Xcm"
          ],
          "params": [
            {
              "name": "RuntimeCall"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 245,
                  "typeName": "Vec<Instruction<RuntimeCall>>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 245,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 246
            }
          },
          "docs": []
        },
        {
          "id": 246,
          "path": [
            "xcm",
            "v2",
            "Instruction"
          ],
          "params": [
            {
              "name": "RuntimeCall"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "WithdrawAsset",
                  "fields": [
                    {
                      "typeId": 247,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "ReserveAssetDeposited",
                  "fields": [
                    {
                      "typeId": 247,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "ReceiveTeleportedAsset",
                  "fields": [
                    {
                      "typeId": 247,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "QueryResponse",
                  "fields": [
                    {
                      "name": "query_id",
                      "typeId": 10,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "response",
                      "typeId": 253,
                      "typeName": "Response",
                      "docs": []
                    },
                    {
                      "name": "max_weight",
                      "typeId": 10,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "TransferAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 247,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 236,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "TransferReserveAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 247,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "typeId": 236,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "typeId": 244,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Transact",
                  "fields": [
                    {
                      "name": "origin_type",
                      "typeId": 257,
                      "typeName": "OriginKind",
                      "docs": []
                    },
                    {
                      "name": "require_weight_at_most",
                      "typeId": 10,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "typeId": 258,
                      "typeName": "DoubleEncoded<RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "HrmpNewChannelOpenRequest",
                  "fields": [
                    {
                      "name": "sender",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_message_size",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_capacity",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "HrmpChannelAccepted",
                  "fields": [
                    {
                      "name": "recipient",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "HrmpChannelClosing",
                  "fields": [
                    {
                      "name": "initiator",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "sender",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "recipient",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "ClearOrigin",
                  "fields": [],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "DescendOrigin",
                  "fields": [
                    {
                      "typeId": 237,
                      "typeName": "InteriorMultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "ReportError",
                  "fields": [
                    {
                      "name": "query_id",
                      "typeId": 10,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "typeId": 236,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "max_response_weight",
                      "typeId": 10,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": []
                },
                {
                  "name": "DepositAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 259,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "max_assets",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 236,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": []
                },
                {
                  "name": "DepositReserveAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 259,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "max_assets",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "typeId": 236,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "typeId": 244,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": []
                },
                {
                  "name": "ExchangeAsset",
                  "fields": [
                    {
                      "name": "give",
                      "typeId": 259,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "receive",
                      "typeId": 247,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": []
                },
                {
                  "name": "InitiateReserveWithdraw",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 259,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "reserve",
                      "typeId": 236,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "typeId": 244,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 16,
                  "docs": []
                },
                {
                  "name": "InitiateTeleport",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 259,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "typeId": 236,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "typeId": 244,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 17,
                  "docs": []
                },
                {
                  "name": "QueryHolding",
                  "fields": [
                    {
                      "name": "query_id",
                      "typeId": 10,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "typeId": 236,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "assets",
                      "typeId": 259,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "max_response_weight",
                      "typeId": 10,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 18,
                  "docs": []
                },
                {
                  "name": "BuyExecution",
                  "fields": [
                    {
                      "name": "fees",
                      "typeId": 249,
                      "typeName": "MultiAsset",
                      "docs": []
                    },
                    {
                      "name": "weight_limit",
                      "typeId": 262,
                      "typeName": "WeightLimit",
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": []
                },
                {
                  "name": "RefundSurplus",
                  "fields": [],
                  "index": 20,
                  "docs": []
                },
                {
                  "name": "SetErrorHandler",
                  "fields": [
                    {
                      "typeId": 244,
                      "typeName": "Xcm<RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": []
                },
                {
                  "name": "SetAppendix",
                  "fields": [
                    {
                      "typeId": 244,
                      "typeName": "Xcm<RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 22,
                  "docs": []
                },
                {
                  "name": "ClearError",
                  "fields": [],
                  "index": 23,
                  "docs": []
                },
                {
                  "name": "ClaimAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 247,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "ticket",
                      "typeId": 236,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 24,
                  "docs": []
                },
                {
                  "name": "Trap",
                  "fields": [
                    {
                      "typeId": 10,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 25,
                  "docs": []
                },
                {
                  "name": "SubscribeVersion",
                  "fields": [
                    {
                      "name": "query_id",
                      "typeId": 10,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "max_response_weight",
                      "typeId": 10,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 26,
                  "docs": []
                },
                {
                  "name": "UnsubscribeVersion",
                  "fields": [],
                  "index": 27,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 247,
          "path": [
            "xcm",
            "v2",
            "multiasset",
            "MultiAssets"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 248,
                  "typeName": "Vec<MultiAsset>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 248,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 249
            }
          },
          "docs": []
        },
        {
          "id": 249,
          "path": [
            "xcm",
            "v2",
            "multiasset",
            "MultiAsset"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "id",
                  "typeId": 250,
                  "typeName": "AssetId",
                  "docs": []
                },
                {
                  "name": "fun",
                  "typeId": 251,
                  "typeName": "Fungibility",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 250,
          "path": [
            "xcm",
            "v2",
            "multiasset",
            "AssetId"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Concrete",
                  "fields": [
                    {
                      "typeId": 236,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Abstract",
                  "fields": [
                    {
                      "typeId": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 251,
          "path": [
            "xcm",
            "v2",
            "multiasset",
            "Fungibility"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Fungible",
                  "fields": [
                    {
                      "typeId": 108,
                      "typeName": "u128",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "NonFungible",
                  "fields": [
                    {
                      "typeId": 252,
                      "typeName": "AssetInstance",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 252,
          "path": [
            "xcm",
            "v2",
            "multiasset",
            "AssetInstance"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Undefined",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Index",
                  "fields": [
                    {
                      "typeId": 108,
                      "typeName": "u128",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Array4",
                  "fields": [
                    {
                      "typeId": 18,
                      "typeName": "[u8; 4]",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Array8",
                  "fields": [
                    {
                      "typeId": 154,
                      "typeName": "[u8; 8]",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Array16",
                  "fields": [
                    {
                      "typeId": 162,
                      "typeName": "[u8; 16]",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Array32",
                  "fields": [
                    {
                      "typeId": 13,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Blob",
                  "fields": [
                    {
                      "typeId": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 253,
          "path": [
            "xcm",
            "v2",
            "Response"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Null",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Assets",
                  "fields": [
                    {
                      "typeId": 247,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "ExecutionResult",
                  "fields": [
                    {
                      "typeId": 254,
                      "typeName": "Option<(u32, Error)>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Version",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "super::Version",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 254,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 255
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 255,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 255,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                4,
                256
              ]
            }
          },
          "docs": []
        },
        {
          "id": 256,
          "path": [
            "xcm",
            "v2",
            "traits",
            "Error"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Overflow",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Unimplemented",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "UntrustedReserveLocation",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "UntrustedTeleportLocation",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "MultiLocationFull",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "MultiLocationNotInvertible",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "BadOrigin",
                  "fields": [],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "InvalidLocation",
                  "fields": [],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "AssetNotFound",
                  "fields": [],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "FailedToTransactAsset",
                  "fields": [],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "NotWithdrawable",
                  "fields": [],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "LocationCannotHold",
                  "fields": [],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "ExceedsMaxMessageSize",
                  "fields": [],
                  "index": 12,
                  "docs": []
                },
                {
                  "name": "DestinationUnsupported",
                  "fields": [],
                  "index": 13,
                  "docs": []
                },
                {
                  "name": "Transport",
                  "fields": [],
                  "index": 14,
                  "docs": []
                },
                {
                  "name": "Unroutable",
                  "fields": [],
                  "index": 15,
                  "docs": []
                },
                {
                  "name": "UnknownClaim",
                  "fields": [],
                  "index": 16,
                  "docs": []
                },
                {
                  "name": "FailedToDecode",
                  "fields": [],
                  "index": 17,
                  "docs": []
                },
                {
                  "name": "MaxWeightInvalid",
                  "fields": [],
                  "index": 18,
                  "docs": []
                },
                {
                  "name": "NotHoldingFees",
                  "fields": [],
                  "index": 19,
                  "docs": []
                },
                {
                  "name": "TooExpensive",
                  "fields": [],
                  "index": 20,
                  "docs": []
                },
                {
                  "name": "Trap",
                  "fields": [
                    {
                      "typeId": 11,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": []
                },
                {
                  "name": "UnhandledXcmVersion",
                  "fields": [],
                  "index": 22,
                  "docs": []
                },
                {
                  "name": "WeightLimitReached",
                  "fields": [
                    {
                      "typeId": 11,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 23,
                  "docs": []
                },
                {
                  "name": "Barrier",
                  "fields": [],
                  "index": 24,
                  "docs": []
                },
                {
                  "name": "WeightNotComputable",
                  "fields": [],
                  "index": 25,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 257,
          "path": [
            "xcm",
            "v2",
            "OriginKind"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Native",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "SovereignAccount",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Superuser",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Xcm",
                  "fields": [],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 258,
          "path": [
            "xcm",
            "double_encoded",
            "DoubleEncoded"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "encoded",
                  "typeId": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 259,
          "path": [
            "xcm",
            "v2",
            "multiasset",
            "MultiAssetFilter"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Definite",
                  "fields": [
                    {
                      "typeId": 247,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Wild",
                  "fields": [
                    {
                      "typeId": 260,
                      "typeName": "WildMultiAsset",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 260,
          "path": [
            "xcm",
            "v2",
            "multiasset",
            "WildMultiAsset"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "All",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "AllOf",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 250,
                      "typeName": "AssetId",
                      "docs": []
                    },
                    {
                      "name": "fun",
                      "typeId": 261,
                      "typeName": "WildFungibility",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 261,
          "path": [
            "xcm",
            "v2",
            "multiasset",
            "WildFungibility"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Fungible",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "NonFungible",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 262,
          "path": [
            "xcm",
            "v2",
            "WeightLimit"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Unlimited",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Limited",
                  "fields": [
                    {
                      "typeId": 10,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 263,
          "path": [
            "xcm",
            "v3",
            "Xcm"
          ],
          "params": [
            {
              "name": "Call"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 264,
                  "typeName": "Vec<Instruction<Call>>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 264,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 265
            }
          },
          "docs": []
        },
        {
          "id": 265,
          "path": [
            "xcm",
            "v3",
            "Instruction"
          ],
          "params": [
            {
              "name": "Call"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "WithdrawAsset",
                  "fields": [
                    {
                      "typeId": 266,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "ReserveAssetDeposited",
                  "fields": [
                    {
                      "typeId": 266,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "ReceiveTeleportedAsset",
                  "fields": [
                    {
                      "typeId": 266,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "QueryResponse",
                  "fields": [
                    {
                      "name": "query_id",
                      "typeId": 10,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "response",
                      "typeId": 272,
                      "typeName": "Response",
                      "docs": []
                    },
                    {
                      "name": "max_weight",
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "querier",
                      "typeId": 282,
                      "typeName": "Option<MultiLocation>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "TransferAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 266,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "TransferReserveAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 266,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "typeId": 263,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Transact",
                  "fields": [
                    {
                      "name": "origin_kind",
                      "typeId": 257,
                      "typeName": "OriginKind",
                      "docs": []
                    },
                    {
                      "name": "require_weight_at_most",
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "typeId": 258,
                      "typeName": "DoubleEncoded<Call>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "HrmpNewChannelOpenRequest",
                  "fields": [
                    {
                      "name": "sender",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_message_size",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_capacity",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "HrmpChannelAccepted",
                  "fields": [
                    {
                      "name": "recipient",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "HrmpChannelClosing",
                  "fields": [
                    {
                      "name": "initiator",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "sender",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "recipient",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "ClearOrigin",
                  "fields": [],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "DescendOrigin",
                  "fields": [
                    {
                      "typeId": 130,
                      "typeName": "InteriorMultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "ReportError",
                  "fields": [
                    {
                      "typeId": 283,
                      "typeName": "QueryResponseInfo",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": []
                },
                {
                  "name": "DepositAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 284,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": []
                },
                {
                  "name": "DepositReserveAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 284,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "typeId": 263,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": []
                },
                {
                  "name": "ExchangeAsset",
                  "fields": [
                    {
                      "name": "give",
                      "typeId": 284,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "want",
                      "typeId": 266,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "maximal",
                      "typeId": 37,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": []
                },
                {
                  "name": "InitiateReserveWithdraw",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 284,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "reserve",
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "typeId": 263,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 16,
                  "docs": []
                },
                {
                  "name": "InitiateTeleport",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 284,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "typeId": 263,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 17,
                  "docs": []
                },
                {
                  "name": "ReportHolding",
                  "fields": [
                    {
                      "name": "response_info",
                      "typeId": 283,
                      "typeName": "QueryResponseInfo",
                      "docs": []
                    },
                    {
                      "name": "assets",
                      "typeId": 284,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    }
                  ],
                  "index": 18,
                  "docs": []
                },
                {
                  "name": "BuyExecution",
                  "fields": [
                    {
                      "name": "fees",
                      "typeId": 268,
                      "typeName": "MultiAsset",
                      "docs": []
                    },
                    {
                      "name": "weight_limit",
                      "typeId": 287,
                      "typeName": "WeightLimit",
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": []
                },
                {
                  "name": "RefundSurplus",
                  "fields": [],
                  "index": 20,
                  "docs": []
                },
                {
                  "name": "SetErrorHandler",
                  "fields": [
                    {
                      "typeId": 263,
                      "typeName": "Xcm<Call>",
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": []
                },
                {
                  "name": "SetAppendix",
                  "fields": [
                    {
                      "typeId": 263,
                      "typeName": "Xcm<Call>",
                      "docs": []
                    }
                  ],
                  "index": 22,
                  "docs": []
                },
                {
                  "name": "ClearError",
                  "fields": [],
                  "index": 23,
                  "docs": []
                },
                {
                  "name": "ClaimAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 266,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "ticket",
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 24,
                  "docs": []
                },
                {
                  "name": "Trap",
                  "fields": [
                    {
                      "typeId": 10,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 25,
                  "docs": []
                },
                {
                  "name": "SubscribeVersion",
                  "fields": [
                    {
                      "name": "query_id",
                      "typeId": 10,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "max_response_weight",
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 26,
                  "docs": []
                },
                {
                  "name": "UnsubscribeVersion",
                  "fields": [],
                  "index": 27,
                  "docs": []
                },
                {
                  "name": "BurnAsset",
                  "fields": [
                    {
                      "typeId": 266,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 28,
                  "docs": []
                },
                {
                  "name": "ExpectAsset",
                  "fields": [
                    {
                      "typeId": 266,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 29,
                  "docs": []
                },
                {
                  "name": "ExpectOrigin",
                  "fields": [
                    {
                      "typeId": 282,
                      "typeName": "Option<MultiLocation>",
                      "docs": []
                    }
                  ],
                  "index": 30,
                  "docs": []
                },
                {
                  "name": "ExpectError",
                  "fields": [
                    {
                      "typeId": 273,
                      "typeName": "Option<(u32, Error)>",
                      "docs": []
                    }
                  ],
                  "index": 31,
                  "docs": []
                },
                {
                  "name": "ExpectTransactStatus",
                  "fields": [
                    {
                      "typeId": 280,
                      "typeName": "MaybeErrorCode",
                      "docs": []
                    }
                  ],
                  "index": 32,
                  "docs": []
                },
                {
                  "name": "QueryPallet",
                  "fields": [
                    {
                      "name": "module_name",
                      "typeId": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "response_info",
                      "typeId": 283,
                      "typeName": "QueryResponseInfo",
                      "docs": []
                    }
                  ],
                  "index": 33,
                  "docs": []
                },
                {
                  "name": "ExpectPallet",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "name",
                      "typeId": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "module_name",
                      "typeId": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "crate_major",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "min_crate_minor",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 34,
                  "docs": []
                },
                {
                  "name": "ReportTransactStatus",
                  "fields": [
                    {
                      "typeId": 283,
                      "typeName": "QueryResponseInfo",
                      "docs": []
                    }
                  ],
                  "index": 35,
                  "docs": []
                },
                {
                  "name": "ClearTransactStatus",
                  "fields": [],
                  "index": 36,
                  "docs": []
                },
                {
                  "name": "UniversalOrigin",
                  "fields": [
                    {
                      "typeId": 131,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 37,
                  "docs": []
                },
                {
                  "name": "ExportMessage",
                  "fields": [
                    {
                      "name": "network",
                      "typeId": 134,
                      "typeName": "NetworkId",
                      "docs": []
                    },
                    {
                      "name": "destination",
                      "typeId": 130,
                      "typeName": "InteriorMultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "typeId": 263,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 38,
                  "docs": []
                },
                {
                  "name": "LockAsset",
                  "fields": [
                    {
                      "name": "asset",
                      "typeId": 268,
                      "typeName": "MultiAsset",
                      "docs": []
                    },
                    {
                      "name": "unlocker",
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 39,
                  "docs": []
                },
                {
                  "name": "UnlockAsset",
                  "fields": [
                    {
                      "name": "asset",
                      "typeId": 268,
                      "typeName": "MultiAsset",
                      "docs": []
                    },
                    {
                      "name": "target",
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 40,
                  "docs": []
                },
                {
                  "name": "NoteUnlockable",
                  "fields": [
                    {
                      "name": "asset",
                      "typeId": 268,
                      "typeName": "MultiAsset",
                      "docs": []
                    },
                    {
                      "name": "owner",
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 41,
                  "docs": []
                },
                {
                  "name": "RequestUnlock",
                  "fields": [
                    {
                      "name": "asset",
                      "typeId": 268,
                      "typeName": "MultiAsset",
                      "docs": []
                    },
                    {
                      "name": "locker",
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 42,
                  "docs": []
                },
                {
                  "name": "SetFeesMode",
                  "fields": [
                    {
                      "name": "jit_withdraw",
                      "typeId": 37,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 43,
                  "docs": []
                },
                {
                  "name": "SetTopic",
                  "fields": [
                    {
                      "typeId": 13,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ],
                  "index": 44,
                  "docs": []
                },
                {
                  "name": "ClearTopic",
                  "fields": [],
                  "index": 45,
                  "docs": []
                },
                {
                  "name": "AliasOrigin",
                  "fields": [
                    {
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 46,
                  "docs": []
                },
                {
                  "name": "UnpaidExecution",
                  "fields": [
                    {
                      "name": "weight_limit",
                      "typeId": 287,
                      "typeName": "WeightLimit",
                      "docs": []
                    },
                    {
                      "name": "check_origin",
                      "typeId": 282,
                      "typeName": "Option<MultiLocation>",
                      "docs": []
                    }
                  ],
                  "index": 47,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 266,
          "path": [
            "xcm",
            "v3",
            "multiasset",
            "MultiAssets"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 267,
                  "typeName": "Vec<MultiAsset>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 267,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 268
            }
          },
          "docs": []
        },
        {
          "id": 268,
          "path": [
            "xcm",
            "v3",
            "multiasset",
            "MultiAsset"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "id",
                  "typeId": 269,
                  "typeName": "AssetId",
                  "docs": []
                },
                {
                  "name": "fun",
                  "typeId": 270,
                  "typeName": "Fungibility",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 269,
          "path": [
            "xcm",
            "v3",
            "multiasset",
            "AssetId"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Concrete",
                  "fields": [
                    {
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Abstract",
                  "fields": [
                    {
                      "typeId": 13,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 270,
          "path": [
            "xcm",
            "v3",
            "multiasset",
            "Fungibility"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Fungible",
                  "fields": [
                    {
                      "typeId": 108,
                      "typeName": "u128",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "NonFungible",
                  "fields": [
                    {
                      "typeId": 271,
                      "typeName": "AssetInstance",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 271,
          "path": [
            "xcm",
            "v3",
            "multiasset",
            "AssetInstance"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Undefined",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Index",
                  "fields": [
                    {
                      "typeId": 108,
                      "typeName": "u128",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Array4",
                  "fields": [
                    {
                      "typeId": 18,
                      "typeName": "[u8; 4]",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Array8",
                  "fields": [
                    {
                      "typeId": 154,
                      "typeName": "[u8; 8]",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Array16",
                  "fields": [
                    {
                      "typeId": 162,
                      "typeName": "[u8; 16]",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Array32",
                  "fields": [
                    {
                      "typeId": 13,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 272,
          "path": [
            "xcm",
            "v3",
            "Response"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Null",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Assets",
                  "fields": [
                    {
                      "typeId": 266,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "ExecutionResult",
                  "fields": [
                    {
                      "typeId": 273,
                      "typeName": "Option<(u32, Error)>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Version",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "super::Version",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "PalletsInfo",
                  "fields": [
                    {
                      "typeId": 276,
                      "typeName": "BoundedVec<PalletInfo, MaxPalletsInfo>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "DispatchResult",
                  "fields": [
                    {
                      "typeId": 280,
                      "typeName": "MaybeErrorCode",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 273,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 274
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 274,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 274,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                4,
                275
              ]
            }
          },
          "docs": []
        },
        {
          "id": 275,
          "path": [
            "xcm",
            "v3",
            "traits",
            "Error"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Overflow",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Unimplemented",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "UntrustedReserveLocation",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "UntrustedTeleportLocation",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "LocationFull",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "LocationNotInvertible",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "BadOrigin",
                  "fields": [],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "InvalidLocation",
                  "fields": [],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "AssetNotFound",
                  "fields": [],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "FailedToTransactAsset",
                  "fields": [],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "NotWithdrawable",
                  "fields": [],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "LocationCannotHold",
                  "fields": [],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "ExceedsMaxMessageSize",
                  "fields": [],
                  "index": 12,
                  "docs": []
                },
                {
                  "name": "DestinationUnsupported",
                  "fields": [],
                  "index": 13,
                  "docs": []
                },
                {
                  "name": "Transport",
                  "fields": [],
                  "index": 14,
                  "docs": []
                },
                {
                  "name": "Unroutable",
                  "fields": [],
                  "index": 15,
                  "docs": []
                },
                {
                  "name": "UnknownClaim",
                  "fields": [],
                  "index": 16,
                  "docs": []
                },
                {
                  "name": "FailedToDecode",
                  "fields": [],
                  "index": 17,
                  "docs": []
                },
                {
                  "name": "MaxWeightInvalid",
                  "fields": [],
                  "index": 18,
                  "docs": []
                },
                {
                  "name": "NotHoldingFees",
                  "fields": [],
                  "index": 19,
                  "docs": []
                },
                {
                  "name": "TooExpensive",
                  "fields": [],
                  "index": 20,
                  "docs": []
                },
                {
                  "name": "Trap",
                  "fields": [
                    {
                      "typeId": 11,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": []
                },
                {
                  "name": "ExpectationFalse",
                  "fields": [],
                  "index": 22,
                  "docs": []
                },
                {
                  "name": "PalletNotFound",
                  "fields": [],
                  "index": 23,
                  "docs": []
                },
                {
                  "name": "NameMismatch",
                  "fields": [],
                  "index": 24,
                  "docs": []
                },
                {
                  "name": "VersionIncompatible",
                  "fields": [],
                  "index": 25,
                  "docs": []
                },
                {
                  "name": "HoldingWouldOverflow",
                  "fields": [],
                  "index": 26,
                  "docs": []
                },
                {
                  "name": "ExportError",
                  "fields": [],
                  "index": 27,
                  "docs": []
                },
                {
                  "name": "ReanchorFailed",
                  "fields": [],
                  "index": 28,
                  "docs": []
                },
                {
                  "name": "NoDeal",
                  "fields": [],
                  "index": 29,
                  "docs": []
                },
                {
                  "name": "FeesNotMet",
                  "fields": [],
                  "index": 30,
                  "docs": []
                },
                {
                  "name": "LockError",
                  "fields": [],
                  "index": 31,
                  "docs": []
                },
                {
                  "name": "NoPermission",
                  "fields": [],
                  "index": 32,
                  "docs": []
                },
                {
                  "name": "Unanchored",
                  "fields": [],
                  "index": 33,
                  "docs": []
                },
                {
                  "name": "NotDepositable",
                  "fields": [],
                  "index": 34,
                  "docs": []
                },
                {
                  "name": "UnhandledXcmVersion",
                  "fields": [],
                  "index": 35,
                  "docs": []
                },
                {
                  "name": "WeightLimitReached",
                  "fields": [
                    {
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 36,
                  "docs": []
                },
                {
                  "name": "Barrier",
                  "fields": [],
                  "index": 37,
                  "docs": []
                },
                {
                  "name": "WeightNotComputable",
                  "fields": [],
                  "index": 38,
                  "docs": []
                },
                {
                  "name": "ExceedsStackLimit",
                  "fields": [],
                  "index": 39,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 276,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 277
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 279,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 277,
          "path": [
            "xcm",
            "v3",
            "PalletInfo"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "index",
                  "typeId": 132,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "name",
                  "typeId": 278,
                  "typeName": "BoundedVec<u8, MaxPalletNameLen>",
                  "docs": []
                },
                {
                  "name": "module_name",
                  "typeId": 278,
                  "typeName": "BoundedVec<u8, MaxPalletNameLen>",
                  "docs": []
                },
                {
                  "name": "major",
                  "typeId": 132,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "minor",
                  "typeId": 132,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "patch",
                  "typeId": 132,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 278,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 2
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 14,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 279,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 277
            }
          },
          "docs": []
        },
        {
          "id": 280,
          "path": [
            "xcm",
            "v3",
            "MaybeErrorCode"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Success",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Error",
                  "fields": [
                    {
                      "typeId": 281,
                      "typeName": "BoundedVec<u8, MaxDispatchErrorLen>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "TruncatedError",
                  "fields": [
                    {
                      "typeId": 281,
                      "typeName": "BoundedVec<u8, MaxDispatchErrorLen>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 281,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 2
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 14,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 282,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 129
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 129,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 283,
          "path": [
            "xcm",
            "v3",
            "QueryResponseInfo"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "destination",
                  "typeId": 129,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "query_id",
                  "typeId": 10,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "max_weight",
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 284,
          "path": [
            "xcm",
            "v3",
            "multiasset",
            "MultiAssetFilter"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Definite",
                  "fields": [
                    {
                      "typeId": 266,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Wild",
                  "fields": [
                    {
                      "typeId": 285,
                      "typeName": "WildMultiAsset",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 285,
          "path": [
            "xcm",
            "v3",
            "multiasset",
            "WildMultiAsset"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "All",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "AllOf",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 269,
                      "typeName": "AssetId",
                      "docs": []
                    },
                    {
                      "name": "fun",
                      "typeId": 286,
                      "typeName": "WildFungibility",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "AllCounted",
                  "fields": [
                    {
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "AllOfCounted",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 269,
                      "typeName": "AssetId",
                      "docs": []
                    },
                    {
                      "name": "fun",
                      "typeId": 286,
                      "typeName": "WildFungibility",
                      "docs": []
                    },
                    {
                      "name": "count",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 286,
          "path": [
            "xcm",
            "v3",
            "multiasset",
            "WildFungibility"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Fungible",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "NonFungible",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 287,
          "path": [
            "xcm",
            "v3",
            "WeightLimit"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Unlimited",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Limited",
                  "fields": [
                    {
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 288,
          "path": [
            "xcm",
            "VersionedMultiAssets"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "V2",
                  "fields": [
                    {
                      "typeId": 247,
                      "typeName": "v2::MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "V3",
                  "fields": [
                    {
                      "typeId": 266,
                      "typeName": "v3::MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 289,
          "path": [
            "xcm",
            "VersionedXcm"
          ],
          "params": [
            {
              "name": "RuntimeCall"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "V2",
                  "fields": [
                    {
                      "typeId": 290,
                      "typeName": "v2::Xcm<RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "V3",
                  "fields": [
                    {
                      "typeId": 294,
                      "typeName": "v3::Xcm<RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 290,
          "path": [
            "xcm",
            "v2",
            "Xcm"
          ],
          "params": [
            {
              "name": "RuntimeCall"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 291,
                  "typeName": "Vec<Instruction<RuntimeCall>>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 291,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 292
            }
          },
          "docs": []
        },
        {
          "id": 292,
          "path": [
            "xcm",
            "v2",
            "Instruction"
          ],
          "params": [
            {
              "name": "RuntimeCall"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "WithdrawAsset",
                  "fields": [
                    {
                      "typeId": 247,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "ReserveAssetDeposited",
                  "fields": [
                    {
                      "typeId": 247,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "ReceiveTeleportedAsset",
                  "fields": [
                    {
                      "typeId": 247,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "QueryResponse",
                  "fields": [
                    {
                      "name": "query_id",
                      "typeId": 10,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "response",
                      "typeId": 253,
                      "typeName": "Response",
                      "docs": []
                    },
                    {
                      "name": "max_weight",
                      "typeId": 10,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "TransferAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 247,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 236,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "TransferReserveAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 247,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "typeId": 236,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "typeId": 244,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Transact",
                  "fields": [
                    {
                      "name": "origin_type",
                      "typeId": 257,
                      "typeName": "OriginKind",
                      "docs": []
                    },
                    {
                      "name": "require_weight_at_most",
                      "typeId": 10,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "typeId": 293,
                      "typeName": "DoubleEncoded<RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "HrmpNewChannelOpenRequest",
                  "fields": [
                    {
                      "name": "sender",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_message_size",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_capacity",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "HrmpChannelAccepted",
                  "fields": [
                    {
                      "name": "recipient",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "HrmpChannelClosing",
                  "fields": [
                    {
                      "name": "initiator",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "sender",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "recipient",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "ClearOrigin",
                  "fields": [],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "DescendOrigin",
                  "fields": [
                    {
                      "typeId": 237,
                      "typeName": "InteriorMultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "ReportError",
                  "fields": [
                    {
                      "name": "query_id",
                      "typeId": 10,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "typeId": 236,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "max_response_weight",
                      "typeId": 10,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": []
                },
                {
                  "name": "DepositAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 259,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "max_assets",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 236,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": []
                },
                {
                  "name": "DepositReserveAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 259,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "max_assets",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "typeId": 236,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "typeId": 244,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": []
                },
                {
                  "name": "ExchangeAsset",
                  "fields": [
                    {
                      "name": "give",
                      "typeId": 259,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "receive",
                      "typeId": 247,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": []
                },
                {
                  "name": "InitiateReserveWithdraw",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 259,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "reserve",
                      "typeId": 236,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "typeId": 244,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 16,
                  "docs": []
                },
                {
                  "name": "InitiateTeleport",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 259,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "typeId": 236,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "typeId": 244,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 17,
                  "docs": []
                },
                {
                  "name": "QueryHolding",
                  "fields": [
                    {
                      "name": "query_id",
                      "typeId": 10,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "typeId": 236,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "assets",
                      "typeId": 259,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "max_response_weight",
                      "typeId": 10,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 18,
                  "docs": []
                },
                {
                  "name": "BuyExecution",
                  "fields": [
                    {
                      "name": "fees",
                      "typeId": 249,
                      "typeName": "MultiAsset",
                      "docs": []
                    },
                    {
                      "name": "weight_limit",
                      "typeId": 262,
                      "typeName": "WeightLimit",
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": []
                },
                {
                  "name": "RefundSurplus",
                  "fields": [],
                  "index": 20,
                  "docs": []
                },
                {
                  "name": "SetErrorHandler",
                  "fields": [
                    {
                      "typeId": 290,
                      "typeName": "Xcm<RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": []
                },
                {
                  "name": "SetAppendix",
                  "fields": [
                    {
                      "typeId": 290,
                      "typeName": "Xcm<RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 22,
                  "docs": []
                },
                {
                  "name": "ClearError",
                  "fields": [],
                  "index": 23,
                  "docs": []
                },
                {
                  "name": "ClaimAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 247,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "ticket",
                      "typeId": 236,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 24,
                  "docs": []
                },
                {
                  "name": "Trap",
                  "fields": [
                    {
                      "typeId": 10,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 25,
                  "docs": []
                },
                {
                  "name": "SubscribeVersion",
                  "fields": [
                    {
                      "name": "query_id",
                      "typeId": 10,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "max_response_weight",
                      "typeId": 10,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 26,
                  "docs": []
                },
                {
                  "name": "UnsubscribeVersion",
                  "fields": [],
                  "index": 27,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 293,
          "path": [
            "xcm",
            "double_encoded",
            "DoubleEncoded"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "encoded",
                  "typeId": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 294,
          "path": [
            "xcm",
            "v3",
            "Xcm"
          ],
          "params": [
            {
              "name": "Call"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 295,
                  "typeName": "Vec<Instruction<Call>>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 295,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 296
            }
          },
          "docs": []
        },
        {
          "id": 296,
          "path": [
            "xcm",
            "v3",
            "Instruction"
          ],
          "params": [
            {
              "name": "Call"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "WithdrawAsset",
                  "fields": [
                    {
                      "typeId": 266,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "ReserveAssetDeposited",
                  "fields": [
                    {
                      "typeId": 266,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "ReceiveTeleportedAsset",
                  "fields": [
                    {
                      "typeId": 266,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "QueryResponse",
                  "fields": [
                    {
                      "name": "query_id",
                      "typeId": 10,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "response",
                      "typeId": 272,
                      "typeName": "Response",
                      "docs": []
                    },
                    {
                      "name": "max_weight",
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "querier",
                      "typeId": 282,
                      "typeName": "Option<MultiLocation>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "TransferAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 266,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "TransferReserveAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 266,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "typeId": 263,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Transact",
                  "fields": [
                    {
                      "name": "origin_kind",
                      "typeId": 257,
                      "typeName": "OriginKind",
                      "docs": []
                    },
                    {
                      "name": "require_weight_at_most",
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "typeId": 293,
                      "typeName": "DoubleEncoded<Call>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "HrmpNewChannelOpenRequest",
                  "fields": [
                    {
                      "name": "sender",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_message_size",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_capacity",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "HrmpChannelAccepted",
                  "fields": [
                    {
                      "name": "recipient",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "HrmpChannelClosing",
                  "fields": [
                    {
                      "name": "initiator",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "sender",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "recipient",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "ClearOrigin",
                  "fields": [],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "DescendOrigin",
                  "fields": [
                    {
                      "typeId": 130,
                      "typeName": "InteriorMultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "ReportError",
                  "fields": [
                    {
                      "typeId": 283,
                      "typeName": "QueryResponseInfo",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": []
                },
                {
                  "name": "DepositAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 284,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": []
                },
                {
                  "name": "DepositReserveAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 284,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "typeId": 263,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": []
                },
                {
                  "name": "ExchangeAsset",
                  "fields": [
                    {
                      "name": "give",
                      "typeId": 284,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "want",
                      "typeId": 266,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "maximal",
                      "typeId": 37,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": []
                },
                {
                  "name": "InitiateReserveWithdraw",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 284,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "reserve",
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "typeId": 263,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 16,
                  "docs": []
                },
                {
                  "name": "InitiateTeleport",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 284,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "typeId": 263,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 17,
                  "docs": []
                },
                {
                  "name": "ReportHolding",
                  "fields": [
                    {
                      "name": "response_info",
                      "typeId": 283,
                      "typeName": "QueryResponseInfo",
                      "docs": []
                    },
                    {
                      "name": "assets",
                      "typeId": 284,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    }
                  ],
                  "index": 18,
                  "docs": []
                },
                {
                  "name": "BuyExecution",
                  "fields": [
                    {
                      "name": "fees",
                      "typeId": 268,
                      "typeName": "MultiAsset",
                      "docs": []
                    },
                    {
                      "name": "weight_limit",
                      "typeId": 287,
                      "typeName": "WeightLimit",
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": []
                },
                {
                  "name": "RefundSurplus",
                  "fields": [],
                  "index": 20,
                  "docs": []
                },
                {
                  "name": "SetErrorHandler",
                  "fields": [
                    {
                      "typeId": 294,
                      "typeName": "Xcm<Call>",
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": []
                },
                {
                  "name": "SetAppendix",
                  "fields": [
                    {
                      "typeId": 294,
                      "typeName": "Xcm<Call>",
                      "docs": []
                    }
                  ],
                  "index": 22,
                  "docs": []
                },
                {
                  "name": "ClearError",
                  "fields": [],
                  "index": 23,
                  "docs": []
                },
                {
                  "name": "ClaimAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 266,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "ticket",
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 24,
                  "docs": []
                },
                {
                  "name": "Trap",
                  "fields": [
                    {
                      "typeId": 10,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 25,
                  "docs": []
                },
                {
                  "name": "SubscribeVersion",
                  "fields": [
                    {
                      "name": "query_id",
                      "typeId": 10,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "max_response_weight",
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 26,
                  "docs": []
                },
                {
                  "name": "UnsubscribeVersion",
                  "fields": [],
                  "index": 27,
                  "docs": []
                },
                {
                  "name": "BurnAsset",
                  "fields": [
                    {
                      "typeId": 266,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 28,
                  "docs": []
                },
                {
                  "name": "ExpectAsset",
                  "fields": [
                    {
                      "typeId": 266,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 29,
                  "docs": []
                },
                {
                  "name": "ExpectOrigin",
                  "fields": [
                    {
                      "typeId": 282,
                      "typeName": "Option<MultiLocation>",
                      "docs": []
                    }
                  ],
                  "index": 30,
                  "docs": []
                },
                {
                  "name": "ExpectError",
                  "fields": [
                    {
                      "typeId": 273,
                      "typeName": "Option<(u32, Error)>",
                      "docs": []
                    }
                  ],
                  "index": 31,
                  "docs": []
                },
                {
                  "name": "ExpectTransactStatus",
                  "fields": [
                    {
                      "typeId": 280,
                      "typeName": "MaybeErrorCode",
                      "docs": []
                    }
                  ],
                  "index": 32,
                  "docs": []
                },
                {
                  "name": "QueryPallet",
                  "fields": [
                    {
                      "name": "module_name",
                      "typeId": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "response_info",
                      "typeId": 283,
                      "typeName": "QueryResponseInfo",
                      "docs": []
                    }
                  ],
                  "index": 33,
                  "docs": []
                },
                {
                  "name": "ExpectPallet",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "name",
                      "typeId": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "module_name",
                      "typeId": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "crate_major",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "min_crate_minor",
                      "typeId": 132,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 34,
                  "docs": []
                },
                {
                  "name": "ReportTransactStatus",
                  "fields": [
                    {
                      "typeId": 283,
                      "typeName": "QueryResponseInfo",
                      "docs": []
                    }
                  ],
                  "index": 35,
                  "docs": []
                },
                {
                  "name": "ClearTransactStatus",
                  "fields": [],
                  "index": 36,
                  "docs": []
                },
                {
                  "name": "UniversalOrigin",
                  "fields": [
                    {
                      "typeId": 131,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 37,
                  "docs": []
                },
                {
                  "name": "ExportMessage",
                  "fields": [
                    {
                      "name": "network",
                      "typeId": 134,
                      "typeName": "NetworkId",
                      "docs": []
                    },
                    {
                      "name": "destination",
                      "typeId": 130,
                      "typeName": "InteriorMultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "typeId": 263,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 38,
                  "docs": []
                },
                {
                  "name": "LockAsset",
                  "fields": [
                    {
                      "name": "asset",
                      "typeId": 268,
                      "typeName": "MultiAsset",
                      "docs": []
                    },
                    {
                      "name": "unlocker",
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 39,
                  "docs": []
                },
                {
                  "name": "UnlockAsset",
                  "fields": [
                    {
                      "name": "asset",
                      "typeId": 268,
                      "typeName": "MultiAsset",
                      "docs": []
                    },
                    {
                      "name": "target",
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 40,
                  "docs": []
                },
                {
                  "name": "NoteUnlockable",
                  "fields": [
                    {
                      "name": "asset",
                      "typeId": 268,
                      "typeName": "MultiAsset",
                      "docs": []
                    },
                    {
                      "name": "owner",
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 41,
                  "docs": []
                },
                {
                  "name": "RequestUnlock",
                  "fields": [
                    {
                      "name": "asset",
                      "typeId": 268,
                      "typeName": "MultiAsset",
                      "docs": []
                    },
                    {
                      "name": "locker",
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 42,
                  "docs": []
                },
                {
                  "name": "SetFeesMode",
                  "fields": [
                    {
                      "name": "jit_withdraw",
                      "typeId": 37,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 43,
                  "docs": []
                },
                {
                  "name": "SetTopic",
                  "fields": [
                    {
                      "typeId": 13,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ],
                  "index": 44,
                  "docs": []
                },
                {
                  "name": "ClearTopic",
                  "fields": [],
                  "index": 45,
                  "docs": []
                },
                {
                  "name": "AliasOrigin",
                  "fields": [
                    {
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 46,
                  "docs": []
                },
                {
                  "name": "UnpaidExecution",
                  "fields": [
                    {
                      "name": "weight_limit",
                      "typeId": 287,
                      "typeName": "WeightLimit",
                      "docs": []
                    },
                    {
                      "name": "check_origin",
                      "typeId": 282,
                      "typeName": "Option<MultiLocation>",
                      "docs": []
                    }
                  ],
                  "index": 47,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 297,
          "path": [
            "pallet_assets",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "create",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    },
                    {
                      "name": "admin",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "min_balance",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Issue a new class of fungible assets from a public origin.",
                    "",
                    "This new asset class has no assets initially and its owner is the origin.",
                    "",
                    "The origin must conform to the configured `CreateOrigin` and have sufficient funds free.",
                    "",
                    "Funds of sender are reserved by `AssetDeposit`.",
                    "",
                    "Parameters:",
                    "- `id`: The identifier of the new asset. This must not be currently in use to identify",
                    "an existing asset.",
                    "- `admin`: The admin of this class of assets. The admin is the initial address of each",
                    "member of the asset class's admin team.",
                    "- `min_balance`: The minimum balance of this new asset that any single account must",
                    "have. If an account's balance is reduced below this, then it collapses to zero.",
                    "",
                    "Emits `Created` event when successful.",
                    "",
                    "Weight: `O(1)`"
                  ]
                },
                {
                  "name": "force_create",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    },
                    {
                      "name": "owner",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "is_sufficient",
                      "typeId": 37,
                      "typeName": "bool",
                      "docs": []
                    },
                    {
                      "name": "min_balance",
                      "typeId": 108,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Issue a new class of fungible assets from a privileged origin.",
                    "",
                    "This new asset class has no assets initially.",
                    "",
                    "The origin must conform to `ForceOrigin`.",
                    "",
                    "Unlike `create`, no funds are reserved.",
                    "",
                    "- `id`: The identifier of the new asset. This must not be currently in use to identify",
                    "an existing asset.",
                    "- `owner`: The owner of this class of assets. The owner has full superuser permissions",
                    "over this asset, but may later change and configure the permissions using",
                    "`transfer_ownership` and `set_team`.",
                    "- `min_balance`: The minimum balance of this new asset that any single account must",
                    "have. If an account's balance is reduced below this, then it collapses to zero.",
                    "",
                    "Emits `ForceCreated` event when successful.",
                    "",
                    "Weight: `O(1)`"
                  ]
                },
                {
                  "name": "start_destroy",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Start the process of destroying a fungible asset class.",
                    "",
                    "`start_destroy` is the first in a series of extrinsics that should be called, to allow",
                    "destruction of an asset class.",
                    "",
                    "The origin must conform to `ForceOrigin` or must be `Signed` by the asset's `owner`.",
                    "",
                    "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                    "  asset.",
                    "",
                    "The asset class must be frozen before calling `start_destroy`."
                  ]
                },
                {
                  "name": "destroy_accounts",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Destroy all accounts associated with a given asset.",
                    "",
                    "`destroy_accounts` should only be called after `start_destroy` has been called, and the",
                    "asset is in a `Destroying` state.",
                    "",
                    "Due to weight restrictions, this function may need to be called multiple times to fully",
                    "destroy all accounts. It will destroy `RemoveItemsLimit` accounts at a time.",
                    "",
                    "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                    "  asset.",
                    "",
                    "Each call emits the `Event::DestroyedAccounts` event."
                  ]
                },
                {
                  "name": "destroy_approvals",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Destroy all approvals associated with a given asset up to the max (T::RemoveItemsLimit).",
                    "",
                    "`destroy_approvals` should only be called after `start_destroy` has been called, and the",
                    "asset is in a `Destroying` state.",
                    "",
                    "Due to weight restrictions, this function may need to be called multiple times to fully",
                    "destroy all approvals. It will destroy `RemoveItemsLimit` approvals at a time.",
                    "",
                    "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                    "  asset.",
                    "",
                    "Each call emits the `Event::DestroyedApprovals` event."
                  ]
                },
                {
                  "name": "finish_destroy",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Complete destroying asset and unreserve currency.",
                    "",
                    "`finish_destroy` should only be called after `start_destroy` has been called, and the",
                    "asset is in a `Destroying` state. All accounts or approvals should be destroyed before",
                    "hand.",
                    "",
                    "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                    "  asset.",
                    "",
                    "Each successful call emits the `Event::Destroyed` event."
                  ]
                },
                {
                  "name": "mint",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 108,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Mint assets of a particular class.",
                    "",
                    "The origin must be Signed and the sender must be the Issuer of the asset `id`.",
                    "",
                    "- `id`: The identifier of the asset to have some amount minted.",
                    "- `beneficiary`: The account to be credited with the minted assets.",
                    "- `amount`: The amount of the asset to be minted.",
                    "",
                    "Emits `Issued` event when successful.",
                    "",
                    "Weight: `O(1)`",
                    "Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`."
                  ]
                },
                {
                  "name": "burn",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    },
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 108,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Reduce the balance of `who` by as much as possible up to `amount` assets of `id`.",
                    "",
                    "Origin must be Signed and the sender should be the Manager of the asset `id`.",
                    "",
                    "Bails with `NoAccount` if the `who` is already dead.",
                    "",
                    "- `id`: The identifier of the asset to have some amount burned.",
                    "- `who`: The account to be debited from.",
                    "- `amount`: The maximum amount by which `who`'s balance should be reduced.",
                    "",
                    "Emits `Burned` with the actual amount burned. If this takes the balance to below the",
                    "minimum for the asset, then the amount burned is increased to take it to zero.",
                    "",
                    "Weight: `O(1)`",
                    "Modes: Post-existence of `who`; Pre & post Zombie-status of `who`."
                  ]
                },
                {
                  "name": "transfer",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    },
                    {
                      "name": "target",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 108,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "Move some assets from the sender account to another.",
                    "",
                    "Origin must be Signed.",
                    "",
                    "- `id`: The identifier of the asset to have some amount transferred.",
                    "- `target`: The account to be credited.",
                    "- `amount`: The amount by which the sender's balance of assets should be reduced and",
                    "`target`'s balance increased. The amount actually transferred may be slightly greater in",
                    "the case that the transfer would otherwise take the sender balance above zero but below",
                    "the minimum balance. Must be greater than zero.",
                    "",
                    "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                    "to below the minimum for the asset, then the amount transferred is increased to take it",
                    "to zero.",
                    "",
                    "Weight: `O(1)`",
                    "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
                    "`target`."
                  ]
                },
                {
                  "name": "transfer_keep_alive",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    },
                    {
                      "name": "target",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 108,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "Move some assets from the sender account to another, keeping the sender account alive.",
                    "",
                    "Origin must be Signed.",
                    "",
                    "- `id`: The identifier of the asset to have some amount transferred.",
                    "- `target`: The account to be credited.",
                    "- `amount`: The amount by which the sender's balance of assets should be reduced and",
                    "`target`'s balance increased. The amount actually transferred may be slightly greater in",
                    "the case that the transfer would otherwise take the sender balance above zero but below",
                    "the minimum balance. Must be greater than zero.",
                    "",
                    "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                    "to below the minimum for the asset, then the amount transferred is increased to take it",
                    "to zero.",
                    "",
                    "Weight: `O(1)`",
                    "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
                    "`target`."
                  ]
                },
                {
                  "name": "force_transfer",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    },
                    {
                      "name": "source",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 108,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": [
                    "Move some assets from one account to another.",
                    "",
                    "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                    "",
                    "- `id`: The identifier of the asset to have some amount transferred.",
                    "- `source`: The account to be debited.",
                    "- `dest`: The account to be credited.",
                    "- `amount`: The amount by which the `source`'s balance of assets should be reduced and",
                    "`dest`'s balance increased. The amount actually transferred may be slightly greater in",
                    "the case that the transfer would otherwise take the `source` balance above zero but",
                    "below the minimum balance. Must be greater than zero.",
                    "",
                    "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                    "to below the minimum for the asset, then the amount transferred is increased to take it",
                    "to zero.",
                    "",
                    "Weight: `O(1)`",
                    "Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of",
                    "`dest`."
                  ]
                },
                {
                  "name": "freeze",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    },
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": [
                    "Disallow further unprivileged transfers of an asset `id` from an account `who`. `who`",
                    "must already exist as an entry in `Account`s of the asset. If you want to freeze an",
                    "account that does not have an entry, use `touch_other` first.",
                    "",
                    "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
                    "",
                    "- `id`: The identifier of the asset to be frozen.",
                    "- `who`: The account to be frozen.",
                    "",
                    "Emits `Frozen`.",
                    "",
                    "Weight: `O(1)`"
                  ]
                },
                {
                  "name": "thaw",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    },
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": [
                    "Allow unprivileged transfers to and from an account again.",
                    "",
                    "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                    "",
                    "- `id`: The identifier of the asset to be frozen.",
                    "- `who`: The account to be unfrozen.",
                    "",
                    "Emits `Thawed`.",
                    "",
                    "Weight: `O(1)`"
                  ]
                },
                {
                  "name": "freeze_asset",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": [
                    "Disallow further unprivileged transfers for the asset class.",
                    "",
                    "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
                    "",
                    "- `id`: The identifier of the asset to be frozen.",
                    "",
                    "Emits `Frozen`.",
                    "",
                    "Weight: `O(1)`"
                  ]
                },
                {
                  "name": "thaw_asset",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": [
                    "Allow unprivileged transfers for the asset again.",
                    "",
                    "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                    "",
                    "- `id`: The identifier of the asset to be thawed.",
                    "",
                    "Emits `Thawed`.",
                    "",
                    "Weight: `O(1)`"
                  ]
                },
                {
                  "name": "transfer_ownership",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    },
                    {
                      "name": "owner",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": [
                    "Change the Owner of an asset.",
                    "",
                    "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                    "",
                    "- `id`: The identifier of the asset.",
                    "- `owner`: The new Owner of this asset.",
                    "",
                    "Emits `OwnerChanged`.",
                    "",
                    "Weight: `O(1)`"
                  ]
                },
                {
                  "name": "set_team",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    },
                    {
                      "name": "issuer",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "admin",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "freezer",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 16,
                  "docs": [
                    "Change the Issuer, Admin and Freezer of an asset.",
                    "",
                    "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                    "",
                    "- `id`: The identifier of the asset to be frozen.",
                    "- `issuer`: The new Issuer of this asset.",
                    "- `admin`: The new Admin of this asset.",
                    "- `freezer`: The new Freezer of this asset.",
                    "",
                    "Emits `TeamChanged`.",
                    "",
                    "Weight: `O(1)`"
                  ]
                },
                {
                  "name": "set_metadata",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    },
                    {
                      "name": "name",
                      "typeId": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "symbol",
                      "typeId": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "decimals",
                      "typeId": 2,
                      "typeName": "u8",
                      "docs": []
                    }
                  ],
                  "index": 17,
                  "docs": [
                    "Set the metadata for an asset.",
                    "",
                    "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                    "",
                    "Funds of sender are reserved according to the formula:",
                    "`MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into",
                    "account any already reserved funds.",
                    "",
                    "- `id`: The identifier of the asset to update.",
                    "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
                    "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
                    "- `decimals`: The number of decimals this asset uses to represent one unit.",
                    "",
                    "Emits `MetadataSet`.",
                    "",
                    "Weight: `O(1)`"
                  ]
                },
                {
                  "name": "clear_metadata",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    }
                  ],
                  "index": 18,
                  "docs": [
                    "Clear the metadata for an asset.",
                    "",
                    "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                    "",
                    "Any deposit is freed for the asset owner.",
                    "",
                    "- `id`: The identifier of the asset to clear.",
                    "",
                    "Emits `MetadataCleared`.",
                    "",
                    "Weight: `O(1)`"
                  ]
                },
                {
                  "name": "force_set_metadata",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    },
                    {
                      "name": "name",
                      "typeId": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "symbol",
                      "typeId": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "decimals",
                      "typeId": 2,
                      "typeName": "u8",
                      "docs": []
                    },
                    {
                      "name": "is_frozen",
                      "typeId": 37,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": [
                    "Force the metadata for an asset to some value.",
                    "",
                    "Origin must be ForceOrigin.",
                    "",
                    "Any deposit is left alone.",
                    "",
                    "- `id`: The identifier of the asset to update.",
                    "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
                    "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
                    "- `decimals`: The number of decimals this asset uses to represent one unit.",
                    "",
                    "Emits `MetadataSet`.",
                    "",
                    "Weight: `O(N + S)` where N and S are the length of the name and symbol respectively."
                  ]
                },
                {
                  "name": "force_clear_metadata",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    }
                  ],
                  "index": 20,
                  "docs": [
                    "Clear the metadata for an asset.",
                    "",
                    "Origin must be ForceOrigin.",
                    "",
                    "Any deposit is returned.",
                    "",
                    "- `id`: The identifier of the asset to clear.",
                    "",
                    "Emits `MetadataCleared`.",
                    "",
                    "Weight: `O(1)`"
                  ]
                },
                {
                  "name": "force_asset_status",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    },
                    {
                      "name": "owner",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "issuer",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "admin",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "freezer",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "min_balance",
                      "typeId": 108,
                      "typeName": "T::Balance",
                      "docs": []
                    },
                    {
                      "name": "is_sufficient",
                      "typeId": 37,
                      "typeName": "bool",
                      "docs": []
                    },
                    {
                      "name": "is_frozen",
                      "typeId": 37,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": [
                    "Alter the attributes of a given asset.",
                    "",
                    "Origin must be `ForceOrigin`.",
                    "",
                    "- `id`: The identifier of the asset.",
                    "- `owner`: The new Owner of this asset.",
                    "- `issuer`: The new Issuer of this asset.",
                    "- `admin`: The new Admin of this asset.",
                    "- `freezer`: The new Freezer of this asset.",
                    "- `min_balance`: The minimum balance of this new asset that any single account must",
                    "have. If an account's balance is reduced below this, then it collapses to zero.",
                    "- `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient",
                    "value to account for the state bloat associated with its balance storage. If set to",
                    "`true`, then non-zero balances may be stored without a `consumer` reference (and thus",
                    "an ED in the Balances pallet or whatever else is used to control user-account state",
                    "growth).",
                    "- `is_frozen`: Whether this asset class is frozen except for permissioned/admin",
                    "instructions.",
                    "",
                    "Emits `AssetStatusChanged` with the identity of the asset.",
                    "",
                    "Weight: `O(1)`"
                  ]
                },
                {
                  "name": "approve_transfer",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    },
                    {
                      "name": "delegate",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 108,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 22,
                  "docs": [
                    "Approve an amount of asset for transfer by a delegated third-party account.",
                    "",
                    "Origin must be Signed.",
                    "",
                    "Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account",
                    "for the purpose of holding the approval. If some non-zero amount of assets is already",
                    "approved from signing account to `delegate`, then it is topped up or unreserved to",
                    "meet the right value.",
                    "",
                    "NOTE: The signing account does not need to own `amount` of assets at the point of",
                    "making this call.",
                    "",
                    "- `id`: The identifier of the asset.",
                    "- `delegate`: The account to delegate permission to transfer asset.",
                    "- `amount`: The amount of asset that may be transferred by `delegate`. If there is",
                    "already an approval in place, then this acts additively.",
                    "",
                    "Emits `ApprovedTransfer` on success.",
                    "",
                    "Weight: `O(1)`"
                  ]
                },
                {
                  "name": "cancel_approval",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    },
                    {
                      "name": "delegate",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 23,
                  "docs": [
                    "Cancel all of some asset approved for delegated transfer by a third-party account.",
                    "",
                    "Origin must be Signed and there must be an approval in place between signer and",
                    "`delegate`.",
                    "",
                    "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
                    "",
                    "- `id`: The identifier of the asset.",
                    "- `delegate`: The account delegated permission to transfer asset.",
                    "",
                    "Emits `ApprovalCancelled` on success.",
                    "",
                    "Weight: `O(1)`"
                  ]
                },
                {
                  "name": "force_cancel_approval",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    },
                    {
                      "name": "owner",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "delegate",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 24,
                  "docs": [
                    "Cancel all of some asset approved for delegated transfer by a third-party account.",
                    "",
                    "Origin must be either ForceOrigin or Signed origin with the signer being the Admin",
                    "account of the asset `id`.",
                    "",
                    "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
                    "",
                    "- `id`: The identifier of the asset.",
                    "- `delegate`: The account delegated permission to transfer asset.",
                    "",
                    "Emits `ApprovalCancelled` on success.",
                    "",
                    "Weight: `O(1)`"
                  ]
                },
                {
                  "name": "transfer_approved",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    },
                    {
                      "name": "owner",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "destination",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 108,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 25,
                  "docs": [
                    "Transfer some asset balance from a previously delegated account to some third-party",
                    "account.",
                    "",
                    "Origin must be Signed and there must be an approval in place by the `owner` to the",
                    "signer.",
                    "",
                    "If the entire amount approved for transfer is transferred, then any deposit previously",
                    "reserved by `approve_transfer` is unreserved.",
                    "",
                    "- `id`: The identifier of the asset.",
                    "- `owner`: The account which previously approved for a transfer of at least `amount` and",
                    "from which the asset balance will be withdrawn.",
                    "- `destination`: The account to which the asset balance of `amount` will be transferred.",
                    "- `amount`: The amount of assets to transfer.",
                    "",
                    "Emits `TransferredApproved` on success.",
                    "",
                    "Weight: `O(1)`"
                  ]
                },
                {
                  "name": "touch",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    }
                  ],
                  "index": 26,
                  "docs": [
                    "Create an asset account for non-provider assets.",
                    "",
                    "A deposit will be taken from the signer account.",
                    "",
                    "- `origin`: Must be Signed; the signer account must have sufficient funds for a deposit",
                    "  to be taken.",
                    "- `id`: The identifier of the asset for the account to be created.",
                    "",
                    "Emits `Touched` event when successful."
                  ]
                },
                {
                  "name": "refund",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    },
                    {
                      "name": "allow_burn",
                      "typeId": 37,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 27,
                  "docs": [
                    "Return the deposit (if any) of an asset account or a consumer reference (if any) of an",
                    "account.",
                    "",
                    "The origin must be Signed.",
                    "",
                    "- `id`: The identifier of the asset for which the caller would like the deposit",
                    "  refunded.",
                    "- `allow_burn`: If `true` then assets may be destroyed in order to complete the refund.",
                    "",
                    "Emits `Refunded` event when successful."
                  ]
                },
                {
                  "name": "set_min_balance",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    },
                    {
                      "name": "min_balance",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 28,
                  "docs": [
                    "Sets the minimum balance of an asset.",
                    "",
                    "Only works if there aren't any accounts that are holding the asset or if",
                    "the new value of `min_balance` is less than the old one.",
                    "",
                    "Origin must be Signed and the sender has to be the Owner of the",
                    "asset `id`.",
                    "",
                    "- `id`: The identifier of the asset.",
                    "- `min_balance`: The new value of `min_balance`.",
                    "",
                    "Emits `AssetMinBalanceChanged` event when successful."
                  ]
                },
                {
                  "name": "touch_other",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    },
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 29,
                  "docs": [
                    "Create an asset account for `who`.",
                    "",
                    "A deposit will be taken from the signer account.",
                    "",
                    "- `origin`: Must be Signed by `Freezer` or `Admin` of the asset `id`; the signer account",
                    "  must have sufficient funds for a deposit to be taken.",
                    "- `id`: The identifier of the asset for the account to be created.",
                    "- `who`: The account to be created.",
                    "",
                    "Emits `Touched` event when successful."
                  ]
                },
                {
                  "name": "refund_other",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    },
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 30,
                  "docs": [
                    "Return the deposit (if any) of a target asset account. Useful if you are the depositor.",
                    "",
                    "The origin must be Signed and either the account owner, depositor, or asset `Admin`. In",
                    "order to burn a non-zero balance of the asset, the caller must be the account and should",
                    "use `refund`.",
                    "",
                    "- `id`: The identifier of the asset for the account holding a deposit.",
                    "- `who`: The account to refund.",
                    "",
                    "Emits `Refunded` event when successful."
                  ]
                },
                {
                  "name": "block",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    },
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 31,
                  "docs": [
                    "Disallow further unprivileged transfers of an asset `id` to and from an account `who`.",
                    "",
                    "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
                    "",
                    "- `id`: The identifier of the account's asset.",
                    "- `who`: The account to be unblocked.",
                    "",
                    "Emits `Blocked`.",
                    "",
                    "Weight: `O(1)`"
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 298,
          "path": [
            "pallet_asset_manager",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "register_foreign_asset",
                  "fields": [
                    {
                      "name": "asset",
                      "typeId": 299,
                      "typeName": "T::ForeignAssetType",
                      "docs": []
                    },
                    {
                      "name": "metadata",
                      "typeId": 300,
                      "typeName": "T::AssetRegistrarMetadata",
                      "docs": []
                    },
                    {
                      "name": "min_amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    },
                    {
                      "name": "is_sufficient",
                      "typeId": 37,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Register new asset with the asset manager"
                  ]
                },
                {
                  "name": "set_asset_units_per_second",
                  "fields": [
                    {
                      "name": "asset_type",
                      "typeId": 299,
                      "typeName": "T::ForeignAssetType",
                      "docs": []
                    },
                    {
                      "name": "units_per_second",
                      "typeId": 6,
                      "typeName": "u128",
                      "docs": []
                    },
                    {
                      "name": "num_assets_weight_hint",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Change the amount of units we are charging per execution second",
                    "for a given ForeignAssetType"
                  ]
                },
                {
                  "name": "change_existing_asset_type",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    },
                    {
                      "name": "new_asset_type",
                      "typeId": 299,
                      "typeName": "T::ForeignAssetType",
                      "docs": []
                    },
                    {
                      "name": "num_assets_weight_hint",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Change the xcm type mapping for a given assetId",
                    "We also change this if the previous units per second where pointing at the old",
                    "assetType"
                  ]
                },
                {
                  "name": "remove_supported_asset",
                  "fields": [
                    {
                      "name": "asset_type",
                      "typeId": 299,
                      "typeName": "T::ForeignAssetType",
                      "docs": []
                    },
                    {
                      "name": "num_assets_weight_hint",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "remove_existing_asset_type",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    },
                    {
                      "name": "num_assets_weight_hint",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Remove a given assetId -> assetType association"
                  ]
                },
                {
                  "name": "register_local_asset",
                  "fields": [
                    {
                      "name": "creator",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "owner",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "is_sufficient",
                      "typeId": 37,
                      "typeName": "bool",
                      "docs": []
                    },
                    {
                      "name": "min_balance",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Register a new local asset",
                    "No information is stored in this pallet about the local asset",
                    "The reason is that we dont need to hold a mapping between the multilocation",
                    "and the local asset, as this conversion is deterministic",
                    "Further, we dont allow xcm fee payment in local assets"
                  ]
                },
                {
                  "name": "destroy_foreign_asset",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    },
                    {
                      "name": "num_assets_weight_hint",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Destroy a given foreign assetId",
                    "The weight in this case is the one returned by the trait",
                    "plus the db writes and reads from removing all the associated",
                    "data"
                  ]
                },
                {
                  "name": "destroy_local_asset",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Destroy a given local assetId",
                    "We do not store anything related to local assets in this pallet other than the counter",
                    "and the counter is not used for destroying the asset, so no additional db reads/writes",
                    "to be counter here"
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 299,
          "path": [
            "moonbeam_runtime",
            "xcm_config",
            "AssetType"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Xcm",
                  "fields": [
                    {
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 300,
          "path": [
            "moonbeam_runtime",
            "asset_config",
            "AssetRegistrarMetadata"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "name",
                  "typeId": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "symbol",
                  "typeId": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "decimals",
                  "typeId": 2,
                  "typeName": "u8",
                  "docs": []
                },
                {
                  "name": "is_frozen",
                  "typeId": 37,
                  "typeName": "bool",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 301,
          "path": [
            "orml_xtokens",
            "module",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "transfer",
                  "fields": [
                    {
                      "name": "currency_id",
                      "typeId": 302,
                      "typeName": "T::CurrencyId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "typeId": 235,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "dest_weight_limit",
                      "typeId": 287,
                      "typeName": "WeightLimit",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Transfer native currencies.",
                    "",
                    "`dest_weight_limit` is the weight for XCM execution on the dest",
                    "chain, and it would be charged from the transferred assets. If set",
                    "below requirements, the execution may fail and assets wouldn't be",
                    "received.",
                    "",
                    "It's a no-op if any error on local XCM execution or message sending.",
                    "Note sending assets out per se doesn't guarantee they would be",
                    "received. Receiving depends on if the XCM message could be delivered",
                    "by the network, and if the receiving chain would handle",
                    "messages correctly."
                  ]
                },
                {
                  "name": "transfer_multiasset",
                  "fields": [
                    {
                      "name": "asset",
                      "typeId": 303,
                      "typeName": "Box<VersionedMultiAsset>",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "typeId": 235,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "dest_weight_limit",
                      "typeId": 287,
                      "typeName": "WeightLimit",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Transfer `MultiAsset`.",
                    "",
                    "`dest_weight_limit` is the weight for XCM execution on the dest",
                    "chain, and it would be charged from the transferred assets. If set",
                    "below requirements, the execution may fail and assets wouldn't be",
                    "received.",
                    "",
                    "It's a no-op if any error on local XCM execution or message sending.",
                    "Note sending assets out per se doesn't guarantee they would be",
                    "received. Receiving depends on if the XCM message could be delivered",
                    "by the network, and if the receiving chain would handle",
                    "messages correctly."
                  ]
                },
                {
                  "name": "transfer_with_fee",
                  "fields": [
                    {
                      "name": "currency_id",
                      "typeId": 302,
                      "typeName": "T::CurrencyId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    },
                    {
                      "name": "fee",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "typeId": 235,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "dest_weight_limit",
                      "typeId": 287,
                      "typeName": "WeightLimit",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Transfer native currencies specifying the fee and amount as",
                    "separate.",
                    "",
                    "`dest_weight_limit` is the weight for XCM execution on the dest",
                    "chain, and it would be charged from the transferred assets. If set",
                    "below requirements, the execution may fail and assets wouldn't be",
                    "received.",
                    "",
                    "`fee` is the amount to be spent to pay for execution in destination",
                    "chain. Both fee and amount will be subtracted form the callers",
                    "balance.",
                    "",
                    "If `fee` is not high enough to cover for the execution costs in the",
                    "destination chain, then the assets will be trapped in the",
                    "destination chain",
                    "",
                    "It's a no-op if any error on local XCM execution or message sending.",
                    "Note sending assets out per se doesn't guarantee they would be",
                    "received. Receiving depends on if the XCM message could be delivered",
                    "by the network, and if the receiving chain would handle",
                    "messages correctly."
                  ]
                },
                {
                  "name": "transfer_multiasset_with_fee",
                  "fields": [
                    {
                      "name": "asset",
                      "typeId": 303,
                      "typeName": "Box<VersionedMultiAsset>",
                      "docs": []
                    },
                    {
                      "name": "fee",
                      "typeId": 303,
                      "typeName": "Box<VersionedMultiAsset>",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "typeId": 235,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "dest_weight_limit",
                      "typeId": 287,
                      "typeName": "WeightLimit",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Transfer `MultiAsset` specifying the fee and amount as separate.",
                    "",
                    "`dest_weight_limit` is the weight for XCM execution on the dest",
                    "chain, and it would be charged from the transferred assets. If set",
                    "below requirements, the execution may fail and assets wouldn't be",
                    "received.",
                    "",
                    "`fee` is the multiasset to be spent to pay for execution in",
                    "destination chain. Both fee and amount will be subtracted form the",
                    "callers balance For now we only accept fee and asset having the same",
                    "`MultiLocation` id.",
                    "",
                    "If `fee` is not high enough to cover for the execution costs in the",
                    "destination chain, then the assets will be trapped in the",
                    "destination chain",
                    "",
                    "It's a no-op if any error on local XCM execution or message sending.",
                    "Note sending assets out per se doesn't guarantee they would be",
                    "received. Receiving depends on if the XCM message could be delivered",
                    "by the network, and if the receiving chain would handle",
                    "messages correctly."
                  ]
                },
                {
                  "name": "transfer_multicurrencies",
                  "fields": [
                    {
                      "name": "currencies",
                      "typeId": 304,
                      "typeName": "Vec<(T::CurrencyId, T::Balance)>",
                      "docs": []
                    },
                    {
                      "name": "fee_item",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "typeId": 235,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "dest_weight_limit",
                      "typeId": 287,
                      "typeName": "WeightLimit",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Transfer several currencies specifying the item to be used as fee",
                    "",
                    "`dest_weight_limit` is the weight for XCM execution on the dest",
                    "chain, and it would be charged from the transferred assets. If set",
                    "below requirements, the execution may fail and assets wouldn't be",
                    "received.",
                    "",
                    "`fee_item` is index of the currencies tuple that we want to use for",
                    "payment",
                    "",
                    "It's a no-op if any error on local XCM execution or message sending.",
                    "Note sending assets out per se doesn't guarantee they would be",
                    "received. Receiving depends on if the XCM message could be delivered",
                    "by the network, and if the receiving chain would handle",
                    "messages correctly."
                  ]
                },
                {
                  "name": "transfer_multiassets",
                  "fields": [
                    {
                      "name": "assets",
                      "typeId": 288,
                      "typeName": "Box<VersionedMultiAssets>",
                      "docs": []
                    },
                    {
                      "name": "fee_item",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "typeId": 235,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "dest_weight_limit",
                      "typeId": 287,
                      "typeName": "WeightLimit",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Transfer several `MultiAsset` specifying the item to be used as fee",
                    "",
                    "`dest_weight_limit` is the weight for XCM execution on the dest",
                    "chain, and it would be charged from the transferred assets. If set",
                    "below requirements, the execution may fail and assets wouldn't be",
                    "received.",
                    "",
                    "`fee_item` is index of the MultiAssets that we want to use for",
                    "payment",
                    "",
                    "It's a no-op if any error on local XCM execution or message sending.",
                    "Note sending assets out per se doesn't guarantee they would be",
                    "received. Receiving depends on if the XCM message could be delivered",
                    "by the network, and if the receiving chain would handle",
                    "messages correctly."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 302,
          "path": [
            "moonbeam_runtime",
            "xcm_config",
            "CurrencyId"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "SelfReserve",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "ForeignAsset",
                  "fields": [
                    {
                      "typeId": 6,
                      "typeName": "AssetId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "LocalAssetReserve",
                  "fields": [
                    {
                      "typeId": 6,
                      "typeName": "AssetId",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Erc20",
                  "fields": [
                    {
                      "name": "contract_address",
                      "typeId": 64,
                      "typeName": "H160",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 303,
          "path": [
            "xcm",
            "VersionedMultiAsset"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "V2",
                  "fields": [
                    {
                      "typeId": 249,
                      "typeName": "v2::MultiAsset",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "V3",
                  "fields": [
                    {
                      "typeId": 268,
                      "typeName": "v3::MultiAsset",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 304,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 305
            }
          },
          "docs": []
        },
        {
          "id": 305,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                302,
                6
              ]
            }
          },
          "docs": []
        },
        {
          "id": 306,
          "path": [
            "pallet_xcm_transactor",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "register",
                  "fields": [
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "typeId": 56,
                      "typeName": "u16",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Register a derivative index for an account id. Dispatchable by",
                    "DerivativeAddressRegistrationOrigin",
                    "",
                    "We do not store the derivative address, but only the index. We do not need to store",
                    "the derivative address to issue calls, only the index is enough",
                    "",
                    "For now an index is registered for all possible destinations and not per-destination.",
                    "We can change this in the future although it would just make things more complicated"
                  ]
                },
                {
                  "name": "deregister",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 56,
                      "typeName": "u16",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "De-Register a derivative index. This prevents an account to use a derivative address",
                    "(represented by an index) from our of our sovereign accounts anymore"
                  ]
                },
                {
                  "name": "transact_through_derivative",
                  "fields": [
                    {
                      "name": "dest",
                      "typeId": 307,
                      "typeName": "T::Transactor",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "typeId": 56,
                      "typeName": "u16",
                      "docs": []
                    },
                    {
                      "name": "fee",
                      "typeId": 308,
                      "typeName": "CurrencyPayment<CurrencyIdOf<T>>",
                      "docs": []
                    },
                    {
                      "name": "inner_call",
                      "typeId": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "weight_info",
                      "typeId": 311,
                      "typeName": "TransactWeights",
                      "docs": []
                    },
                    {
                      "name": "refund",
                      "typeId": 37,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Transact the inner call through a derivative account in a destination chain,",
                    "using 'fee_location' to pay for the fees. This fee_location is given as a multilocation",
                    "",
                    "The caller needs to have the index registered in this pallet. The fee multiasset needs",
                    "to be a reserve asset for the destination transactor::multilocation."
                  ]
                },
                {
                  "name": "transact_through_sovereign",
                  "fields": [
                    {
                      "name": "dest",
                      "typeId": 235,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "fee_payer",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "fee",
                      "typeId": 308,
                      "typeName": "CurrencyPayment<CurrencyIdOf<T>>",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "typeId": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "origin_kind",
                      "typeId": 257,
                      "typeName": "OriginKind",
                      "docs": []
                    },
                    {
                      "name": "weight_info",
                      "typeId": 311,
                      "typeName": "TransactWeights",
                      "docs": []
                    },
                    {
                      "name": "refund",
                      "typeId": 37,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Transact the call through the sovereign account in a destination chain,",
                    "'fee_payer' pays for the fee",
                    "",
                    "SovereignAccountDispatcherOrigin callable only"
                  ]
                },
                {
                  "name": "set_transact_info",
                  "fields": [
                    {
                      "name": "location",
                      "typeId": 235,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "transact_extra_weight",
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "max_weight",
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "transact_extra_weight_signed",
                      "typeId": 312,
                      "typeName": "Option<Weight>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Change the transact info of a location"
                  ]
                },
                {
                  "name": "remove_transact_info",
                  "fields": [
                    {
                      "name": "location",
                      "typeId": 235,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Remove the transact info of a location"
                  ]
                },
                {
                  "name": "transact_through_signed",
                  "fields": [
                    {
                      "name": "dest",
                      "typeId": 235,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "fee",
                      "typeId": 308,
                      "typeName": "CurrencyPayment<CurrencyIdOf<T>>",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "typeId": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "weight_info",
                      "typeId": 311,
                      "typeName": "TransactWeights",
                      "docs": []
                    },
                    {
                      "name": "refund",
                      "typeId": 37,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Transact the call through the a signed origin in this chain",
                    "that should be converted to a transaction dispatch account in the destination chain",
                    "by any method implemented in the destination chains runtime",
                    "",
                    "This time we are giving the currency as a currencyId instead of multilocation"
                  ]
                },
                {
                  "name": "set_fee_per_second",
                  "fields": [
                    {
                      "name": "asset_location",
                      "typeId": 235,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "fee_per_second",
                      "typeId": 6,
                      "typeName": "u128",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Set the fee per second of an asset on its reserve chain"
                  ]
                },
                {
                  "name": "remove_fee_per_second",
                  "fields": [
                    {
                      "name": "asset_location",
                      "typeId": 235,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "Remove the fee per second of an asset on its reserve chain"
                  ]
                },
                {
                  "name": "hrmp_manage",
                  "fields": [
                    {
                      "name": "action",
                      "typeId": 313,
                      "typeName": "HrmpOperation",
                      "docs": []
                    },
                    {
                      "name": "fee",
                      "typeId": 308,
                      "typeName": "CurrencyPayment<CurrencyIdOf<T>>",
                      "docs": []
                    },
                    {
                      "name": "weight_info",
                      "typeId": 311,
                      "typeName": "TransactWeights",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "Manage HRMP operations"
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 307,
          "path": [
            "moonbeam_runtime",
            "xcm_config",
            "Transactors"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Relay",
                  "fields": [],
                  "index": 0,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 308,
          "path": [
            "pallet_xcm_transactor",
            "pallet",
            "CurrencyPayment"
          ],
          "params": [
            {
              "name": "CurrencyId",
              "typeId": 302
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "currency",
                  "typeId": 309,
                  "typeName": "Currency<CurrencyId>",
                  "docs": []
                },
                {
                  "name": "fee_amount",
                  "typeId": 310,
                  "typeName": "Option<u128>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 309,
          "path": [
            "pallet_xcm_transactor",
            "pallet",
            "Currency"
          ],
          "params": [
            {
              "name": "CurrencyId",
              "typeId": 302
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "AsCurrencyId",
                  "fields": [
                    {
                      "typeId": 302,
                      "typeName": "CurrencyId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "AsMultiLocation",
                  "fields": [
                    {
                      "typeId": 235,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 310,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 6,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 311,
          "path": [
            "pallet_xcm_transactor",
            "pallet",
            "TransactWeights"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "transact_required_weight_at_most",
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "overall_weight",
                  "typeId": 312,
                  "typeName": "Option<Weight>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 312,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 9
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 9,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 313,
          "path": [
            "pallet_xcm_transactor",
            "pallet",
            "HrmpOperation"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "InitOpen",
                  "fields": [
                    {
                      "typeId": 314,
                      "typeName": "HrmpInitParams",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Accept",
                  "fields": [
                    {
                      "name": "para_id",
                      "typeId": 100,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Close",
                  "fields": [
                    {
                      "typeId": 315,
                      "typeName": "HrmpChannelId",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Cancel",
                  "fields": [
                    {
                      "name": "channel_id",
                      "typeId": 315,
                      "typeName": "HrmpChannelId",
                      "docs": []
                    },
                    {
                      "name": "open_requests",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 314,
          "path": [
            "pallet_xcm_transactor",
            "pallet",
            "HrmpInitParams"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "para_id",
                  "typeId": 100,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "proposed_max_capacity",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "proposed_max_message_size",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 315,
          "path": [
            "polkadot_parachain",
            "primitives",
            "HrmpChannelId"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "sender",
                  "typeId": 100,
                  "typeName": "Id",
                  "docs": []
                },
                {
                  "name": "recipient",
                  "typeId": 100,
                  "typeName": "Id",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 316,
          "path": [
            "pallet_assets",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "create",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    },
                    {
                      "name": "admin",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "min_balance",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Issue a new class of fungible assets from a public origin.",
                    "",
                    "This new asset class has no assets initially and its owner is the origin.",
                    "",
                    "The origin must conform to the configured `CreateOrigin` and have sufficient funds free.",
                    "",
                    "Funds of sender are reserved by `AssetDeposit`.",
                    "",
                    "Parameters:",
                    "- `id`: The identifier of the new asset. This must not be currently in use to identify",
                    "an existing asset.",
                    "- `admin`: The admin of this class of assets. The admin is the initial address of each",
                    "member of the asset class's admin team.",
                    "- `min_balance`: The minimum balance of this new asset that any single account must",
                    "have. If an account's balance is reduced below this, then it collapses to zero.",
                    "",
                    "Emits `Created` event when successful.",
                    "",
                    "Weight: `O(1)`"
                  ]
                },
                {
                  "name": "force_create",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    },
                    {
                      "name": "owner",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "is_sufficient",
                      "typeId": 37,
                      "typeName": "bool",
                      "docs": []
                    },
                    {
                      "name": "min_balance",
                      "typeId": 108,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Issue a new class of fungible assets from a privileged origin.",
                    "",
                    "This new asset class has no assets initially.",
                    "",
                    "The origin must conform to `ForceOrigin`.",
                    "",
                    "Unlike `create`, no funds are reserved.",
                    "",
                    "- `id`: The identifier of the new asset. This must not be currently in use to identify",
                    "an existing asset.",
                    "- `owner`: The owner of this class of assets. The owner has full superuser permissions",
                    "over this asset, but may later change and configure the permissions using",
                    "`transfer_ownership` and `set_team`.",
                    "- `min_balance`: The minimum balance of this new asset that any single account must",
                    "have. If an account's balance is reduced below this, then it collapses to zero.",
                    "",
                    "Emits `ForceCreated` event when successful.",
                    "",
                    "Weight: `O(1)`"
                  ]
                },
                {
                  "name": "start_destroy",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Start the process of destroying a fungible asset class.",
                    "",
                    "`start_destroy` is the first in a series of extrinsics that should be called, to allow",
                    "destruction of an asset class.",
                    "",
                    "The origin must conform to `ForceOrigin` or must be `Signed` by the asset's `owner`.",
                    "",
                    "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                    "  asset.",
                    "",
                    "The asset class must be frozen before calling `start_destroy`."
                  ]
                },
                {
                  "name": "destroy_accounts",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Destroy all accounts associated with a given asset.",
                    "",
                    "`destroy_accounts` should only be called after `start_destroy` has been called, and the",
                    "asset is in a `Destroying` state.",
                    "",
                    "Due to weight restrictions, this function may need to be called multiple times to fully",
                    "destroy all accounts. It will destroy `RemoveItemsLimit` accounts at a time.",
                    "",
                    "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                    "  asset.",
                    "",
                    "Each call emits the `Event::DestroyedAccounts` event."
                  ]
                },
                {
                  "name": "destroy_approvals",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Destroy all approvals associated with a given asset up to the max (T::RemoveItemsLimit).",
                    "",
                    "`destroy_approvals` should only be called after `start_destroy` has been called, and the",
                    "asset is in a `Destroying` state.",
                    "",
                    "Due to weight restrictions, this function may need to be called multiple times to fully",
                    "destroy all approvals. It will destroy `RemoveItemsLimit` approvals at a time.",
                    "",
                    "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                    "  asset.",
                    "",
                    "Each call emits the `Event::DestroyedApprovals` event."
                  ]
                },
                {
                  "name": "finish_destroy",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Complete destroying asset and unreserve currency.",
                    "",
                    "`finish_destroy` should only be called after `start_destroy` has been called, and the",
                    "asset is in a `Destroying` state. All accounts or approvals should be destroyed before",
                    "hand.",
                    "",
                    "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                    "  asset.",
                    "",
                    "Each successful call emits the `Event::Destroyed` event."
                  ]
                },
                {
                  "name": "mint",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 108,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Mint assets of a particular class.",
                    "",
                    "The origin must be Signed and the sender must be the Issuer of the asset `id`.",
                    "",
                    "- `id`: The identifier of the asset to have some amount minted.",
                    "- `beneficiary`: The account to be credited with the minted assets.",
                    "- `amount`: The amount of the asset to be minted.",
                    "",
                    "Emits `Issued` event when successful.",
                    "",
                    "Weight: `O(1)`",
                    "Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`."
                  ]
                },
                {
                  "name": "burn",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    },
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 108,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Reduce the balance of `who` by as much as possible up to `amount` assets of `id`.",
                    "",
                    "Origin must be Signed and the sender should be the Manager of the asset `id`.",
                    "",
                    "Bails with `NoAccount` if the `who` is already dead.",
                    "",
                    "- `id`: The identifier of the asset to have some amount burned.",
                    "- `who`: The account to be debited from.",
                    "- `amount`: The maximum amount by which `who`'s balance should be reduced.",
                    "",
                    "Emits `Burned` with the actual amount burned. If this takes the balance to below the",
                    "minimum for the asset, then the amount burned is increased to take it to zero.",
                    "",
                    "Weight: `O(1)`",
                    "Modes: Post-existence of `who`; Pre & post Zombie-status of `who`."
                  ]
                },
                {
                  "name": "transfer",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    },
                    {
                      "name": "target",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 108,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "Move some assets from the sender account to another.",
                    "",
                    "Origin must be Signed.",
                    "",
                    "- `id`: The identifier of the asset to have some amount transferred.",
                    "- `target`: The account to be credited.",
                    "- `amount`: The amount by which the sender's balance of assets should be reduced and",
                    "`target`'s balance increased. The amount actually transferred may be slightly greater in",
                    "the case that the transfer would otherwise take the sender balance above zero but below",
                    "the minimum balance. Must be greater than zero.",
                    "",
                    "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                    "to below the minimum for the asset, then the amount transferred is increased to take it",
                    "to zero.",
                    "",
                    "Weight: `O(1)`",
                    "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
                    "`target`."
                  ]
                },
                {
                  "name": "transfer_keep_alive",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    },
                    {
                      "name": "target",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 108,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "Move some assets from the sender account to another, keeping the sender account alive.",
                    "",
                    "Origin must be Signed.",
                    "",
                    "- `id`: The identifier of the asset to have some amount transferred.",
                    "- `target`: The account to be credited.",
                    "- `amount`: The amount by which the sender's balance of assets should be reduced and",
                    "`target`'s balance increased. The amount actually transferred may be slightly greater in",
                    "the case that the transfer would otherwise take the sender balance above zero but below",
                    "the minimum balance. Must be greater than zero.",
                    "",
                    "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                    "to below the minimum for the asset, then the amount transferred is increased to take it",
                    "to zero.",
                    "",
                    "Weight: `O(1)`",
                    "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
                    "`target`."
                  ]
                },
                {
                  "name": "force_transfer",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    },
                    {
                      "name": "source",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 108,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": [
                    "Move some assets from one account to another.",
                    "",
                    "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                    "",
                    "- `id`: The identifier of the asset to have some amount transferred.",
                    "- `source`: The account to be debited.",
                    "- `dest`: The account to be credited.",
                    "- `amount`: The amount by which the `source`'s balance of assets should be reduced and",
                    "`dest`'s balance increased. The amount actually transferred may be slightly greater in",
                    "the case that the transfer would otherwise take the `source` balance above zero but",
                    "below the minimum balance. Must be greater than zero.",
                    "",
                    "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                    "to below the minimum for the asset, then the amount transferred is increased to take it",
                    "to zero.",
                    "",
                    "Weight: `O(1)`",
                    "Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of",
                    "`dest`."
                  ]
                },
                {
                  "name": "freeze",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    },
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": [
                    "Disallow further unprivileged transfers of an asset `id` from an account `who`. `who`",
                    "must already exist as an entry in `Account`s of the asset. If you want to freeze an",
                    "account that does not have an entry, use `touch_other` first.",
                    "",
                    "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
                    "",
                    "- `id`: The identifier of the asset to be frozen.",
                    "- `who`: The account to be frozen.",
                    "",
                    "Emits `Frozen`.",
                    "",
                    "Weight: `O(1)`"
                  ]
                },
                {
                  "name": "thaw",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    },
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": [
                    "Allow unprivileged transfers to and from an account again.",
                    "",
                    "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                    "",
                    "- `id`: The identifier of the asset to be frozen.",
                    "- `who`: The account to be unfrozen.",
                    "",
                    "Emits `Thawed`.",
                    "",
                    "Weight: `O(1)`"
                  ]
                },
                {
                  "name": "freeze_asset",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": [
                    "Disallow further unprivileged transfers for the asset class.",
                    "",
                    "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
                    "",
                    "- `id`: The identifier of the asset to be frozen.",
                    "",
                    "Emits `Frozen`.",
                    "",
                    "Weight: `O(1)`"
                  ]
                },
                {
                  "name": "thaw_asset",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": [
                    "Allow unprivileged transfers for the asset again.",
                    "",
                    "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                    "",
                    "- `id`: The identifier of the asset to be thawed.",
                    "",
                    "Emits `Thawed`.",
                    "",
                    "Weight: `O(1)`"
                  ]
                },
                {
                  "name": "transfer_ownership",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    },
                    {
                      "name": "owner",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": [
                    "Change the Owner of an asset.",
                    "",
                    "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                    "",
                    "- `id`: The identifier of the asset.",
                    "- `owner`: The new Owner of this asset.",
                    "",
                    "Emits `OwnerChanged`.",
                    "",
                    "Weight: `O(1)`"
                  ]
                },
                {
                  "name": "set_team",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    },
                    {
                      "name": "issuer",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "admin",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "freezer",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 16,
                  "docs": [
                    "Change the Issuer, Admin and Freezer of an asset.",
                    "",
                    "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                    "",
                    "- `id`: The identifier of the asset to be frozen.",
                    "- `issuer`: The new Issuer of this asset.",
                    "- `admin`: The new Admin of this asset.",
                    "- `freezer`: The new Freezer of this asset.",
                    "",
                    "Emits `TeamChanged`.",
                    "",
                    "Weight: `O(1)`"
                  ]
                },
                {
                  "name": "set_metadata",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    },
                    {
                      "name": "name",
                      "typeId": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "symbol",
                      "typeId": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "decimals",
                      "typeId": 2,
                      "typeName": "u8",
                      "docs": []
                    }
                  ],
                  "index": 17,
                  "docs": [
                    "Set the metadata for an asset.",
                    "",
                    "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                    "",
                    "Funds of sender are reserved according to the formula:",
                    "`MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into",
                    "account any already reserved funds.",
                    "",
                    "- `id`: The identifier of the asset to update.",
                    "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
                    "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
                    "- `decimals`: The number of decimals this asset uses to represent one unit.",
                    "",
                    "Emits `MetadataSet`.",
                    "",
                    "Weight: `O(1)`"
                  ]
                },
                {
                  "name": "clear_metadata",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    }
                  ],
                  "index": 18,
                  "docs": [
                    "Clear the metadata for an asset.",
                    "",
                    "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                    "",
                    "Any deposit is freed for the asset owner.",
                    "",
                    "- `id`: The identifier of the asset to clear.",
                    "",
                    "Emits `MetadataCleared`.",
                    "",
                    "Weight: `O(1)`"
                  ]
                },
                {
                  "name": "force_set_metadata",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    },
                    {
                      "name": "name",
                      "typeId": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "symbol",
                      "typeId": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "decimals",
                      "typeId": 2,
                      "typeName": "u8",
                      "docs": []
                    },
                    {
                      "name": "is_frozen",
                      "typeId": 37,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": [
                    "Force the metadata for an asset to some value.",
                    "",
                    "Origin must be ForceOrigin.",
                    "",
                    "Any deposit is left alone.",
                    "",
                    "- `id`: The identifier of the asset to update.",
                    "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
                    "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
                    "- `decimals`: The number of decimals this asset uses to represent one unit.",
                    "",
                    "Emits `MetadataSet`.",
                    "",
                    "Weight: `O(N + S)` where N and S are the length of the name and symbol respectively."
                  ]
                },
                {
                  "name": "force_clear_metadata",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    }
                  ],
                  "index": 20,
                  "docs": [
                    "Clear the metadata for an asset.",
                    "",
                    "Origin must be ForceOrigin.",
                    "",
                    "Any deposit is returned.",
                    "",
                    "- `id`: The identifier of the asset to clear.",
                    "",
                    "Emits `MetadataCleared`.",
                    "",
                    "Weight: `O(1)`"
                  ]
                },
                {
                  "name": "force_asset_status",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    },
                    {
                      "name": "owner",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "issuer",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "admin",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "freezer",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "min_balance",
                      "typeId": 108,
                      "typeName": "T::Balance",
                      "docs": []
                    },
                    {
                      "name": "is_sufficient",
                      "typeId": 37,
                      "typeName": "bool",
                      "docs": []
                    },
                    {
                      "name": "is_frozen",
                      "typeId": 37,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": [
                    "Alter the attributes of a given asset.",
                    "",
                    "Origin must be `ForceOrigin`.",
                    "",
                    "- `id`: The identifier of the asset.",
                    "- `owner`: The new Owner of this asset.",
                    "- `issuer`: The new Issuer of this asset.",
                    "- `admin`: The new Admin of this asset.",
                    "- `freezer`: The new Freezer of this asset.",
                    "- `min_balance`: The minimum balance of this new asset that any single account must",
                    "have. If an account's balance is reduced below this, then it collapses to zero.",
                    "- `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient",
                    "value to account for the state bloat associated with its balance storage. If set to",
                    "`true`, then non-zero balances may be stored without a `consumer` reference (and thus",
                    "an ED in the Balances pallet or whatever else is used to control user-account state",
                    "growth).",
                    "- `is_frozen`: Whether this asset class is frozen except for permissioned/admin",
                    "instructions.",
                    "",
                    "Emits `AssetStatusChanged` with the identity of the asset.",
                    "",
                    "Weight: `O(1)`"
                  ]
                },
                {
                  "name": "approve_transfer",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    },
                    {
                      "name": "delegate",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 108,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 22,
                  "docs": [
                    "Approve an amount of asset for transfer by a delegated third-party account.",
                    "",
                    "Origin must be Signed.",
                    "",
                    "Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account",
                    "for the purpose of holding the approval. If some non-zero amount of assets is already",
                    "approved from signing account to `delegate`, then it is topped up or unreserved to",
                    "meet the right value.",
                    "",
                    "NOTE: The signing account does not need to own `amount` of assets at the point of",
                    "making this call.",
                    "",
                    "- `id`: The identifier of the asset.",
                    "- `delegate`: The account to delegate permission to transfer asset.",
                    "- `amount`: The amount of asset that may be transferred by `delegate`. If there is",
                    "already an approval in place, then this acts additively.",
                    "",
                    "Emits `ApprovedTransfer` on success.",
                    "",
                    "Weight: `O(1)`"
                  ]
                },
                {
                  "name": "cancel_approval",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    },
                    {
                      "name": "delegate",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 23,
                  "docs": [
                    "Cancel all of some asset approved for delegated transfer by a third-party account.",
                    "",
                    "Origin must be Signed and there must be an approval in place between signer and",
                    "`delegate`.",
                    "",
                    "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
                    "",
                    "- `id`: The identifier of the asset.",
                    "- `delegate`: The account delegated permission to transfer asset.",
                    "",
                    "Emits `ApprovalCancelled` on success.",
                    "",
                    "Weight: `O(1)`"
                  ]
                },
                {
                  "name": "force_cancel_approval",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    },
                    {
                      "name": "owner",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "delegate",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 24,
                  "docs": [
                    "Cancel all of some asset approved for delegated transfer by a third-party account.",
                    "",
                    "Origin must be either ForceOrigin or Signed origin with the signer being the Admin",
                    "account of the asset `id`.",
                    "",
                    "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
                    "",
                    "- `id`: The identifier of the asset.",
                    "- `delegate`: The account delegated permission to transfer asset.",
                    "",
                    "Emits `ApprovalCancelled` on success.",
                    "",
                    "Weight: `O(1)`"
                  ]
                },
                {
                  "name": "transfer_approved",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    },
                    {
                      "name": "owner",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "destination",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 108,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 25,
                  "docs": [
                    "Transfer some asset balance from a previously delegated account to some third-party",
                    "account.",
                    "",
                    "Origin must be Signed and there must be an approval in place by the `owner` to the",
                    "signer.",
                    "",
                    "If the entire amount approved for transfer is transferred, then any deposit previously",
                    "reserved by `approve_transfer` is unreserved.",
                    "",
                    "- `id`: The identifier of the asset.",
                    "- `owner`: The account which previously approved for a transfer of at least `amount` and",
                    "from which the asset balance will be withdrawn.",
                    "- `destination`: The account to which the asset balance of `amount` will be transferred.",
                    "- `amount`: The amount of assets to transfer.",
                    "",
                    "Emits `TransferredApproved` on success.",
                    "",
                    "Weight: `O(1)`"
                  ]
                },
                {
                  "name": "touch",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    }
                  ],
                  "index": 26,
                  "docs": [
                    "Create an asset account for non-provider assets.",
                    "",
                    "A deposit will be taken from the signer account.",
                    "",
                    "- `origin`: Must be Signed; the signer account must have sufficient funds for a deposit",
                    "  to be taken.",
                    "- `id`: The identifier of the asset for the account to be created.",
                    "",
                    "Emits `Touched` event when successful."
                  ]
                },
                {
                  "name": "refund",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    },
                    {
                      "name": "allow_burn",
                      "typeId": 37,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 27,
                  "docs": [
                    "Return the deposit (if any) of an asset account or a consumer reference (if any) of an",
                    "account.",
                    "",
                    "The origin must be Signed.",
                    "",
                    "- `id`: The identifier of the asset for which the caller would like the deposit",
                    "  refunded.",
                    "- `allow_burn`: If `true` then assets may be destroyed in order to complete the refund.",
                    "",
                    "Emits `Refunded` event when successful."
                  ]
                },
                {
                  "name": "set_min_balance",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    },
                    {
                      "name": "min_balance",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 28,
                  "docs": [
                    "Sets the minimum balance of an asset.",
                    "",
                    "Only works if there aren't any accounts that are holding the asset or if",
                    "the new value of `min_balance` is less than the old one.",
                    "",
                    "Origin must be Signed and the sender has to be the Owner of the",
                    "asset `id`.",
                    "",
                    "- `id`: The identifier of the asset.",
                    "- `min_balance`: The new value of `min_balance`.",
                    "",
                    "Emits `AssetMinBalanceChanged` event when successful."
                  ]
                },
                {
                  "name": "touch_other",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    },
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 29,
                  "docs": [
                    "Create an asset account for `who`.",
                    "",
                    "A deposit will be taken from the signer account.",
                    "",
                    "- `origin`: Must be Signed by `Freezer` or `Admin` of the asset `id`; the signer account",
                    "  must have sufficient funds for a deposit to be taken.",
                    "- `id`: The identifier of the asset for the account to be created.",
                    "- `who`: The account to be created.",
                    "",
                    "Emits `Touched` event when successful."
                  ]
                },
                {
                  "name": "refund_other",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    },
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 30,
                  "docs": [
                    "Return the deposit (if any) of a target asset account. Useful if you are the depositor.",
                    "",
                    "The origin must be Signed and either the account owner, depositor, or asset `Admin`. In",
                    "order to burn a non-zero balance of the asset, the caller must be the account and should",
                    "use `refund`.",
                    "",
                    "- `id`: The identifier of the asset for the account holding a deposit.",
                    "- `who`: The account to refund.",
                    "",
                    "Emits `Refunded` event when successful."
                  ]
                },
                {
                  "name": "block",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 108,
                      "typeName": "T::AssetIdParameter",
                      "docs": []
                    },
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 31,
                  "docs": [
                    "Disallow further unprivileged transfers of an asset `id` to and from an account `who`.",
                    "",
                    "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
                    "",
                    "- `id`: The identifier of the account's asset.",
                    "- `who`: The account to be unblocked.",
                    "",
                    "Emits `Blocked`.",
                    "",
                    "Weight: `O(1)`"
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 317,
          "path": [
            "pallet_ethereum_xcm",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "transact",
                  "fields": [
                    {
                      "name": "xcm_transaction",
                      "typeId": 318,
                      "typeName": "EthereumXcmTransaction",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Xcm Transact an Ethereum transaction.",
                    "Weight: Gas limit plus the db read involving the suspension check"
                  ]
                },
                {
                  "name": "transact_through_proxy",
                  "fields": [
                    {
                      "name": "transact_as",
                      "typeId": 64,
                      "typeName": "H160",
                      "docs": []
                    },
                    {
                      "name": "xcm_transaction",
                      "typeId": 318,
                      "typeName": "EthereumXcmTransaction",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Xcm Transact an Ethereum transaction through proxy.",
                    "Weight: Gas limit plus the db reads involving the suspension and proxy checks"
                  ]
                },
                {
                  "name": "suspend_ethereum_xcm_execution",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Suspends all Ethereum executions from XCM.",
                    "",
                    "- `origin`: Must pass `ControllerOrigin`."
                  ]
                },
                {
                  "name": "resume_ethereum_xcm_execution",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Resumes all Ethereum executions from XCM.",
                    "",
                    "- `origin`: Must pass `ControllerOrigin`."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 318,
          "path": [
            "xcm_primitives",
            "ethereum_xcm",
            "EthereumXcmTransaction"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "V1",
                  "fields": [
                    {
                      "typeId": 319,
                      "typeName": "EthereumXcmTransactionV1",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "V2",
                  "fields": [
                    {
                      "typeId": 324,
                      "typeName": "EthereumXcmTransactionV2",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 319,
          "path": [
            "xcm_primitives",
            "ethereum_xcm",
            "EthereumXcmTransactionV1"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "gas_limit",
                  "typeId": 187,
                  "typeName": "U256",
                  "docs": []
                },
                {
                  "name": "fee_payment",
                  "typeId": 320,
                  "typeName": "EthereumXcmFee",
                  "docs": []
                },
                {
                  "name": "action",
                  "typeId": 195,
                  "typeName": "TransactionAction",
                  "docs": []
                },
                {
                  "name": "value",
                  "typeId": 187,
                  "typeName": "U256",
                  "docs": []
                },
                {
                  "name": "input",
                  "typeId": 322,
                  "typeName": "BoundedVec<u8, ConstU32<MAX_ETHEREUM_XCM_INPUT_SIZE>>",
                  "docs": []
                },
                {
                  "name": "access_list",
                  "typeId": 323,
                  "typeName": "Option<Vec<(H160, Vec<H256>)>>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 320,
          "path": [
            "xcm_primitives",
            "ethereum_xcm",
            "EthereumXcmFee"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Manual",
                  "fields": [
                    {
                      "typeId": 321,
                      "typeName": "ManualEthereumXcmFee",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Auto",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 321,
          "path": [
            "xcm_primitives",
            "ethereum_xcm",
            "ManualEthereumXcmFee"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "gas_price",
                  "typeId": 189,
                  "typeName": "Option<U256>",
                  "docs": []
                },
                {
                  "name": "max_fee_per_gas",
                  "typeId": 189,
                  "typeName": "Option<U256>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 322,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 2
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 14,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 323,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 190
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 190,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 324,
          "path": [
            "xcm_primitives",
            "ethereum_xcm",
            "EthereumXcmTransactionV2"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "gas_limit",
                  "typeId": 187,
                  "typeName": "U256",
                  "docs": []
                },
                {
                  "name": "action",
                  "typeId": 195,
                  "typeName": "TransactionAction",
                  "docs": []
                },
                {
                  "name": "value",
                  "typeId": 187,
                  "typeName": "U256",
                  "docs": []
                },
                {
                  "name": "input",
                  "typeId": 322,
                  "typeName": "BoundedVec<u8, ConstU32<MAX_ETHEREUM_XCM_INPUT_SIZE>>",
                  "docs": []
                },
                {
                  "name": "access_list",
                  "typeId": 323,
                  "typeName": "Option<Vec<(H160, Vec<H256>)>>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 325,
          "path": [
            "pallet_randomness",
            "pallet",
            "Call"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "set_babe_randomness_results",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Populates `RandomnessResults` due this epoch with BABE epoch randomness"
                  ]
                }
              ]
            }
          },
          "docs": [
            "Contains one variant per dispatchable that can be called by an extrinsic."
          ]
        },
        {
          "id": 326,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 2
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 14,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 327,
          "path": [
            "pallet_conviction_voting",
            "types",
            "Tally"
          ],
          "params": [
            {
              "name": "Votes",
              "typeId": 6
            },
            {
              "name": "Total"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "ayes",
                  "typeId": 6,
                  "typeName": "Votes",
                  "docs": []
                },
                {
                  "name": "nays",
                  "typeId": 6,
                  "typeName": "Votes",
                  "docs": []
                },
                {
                  "name": "support",
                  "typeId": 6,
                  "typeName": "Votes",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 328,
          "path": [
            "pallet_whitelist",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "CallWhitelisted",
                  "fields": [
                    {
                      "name": "call_hash",
                      "typeId": 12,
                      "typeName": "PreimageHash",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "WhitelistedCallRemoved",
                  "fields": [
                    {
                      "name": "call_hash",
                      "typeId": 12,
                      "typeName": "PreimageHash",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "WhitelistedCallDispatched",
                  "fields": [
                    {
                      "name": "call_hash",
                      "typeId": 12,
                      "typeName": "PreimageHash",
                      "docs": []
                    },
                    {
                      "name": "result",
                      "typeId": 329,
                      "typeName": "DispatchResultWithPostInfo",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 329,
          "path": [
            "Result"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 330
            },
            {
              "name": "E",
              "typeId": 331
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Ok",
                  "fields": [
                    {
                      "typeId": 330,
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Err",
                  "fields": [
                    {
                      "typeId": 331,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 330,
          "path": [
            "frame_support",
            "dispatch",
            "PostDispatchInfo"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "actual_weight",
                  "typeId": 312,
                  "typeName": "Option<Weight>",
                  "docs": []
                },
                {
                  "name": "pays_fee",
                  "typeId": 25,
                  "typeName": "Pays",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 331,
          "path": [
            "sp_runtime",
            "DispatchErrorWithPostInfo"
          ],
          "params": [
            {
              "name": "Info",
              "typeId": 330
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "post_info",
                  "typeId": 330,
                  "typeName": "Info",
                  "docs": []
                },
                {
                  "name": "error",
                  "typeId": 26,
                  "typeName": "DispatchError",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 332,
          "path": [
            "pallet_collective",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Proposed",
                  "fields": [
                    {
                      "name": "account",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "proposal_index",
                      "typeId": 4,
                      "typeName": "ProposalIndex",
                      "docs": []
                    },
                    {
                      "name": "proposal_hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "threshold",
                      "typeId": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A motion (given hash) has been proposed (by given account) with a threshold (given",
                    "`MemberCount`)."
                  ]
                },
                {
                  "name": "Voted",
                  "fields": [
                    {
                      "name": "account",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "proposal_hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "voted",
                      "typeId": 37,
                      "typeName": "bool",
                      "docs": []
                    },
                    {
                      "name": "yes",
                      "typeId": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    },
                    {
                      "name": "no",
                      "typeId": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "A motion (given hash) has been voted on by given account, leaving",
                    "a tally (yes votes and no votes given respectively as `MemberCount`)."
                  ]
                },
                {
                  "name": "Approved",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "A motion was approved by the required threshold."
                  ]
                },
                {
                  "name": "Disapproved",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A motion was not approved by the required threshold."
                  ]
                },
                {
                  "name": "Executed",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "result",
                      "typeId": 52,
                      "typeName": "DispatchResult",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "A motion was executed; result will be `Ok` if it returned without error."
                  ]
                },
                {
                  "name": "MemberExecuted",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "result",
                      "typeId": 52,
                      "typeName": "DispatchResult",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "A single member did some action; result will be `Ok` if it returned without error."
                  ]
                },
                {
                  "name": "Closed",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "yes",
                      "typeId": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    },
                    {
                      "name": "no",
                      "typeId": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "A proposal was closed because its threshold was reached or after its duration was up."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 333,
          "path": [
            "pallet_collective",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Proposed",
                  "fields": [
                    {
                      "name": "account",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "proposal_index",
                      "typeId": 4,
                      "typeName": "ProposalIndex",
                      "docs": []
                    },
                    {
                      "name": "proposal_hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "threshold",
                      "typeId": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A motion (given hash) has been proposed (by given account) with a threshold (given",
                    "`MemberCount`)."
                  ]
                },
                {
                  "name": "Voted",
                  "fields": [
                    {
                      "name": "account",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "proposal_hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "voted",
                      "typeId": 37,
                      "typeName": "bool",
                      "docs": []
                    },
                    {
                      "name": "yes",
                      "typeId": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    },
                    {
                      "name": "no",
                      "typeId": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "A motion (given hash) has been voted on by given account, leaving",
                    "a tally (yes votes and no votes given respectively as `MemberCount`)."
                  ]
                },
                {
                  "name": "Approved",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "A motion was approved by the required threshold."
                  ]
                },
                {
                  "name": "Disapproved",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A motion was not approved by the required threshold."
                  ]
                },
                {
                  "name": "Executed",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "result",
                      "typeId": 52,
                      "typeName": "DispatchResult",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "A motion was executed; result will be `Ok` if it returned without error."
                  ]
                },
                {
                  "name": "MemberExecuted",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "result",
                      "typeId": 52,
                      "typeName": "DispatchResult",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "A single member did some action; result will be `Ok` if it returned without error."
                  ]
                },
                {
                  "name": "Closed",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "yes",
                      "typeId": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    },
                    {
                      "name": "no",
                      "typeId": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "A proposal was closed because its threshold was reached or after its duration was up."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 334,
          "path": [
            "pallet_collective",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Proposed",
                  "fields": [
                    {
                      "name": "account",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "proposal_index",
                      "typeId": 4,
                      "typeName": "ProposalIndex",
                      "docs": []
                    },
                    {
                      "name": "proposal_hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "threshold",
                      "typeId": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A motion (given hash) has been proposed (by given account) with a threshold (given",
                    "`MemberCount`)."
                  ]
                },
                {
                  "name": "Voted",
                  "fields": [
                    {
                      "name": "account",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "proposal_hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "voted",
                      "typeId": 37,
                      "typeName": "bool",
                      "docs": []
                    },
                    {
                      "name": "yes",
                      "typeId": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    },
                    {
                      "name": "no",
                      "typeId": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "A motion (given hash) has been voted on by given account, leaving",
                    "a tally (yes votes and no votes given respectively as `MemberCount`)."
                  ]
                },
                {
                  "name": "Approved",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "A motion was approved by the required threshold."
                  ]
                },
                {
                  "name": "Disapproved",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A motion was not approved by the required threshold."
                  ]
                },
                {
                  "name": "Executed",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "result",
                      "typeId": 52,
                      "typeName": "DispatchResult",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "A motion was executed; result will be `Ok` if it returned without error."
                  ]
                },
                {
                  "name": "MemberExecuted",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "result",
                      "typeId": 52,
                      "typeName": "DispatchResult",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "A single member did some action; result will be `Ok` if it returned without error."
                  ]
                },
                {
                  "name": "Closed",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "yes",
                      "typeId": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    },
                    {
                      "name": "no",
                      "typeId": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "A proposal was closed because its threshold was reached or after its duration was up."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 335,
          "path": [
            "pallet_collective",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Proposed",
                  "fields": [
                    {
                      "name": "account",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "proposal_index",
                      "typeId": 4,
                      "typeName": "ProposalIndex",
                      "docs": []
                    },
                    {
                      "name": "proposal_hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "threshold",
                      "typeId": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A motion (given hash) has been proposed (by given account) with a threshold (given",
                    "`MemberCount`)."
                  ]
                },
                {
                  "name": "Voted",
                  "fields": [
                    {
                      "name": "account",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "proposal_hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "voted",
                      "typeId": 37,
                      "typeName": "bool",
                      "docs": []
                    },
                    {
                      "name": "yes",
                      "typeId": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    },
                    {
                      "name": "no",
                      "typeId": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "A motion (given hash) has been voted on by given account, leaving",
                    "a tally (yes votes and no votes given respectively as `MemberCount`)."
                  ]
                },
                {
                  "name": "Approved",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "A motion was approved by the required threshold."
                  ]
                },
                {
                  "name": "Disapproved",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A motion was not approved by the required threshold."
                  ]
                },
                {
                  "name": "Executed",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "result",
                      "typeId": 52,
                      "typeName": "DispatchResult",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "A motion was executed; result will be `Ok` if it returned without error."
                  ]
                },
                {
                  "name": "MemberExecuted",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "result",
                      "typeId": 52,
                      "typeName": "DispatchResult",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "A single member did some action; result will be `Ok` if it returned without error."
                  ]
                },
                {
                  "name": "Closed",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "typeId": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "yes",
                      "typeId": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    },
                    {
                      "name": "no",
                      "typeId": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "A proposal was closed because its threshold was reached or after its duration was up."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 336,
          "path": [
            "pallet_treasury",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Proposed",
                  "fields": [
                    {
                      "name": "proposal_index",
                      "typeId": 4,
                      "typeName": "ProposalIndex",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "New proposal."
                  ]
                },
                {
                  "name": "Spending",
                  "fields": [
                    {
                      "name": "budget_remaining",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "We have ended a spend period and will now allocate funds."
                  ]
                },
                {
                  "name": "Awarded",
                  "fields": [
                    {
                      "name": "proposal_index",
                      "typeId": 4,
                      "typeName": "ProposalIndex",
                      "docs": []
                    },
                    {
                      "name": "award",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "account",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Some funds have been allocated."
                  ]
                },
                {
                  "name": "Rejected",
                  "fields": [
                    {
                      "name": "proposal_index",
                      "typeId": 4,
                      "typeName": "ProposalIndex",
                      "docs": []
                    },
                    {
                      "name": "slashed",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A proposal was rejected; funds were slashed."
                  ]
                },
                {
                  "name": "Burnt",
                  "fields": [
                    {
                      "name": "burnt_funds",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Some of our funds have been burnt."
                  ]
                },
                {
                  "name": "Rollover",
                  "fields": [
                    {
                      "name": "rollover_balance",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Spending has finished; this is the amount that rolls over until next spend."
                  ]
                },
                {
                  "name": "Deposit",
                  "fields": [
                    {
                      "name": "value",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Some funds have been deposited."
                  ]
                },
                {
                  "name": "SpendApproved",
                  "fields": [
                    {
                      "name": "proposal_index",
                      "typeId": 4,
                      "typeName": "ProposalIndex",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "A new spend proposal has been approved."
                  ]
                },
                {
                  "name": "UpdatedInactive",
                  "fields": [
                    {
                      "name": "reactivated",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "deactivated",
                      "typeId": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "The inactive funds of the pallet have been updated."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 337,
          "path": [
            "pallet_crowdloan_rewards",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "InitialPaymentMade",
                  "fields": [
                    {
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "The initial payment of InitializationPayment % was paid"
                  ]
                },
                {
                  "name": "NativeIdentityAssociated",
                  "fields": [
                    {
                      "typeId": 13,
                      "typeName": "T::RelayChainAccountId",
                      "docs": []
                    },
                    {
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Someone has proven they made a contribution and associated a native identity with it.",
                    "Data is the relay account,  native account and the total amount of _rewards_ that will be paid"
                  ]
                },
                {
                  "name": "RewardsPaid",
                  "fields": [
                    {
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "A contributor has claimed some rewards.",
                    "Data is the account getting paid and the amount of rewards paid."
                  ]
                },
                {
                  "name": "RewardAddressUpdated",
                  "fields": [
                    {
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A contributor has updated the reward address."
                  ]
                },
                {
                  "name": "InitializedAlreadyInitializedAccount",
                  "fields": [
                    {
                      "typeId": 13,
                      "typeName": "T::RelayChainAccountId",
                      "docs": []
                    },
                    {
                      "typeId": 50,
                      "typeName": "Option<T::AccountId>",
                      "docs": []
                    },
                    {
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "When initializing the reward vec an already initialized account was found"
                  ]
                },
                {
                  "name": "InitializedAccountWithNotEnoughContribution",
                  "fields": [
                    {
                      "typeId": 13,
                      "typeName": "T::RelayChainAccountId",
                      "docs": []
                    },
                    {
                      "typeId": 50,
                      "typeName": "Option<T::AccountId>",
                      "docs": []
                    },
                    {
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "When initializing the reward vec an already initialized account was found"
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 338,
          "path": [
            "cumulus_pallet_xcmp_queue",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Success",
                  "fields": [
                    {
                      "name": "message_hash",
                      "typeId": 32,
                      "typeName": "Option<XcmHash>",
                      "docs": []
                    },
                    {
                      "name": "weight",
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Some XCM was executed ok."
                  ]
                },
                {
                  "name": "Fail",
                  "fields": [
                    {
                      "name": "message_hash",
                      "typeId": 32,
                      "typeName": "Option<XcmHash>",
                      "docs": []
                    },
                    {
                      "name": "error",
                      "typeId": 275,
                      "typeName": "XcmError",
                      "docs": []
                    },
                    {
                      "name": "weight",
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Some XCM failed."
                  ]
                },
                {
                  "name": "BadVersion",
                  "fields": [
                    {
                      "name": "message_hash",
                      "typeId": 32,
                      "typeName": "Option<XcmHash>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Bad XCM version used."
                  ]
                },
                {
                  "name": "BadFormat",
                  "fields": [
                    {
                      "name": "message_hash",
                      "typeId": 32,
                      "typeName": "Option<XcmHash>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Bad XCM format used."
                  ]
                },
                {
                  "name": "XcmpMessageSent",
                  "fields": [
                    {
                      "name": "message_hash",
                      "typeId": 32,
                      "typeName": "Option<XcmHash>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "An HRMP message was sent to a sibling parachain."
                  ]
                },
                {
                  "name": "OverweightEnqueued",
                  "fields": [
                    {
                      "name": "sender",
                      "typeId": 100,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "sent_at",
                      "typeId": 4,
                      "typeName": "RelayBlockNumber",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "typeId": 11,
                      "typeName": "OverweightIndex",
                      "docs": []
                    },
                    {
                      "name": "required",
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "An XCM exceeded the individual message weight budget."
                  ]
                },
                {
                  "name": "OverweightServiced",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 11,
                      "typeName": "OverweightIndex",
                      "docs": []
                    },
                    {
                      "name": "used",
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "An XCM from the overweight queue was executed with the given actual weight used."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 339,
          "path": [
            "cumulus_pallet_xcm",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "InvalidFormat",
                  "fields": [
                    {
                      "typeId": 13,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Downward message is invalid XCM.",
                    "\\[ id \\]"
                  ]
                },
                {
                  "name": "UnsupportedVersion",
                  "fields": [
                    {
                      "typeId": 13,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Downward message is unsupported version of XCM.",
                    "\\[ id \\]"
                  ]
                },
                {
                  "name": "ExecutedDownward",
                  "fields": [
                    {
                      "typeId": 13,
                      "typeName": "[u8; 32]",
                      "docs": []
                    },
                    {
                      "typeId": 340,
                      "typeName": "Outcome",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Downward message executed with the given outcome.",
                    "\\[ id, outcome \\]"
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 340,
          "path": [
            "xcm",
            "v3",
            "traits",
            "Outcome"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Complete",
                  "fields": [
                    {
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Incomplete",
                  "fields": [
                    {
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "typeId": 275,
                      "typeName": "Error",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Error",
                  "fields": [
                    {
                      "typeId": 275,
                      "typeName": "Error",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 341,
          "path": [
            "cumulus_pallet_dmp_queue",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "InvalidFormat",
                  "fields": [
                    {
                      "name": "message_id",
                      "typeId": 13,
                      "typeName": "MessageId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Downward message is invalid XCM."
                  ]
                },
                {
                  "name": "UnsupportedVersion",
                  "fields": [
                    {
                      "name": "message_id",
                      "typeId": 13,
                      "typeName": "MessageId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Downward message is unsupported version of XCM."
                  ]
                },
                {
                  "name": "ExecutedDownward",
                  "fields": [
                    {
                      "name": "message_id",
                      "typeId": 13,
                      "typeName": "MessageId",
                      "docs": []
                    },
                    {
                      "name": "outcome",
                      "typeId": 340,
                      "typeName": "Outcome",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Downward message executed with the given outcome."
                  ]
                },
                {
                  "name": "WeightExhausted",
                  "fields": [
                    {
                      "name": "message_id",
                      "typeId": 13,
                      "typeName": "MessageId",
                      "docs": []
                    },
                    {
                      "name": "remaining_weight",
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "required_weight",
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "The weight limit for handling downward messages was reached."
                  ]
                },
                {
                  "name": "OverweightEnqueued",
                  "fields": [
                    {
                      "name": "message_id",
                      "typeId": 13,
                      "typeName": "MessageId",
                      "docs": []
                    },
                    {
                      "name": "overweight_index",
                      "typeId": 11,
                      "typeName": "OverweightIndex",
                      "docs": []
                    },
                    {
                      "name": "required_weight",
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Downward message is overweight and was placed in the overweight queue."
                  ]
                },
                {
                  "name": "OverweightServiced",
                  "fields": [
                    {
                      "name": "overweight_index",
                      "typeId": 11,
                      "typeName": "OverweightIndex",
                      "docs": []
                    },
                    {
                      "name": "weight_used",
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Downward message from the overweight queue was executed."
                  ]
                },
                {
                  "name": "MaxMessagesExhausted",
                  "fields": [
                    {
                      "name": "message_id",
                      "typeId": 13,
                      "typeName": "MessageId",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "The maximum number of downward messages was."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 342,
          "path": [
            "pallet_xcm",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Attempted",
                  "fields": [
                    {
                      "typeId": 340,
                      "typeName": "xcm::latest::Outcome",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Execution of an XCM message was attempted.",
                    "",
                    "\\[ outcome \\]"
                  ]
                },
                {
                  "name": "Sent",
                  "fields": [
                    {
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "typeId": 263,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "A XCM message was sent.",
                    "",
                    "\\[ origin, destination, message \\]"
                  ]
                },
                {
                  "name": "UnexpectedResponse",
                  "fields": [
                    {
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "typeId": 11,
                      "typeName": "QueryId",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Query response received which does not match a registered query. This may be because a",
                    "matching query was never registered, it may be because it is a duplicate response, or",
                    "because the query timed out.",
                    "",
                    "\\[ origin location, id \\]"
                  ]
                },
                {
                  "name": "ResponseReady",
                  "fields": [
                    {
                      "typeId": 11,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "typeId": 272,
                      "typeName": "Response",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Query response has been received and is ready for taking with `take_response`. There is",
                    "no registered notification call.",
                    "",
                    "\\[ id, response \\]"
                  ]
                },
                {
                  "name": "Notified",
                  "fields": [
                    {
                      "typeId": 11,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "typeId": 2,
                      "typeName": "u8",
                      "docs": []
                    },
                    {
                      "typeId": 2,
                      "typeName": "u8",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Query response has been received and query is removed. The registered notification has",
                    "been dispatched and executed successfully.",
                    "",
                    "\\[ id, pallet index, call index \\]"
                  ]
                },
                {
                  "name": "NotifyOverweight",
                  "fields": [
                    {
                      "typeId": 11,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "typeId": 2,
                      "typeName": "u8",
                      "docs": []
                    },
                    {
                      "typeId": 2,
                      "typeName": "u8",
                      "docs": []
                    },
                    {
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "typeId": 9,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Query response has been received and query is removed. The registered notification could",
                    "not be dispatched because the dispatch weight is greater than the maximum weight",
                    "originally budgeted by this runtime for the query result.",
                    "",
                    "\\[ id, pallet index, call index, actual weight, max budgeted weight \\]"
                  ]
                },
                {
                  "name": "NotifyDispatchError",
                  "fields": [
                    {
                      "typeId": 11,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "typeId": 2,
                      "typeName": "u8",
                      "docs": []
                    },
                    {
                      "typeId": 2,
                      "typeName": "u8",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Query response has been received and query is removed. There was a general error with",
                    "dispatching the notification call.",
                    "",
                    "\\[ id, pallet index, call index \\]"
                  ]
                },
                {
                  "name": "NotifyDecodeFailed",
                  "fields": [
                    {
                      "typeId": 11,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "typeId": 2,
                      "typeName": "u8",
                      "docs": []
                    },
                    {
                      "typeId": 2,
                      "typeName": "u8",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Query response has been received and query is removed. The dispatch was unable to be",
                    "decoded into a `Call`; this might be due to dispatch function having a signature which",
                    "is not `(origin, QueryId, Response)`.",
                    "",
                    "\\[ id, pallet index, call index \\]"
                  ]
                },
                {
                  "name": "InvalidResponder",
                  "fields": [
                    {
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "typeId": 11,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "typeId": 282,
                      "typeName": "Option<MultiLocation>",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "Expected query response has been received but the origin location of the response does",
                    "not match that expected. The query remains registered for a later, valid, response to",
                    "be received and acted upon.",
                    "",
                    "\\[ origin location, id, expected location \\]"
                  ]
                },
                {
                  "name": "InvalidResponderVersion",
                  "fields": [
                    {
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "typeId": 11,
                      "typeName": "QueryId",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "Expected query response has been received but the expected origin location placed in",
                    "storage by this runtime previously cannot be decoded. The query remains registered.",
                    "",
                    "This is unexpected (since a location placed in storage in a previously executing",
                    "runtime should be readable prior to query timeout) and dangerous since the possibly",
                    "valid response will be dropped. Manual governance intervention is probably going to be",
                    "needed.",
                    "",
                    "\\[ origin location, id \\]"
                  ]
                },
                {
                  "name": "ResponseTaken",
                  "fields": [
                    {
                      "typeId": 11,
                      "typeName": "QueryId",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": [
                    "Received query response has been read and removed.",
                    "",
                    "\\[ id \\]"
                  ]
                },
                {
                  "name": "AssetsTrapped",
                  "fields": [
                    {
                      "typeId": 12,
                      "typeName": "H256",
                      "docs": []
                    },
                    {
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "typeId": 288,
                      "typeName": "VersionedMultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": [
                    "Some assets have been placed in an asset trap.",
                    "",
                    "\\[ hash, origin, assets \\]"
                  ]
                },
                {
                  "name": "VersionChangeNotified",
                  "fields": [
                    {
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "typeId": 4,
                      "typeName": "XcmVersion",
                      "docs": []
                    },
                    {
                      "typeId": 266,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": [
                    "An XCM version change notification message has been attempted to be sent.",
                    "",
                    "The cost of sending it (borne by the chain) is included.",
                    "",
                    "\\[ destination, result, cost \\]"
                  ]
                },
                {
                  "name": "SupportedVersionChanged",
                  "fields": [
                    {
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "typeId": 4,
                      "typeName": "XcmVersion",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": [
                    "The supported version of a location has been changed. This might be through an",
                    "automatic notification or a manual intervention.",
                    "",
                    "\\[ location, XCM version \\]"
                  ]
                },
                {
                  "name": "NotifyTargetSendFail",
                  "fields": [
                    {
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "typeId": 11,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "typeId": 275,
                      "typeName": "XcmError",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": [
                    "A given location which had a version change subscription was dropped owing to an error",
                    "sending the notification to it.",
                    "",
                    "\\[ location, query ID, error \\]"
                  ]
                },
                {
                  "name": "NotifyTargetMigrationFail",
                  "fields": [
                    {
                      "typeId": 235,
                      "typeName": "VersionedMultiLocation",
                      "docs": []
                    },
                    {
                      "typeId": 11,
                      "typeName": "QueryId",
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": [
                    "A given location which had a version change subscription was dropped owing to an error",
                    "migrating the location to our new XCM format.",
                    "",
                    "\\[ location, query ID \\]"
                  ]
                },
                {
                  "name": "InvalidQuerierVersion",
                  "fields": [
                    {
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "typeId": 11,
                      "typeName": "QueryId",
                      "docs": []
                    }
                  ],
                  "index": 16,
                  "docs": [
                    "Expected query response has been received but the expected querier location placed in",
                    "storage by this runtime previously cannot be decoded. The query remains registered.",
                    "",
                    "This is unexpected (since a location placed in storage in a previously executing",
                    "runtime should be readable prior to query timeout) and dangerous since the possibly",
                    "valid response will be dropped. Manual governance intervention is probably going to be",
                    "needed.",
                    "",
                    "\\[ origin location, id \\]"
                  ]
                },
                {
                  "name": "InvalidQuerier",
                  "fields": [
                    {
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "typeId": 11,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "typeId": 282,
                      "typeName": "Option<MultiLocation>",
                      "docs": []
                    }
                  ],
                  "index": 17,
                  "docs": [
                    "Expected query response has been received but the querier location of the response does",
                    "not match the expected. The query remains registered for a later, valid, response to",
                    "be received and acted upon.",
                    "",
                    "\\[ origin location, id, expected querier, maybe actual querier \\]"
                  ]
                },
                {
                  "name": "VersionNotifyStarted",
                  "fields": [
                    {
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "typeId": 266,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 18,
                  "docs": [
                    "A remote has requested XCM version change notification from us and we have honored it.",
                    "A version information message is sent to them and its cost is included.",
                    "",
                    "\\[ destination location, cost \\]"
                  ]
                },
                {
                  "name": "VersionNotifyRequested",
                  "fields": [
                    {
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "typeId": 266,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": [
                    "We have requested that a remote chain sends us XCM version change notifications.",
                    "",
                    "\\[ destination location, cost \\]"
                  ]
                },
                {
                  "name": "VersionNotifyUnrequested",
                  "fields": [
                    {
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "typeId": 266,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 20,
                  "docs": [
                    "We have requested that a remote chain stops sending us XCM version change notifications.",
                    "",
                    "\\[ destination location, cost \\]"
                  ]
                },
                {
                  "name": "FeesPaid",
                  "fields": [
                    {
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "typeId": 266,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": [
                    "Fees were paid from a location for an operation (often for using `SendXcm`).",
                    "",
                    "\\[ paying location, fees \\]"
                  ]
                },
                {
                  "name": "AssetsClaimed",
                  "fields": [
                    {
                      "typeId": 12,
                      "typeName": "H256",
                      "docs": []
                    },
                    {
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "typeId": 288,
                      "typeName": "VersionedMultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 22,
                  "docs": [
                    "Some assets have been claimed from an asset trap",
                    "",
                    "\\[ hash, origin, assets \\]"
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 343,
          "path": [
            "pallet_assets",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Created",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    },
                    {
                      "name": "creator",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "owner",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Some asset class was created."
                  ]
                },
                {
                  "name": "Issued",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    },
                    {
                      "name": "owner",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Some assets were issued."
                  ]
                },
                {
                  "name": "Transferred",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    },
                    {
                      "name": "from",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "to",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Some assets were transferred."
                  ]
                },
                {
                  "name": "Burned",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    },
                    {
                      "name": "owner",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "balance",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Some assets were destroyed."
                  ]
                },
                {
                  "name": "TeamChanged",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    },
                    {
                      "name": "issuer",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "admin",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "freezer",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "The management team changed."
                  ]
                },
                {
                  "name": "OwnerChanged",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    },
                    {
                      "name": "owner",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "The owner changed."
                  ]
                },
                {
                  "name": "Frozen",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    },
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Some account `who` was frozen."
                  ]
                },
                {
                  "name": "Thawed",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    },
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Some account `who` was thawed."
                  ]
                },
                {
                  "name": "AssetFrozen",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "Some asset `asset_id` was frozen."
                  ]
                },
                {
                  "name": "AssetThawed",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "Some asset `asset_id` was thawed."
                  ]
                },
                {
                  "name": "AccountsDestroyed",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    },
                    {
                      "name": "accounts_destroyed",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "accounts_remaining",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": [
                    "Accounts were destroyed for given asset."
                  ]
                },
                {
                  "name": "ApprovalsDestroyed",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    },
                    {
                      "name": "approvals_destroyed",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "approvals_remaining",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": [
                    "Approvals were destroyed for given asset."
                  ]
                },
                {
                  "name": "DestructionStarted",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": [
                    "An asset class is in the process of being destroyed."
                  ]
                },
                {
                  "name": "Destroyed",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": [
                    "An asset class was destroyed."
                  ]
                },
                {
                  "name": "ForceCreated",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    },
                    {
                      "name": "owner",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": [
                    "Some asset class was force-created."
                  ]
                },
                {
                  "name": "MetadataSet",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    },
                    {
                      "name": "name",
                      "typeId": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "symbol",
                      "typeId": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "decimals",
                      "typeId": 2,
                      "typeName": "u8",
                      "docs": []
                    },
                    {
                      "name": "is_frozen",
                      "typeId": 37,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": [
                    "New metadata has been set for an asset."
                  ]
                },
                {
                  "name": "MetadataCleared",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    }
                  ],
                  "index": 16,
                  "docs": [
                    "Metadata has been cleared for an asset."
                  ]
                },
                {
                  "name": "ApprovedTransfer",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    },
                    {
                      "name": "source",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "delegate",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 17,
                  "docs": [
                    "(Additional) funds have been approved for transfer to a destination account."
                  ]
                },
                {
                  "name": "ApprovalCancelled",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    },
                    {
                      "name": "owner",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "delegate",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 18,
                  "docs": [
                    "An approval for account `delegate` was cancelled by `owner`."
                  ]
                },
                {
                  "name": "TransferredApproved",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    },
                    {
                      "name": "owner",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "delegate",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "destination",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": [
                    "An `amount` was transferred in its entirety from `owner` to `destination` by",
                    "the approved `delegate`."
                  ]
                },
                {
                  "name": "AssetStatusChanged",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    }
                  ],
                  "index": 20,
                  "docs": [
                    "An asset has had its attributes changed by the `Force` origin."
                  ]
                },
                {
                  "name": "AssetMinBalanceChanged",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    },
                    {
                      "name": "new_min_balance",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": [
                    "The min_balance of an asset has been updated by the asset owner."
                  ]
                },
                {
                  "name": "Touched",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    },
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "depositor",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 22,
                  "docs": [
                    "Some account `who` was created with a deposit from `depositor`."
                  ]
                },
                {
                  "name": "Blocked",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    },
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 23,
                  "docs": [
                    "Some account `who` was blocked."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 344,
          "path": [
            "pallet_asset_manager",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "ForeignAssetRegistered",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    },
                    {
                      "name": "asset",
                      "typeId": 299,
                      "typeName": "T::ForeignAssetType",
                      "docs": []
                    },
                    {
                      "name": "metadata",
                      "typeId": 300,
                      "typeName": "T::AssetRegistrarMetadata",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "New asset with the asset manager is registered"
                  ]
                },
                {
                  "name": "UnitsPerSecondChanged",
                  "fields": [
                    {
                      "name": "asset_type",
                      "typeId": 299,
                      "typeName": "T::ForeignAssetType",
                      "docs": []
                    },
                    {
                      "name": "units_per_second",
                      "typeId": 6,
                      "typeName": "u128",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Changed the amount of units we are charging per execution second for a given asset"
                  ]
                },
                {
                  "name": "ForeignAssetTypeChanged",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    },
                    {
                      "name": "new_asset_type",
                      "typeId": 299,
                      "typeName": "T::ForeignAssetType",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Changed the xcm type mapping for a given asset id"
                  ]
                },
                {
                  "name": "ForeignAssetRemoved",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    },
                    {
                      "name": "asset_type",
                      "typeId": 299,
                      "typeName": "T::ForeignAssetType",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Removed all information related to an assetId"
                  ]
                },
                {
                  "name": "SupportedAssetRemoved",
                  "fields": [
                    {
                      "name": "asset_type",
                      "typeId": 299,
                      "typeName": "T::ForeignAssetType",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Supported asset type for fee payment removed"
                  ]
                },
                {
                  "name": "LocalAssetRegistered",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    },
                    {
                      "name": "creator",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "owner",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Local asset was created"
                  ]
                },
                {
                  "name": "ForeignAssetDestroyed",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    },
                    {
                      "name": "asset_type",
                      "typeId": 299,
                      "typeName": "T::ForeignAssetType",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Removed all information related to an assetId and destroyed asset"
                  ]
                },
                {
                  "name": "LocalAssetDestroyed",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Removed all information related to an assetId and destroyed asset"
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 345,
          "path": [
            "orml_xtokens",
            "module",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "TransferredMultiAssets",
                  "fields": [
                    {
                      "name": "sender",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "assets",
                      "typeId": 266,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "fee",
                      "typeId": 268,
                      "typeName": "MultiAsset",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Transferred `MultiAsset` with fee."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 346,
          "path": [
            "pallet_xcm_transactor",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "TransactedDerivative",
                  "fields": [
                    {
                      "name": "account_id",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "typeId": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "typeId": 56,
                      "typeName": "u16",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Transacted the inner call through a derivative account in a destination chain."
                  ]
                },
                {
                  "name": "TransactedSovereign",
                  "fields": [
                    {
                      "name": "fee_payer",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "typeId": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Transacted the call through the sovereign account in a destination chain."
                  ]
                },
                {
                  "name": "TransactedSigned",
                  "fields": [
                    {
                      "name": "fee_payer",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "typeId": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Transacted the call through a signed account in a destination chain."
                  ]
                },
                {
                  "name": "RegisteredDerivative",
                  "fields": [
                    {
                      "name": "account_id",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "typeId": 56,
                      "typeName": "u16",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Registered a derivative index for an account id."
                  ]
                },
                {
                  "name": "DeRegisteredDerivative",
                  "fields": [
                    {
                      "name": "index",
                      "typeId": 56,
                      "typeName": "u16",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "TransactFailed",
                  "fields": [
                    {
                      "name": "error",
                      "typeId": 275,
                      "typeName": "XcmError",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Transact failed"
                  ]
                },
                {
                  "name": "TransactInfoChanged",
                  "fields": [
                    {
                      "name": "location",
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "remote_info",
                      "typeId": 347,
                      "typeName": "RemoteTransactInfoWithMaxWeight",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Changed the transact info of a location"
                  ]
                },
                {
                  "name": "TransactInfoRemoved",
                  "fields": [
                    {
                      "name": "location",
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Removed the transact info of a location"
                  ]
                },
                {
                  "name": "DestFeePerSecondChanged",
                  "fields": [
                    {
                      "name": "location",
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "fee_per_second",
                      "typeId": 6,
                      "typeName": "u128",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "Set dest fee per second"
                  ]
                },
                {
                  "name": "DestFeePerSecondRemoved",
                  "fields": [
                    {
                      "name": "location",
                      "typeId": 129,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "Remove dest fee per second"
                  ]
                },
                {
                  "name": "HrmpManagementSent",
                  "fields": [
                    {
                      "name": "action",
                      "typeId": 313,
                      "typeName": "HrmpOperation",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": [
                    "HRMP manage action succesfully sent"
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 347,
          "path": [
            "pallet_xcm_transactor",
            "pallet",
            "RemoteTransactInfoWithMaxWeight"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "transact_extra_weight",
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "max_weight",
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "transact_extra_weight_signed",
                  "typeId": 312,
                  "typeName": "Option<Weight>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 348,
          "path": [
            "pallet_assets",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Created",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    },
                    {
                      "name": "creator",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "owner",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Some asset class was created."
                  ]
                },
                {
                  "name": "Issued",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    },
                    {
                      "name": "owner",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Some assets were issued."
                  ]
                },
                {
                  "name": "Transferred",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    },
                    {
                      "name": "from",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "to",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Some assets were transferred."
                  ]
                },
                {
                  "name": "Burned",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    },
                    {
                      "name": "owner",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "balance",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Some assets were destroyed."
                  ]
                },
                {
                  "name": "TeamChanged",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    },
                    {
                      "name": "issuer",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "admin",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "freezer",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "The management team changed."
                  ]
                },
                {
                  "name": "OwnerChanged",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    },
                    {
                      "name": "owner",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "The owner changed."
                  ]
                },
                {
                  "name": "Frozen",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    },
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Some account `who` was frozen."
                  ]
                },
                {
                  "name": "Thawed",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    },
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Some account `who` was thawed."
                  ]
                },
                {
                  "name": "AssetFrozen",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "Some asset `asset_id` was frozen."
                  ]
                },
                {
                  "name": "AssetThawed",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "Some asset `asset_id` was thawed."
                  ]
                },
                {
                  "name": "AccountsDestroyed",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    },
                    {
                      "name": "accounts_destroyed",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "accounts_remaining",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": [
                    "Accounts were destroyed for given asset."
                  ]
                },
                {
                  "name": "ApprovalsDestroyed",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    },
                    {
                      "name": "approvals_destroyed",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "approvals_remaining",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": [
                    "Approvals were destroyed for given asset."
                  ]
                },
                {
                  "name": "DestructionStarted",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": [
                    "An asset class is in the process of being destroyed."
                  ]
                },
                {
                  "name": "Destroyed",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": [
                    "An asset class was destroyed."
                  ]
                },
                {
                  "name": "ForceCreated",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    },
                    {
                      "name": "owner",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": [
                    "Some asset class was force-created."
                  ]
                },
                {
                  "name": "MetadataSet",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    },
                    {
                      "name": "name",
                      "typeId": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "symbol",
                      "typeId": 14,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "decimals",
                      "typeId": 2,
                      "typeName": "u8",
                      "docs": []
                    },
                    {
                      "name": "is_frozen",
                      "typeId": 37,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": [
                    "New metadata has been set for an asset."
                  ]
                },
                {
                  "name": "MetadataCleared",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    }
                  ],
                  "index": 16,
                  "docs": [
                    "Metadata has been cleared for an asset."
                  ]
                },
                {
                  "name": "ApprovedTransfer",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    },
                    {
                      "name": "source",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "delegate",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 17,
                  "docs": [
                    "(Additional) funds have been approved for transfer to a destination account."
                  ]
                },
                {
                  "name": "ApprovalCancelled",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    },
                    {
                      "name": "owner",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "delegate",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 18,
                  "docs": [
                    "An approval for account `delegate` was cancelled by `owner`."
                  ]
                },
                {
                  "name": "TransferredApproved",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    },
                    {
                      "name": "owner",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "delegate",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "destination",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": [
                    "An `amount` was transferred in its entirety from `owner` to `destination` by",
                    "the approved `delegate`."
                  ]
                },
                {
                  "name": "AssetStatusChanged",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    }
                  ],
                  "index": 20,
                  "docs": [
                    "An asset has had its attributes changed by the `Force` origin."
                  ]
                },
                {
                  "name": "AssetMinBalanceChanged",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    },
                    {
                      "name": "new_min_balance",
                      "typeId": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": [
                    "The min_balance of an asset has been updated by the asset owner."
                  ]
                },
                {
                  "name": "Touched",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    },
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "depositor",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 22,
                  "docs": [
                    "Some account `who` was created with a deposit from `depositor`."
                  ]
                },
                {
                  "name": "Blocked",
                  "fields": [
                    {
                      "name": "asset_id",
                      "typeId": 6,
                      "typeName": "T::AssetId",
                      "docs": []
                    },
                    {
                      "name": "who",
                      "typeId": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 23,
                  "docs": [
                    "Some account `who` was blocked."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 349,
          "path": [
            "pallet_randomness",
            "pallet",
            "Event"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "RandomnessRequestedBabeEpoch",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 11,
                      "typeName": "RequestId",
                      "docs": []
                    },
                    {
                      "name": "refund_address",
                      "typeId": 64,
                      "typeName": "H160",
                      "docs": []
                    },
                    {
                      "name": "contract_address",
                      "typeId": 64,
                      "typeName": "H160",
                      "docs": []
                    },
                    {
                      "name": "fee",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "gas_limit",
                      "typeId": 11,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "num_words",
                      "typeId": 2,
                      "typeName": "u8",
                      "docs": []
                    },
                    {
                      "name": "salt",
                      "typeId": 12,
                      "typeName": "H256",
                      "docs": []
                    },
                    {
                      "name": "earliest_epoch",
                      "typeId": 11,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "RandomnessRequestedLocal",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 11,
                      "typeName": "RequestId",
                      "docs": []
                    },
                    {
                      "name": "refund_address",
                      "typeId": 64,
                      "typeName": "H160",
                      "docs": []
                    },
                    {
                      "name": "contract_address",
                      "typeId": 64,
                      "typeName": "H160",
                      "docs": []
                    },
                    {
                      "name": "fee",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "gas_limit",
                      "typeId": 11,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "num_words",
                      "typeId": 2,
                      "typeName": "u8",
                      "docs": []
                    },
                    {
                      "name": "salt",
                      "typeId": 12,
                      "typeName": "H256",
                      "docs": []
                    },
                    {
                      "name": "earliest_block",
                      "typeId": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "RequestFulfilled",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 11,
                      "typeName": "RequestId",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "RequestFeeIncreased",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 11,
                      "typeName": "RequestId",
                      "docs": []
                    },
                    {
                      "name": "new_fee",
                      "typeId": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "RequestExpirationExecuted",
                  "fields": [
                    {
                      "name": "id",
                      "typeId": 11,
                      "typeName": "RequestId",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 350,
          "path": [
            "frame_system",
            "Phase"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "ApplyExtrinsic",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Finalization",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Initialization",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 351,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 76
            }
          },
          "docs": []
        },
        {
          "id": 352,
          "path": [
            "frame_system",
            "LastRuntimeUpgradeInfo"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "spec_version",
                  "typeId": 132,
                  "typeName": "codec::Compact<u32>",
                  "docs": []
                },
                {
                  "name": "spec_name",
                  "typeId": 72,
                  "typeName": "sp_runtime::RuntimeString",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 353,
          "path": [
            "frame_system",
            "limits",
            "BlockWeights"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "base_block",
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "max_block",
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "per_class",
                  "typeId": 354,
                  "typeName": "PerDispatchClass<WeightsPerClass>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 354,
          "path": [
            "frame_support",
            "dispatch",
            "PerDispatchClass"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 355
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "normal",
                  "typeId": 355,
                  "typeName": "T",
                  "docs": []
                },
                {
                  "name": "operational",
                  "typeId": 355,
                  "typeName": "T",
                  "docs": []
                },
                {
                  "name": "mandatory",
                  "typeId": 355,
                  "typeName": "T",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 355,
          "path": [
            "frame_system",
            "limits",
            "WeightsPerClass"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "base_extrinsic",
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "max_extrinsic",
                  "typeId": 312,
                  "typeName": "Option<Weight>",
                  "docs": []
                },
                {
                  "name": "max_total",
                  "typeId": 312,
                  "typeName": "Option<Weight>",
                  "docs": []
                },
                {
                  "name": "reserved",
                  "typeId": 312,
                  "typeName": "Option<Weight>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 356,
          "path": [
            "frame_system",
            "limits",
            "BlockLength"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "max",
                  "typeId": 357,
                  "typeName": "PerDispatchClass<u32>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 357,
          "path": [
            "frame_support",
            "dispatch",
            "PerDispatchClass"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "normal",
                  "typeId": 4,
                  "typeName": "T",
                  "docs": []
                },
                {
                  "name": "operational",
                  "typeId": 4,
                  "typeName": "T",
                  "docs": []
                },
                {
                  "name": "mandatory",
                  "typeId": 4,
                  "typeName": "T",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 358,
          "path": [
            "sp_weights",
            "RuntimeDbWeight"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "read",
                  "typeId": 11,
                  "typeName": "u64",
                  "docs": []
                },
                {
                  "name": "write",
                  "typeId": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 359,
          "path": [
            "sp_version",
            "RuntimeVersion"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "spec_name",
                  "typeId": 72,
                  "typeName": "RuntimeString",
                  "docs": []
                },
                {
                  "name": "impl_name",
                  "typeId": 72,
                  "typeName": "RuntimeString",
                  "docs": []
                },
                {
                  "name": "authoring_version",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "spec_version",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "impl_version",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "apis",
                  "typeId": 360,
                  "typeName": "ApisVec",
                  "docs": []
                },
                {
                  "name": "transaction_version",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "state_version",
                  "typeId": 2,
                  "typeName": "u8",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 360,
          "path": [
            "Cow"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 361
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 361,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 361,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 362
            }
          },
          "docs": []
        },
        {
          "id": 362,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                154,
                4
              ]
            }
          },
          "docs": []
        },
        {
          "id": 363,
          "path": [
            "frame_system",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "InvalidSpecName",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "The name of specification does not match between the current runtime",
                    "and the new runtime."
                  ]
                },
                {
                  "name": "SpecVersionNeedsToIncrease",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "The specification version is not allowed to decrease between the current runtime",
                    "and the new runtime."
                  ]
                },
                {
                  "name": "FailedToExtractRuntimeVersion",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Failed to extract the runtime version from the new runtime.",
                    "",
                    "Either calling `Core_version` or decoding `RuntimeVersion` failed."
                  ]
                },
                {
                  "name": "NonDefaultComposite",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Suicide called when the account has non-default composite data."
                  ]
                },
                {
                  "name": "NonZeroRefCount",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "There is a non-zero reference count preventing the account from being purged."
                  ]
                },
                {
                  "name": "CallFiltered",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "The origin filter prevent the call to be dispatched."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Error for the System pallet"
          ]
        },
        {
          "id": 364,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 365
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 365,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 365,
          "path": [
            "polkadot_primitives",
            "v4",
            "UpgradeRestriction"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Present",
                  "fields": [],
                  "index": 0,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 366,
          "path": [
            "cumulus_pallet_parachain_system",
            "relay_state_snapshot",
            "MessagingStateSnapshot"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "dmq_mqc_head",
                  "typeId": 12,
                  "typeName": "relay_chain::Hash",
                  "docs": []
                },
                {
                  "name": "relay_dispatch_queue_size",
                  "typeId": 367,
                  "typeName": "RelayDispachQueueSize",
                  "docs": []
                },
                {
                  "name": "ingress_channels",
                  "typeId": 368,
                  "typeName": "Vec<(ParaId, AbridgedHrmpChannel)>",
                  "docs": []
                },
                {
                  "name": "egress_channels",
                  "typeId": 368,
                  "typeName": "Vec<(ParaId, AbridgedHrmpChannel)>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 367,
          "path": [
            "cumulus_pallet_parachain_system",
            "relay_state_snapshot",
            "RelayDispachQueueSize"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "remaining_count",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "remaining_size",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 368,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 369
            }
          },
          "docs": []
        },
        {
          "id": 369,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                100,
                370
              ]
            }
          },
          "docs": []
        },
        {
          "id": 370,
          "path": [
            "polkadot_primitives",
            "v4",
            "AbridgedHrmpChannel"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "max_capacity",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_total_size",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_message_size",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "msg_count",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "total_size",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "mqc_head",
                  "typeId": 207,
                  "typeName": "Option<Hash>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 371,
          "path": [
            "polkadot_primitives",
            "v4",
            "AbridgedHostConfiguration"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "max_code_size",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_head_data_size",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_upward_queue_count",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_upward_queue_size",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_upward_message_size",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_upward_message_num_per_candidate",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "hrmp_max_message_num_per_candidate",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "validation_upgrade_cooldown",
                  "typeId": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "validation_upgrade_delay",
                  "typeId": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 372,
          "path": [
            "cumulus_primitives_parachain_inherent",
            "MessageQueueChain"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 12,
                  "typeName": "RelayHash",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 373,
          "path": [
            "BTreeMap"
          ],
          "params": [
            {
              "name": "K",
              "typeId": 100
            },
            {
              "name": "V",
              "typeId": 372
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 374,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 374,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 375
            }
          },
          "docs": []
        },
        {
          "id": 375,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                100,
                372
              ]
            }
          },
          "docs": []
        },
        {
          "id": 376,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 377
            }
          },
          "docs": []
        },
        {
          "id": 377,
          "path": [
            "polkadot_core_primitives",
            "OutboundHrmpMessage"
          ],
          "params": [
            {
              "name": "Id",
              "typeId": 100
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "recipient",
                  "typeId": 100,
                  "typeName": "Id",
                  "docs": []
                },
                {
                  "name": "data",
                  "typeId": 14,
                  "typeName": "sp_std::vec::Vec<u8>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 378,
          "path": [
            "cumulus_pallet_parachain_system",
            "CodeUpgradeAuthorization"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "code_hash",
                  "typeId": 12,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": "check_version",
                  "typeId": 37,
                  "typeName": "bool",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 379,
          "path": [
            "cumulus_pallet_parachain_system",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "OverlappingUpgrades",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Attempt to upgrade validation function while existing upgrade pending."
                  ]
                },
                {
                  "name": "ProhibitedByPolkadot",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Polkadot currently prohibits this parachain from upgrading its validation function."
                  ]
                },
                {
                  "name": "TooBig",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "The supplied validation function has compiled into a blob larger than Polkadot is",
                    "willing to run."
                  ]
                },
                {
                  "name": "ValidationDataNotAvailable",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "The inherent which supplies the validation data did not run this block."
                  ]
                },
                {
                  "name": "HostConfigurationNotAvailable",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "The inherent which supplies the host configuration did not run this block."
                  ]
                },
                {
                  "name": "NotScheduled",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "No validation function upgrade is currently scheduled."
                  ]
                },
                {
                  "name": "NothingAuthorized",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "No code upgrade has been authorized."
                  ]
                },
                {
                  "name": "Unauthorized",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "The given code upgrade has not been authorized."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 380,
          "path": [
            "bounded_collections",
            "weak_bounded_vec",
            "WeakBoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 381
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 383,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 381,
          "path": [
            "pallet_balances",
            "types",
            "BalanceLock"
          ],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "id",
                  "typeId": 154,
                  "typeName": "LockIdentifier",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "reasons",
                  "typeId": 382,
                  "typeName": "Reasons",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 382,
          "path": [
            "pallet_balances",
            "types",
            "Reasons"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Fee",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Misc",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "All",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 383,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 381
            }
          },
          "docs": []
        },
        {
          "id": 384,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 385
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 386,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 385,
          "path": [
            "pallet_balances",
            "types",
            "ReserveData"
          ],
          "params": [
            {
              "name": "ReserveIdentifier",
              "typeId": 18
            },
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "id",
                  "typeId": 18,
                  "typeName": "ReserveIdentifier",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 386,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 385
            }
          },
          "docs": []
        },
        {
          "id": 387,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 388
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 389,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 388,
          "path": [
            "pallet_balances",
            "types",
            "IdAmount"
          ],
          "params": [
            {
              "name": "Id",
              "typeId": 53
            },
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "id",
                  "typeId": 53,
                  "typeName": "Id",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 389,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 388
            }
          },
          "docs": []
        },
        {
          "id": 390,
          "path": [
            "pallet_balances",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "VestingBalance",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Vesting balance too high to send value."
                  ]
                },
                {
                  "name": "LiquidityRestrictions",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Account liquidity restrictions prevent withdrawal."
                  ]
                },
                {
                  "name": "InsufficientBalance",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Balance too low to send value."
                  ]
                },
                {
                  "name": "ExistentialDeposit",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Value too low to create account due to existential deposit."
                  ]
                },
                {
                  "name": "Expendability",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "Transfer/payment would kill account."
                  ]
                },
                {
                  "name": "ExistingVestingSchedule",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "A vesting schedule already exists for this account."
                  ]
                },
                {
                  "name": "DeadAccount",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "Beneficiary account must pre-exist."
                  ]
                },
                {
                  "name": "TooManyReserves",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "Number of named reserves exceed `MaxReserves`."
                  ]
                },
                {
                  "name": "TooManyHolds",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "Number of holds exceed `MaxHolds`."
                  ]
                },
                {
                  "name": "TooManyFreezes",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "Number of freezes exceed `MaxFreezes`."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 391,
          "path": [
            "sp_arithmetic",
            "fixed_point",
            "FixedU128"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 6,
                  "typeName": "u128",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 392,
          "path": [
            "pallet_transaction_payment",
            "Releases"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "V1Ancient",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "V2",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 393,
          "path": [
            "pallet_parachain_staking",
            "types",
            "ParachainBondConfig"
          ],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "account",
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "percent",
                  "typeId": 41,
                  "typeName": "Percent",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 394,
          "path": [
            "pallet_parachain_staking",
            "types",
            "RoundInfo"
          ],
          "params": [
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "current",
                  "typeId": 4,
                  "typeName": "RoundIndex",
                  "docs": []
                },
                {
                  "name": "first",
                  "typeId": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "length",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 395,
          "path": [
            "pallet_parachain_staking",
            "types",
            "Delegator"
          ],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "id",
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "delegations",
                  "typeId": 396,
                  "typeName": "OrderedSet<Bond<AccountId, Balance>>",
                  "docs": []
                },
                {
                  "name": "total",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "less_total",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "status",
                  "typeId": 399,
                  "typeName": "DelegatorStatus",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 396,
          "path": [
            "pallet_parachain_staking",
            "set",
            "OrderedSet"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 397
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 398,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 397,
          "path": [
            "pallet_parachain_staking",
            "types",
            "Bond"
          ],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "owner",
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 398,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 397
            }
          },
          "docs": []
        },
        {
          "id": 399,
          "path": [
            "pallet_parachain_staking",
            "types",
            "DelegatorStatus"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Active",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Leaving",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "RoundIndex",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 400,
          "path": [
            "pallet_parachain_staking",
            "types",
            "CandidateMetadata"
          ],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "bond",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "delegation_count",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "total_counted",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "lowest_top_delegation_amount",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "highest_bottom_delegation_amount",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "lowest_bottom_delegation_amount",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "top_capacity",
                  "typeId": 401,
                  "typeName": "CapacityStatus",
                  "docs": []
                },
                {
                  "name": "bottom_capacity",
                  "typeId": 401,
                  "typeName": "CapacityStatus",
                  "docs": []
                },
                {
                  "name": "request",
                  "typeId": 402,
                  "typeName": "Option<CandidateBondLessRequest<Balance>>",
                  "docs": []
                },
                {
                  "name": "status",
                  "typeId": 404,
                  "typeName": "CollatorStatus",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 401,
          "path": [
            "pallet_parachain_staking",
            "types",
            "CapacityStatus"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Full",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Empty",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Partial",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 402,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 403
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 403,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 403,
          "path": [
            "pallet_parachain_staking",
            "types",
            "CandidateBondLessRequest"
          ],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "when_executable",
                  "typeId": 4,
                  "typeName": "RoundIndex",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 404,
          "path": [
            "pallet_parachain_staking",
            "types",
            "CollatorStatus"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Active",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Idle",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Leaving",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "RoundIndex",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 405,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 406
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 407,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 406,
          "path": [
            "pallet_parachain_staking",
            "delegation_requests",
            "ScheduledRequest"
          ],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "delegator",
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "when_executable",
                  "typeId": 4,
                  "typeName": "RoundIndex",
                  "docs": []
                },
                {
                  "name": "action",
                  "typeId": 39,
                  "typeName": "DelegationAction<Balance>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 407,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 406
            }
          },
          "docs": []
        },
        {
          "id": 408,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 409
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 410,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 409,
          "path": [
            "pallet_parachain_staking",
            "auto_compound",
            "AutoCompoundConfig"
          ],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "delegator",
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "value",
                  "typeId": 41,
                  "typeName": "Percent",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 410,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 409
            }
          },
          "docs": []
        },
        {
          "id": 411,
          "path": [
            "pallet_parachain_staking",
            "types",
            "Delegations"
          ],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "delegations",
                  "typeId": 398,
                  "typeName": "Vec<Bond<AccountId, Balance>>",
                  "docs": []
                },
                {
                  "name": "total",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 412,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 0
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 109,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 413,
          "path": [
            "pallet_parachain_staking",
            "set",
            "BoundedOrderedSet"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 397
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 414,
                  "typeName": "BoundedVec<T, S>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 414,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 397
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 398,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 415,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                4,
                0
              ]
            }
          },
          "docs": []
        },
        {
          "id": 416,
          "path": [
            "pallet_parachain_staking",
            "types",
            "CollatorSnapshot"
          ],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "bond",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "delegations",
                  "typeId": 417,
                  "typeName": "Vec<BondWithAutoCompound<AccountId, Balance>>",
                  "docs": []
                },
                {
                  "name": "total",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 417,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 418
            }
          },
          "docs": []
        },
        {
          "id": 418,
          "path": [
            "pallet_parachain_staking",
            "types",
            "BondWithAutoCompound"
          ],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "owner",
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "auto_compound",
                  "typeId": 41,
                  "typeName": "Percent",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 419,
          "path": [
            "pallet_parachain_staking",
            "types",
            "DelayedPayout"
          ],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "round_issuance",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "total_staking_reward",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "collator_commission",
                  "typeId": 42,
                  "typeName": "Perbill",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 420,
          "path": [
            "pallet_parachain_staking",
            "inflation",
            "InflationInfo"
          ],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "expect",
                  "typeId": 111,
                  "typeName": "Range<Balance>",
                  "docs": []
                },
                {
                  "name": "annual",
                  "typeId": 112,
                  "typeName": "Range<Perbill>",
                  "docs": []
                },
                {
                  "name": "round",
                  "typeId": 112,
                  "typeName": "Range<Perbill>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 421,
          "path": [
            "pallet_parachain_staking",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "DelegatorDNE",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "DelegatorDNEinTopNorBottom",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "DelegatorDNEInDelegatorSet",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "CandidateDNE",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "DelegationDNE",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "DelegatorExists",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "CandidateExists",
                  "fields": [],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "CandidateBondBelowMin",
                  "fields": [],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "InsufficientBalance",
                  "fields": [],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "DelegatorBondBelowMin",
                  "fields": [],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "DelegationBelowMin",
                  "fields": [],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "AlreadyOffline",
                  "fields": [],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "AlreadyActive",
                  "fields": [],
                  "index": 12,
                  "docs": []
                },
                {
                  "name": "DelegatorAlreadyLeaving",
                  "fields": [],
                  "index": 13,
                  "docs": []
                },
                {
                  "name": "DelegatorNotLeaving",
                  "fields": [],
                  "index": 14,
                  "docs": []
                },
                {
                  "name": "DelegatorCannotLeaveYet",
                  "fields": [],
                  "index": 15,
                  "docs": []
                },
                {
                  "name": "CannotDelegateIfLeaving",
                  "fields": [],
                  "index": 16,
                  "docs": []
                },
                {
                  "name": "CandidateAlreadyLeaving",
                  "fields": [],
                  "index": 17,
                  "docs": []
                },
                {
                  "name": "CandidateNotLeaving",
                  "fields": [],
                  "index": 18,
                  "docs": []
                },
                {
                  "name": "CandidateCannotLeaveYet",
                  "fields": [],
                  "index": 19,
                  "docs": []
                },
                {
                  "name": "CannotGoOnlineIfLeaving",
                  "fields": [],
                  "index": 20,
                  "docs": []
                },
                {
                  "name": "ExceedMaxDelegationsPerDelegator",
                  "fields": [],
                  "index": 21,
                  "docs": []
                },
                {
                  "name": "AlreadyDelegatedCandidate",
                  "fields": [],
                  "index": 22,
                  "docs": []
                },
                {
                  "name": "InvalidSchedule",
                  "fields": [],
                  "index": 23,
                  "docs": []
                },
                {
                  "name": "CannotSetBelowMin",
                  "fields": [],
                  "index": 24,
                  "docs": []
                },
                {
                  "name": "RoundLengthMustBeGreaterThanTotalSelectedCollators",
                  "fields": [],
                  "index": 25,
                  "docs": []
                },
                {
                  "name": "NoWritingSameValue",
                  "fields": [],
                  "index": 26,
                  "docs": []
                },
                {
                  "name": "TooLowCandidateCountWeightHintJoinCandidates",
                  "fields": [],
                  "index": 27,
                  "docs": []
                },
                {
                  "name": "TooLowCandidateCountWeightHintCancelLeaveCandidates",
                  "fields": [],
                  "index": 28,
                  "docs": []
                },
                {
                  "name": "TooLowCandidateCountToLeaveCandidates",
                  "fields": [],
                  "index": 29,
                  "docs": []
                },
                {
                  "name": "TooLowDelegationCountToDelegate",
                  "fields": [],
                  "index": 30,
                  "docs": []
                },
                {
                  "name": "TooLowCandidateDelegationCountToDelegate",
                  "fields": [],
                  "index": 31,
                  "docs": []
                },
                {
                  "name": "TooLowCandidateDelegationCountToLeaveCandidates",
                  "fields": [],
                  "index": 32,
                  "docs": []
                },
                {
                  "name": "TooLowDelegationCountToLeaveDelegators",
                  "fields": [],
                  "index": 33,
                  "docs": []
                },
                {
                  "name": "PendingCandidateRequestsDNE",
                  "fields": [],
                  "index": 34,
                  "docs": []
                },
                {
                  "name": "PendingCandidateRequestAlreadyExists",
                  "fields": [],
                  "index": 35,
                  "docs": []
                },
                {
                  "name": "PendingCandidateRequestNotDueYet",
                  "fields": [],
                  "index": 36,
                  "docs": []
                },
                {
                  "name": "PendingDelegationRequestDNE",
                  "fields": [],
                  "index": 37,
                  "docs": []
                },
                {
                  "name": "PendingDelegationRequestAlreadyExists",
                  "fields": [],
                  "index": 38,
                  "docs": []
                },
                {
                  "name": "PendingDelegationRequestNotDueYet",
                  "fields": [],
                  "index": 39,
                  "docs": []
                },
                {
                  "name": "CannotDelegateLessThanOrEqualToLowestBottomWhenFull",
                  "fields": [],
                  "index": 40,
                  "docs": []
                },
                {
                  "name": "PendingDelegationRevoke",
                  "fields": [],
                  "index": 41,
                  "docs": []
                },
                {
                  "name": "TooLowDelegationCountToAutoCompound",
                  "fields": [],
                  "index": 42,
                  "docs": []
                },
                {
                  "name": "TooLowCandidateAutoCompoundingDelegationCountToAutoCompound",
                  "fields": [],
                  "index": 43,
                  "docs": []
                },
                {
                  "name": "TooLowCandidateAutoCompoundingDelegationCountToDelegate",
                  "fields": [],
                  "index": 44,
                  "docs": []
                },
                {
                  "name": "TooLowCandidateAutoCompoundingDelegationCountToLeaveCandidates",
                  "fields": [],
                  "index": 45,
                  "docs": []
                },
                {
                  "name": "TooLowCandidateCountWeightHint",
                  "fields": [],
                  "index": 46,
                  "docs": []
                },
                {
                  "name": "TooLowCandidateCountWeightHintGoOffline",
                  "fields": [],
                  "index": 47,
                  "docs": []
                },
                {
                  "name": "CandidateLimitReached",
                  "fields": [],
                  "index": 48,
                  "docs": []
                },
                {
                  "name": "CannotSetAboveMaxCandidates",
                  "fields": [],
                  "index": 49,
                  "docs": []
                },
                {
                  "name": "RemovedCall",
                  "fields": [],
                  "index": 50,
                  "docs": []
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 422,
          "path": [
            "pallet_author_inherent",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "AuthorAlreadySet",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Author already set in block."
                  ]
                },
                {
                  "name": "NoAccountId",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "No AccountId was found to be associated with this author"
                  ]
                },
                {
                  "name": "CannotBeAuthor",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "The author in the inherent is not an eligible author."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 423,
          "path": [
            "pallet_author_mapping",
            "pallet",
            "RegistrationInfo"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "account",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "deposit",
                  "typeId": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "keys",
                  "typeId": 48,
                  "typeName": "T::Keys",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 424,
          "path": [
            "pallet_author_mapping",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "AssociationNotFound",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "The association can't be cleared because it is not found."
                  ]
                },
                {
                  "name": "NotYourAssociation",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "The association can't be cleared because it belongs to another account."
                  ]
                },
                {
                  "name": "CannotAffordSecurityDeposit",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "This account cannot set an author because it cannon afford the security deposit"
                  ]
                },
                {
                  "name": "AlreadyAssociated",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "The NimbusId in question is already associated and cannot be overwritten"
                  ]
                },
                {
                  "name": "OldAuthorIdNotFound",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "No existing NimbusId can be found for the account"
                  ]
                },
                {
                  "name": "WrongKeySize",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "Keys have wrong size"
                  ]
                },
                {
                  "name": "DecodeNimbusFailed",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "Failed to decode NimbusId for `set_keys`"
                  ]
                },
                {
                  "name": "DecodeKeysFailed",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "Failed to decode T::Keys for `set_keys`"
                  ]
                }
              ]
            }
          },
          "docs": [
            "An error that can occur while executing the mapping pallet's logic."
          ]
        },
        {
          "id": 425,
          "path": [
            "pallet_moonbeam_orbiters",
            "types",
            "CollatorPoolInfo"
          ],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "orbiters",
                  "typeId": 109,
                  "typeName": "Vec<AccountId>",
                  "docs": []
                },
                {
                  "name": "maybe_current_orbiter",
                  "typeId": 426,
                  "typeName": "Option<CurrentOrbiter<AccountId>>",
                  "docs": []
                },
                {
                  "name": "next_orbiter",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 426,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 427
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 427,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 427,
          "path": [
            "pallet_moonbeam_orbiters",
            "types",
            "CurrentOrbiter"
          ],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "account_id",
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "removed",
                  "typeId": 37,
                  "typeName": "bool",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 428,
          "path": [
            "pallet_moonbeam_orbiters",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "CollatorAlreadyAdded",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "The collator is already added in orbiters program."
                  ]
                },
                {
                  "name": "CollatorNotFound",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "This collator is not in orbiters program."
                  ]
                },
                {
                  "name": "CollatorPoolTooLarge",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "There are already too many orbiters associated with this collator."
                  ]
                },
                {
                  "name": "CollatorsPoolCountTooLow",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "There are more collator pools than the number specified in the parameter."
                  ]
                },
                {
                  "name": "MinOrbiterDepositNotSet",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "The minimum deposit required to register as an orbiter has not yet been included in the",
                    "onchain storage"
                  ]
                },
                {
                  "name": "OrbiterAlreadyInPool",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "This orbiter is already associated with this collator."
                  ]
                },
                {
                  "name": "OrbiterDepositNotFound",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "This orbiter has not made a deposit"
                  ]
                },
                {
                  "name": "OrbiterNotFound",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "This orbiter is not found"
                  ]
                },
                {
                  "name": "OrbiterStillInAPool",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "The orbiter is still at least in one pool"
                  ]
                }
              ]
            }
          },
          "docs": [
            "An error that can occur while executing this pallet's extrinsics."
          ]
        },
        {
          "id": 429,
          "path": [
            "pallet_utility",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "TooManyCalls",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Too many calls batched."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 430,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                431,
                6
              ]
            }
          },
          "docs": []
        },
        {
          "id": 431,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 432
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 433,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 432,
          "path": [
            "pallet_proxy",
            "ProxyDefinition"
          ],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "ProxyType",
              "typeId": 55
            },
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "delegate",
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "proxy_type",
                  "typeId": 55,
                  "typeName": "ProxyType",
                  "docs": []
                },
                {
                  "name": "delay",
                  "typeId": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 433,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 432
            }
          },
          "docs": []
        },
        {
          "id": 434,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                435,
                6
              ]
            }
          },
          "docs": []
        },
        {
          "id": 435,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 436
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 437,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 436,
          "path": [
            "pallet_proxy",
            "Announcement"
          ],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "Hash",
              "typeId": 12
            },
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "real",
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "typeId": 12,
                  "typeName": "Hash",
                  "docs": []
                },
                {
                  "name": "height",
                  "typeId": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 437,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 436
            }
          },
          "docs": []
        },
        {
          "id": 438,
          "path": [
            "pallet_proxy",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "TooMany",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "There are too many proxies registered or too many announcements pending."
                  ]
                },
                {
                  "name": "NotFound",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Proxy registration not found."
                  ]
                },
                {
                  "name": "NotProxy",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Sender is not a proxy of the account to be proxied."
                  ]
                },
                {
                  "name": "Unproxyable",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "A call which is incompatible with the proxy type's filter was attempted."
                  ]
                },
                {
                  "name": "Duplicate",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "Account is already a proxy."
                  ]
                },
                {
                  "name": "NoPermission",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "Call may not be made by proxy because it may escalate its privileges."
                  ]
                },
                {
                  "name": "Unannounced",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "Announcement, if made at all, was made too recently."
                  ]
                },
                {
                  "name": "NoSelfProxy",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "Cannot add self as proxy."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 439,
          "path": [
            "pallet_maintenance_mode",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "AlreadyInMaintenanceMode",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "The chain cannot enter maintenance mode because it is already in maintenance mode"
                  ]
                },
                {
                  "name": "NotInMaintenanceMode",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "The chain cannot resume normal operation because it is not in maintenance mode"
                  ]
                }
              ]
            }
          },
          "docs": [
            "An error that can occur while executing this pallet's extrinsics."
          ]
        },
        {
          "id": 440,
          "path": [
            "pallet_identity",
            "types",
            "Registration"
          ],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            },
            {
              "name": "MaxJudgements"
            },
            {
              "name": "MaxAdditionalFields"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "judgements",
                  "typeId": 441,
                  "typeName": "BoundedVec<(RegistrarIndex, Judgement<Balance>), MaxJudgements>",
                  "docs": []
                },
                {
                  "name": "deposit",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "info",
                  "typeId": 143,
                  "typeName": "IdentityInfo<MaxAdditionalFields>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 441,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 442
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 443,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 442,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                4,
                183
              ]
            }
          },
          "docs": []
        },
        {
          "id": 443,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 442
            }
          },
          "docs": []
        },
        {
          "id": 444,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                6,
                445
              ]
            }
          },
          "docs": []
        },
        {
          "id": 445,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 0
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 109,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 446,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 447
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 449,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 447,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 448
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 448,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 448,
          "path": [
            "pallet_identity",
            "types",
            "RegistrarInfo"
          ],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            },
            {
              "name": "AccountId",
              "typeId": 0
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "account",
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "fee",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "fields",
                  "typeId": 181,
                  "typeName": "IdentityFields",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 449,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 447
            }
          },
          "docs": []
        },
        {
          "id": 450,
          "path": [
            "pallet_identity",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "TooManySubAccounts",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Too many subs-accounts."
                  ]
                },
                {
                  "name": "NotFound",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Account isn't found."
                  ]
                },
                {
                  "name": "NotNamed",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Account isn't named."
                  ]
                },
                {
                  "name": "EmptyIndex",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Empty index."
                  ]
                },
                {
                  "name": "FeeChanged",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "Fee is changed."
                  ]
                },
                {
                  "name": "NoIdentity",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "No identity found."
                  ]
                },
                {
                  "name": "StickyJudgement",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "Sticky judgement."
                  ]
                },
                {
                  "name": "JudgementGiven",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "Judgement given."
                  ]
                },
                {
                  "name": "InvalidJudgement",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "Invalid judgement."
                  ]
                },
                {
                  "name": "InvalidIndex",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "The index is invalid."
                  ]
                },
                {
                  "name": "InvalidTarget",
                  "fields": [],
                  "index": 10,
                  "docs": [
                    "The target is invalid."
                  ]
                },
                {
                  "name": "TooManyFields",
                  "fields": [],
                  "index": 11,
                  "docs": [
                    "Too many additional fields."
                  ]
                },
                {
                  "name": "TooManyRegistrars",
                  "fields": [],
                  "index": 12,
                  "docs": [
                    "Maximum amount of registrars reached. Cannot add any more."
                  ]
                },
                {
                  "name": "AlreadyClaimed",
                  "fields": [],
                  "index": 13,
                  "docs": [
                    "Account ID is already named."
                  ]
                },
                {
                  "name": "NotSub",
                  "fields": [],
                  "index": 14,
                  "docs": [
                    "Sender is not a sub-account."
                  ]
                },
                {
                  "name": "NotOwned",
                  "fields": [],
                  "index": 15,
                  "docs": [
                    "Sub-account isn't owned by sender."
                  ]
                },
                {
                  "name": "JudgementForDifferentIdentity",
                  "fields": [],
                  "index": 16,
                  "docs": [
                    "The provided judgement was for a different identity."
                  ]
                },
                {
                  "name": "JudgementPaymentFailed",
                  "fields": [],
                  "index": 17,
                  "docs": [
                    "Error that occurs when there is an issue paying for judgement."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 451,
          "path": [
            "pallet_migrations",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "PreimageMissing",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Missing preimage in original democracy storage"
                  ]
                },
                {
                  "name": "WrongUpperBound",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Provided upper bound is too low."
                  ]
                },
                {
                  "name": "PreimageIsTooBig",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Preimage is larger than the new max size."
                  ]
                },
                {
                  "name": "PreimageAlreadyExists",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Preimage already exists in the new storage."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 452,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                0,
                13
              ]
            }
          },
          "docs": []
        },
        {
          "id": 453,
          "path": [
            "pallet_multisig",
            "Multisig"
          ],
          "params": [
            {
              "name": "BlockNumber",
              "typeId": 4
            },
            {
              "name": "Balance",
              "typeId": 6
            },
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "MaxApprovals"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "when",
                  "typeId": 61,
                  "typeName": "Timepoint<BlockNumber>",
                  "docs": []
                },
                {
                  "name": "deposit",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "depositor",
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "approvals",
                  "typeId": 454,
                  "typeName": "BoundedVec<AccountId, MaxApprovals>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 454,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 0
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 109,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 455,
          "path": [
            "pallet_multisig",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "MinimumThreshold",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Threshold must be 2 or greater."
                  ]
                },
                {
                  "name": "AlreadyApproved",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Call is already approved by this signatory."
                  ]
                },
                {
                  "name": "NoApprovalsNeeded",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Call doesn't need any (more) approvals."
                  ]
                },
                {
                  "name": "TooFewSignatories",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "There are too few signatories in the list."
                  ]
                },
                {
                  "name": "TooManySignatories",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "There are too many signatories in the list."
                  ]
                },
                {
                  "name": "SignatoriesOutOfOrder",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "The signatories were provided out of order; they should be ordered."
                  ]
                },
                {
                  "name": "SenderInSignatories",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "The sender was contained in the other signatories; it shouldn't be."
                  ]
                },
                {
                  "name": "NotFound",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "Multisig operation not found when attempting to cancel."
                  ]
                },
                {
                  "name": "NotOwner",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "Only the account that originally created the multisig is able to cancel it."
                  ]
                },
                {
                  "name": "NoTimepoint",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "No timepoint was given, yet the multisig operation is already underway."
                  ]
                },
                {
                  "name": "WrongTimepoint",
                  "fields": [],
                  "index": 10,
                  "docs": [
                    "A different timepoint was given to the multisig operation that is underway."
                  ]
                },
                {
                  "name": "UnexpectedTimepoint",
                  "fields": [],
                  "index": 11,
                  "docs": [
                    "A timepoint was given, yet no multisig operation is underway."
                  ]
                },
                {
                  "name": "MaxWeightTooLow",
                  "fields": [],
                  "index": 12,
                  "docs": [
                    "The maximum weight information provided was too low."
                  ]
                },
                {
                  "name": "AlreadyStored",
                  "fields": [],
                  "index": 13,
                  "docs": [
                    "The data to be stored is already stored."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 456,
          "path": [
            "pallet_evm",
            "CodeMetadata"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "size",
                  "typeId": 11,
                  "typeName": "u64",
                  "docs": []
                },
                {
                  "name": "hash",
                  "typeId": 12,
                  "typeName": "H256",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 457,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                64,
                12
              ]
            }
          },
          "docs": []
        },
        {
          "id": 458,
          "path": [
            "pallet_evm",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "BalanceLow",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Not enough balance to perform action"
                  ]
                },
                {
                  "name": "FeeOverflow",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Calculating total fee overflowed"
                  ]
                },
                {
                  "name": "PaymentOverflow",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Calculating total payment overflowed"
                  ]
                },
                {
                  "name": "WithdrawFailed",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Withdraw fee failed"
                  ]
                },
                {
                  "name": "GasPriceTooLow",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "Gas price is too low."
                  ]
                },
                {
                  "name": "InvalidNonce",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "Nonce is invalid"
                  ]
                },
                {
                  "name": "GasLimitTooLow",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "Gas limit is too low."
                  ]
                },
                {
                  "name": "GasLimitTooHigh",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "Gas limit is too high."
                  ]
                },
                {
                  "name": "Undefined",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "Undefined error."
                  ]
                },
                {
                  "name": "Reentrancy",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "EVM reentrancy"
                  ]
                },
                {
                  "name": "TransactionMustComeFromEOA",
                  "fields": [],
                  "index": 10,
                  "docs": [
                    "EIP-3607,"
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 459,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 460
            }
          },
          "docs": []
        },
        {
          "id": 460,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                193,
                461,
                466
              ]
            }
          },
          "docs": []
        },
        {
          "id": 461,
          "path": [
            "fp_rpc",
            "TransactionStatus"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "transaction_hash",
                  "typeId": 12,
                  "typeName": "H256",
                  "docs": []
                },
                {
                  "name": "transaction_index",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "from",
                  "typeId": 64,
                  "typeName": "H160",
                  "docs": []
                },
                {
                  "name": "to",
                  "typeId": 462,
                  "typeName": "Option<H160>",
                  "docs": []
                },
                {
                  "name": "contract_address",
                  "typeId": 462,
                  "typeName": "Option<H160>",
                  "docs": []
                },
                {
                  "name": "logs",
                  "typeId": 463,
                  "typeName": "Vec<Log>",
                  "docs": []
                },
                {
                  "name": "logs_bloom",
                  "typeId": 464,
                  "typeName": "Bloom",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 462,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 64
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 64,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 463,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 63
            }
          },
          "docs": []
        },
        {
          "id": 464,
          "path": [
            "ethbloom",
            "Bloom"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 465,
                  "typeName": "[u8; BLOOM_SIZE]",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 465,
          "path": [],
          "params": [],
          "type": {
            "tag": "SizedVec",
            "value": {
              "len": 256,
              "typeParam": 2
            }
          },
          "docs": []
        },
        {
          "id": 466,
          "path": [
            "ethereum",
            "receipt",
            "ReceiptV3"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Legacy",
                  "fields": [
                    {
                      "typeId": 467,
                      "typeName": "EIP658ReceiptData",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "EIP2930",
                  "fields": [
                    {
                      "typeId": 467,
                      "typeName": "EIP2930ReceiptData",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "EIP1559",
                  "fields": [
                    {
                      "typeId": 467,
                      "typeName": "EIP1559ReceiptData",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 467,
          "path": [
            "ethereum",
            "receipt",
            "EIP658ReceiptData"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "status_code",
                  "typeId": 2,
                  "typeName": "u8",
                  "docs": []
                },
                {
                  "name": "used_gas",
                  "typeId": 187,
                  "typeName": "U256",
                  "docs": []
                },
                {
                  "name": "logs_bloom",
                  "typeId": 464,
                  "typeName": "Bloom",
                  "docs": []
                },
                {
                  "name": "logs",
                  "typeId": 463,
                  "typeName": "Vec<Log>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 468,
          "path": [
            "ethereum",
            "block",
            "Block"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 193
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "header",
                  "typeId": 469,
                  "typeName": "Header",
                  "docs": []
                },
                {
                  "name": "transactions",
                  "typeId": 471,
                  "typeName": "Vec<T>",
                  "docs": []
                },
                {
                  "name": "ommers",
                  "typeId": 472,
                  "typeName": "Vec<Header>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 469,
          "path": [
            "ethereum",
            "header",
            "Header"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "parent_hash",
                  "typeId": 12,
                  "typeName": "H256",
                  "docs": []
                },
                {
                  "name": "ommers_hash",
                  "typeId": 12,
                  "typeName": "H256",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "typeId": 64,
                  "typeName": "H160",
                  "docs": []
                },
                {
                  "name": "state_root",
                  "typeId": 12,
                  "typeName": "H256",
                  "docs": []
                },
                {
                  "name": "transactions_root",
                  "typeId": 12,
                  "typeName": "H256",
                  "docs": []
                },
                {
                  "name": "receipts_root",
                  "typeId": 12,
                  "typeName": "H256",
                  "docs": []
                },
                {
                  "name": "logs_bloom",
                  "typeId": 464,
                  "typeName": "Bloom",
                  "docs": []
                },
                {
                  "name": "difficulty",
                  "typeId": 187,
                  "typeName": "U256",
                  "docs": []
                },
                {
                  "name": "number",
                  "typeId": 187,
                  "typeName": "U256",
                  "docs": []
                },
                {
                  "name": "gas_limit",
                  "typeId": 187,
                  "typeName": "U256",
                  "docs": []
                },
                {
                  "name": "gas_used",
                  "typeId": 187,
                  "typeName": "U256",
                  "docs": []
                },
                {
                  "name": "timestamp",
                  "typeId": 11,
                  "typeName": "u64",
                  "docs": []
                },
                {
                  "name": "extra_data",
                  "typeId": 14,
                  "typeName": "Bytes",
                  "docs": []
                },
                {
                  "name": "mix_hash",
                  "typeId": 12,
                  "typeName": "H256",
                  "docs": []
                },
                {
                  "name": "nonce",
                  "typeId": 470,
                  "typeName": "H64",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 470,
          "path": [
            "ethereum_types",
            "hash",
            "H64"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 154,
                  "typeName": "[u8; 8]",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 471,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 193
            }
          },
          "docs": []
        },
        {
          "id": 472,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 469
            }
          },
          "docs": []
        },
        {
          "id": 473,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 466
            }
          },
          "docs": []
        },
        {
          "id": 474,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 461
            }
          },
          "docs": []
        },
        {
          "id": 475,
          "path": [
            "pallet_ethereum",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "InvalidSignature",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Signature is invalid."
                  ]
                },
                {
                  "name": "PreLogExists",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Pre-log is present, therefore transact is not allowed."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 476,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 477
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 479,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 477,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 478
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 478,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 478,
          "path": [
            "pallet_scheduler",
            "Scheduled"
          ],
          "params": [
            {
              "name": "Name",
              "typeId": 13
            },
            {
              "name": "Call",
              "typeId": 85
            },
            {
              "name": "BlockNumber",
              "typeId": 4
            },
            {
              "name": "PalletsOrigin",
              "typeId": 119
            },
            {
              "name": "AccountId",
              "typeId": 0
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "maybe_id",
                  "typeId": 32,
                  "typeName": "Option<Name>",
                  "docs": []
                },
                {
                  "name": "priority",
                  "typeId": 2,
                  "typeName": "schedule::Priority",
                  "docs": []
                },
                {
                  "name": "call",
                  "typeId": 85,
                  "typeName": "Call",
                  "docs": []
                },
                {
                  "name": "maybe_periodic",
                  "typeId": 203,
                  "typeName": "Option<schedule::Period<BlockNumber>>",
                  "docs": []
                },
                {
                  "name": "origin",
                  "typeId": 119,
                  "typeName": "PalletsOrigin",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 479,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 477
            }
          },
          "docs": []
        },
        {
          "id": 480,
          "path": [
            "pallet_scheduler",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "FailedToSchedule",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Failed to schedule a call"
                  ]
                },
                {
                  "name": "NotFound",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Cannot find the scheduled call."
                  ]
                },
                {
                  "name": "TargetBlockNumberInPast",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Given target block number is in the past."
                  ]
                },
                {
                  "name": "RescheduleNoChange",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Reschedule failed because it does not change scheduled time."
                  ]
                },
                {
                  "name": "Named",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "Attempt to use a non-named function on a named task."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 481,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 482
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 483,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 482,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                4,
                85,
                0
              ]
            }
          },
          "docs": []
        },
        {
          "id": 483,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 482
            }
          },
          "docs": []
        },
        {
          "id": 484,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                445,
                6
              ]
            }
          },
          "docs": []
        },
        {
          "id": 485,
          "path": [
            "pallet_democracy",
            "types",
            "ReferendumInfo"
          ],
          "params": [
            {
              "name": "BlockNumber",
              "typeId": 4
            },
            {
              "name": "Proposal",
              "typeId": 85
            },
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Ongoing",
                  "fields": [
                    {
                      "typeId": 486,
                      "typeName": "ReferendumStatus<BlockNumber, Proposal, Balance>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Finished",
                  "fields": [
                    {
                      "name": "approved",
                      "typeId": 37,
                      "typeName": "bool",
                      "docs": []
                    },
                    {
                      "name": "end",
                      "typeId": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 486,
          "path": [
            "pallet_democracy",
            "types",
            "ReferendumStatus"
          ],
          "params": [
            {
              "name": "BlockNumber",
              "typeId": 4
            },
            {
              "name": "Proposal",
              "typeId": 85
            },
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "end",
                  "typeId": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "proposal",
                  "typeId": 85,
                  "typeName": "Proposal",
                  "docs": []
                },
                {
                  "name": "threshold",
                  "typeId": 78,
                  "typeName": "VoteThreshold",
                  "docs": []
                },
                {
                  "name": "delay",
                  "typeId": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "tally",
                  "typeId": 487,
                  "typeName": "Tally<Balance>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 487,
          "path": [
            "pallet_democracy",
            "types",
            "Tally"
          ],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "ayes",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "nays",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "turnout",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 488,
          "path": [
            "pallet_democracy",
            "vote",
            "Voting"
          ],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            },
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "BlockNumber",
              "typeId": 4
            },
            {
              "name": "MaxVotes"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Direct",
                  "fields": [
                    {
                      "name": "votes",
                      "typeId": 489,
                      "typeName": "BoundedVec<(ReferendumIndex, AccountVote<Balance>), MaxVotes>",
                      "docs": []
                    },
                    {
                      "name": "delegations",
                      "typeId": 492,
                      "typeName": "Delegations<Balance>",
                      "docs": []
                    },
                    {
                      "name": "prior",
                      "typeId": 493,
                      "typeName": "PriorLock<BlockNumber, Balance>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Delegating",
                  "fields": [
                    {
                      "name": "balance",
                      "typeId": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "target",
                      "typeId": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "conviction",
                      "typeId": 205,
                      "typeName": "Conviction",
                      "docs": []
                    },
                    {
                      "name": "delegations",
                      "typeId": 492,
                      "typeName": "Delegations<Balance>",
                      "docs": []
                    },
                    {
                      "name": "prior",
                      "typeId": 493,
                      "typeName": "PriorLock<BlockNumber, Balance>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 489,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 490
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 491,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 490,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                4,
                79
              ]
            }
          },
          "docs": []
        },
        {
          "id": 491,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 490
            }
          },
          "docs": []
        },
        {
          "id": 492,
          "path": [
            "pallet_democracy",
            "types",
            "Delegations"
          ],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "votes",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "capital",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 493,
          "path": [
            "pallet_democracy",
            "vote",
            "PriorLock"
          ],
          "params": [
            {
              "name": "BlockNumber",
              "typeId": 4
            },
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 494,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                85,
                78
              ]
            }
          },
          "docs": []
        },
        {
          "id": 495,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                4,
                445
              ]
            }
          },
          "docs": []
        },
        {
          "id": 496,
          "path": [
            "pallet_democracy",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "ValueLow",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Value too low"
                  ]
                },
                {
                  "name": "ProposalMissing",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Proposal does not exist"
                  ]
                },
                {
                  "name": "AlreadyCanceled",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Cannot cancel the same proposal twice"
                  ]
                },
                {
                  "name": "DuplicateProposal",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Proposal already made"
                  ]
                },
                {
                  "name": "ProposalBlacklisted",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "Proposal still blacklisted"
                  ]
                },
                {
                  "name": "NotSimpleMajority",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "Next external proposal not simple majority"
                  ]
                },
                {
                  "name": "InvalidHash",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "Invalid hash"
                  ]
                },
                {
                  "name": "NoProposal",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "No external proposal"
                  ]
                },
                {
                  "name": "AlreadyVetoed",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "Identity may not veto a proposal twice"
                  ]
                },
                {
                  "name": "ReferendumInvalid",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "Vote given for invalid referendum"
                  ]
                },
                {
                  "name": "NoneWaiting",
                  "fields": [],
                  "index": 10,
                  "docs": [
                    "No proposals waiting"
                  ]
                },
                {
                  "name": "NotVoter",
                  "fields": [],
                  "index": 11,
                  "docs": [
                    "The given account did not vote on the referendum."
                  ]
                },
                {
                  "name": "NoPermission",
                  "fields": [],
                  "index": 12,
                  "docs": [
                    "The actor has no permission to conduct the action."
                  ]
                },
                {
                  "name": "AlreadyDelegating",
                  "fields": [],
                  "index": 13,
                  "docs": [
                    "The account is already delegating."
                  ]
                },
                {
                  "name": "InsufficientFunds",
                  "fields": [],
                  "index": 14,
                  "docs": [
                    "Too high a balance was provided that the account cannot afford."
                  ]
                },
                {
                  "name": "NotDelegating",
                  "fields": [],
                  "index": 15,
                  "docs": [
                    "The account is not currently delegating."
                  ]
                },
                {
                  "name": "VotesExist",
                  "fields": [],
                  "index": 16,
                  "docs": [
                    "The account currently has votes attached to it and the operation cannot succeed until",
                    "these are removed, either through `unvote` or `reap_vote`."
                  ]
                },
                {
                  "name": "InstantNotAllowed",
                  "fields": [],
                  "index": 17,
                  "docs": [
                    "The instant referendum origin is currently disallowed."
                  ]
                },
                {
                  "name": "Nonsense",
                  "fields": [],
                  "index": 18,
                  "docs": [
                    "Delegation to oneself makes no sense."
                  ]
                },
                {
                  "name": "WrongUpperBound",
                  "fields": [],
                  "index": 19,
                  "docs": [
                    "Invalid upper bound."
                  ]
                },
                {
                  "name": "MaxVotesReached",
                  "fields": [],
                  "index": 20,
                  "docs": [
                    "Maximum number of votes reached."
                  ]
                },
                {
                  "name": "TooMany",
                  "fields": [],
                  "index": 21,
                  "docs": [
                    "Maximum number of items reached."
                  ]
                },
                {
                  "name": "VotingPeriodLow",
                  "fields": [],
                  "index": 22,
                  "docs": [
                    "Voting period too low"
                  ]
                },
                {
                  "name": "PreimageNotExist",
                  "fields": [],
                  "index": 23,
                  "docs": [
                    "The preimage does not exist."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 497,
          "path": [
            "pallet_preimage",
            "RequestStatus"
          ],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Unrequested",
                  "fields": [
                    {
                      "name": "deposit",
                      "typeId": 498,
                      "typeName": "(AccountId, Balance)",
                      "docs": []
                    },
                    {
                      "name": "len",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Requested",
                  "fields": [
                    {
                      "name": "deposit",
                      "typeId": 499,
                      "typeName": "Option<(AccountId, Balance)>",
                      "docs": []
                    },
                    {
                      "name": "count",
                      "typeId": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "len",
                      "typeId": 206,
                      "typeName": "Option<u32>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 498,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                0,
                6
              ]
            }
          },
          "docs": []
        },
        {
          "id": 499,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 498
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 498,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 500,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                12,
                4
              ]
            }
          },
          "docs": []
        },
        {
          "id": 501,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 2
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 14,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 502,
          "path": [
            "pallet_preimage",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "TooBig",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Preimage is too large to store on-chain."
                  ]
                },
                {
                  "name": "AlreadyNoted",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Preimage has already been noted on-chain."
                  ]
                },
                {
                  "name": "NotAuthorized",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "The user is not authorized to perform this action."
                  ]
                },
                {
                  "name": "NotNoted",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "The preimage cannot be removed since it has not yet been noted."
                  ]
                },
                {
                  "name": "Requested",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "A preimage may not be removed when there are outstanding requests."
                  ]
                },
                {
                  "name": "NotRequested",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "The preimage request cannot be removed since no outstanding requests exist."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 503,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                0,
                56
              ]
            }
          },
          "docs": []
        },
        {
          "id": 504,
          "path": [
            "pallet_conviction_voting",
            "vote",
            "Voting"
          ],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            },
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "BlockNumber",
              "typeId": 4
            },
            {
              "name": "PollIndex",
              "typeId": 4
            },
            {
              "name": "MaxVotes"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Casting",
                  "fields": [
                    {
                      "typeId": 505,
                      "typeName": "Casting<Balance, BlockNumber, PollIndex, MaxVotes>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Delegating",
                  "fields": [
                    {
                      "typeId": 511,
                      "typeName": "Delegating<Balance, AccountId, BlockNumber>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 505,
          "path": [
            "pallet_conviction_voting",
            "vote",
            "Casting"
          ],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            },
            {
              "name": "BlockNumber",
              "typeId": 4
            },
            {
              "name": "PollIndex",
              "typeId": 4
            },
            {
              "name": "MaxVotes"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "votes",
                  "typeId": 506,
                  "typeName": "BoundedVec<(PollIndex, AccountVote<Balance>), MaxVotes>",
                  "docs": []
                },
                {
                  "name": "delegations",
                  "typeId": 509,
                  "typeName": "Delegations<Balance>",
                  "docs": []
                },
                {
                  "name": "prior",
                  "typeId": 510,
                  "typeName": "PriorLock<BlockNumber, Balance>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 506,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 507
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 508,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 507,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                4,
                210
              ]
            }
          },
          "docs": []
        },
        {
          "id": 508,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 507
            }
          },
          "docs": []
        },
        {
          "id": 509,
          "path": [
            "pallet_conviction_voting",
            "types",
            "Delegations"
          ],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "votes",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "capital",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 510,
          "path": [
            "pallet_conviction_voting",
            "vote",
            "PriorLock"
          ],
          "params": [
            {
              "name": "BlockNumber",
              "typeId": 4
            },
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 511,
          "path": [
            "pallet_conviction_voting",
            "vote",
            "Delegating"
          ],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            },
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "balance",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "target",
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "conviction",
                  "typeId": 212,
                  "typeName": "Conviction",
                  "docs": []
                },
                {
                  "name": "delegations",
                  "typeId": 509,
                  "typeName": "Delegations<Balance>",
                  "docs": []
                },
                {
                  "name": "prior",
                  "typeId": 510,
                  "typeName": "PriorLock<BlockNumber, Balance>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 512,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 513
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 514,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 513,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                56,
                6
              ]
            }
          },
          "docs": []
        },
        {
          "id": 514,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 513
            }
          },
          "docs": []
        },
        {
          "id": 515,
          "path": [
            "pallet_conviction_voting",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "NotOngoing",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Poll is not ongoing."
                  ]
                },
                {
                  "name": "NotVoter",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "The given account did not vote on the poll."
                  ]
                },
                {
                  "name": "NoPermission",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "The actor has no permission to conduct the action."
                  ]
                },
                {
                  "name": "NoPermissionYet",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "The actor has no permission to conduct the action right now but will do in the future."
                  ]
                },
                {
                  "name": "AlreadyDelegating",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "The account is already delegating."
                  ]
                },
                {
                  "name": "AlreadyVoting",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "The account currently has votes attached to it and the operation cannot succeed until",
                    "these are removed, either through `unvote` or `reap_vote`."
                  ]
                },
                {
                  "name": "InsufficientFunds",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "Too high a balance was provided that the account cannot afford."
                  ]
                },
                {
                  "name": "NotDelegating",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "The account is not currently delegating."
                  ]
                },
                {
                  "name": "Nonsense",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "Delegation to oneself makes no sense."
                  ]
                },
                {
                  "name": "MaxVotesReached",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "Maximum number of votes reached."
                  ]
                },
                {
                  "name": "ClassNeeded",
                  "fields": [],
                  "index": 10,
                  "docs": [
                    "The class must be supplied since it is not easily determinable from the state."
                  ]
                },
                {
                  "name": "BadClass",
                  "fields": [],
                  "index": 11,
                  "docs": [
                    "The class ID supplied is invalid."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 516,
          "path": [
            "pallet_referenda",
            "types",
            "ReferendumInfo"
          ],
          "params": [
            {
              "name": "TrackId",
              "typeId": 56
            },
            {
              "name": "RuntimeOrigin",
              "typeId": 119
            },
            {
              "name": "Moment",
              "typeId": 4
            },
            {
              "name": "Call",
              "typeId": 85
            },
            {
              "name": "Balance",
              "typeId": 6
            },
            {
              "name": "Tally",
              "typeId": 327
            },
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "ScheduleAddress",
              "typeId": 76
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Ongoing",
                  "fields": [
                    {
                      "typeId": 517,
                      "typeName": "ReferendumStatus<TrackId, RuntimeOrigin, Moment, Call, Balance, Tally,\nAccountId, ScheduleAddress,>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Approved",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "Moment",
                      "docs": []
                    },
                    {
                      "typeId": 519,
                      "typeName": "Option<Deposit<AccountId, Balance>>",
                      "docs": []
                    },
                    {
                      "typeId": 519,
                      "typeName": "Option<Deposit<AccountId, Balance>>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Rejected",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "Moment",
                      "docs": []
                    },
                    {
                      "typeId": 519,
                      "typeName": "Option<Deposit<AccountId, Balance>>",
                      "docs": []
                    },
                    {
                      "typeId": 519,
                      "typeName": "Option<Deposit<AccountId, Balance>>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Cancelled",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "Moment",
                      "docs": []
                    },
                    {
                      "typeId": 519,
                      "typeName": "Option<Deposit<AccountId, Balance>>",
                      "docs": []
                    },
                    {
                      "typeId": 519,
                      "typeName": "Option<Deposit<AccountId, Balance>>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "TimedOut",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "Moment",
                      "docs": []
                    },
                    {
                      "typeId": 519,
                      "typeName": "Option<Deposit<AccountId, Balance>>",
                      "docs": []
                    },
                    {
                      "typeId": 519,
                      "typeName": "Option<Deposit<AccountId, Balance>>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Killed",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "Moment",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 517,
          "path": [
            "pallet_referenda",
            "types",
            "ReferendumStatus"
          ],
          "params": [
            {
              "name": "TrackId",
              "typeId": 56
            },
            {
              "name": "RuntimeOrigin",
              "typeId": 119
            },
            {
              "name": "Moment",
              "typeId": 4
            },
            {
              "name": "Call",
              "typeId": 85
            },
            {
              "name": "Balance",
              "typeId": 6
            },
            {
              "name": "Tally",
              "typeId": 327
            },
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "ScheduleAddress",
              "typeId": 76
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "track",
                  "typeId": 56,
                  "typeName": "TrackId",
                  "docs": []
                },
                {
                  "name": "origin",
                  "typeId": 119,
                  "typeName": "RuntimeOrigin",
                  "docs": []
                },
                {
                  "name": "proposal",
                  "typeId": 85,
                  "typeName": "Call",
                  "docs": []
                },
                {
                  "name": "enactment",
                  "typeId": 215,
                  "typeName": "DispatchTime<Moment>",
                  "docs": []
                },
                {
                  "name": "submitted",
                  "typeId": 4,
                  "typeName": "Moment",
                  "docs": []
                },
                {
                  "name": "submission_deposit",
                  "typeId": 518,
                  "typeName": "Deposit<AccountId, Balance>",
                  "docs": []
                },
                {
                  "name": "decision_deposit",
                  "typeId": 519,
                  "typeName": "Option<Deposit<AccountId, Balance>>",
                  "docs": []
                },
                {
                  "name": "deciding",
                  "typeId": 520,
                  "typeName": "Option<DecidingStatus<Moment>>",
                  "docs": []
                },
                {
                  "name": "tally",
                  "typeId": 327,
                  "typeName": "Tally",
                  "docs": []
                },
                {
                  "name": "in_queue",
                  "typeId": 37,
                  "typeName": "bool",
                  "docs": []
                },
                {
                  "name": "alarm",
                  "typeId": 522,
                  "typeName": "Option<(Moment, ScheduleAddress)>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 518,
          "path": [
            "pallet_referenda",
            "types",
            "Deposit"
          ],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "who",
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 519,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 518
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 518,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 520,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 521
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 521,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 521,
          "path": [
            "pallet_referenda",
            "types",
            "DecidingStatus"
          ],
          "params": [
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "since",
                  "typeId": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "confirming",
                  "typeId": 206,
                  "typeName": "Option<BlockNumber>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 522,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 523
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 523,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 523,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                4,
                76
              ]
            }
          },
          "docs": []
        },
        {
          "id": 524,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 525
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 526,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 525,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                4,
                6
              ]
            }
          },
          "docs": []
        },
        {
          "id": 526,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 525
            }
          },
          "docs": []
        },
        {
          "id": 527,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 528
            }
          },
          "docs": []
        },
        {
          "id": 528,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                56,
                529
              ]
            }
          },
          "docs": []
        },
        {
          "id": 529,
          "path": [
            "pallet_referenda",
            "types",
            "TrackInfo"
          ],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            },
            {
              "name": "Moment",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "name",
                  "typeId": 72,
                  "typeName": "&'static str",
                  "docs": []
                },
                {
                  "name": "max_deciding",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "decision_deposit",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "prepare_period",
                  "typeId": 4,
                  "typeName": "Moment",
                  "docs": []
                },
                {
                  "name": "decision_period",
                  "typeId": 4,
                  "typeName": "Moment",
                  "docs": []
                },
                {
                  "name": "confirm_period",
                  "typeId": 4,
                  "typeName": "Moment",
                  "docs": []
                },
                {
                  "name": "min_enactment_period",
                  "typeId": 4,
                  "typeName": "Moment",
                  "docs": []
                },
                {
                  "name": "min_approval",
                  "typeId": 530,
                  "typeName": "Curve",
                  "docs": []
                },
                {
                  "name": "min_support",
                  "typeId": 530,
                  "typeName": "Curve",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 530,
          "path": [
            "pallet_referenda",
            "types",
            "Curve"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "LinearDecreasing",
                  "fields": [
                    {
                      "name": "length",
                      "typeId": 42,
                      "typeName": "Perbill",
                      "docs": []
                    },
                    {
                      "name": "floor",
                      "typeId": 42,
                      "typeName": "Perbill",
                      "docs": []
                    },
                    {
                      "name": "ceil",
                      "typeId": 42,
                      "typeName": "Perbill",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "SteppedDecreasing",
                  "fields": [
                    {
                      "name": "begin",
                      "typeId": 42,
                      "typeName": "Perbill",
                      "docs": []
                    },
                    {
                      "name": "end",
                      "typeId": 42,
                      "typeName": "Perbill",
                      "docs": []
                    },
                    {
                      "name": "step",
                      "typeId": 42,
                      "typeName": "Perbill",
                      "docs": []
                    },
                    {
                      "name": "period",
                      "typeId": 42,
                      "typeName": "Perbill",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Reciprocal",
                  "fields": [
                    {
                      "name": "factor",
                      "typeId": 531,
                      "typeName": "FixedI64",
                      "docs": []
                    },
                    {
                      "name": "x_offset",
                      "typeId": 531,
                      "typeName": "FixedI64",
                      "docs": []
                    },
                    {
                      "name": "y_offset",
                      "typeId": 531,
                      "typeName": "FixedI64",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 531,
          "path": [
            "sp_arithmetic",
            "fixed_point",
            "FixedI64"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 532,
                  "typeName": "i64",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 532,
          "path": [],
          "params": [],
          "type": {
            "tag": "Primitive",
            "value": {
              "kind": "i64"
            }
          },
          "docs": []
        },
        {
          "id": 533,
          "path": [
            "pallet_referenda",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "NotOngoing",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Referendum is not ongoing."
                  ]
                },
                {
                  "name": "HasDeposit",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Referendum's decision deposit is already paid."
                  ]
                },
                {
                  "name": "BadTrack",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "The track identifier given was invalid."
                  ]
                },
                {
                  "name": "Full",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "There are already a full complement of referenda in progress for this track."
                  ]
                },
                {
                  "name": "QueueEmpty",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "The queue of the track is empty."
                  ]
                },
                {
                  "name": "BadReferendum",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "The referendum index provided is invalid in this context."
                  ]
                },
                {
                  "name": "NothingToDo",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "There was nothing to do in the advancement."
                  ]
                },
                {
                  "name": "NoTrack",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "No track exists for the proposal origin."
                  ]
                },
                {
                  "name": "Unfinished",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "Any deposit cannot be refunded until after the decision is over."
                  ]
                },
                {
                  "name": "NoPermission",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "The deposit refunder is not the depositor."
                  ]
                },
                {
                  "name": "NoDeposit",
                  "fields": [],
                  "index": 10,
                  "docs": [
                    "The deposit cannot be refunded since none was made."
                  ]
                },
                {
                  "name": "BadStatus",
                  "fields": [],
                  "index": 11,
                  "docs": [
                    "The referendum status is invalid for this operation."
                  ]
                },
                {
                  "name": "PreimageNotExist",
                  "fields": [],
                  "index": 12,
                  "docs": [
                    "The preimage does not exist."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 534,
          "path": [
            "pallet_whitelist",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "UnavailablePreImage",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "The preimage of the call hash could not be loaded."
                  ]
                },
                {
                  "name": "UndecodableCall",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "The call could not be decoded."
                  ]
                },
                {
                  "name": "InvalidCallWeightWitness",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "The weight of the decoded call was higher than the witness."
                  ]
                },
                {
                  "name": "CallIsNotWhitelisted",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "The call was not whitelisted."
                  ]
                },
                {
                  "name": "CallAlreadyWhitelisted",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "The call was already whitelisted; No-Op."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 535,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 12
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 65,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 536,
          "path": [
            "pallet_collective",
            "Votes"
          ],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "index",
                  "typeId": 4,
                  "typeName": "ProposalIndex",
                  "docs": []
                },
                {
                  "name": "threshold",
                  "typeId": 4,
                  "typeName": "MemberCount",
                  "docs": []
                },
                {
                  "name": "ayes",
                  "typeId": 109,
                  "typeName": "Vec<AccountId>",
                  "docs": []
                },
                {
                  "name": "nays",
                  "typeId": 109,
                  "typeName": "Vec<AccountId>",
                  "docs": []
                },
                {
                  "name": "end",
                  "typeId": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 537,
          "path": [
            "pallet_collective",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "NotMember",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Account is not a member"
                  ]
                },
                {
                  "name": "DuplicateProposal",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Duplicate proposals not allowed"
                  ]
                },
                {
                  "name": "ProposalMissing",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Proposal must exist"
                  ]
                },
                {
                  "name": "WrongIndex",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Mismatched index"
                  ]
                },
                {
                  "name": "DuplicateVote",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "Duplicate vote ignored"
                  ]
                },
                {
                  "name": "AlreadyInitialized",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "Members are already initialized!"
                  ]
                },
                {
                  "name": "TooEarly",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "The close call was made too early, before the end of the voting."
                  ]
                },
                {
                  "name": "TooManyProposals",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "There can only be a maximum of `MaxProposals` active proposals."
                  ]
                },
                {
                  "name": "WrongProposalWeight",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "The given weight bound for the proposal was too low."
                  ]
                },
                {
                  "name": "WrongProposalLength",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "The given length bound for the proposal was too low."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 538,
          "path": [
            "pallet_collective",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "NotMember",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Account is not a member"
                  ]
                },
                {
                  "name": "DuplicateProposal",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Duplicate proposals not allowed"
                  ]
                },
                {
                  "name": "ProposalMissing",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Proposal must exist"
                  ]
                },
                {
                  "name": "WrongIndex",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Mismatched index"
                  ]
                },
                {
                  "name": "DuplicateVote",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "Duplicate vote ignored"
                  ]
                },
                {
                  "name": "AlreadyInitialized",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "Members are already initialized!"
                  ]
                },
                {
                  "name": "TooEarly",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "The close call was made too early, before the end of the voting."
                  ]
                },
                {
                  "name": "TooManyProposals",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "There can only be a maximum of `MaxProposals` active proposals."
                  ]
                },
                {
                  "name": "WrongProposalWeight",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "The given weight bound for the proposal was too low."
                  ]
                },
                {
                  "name": "WrongProposalLength",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "The given length bound for the proposal was too low."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 539,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 12
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 65,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 540,
          "path": [
            "pallet_collective",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "NotMember",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Account is not a member"
                  ]
                },
                {
                  "name": "DuplicateProposal",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Duplicate proposals not allowed"
                  ]
                },
                {
                  "name": "ProposalMissing",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Proposal must exist"
                  ]
                },
                {
                  "name": "WrongIndex",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Mismatched index"
                  ]
                },
                {
                  "name": "DuplicateVote",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "Duplicate vote ignored"
                  ]
                },
                {
                  "name": "AlreadyInitialized",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "Members are already initialized!"
                  ]
                },
                {
                  "name": "TooEarly",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "The close call was made too early, before the end of the voting."
                  ]
                },
                {
                  "name": "TooManyProposals",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "There can only be a maximum of `MaxProposals` active proposals."
                  ]
                },
                {
                  "name": "WrongProposalWeight",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "The given weight bound for the proposal was too low."
                  ]
                },
                {
                  "name": "WrongProposalLength",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "The given length bound for the proposal was too low."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 541,
          "path": [
            "pallet_collective",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "NotMember",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Account is not a member"
                  ]
                },
                {
                  "name": "DuplicateProposal",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Duplicate proposals not allowed"
                  ]
                },
                {
                  "name": "ProposalMissing",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Proposal must exist"
                  ]
                },
                {
                  "name": "WrongIndex",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Mismatched index"
                  ]
                },
                {
                  "name": "DuplicateVote",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "Duplicate vote ignored"
                  ]
                },
                {
                  "name": "AlreadyInitialized",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "Members are already initialized!"
                  ]
                },
                {
                  "name": "TooEarly",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "The close call was made too early, before the end of the voting."
                  ]
                },
                {
                  "name": "TooManyProposals",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "There can only be a maximum of `MaxProposals` active proposals."
                  ]
                },
                {
                  "name": "WrongProposalWeight",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "The given weight bound for the proposal was too low."
                  ]
                },
                {
                  "name": "WrongProposalLength",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "The given length bound for the proposal was too low."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 542,
          "path": [
            "pallet_treasury",
            "Proposal"
          ],
          "params": [
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "Balance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "proposer",
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "value",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "bond",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 543,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 4
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 544,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 544,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 4
            }
          },
          "docs": []
        },
        {
          "id": 545,
          "path": [
            "sp_arithmetic",
            "per_things",
            "Permill"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 546,
          "path": [
            "frame_support",
            "PalletId"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 154,
                  "typeName": "[u8; 8]",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 547,
          "path": [
            "pallet_treasury",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "InsufficientProposersBalance",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Proposer's balance is too low."
                  ]
                },
                {
                  "name": "InvalidIndex",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "No proposal or bounty at that index."
                  ]
                },
                {
                  "name": "TooManyApprovals",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Too many approvals in the queue."
                  ]
                },
                {
                  "name": "InsufficientPermission",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "The spend origin is valid but the amount it is allowed to spend is lower than the",
                    "amount to be spent."
                  ]
                },
                {
                  "name": "ProposalNotApproved",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "Proposal has not been approved."
                  ]
                }
              ]
            }
          },
          "docs": [
            "Error for the treasury pallet."
          ]
        },
        {
          "id": 548,
          "path": [
            "pallet_crowdloan_rewards",
            "pallet",
            "RewardInfo"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "total_reward",
                  "typeId": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "claimed_reward",
                  "typeId": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "contributed_relay_addresses",
                  "typeId": 549,
                  "typeName": "Vec<T::RelayChainAccountId>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 549,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 13
            }
          },
          "docs": []
        },
        {
          "id": 550,
          "path": [
            "pallet_crowdloan_rewards",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "AlreadyAssociated",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "User trying to associate a native identity with a relay chain identity for posterior",
                    "reward claiming provided an already associated relay chain identity"
                  ]
                },
                {
                  "name": "BatchBeyondFundPot",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Trying to introduce a batch that goes beyond the limits of the funds"
                  ]
                },
                {
                  "name": "FirstClaimAlreadyDone",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "First claim already done"
                  ]
                },
                {
                  "name": "RewardNotHighEnough",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "The contribution is not high enough to be eligible for rewards"
                  ]
                },
                {
                  "name": "InvalidClaimSignature",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "User trying to associate a native identity with a relay chain identity for posterior",
                    "reward claiming provided a wrong signature"
                  ]
                },
                {
                  "name": "InvalidFreeClaimSignature",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "User trying to claim the first free reward provided the wrong signature"
                  ]
                },
                {
                  "name": "NoAssociatedClaim",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "User trying to claim an award did not have an claim associated with it. This may mean",
                    "they did not contribute to the crowdloan, or they have not yet associated a native id",
                    "with their contribution"
                  ]
                },
                {
                  "name": "RewardsAlreadyClaimed",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "User trying to claim rewards has already claimed all rewards associated with its",
                    "identity and contribution"
                  ]
                },
                {
                  "name": "RewardVecAlreadyInitialized",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "Reward vec has already been initialized"
                  ]
                },
                {
                  "name": "RewardVecNotFullyInitializedYet",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "Reward vec has not yet been fully initialized"
                  ]
                },
                {
                  "name": "RewardsDoNotMatchFund",
                  "fields": [],
                  "index": 10,
                  "docs": [
                    "Rewards should match funds of the pallet"
                  ]
                },
                {
                  "name": "TooManyContributors",
                  "fields": [],
                  "index": 11,
                  "docs": [
                    "Initialize_reward_vec received too many contributors"
                  ]
                },
                {
                  "name": "VestingPeriodNonValid",
                  "fields": [],
                  "index": 12,
                  "docs": [
                    "Provided vesting period is not valid"
                  ]
                },
                {
                  "name": "NonContributedAddressProvided",
                  "fields": [],
                  "index": 13,
                  "docs": [
                    "User provided a signature from a non-contributor relay account"
                  ]
                },
                {
                  "name": "InsufficientNumberOfValidProofs",
                  "fields": [],
                  "index": 14,
                  "docs": [
                    "User submitted an unsifficient number of proofs to change the reward address"
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 551,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 552
            }
          },
          "docs": []
        },
        {
          "id": 552,
          "path": [
            "cumulus_pallet_xcmp_queue",
            "InboundChannelDetails"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "sender",
                  "typeId": 100,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "state",
                  "typeId": 553,
                  "typeName": "InboundState",
                  "docs": []
                },
                {
                  "name": "message_metadata",
                  "typeId": 554,
                  "typeName": "Vec<(RelayBlockNumber, XcmpMessageFormat)>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 553,
          "path": [
            "cumulus_pallet_xcmp_queue",
            "InboundState"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Ok",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Suspended",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 554,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 555
            }
          },
          "docs": []
        },
        {
          "id": 555,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                4,
                556
              ]
            }
          },
          "docs": []
        },
        {
          "id": 556,
          "path": [
            "polkadot_parachain",
            "primitives",
            "XcmpMessageFormat"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "ConcatenatedVersionedXcm",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "ConcatenatedEncodedBlob",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Signals",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 557,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                100,
                4
              ]
            }
          },
          "docs": []
        },
        {
          "id": 558,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 559
            }
          },
          "docs": []
        },
        {
          "id": 559,
          "path": [
            "cumulus_pallet_xcmp_queue",
            "OutboundChannelDetails"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "recipient",
                  "typeId": 100,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "state",
                  "typeId": 560,
                  "typeName": "OutboundState",
                  "docs": []
                },
                {
                  "name": "signals_exist",
                  "typeId": 37,
                  "typeName": "bool",
                  "docs": []
                },
                {
                  "name": "first_index",
                  "typeId": 56,
                  "typeName": "u16",
                  "docs": []
                },
                {
                  "name": "last_index",
                  "typeId": 56,
                  "typeName": "u16",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 560,
          "path": [
            "cumulus_pallet_xcmp_queue",
            "OutboundState"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Ok",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Suspended",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 561,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                100,
                56
              ]
            }
          },
          "docs": []
        },
        {
          "id": 562,
          "path": [
            "cumulus_pallet_xcmp_queue",
            "QueueConfigData"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "suspend_threshold",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "drop_threshold",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "resume_threshold",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "threshold_weight",
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "weight_restrict_decay",
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "xcmp_max_individual_weight",
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 563,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                100,
                4,
                14
              ]
            }
          },
          "docs": []
        },
        {
          "id": 564,
          "path": [
            "cumulus_pallet_xcmp_queue",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "FailedToSend",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Failed to send XCM message."
                  ]
                },
                {
                  "name": "BadXcmOrigin",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Bad XCM origin."
                  ]
                },
                {
                  "name": "BadXcm",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Bad XCM data."
                  ]
                },
                {
                  "name": "BadOverweightIndex",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Bad overweight index."
                  ]
                },
                {
                  "name": "WeightOverLimit",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "Provided weight is possibly not enough to execute the message."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 565,
          "path": [
            "cumulus_pallet_xcm",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": []
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 566,
          "path": [
            "cumulus_pallet_dmp_queue",
            "ConfigData"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "max_individual",
                  "typeId": 9,
                  "typeName": "Weight",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 567,
          "path": [
            "cumulus_pallet_dmp_queue",
            "PageIndexData"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "begin_used",
                  "typeId": 4,
                  "typeName": "PageCounter",
                  "docs": []
                },
                {
                  "name": "end_used",
                  "typeId": 4,
                  "typeName": "PageCounter",
                  "docs": []
                },
                {
                  "name": "overweight_count",
                  "typeId": 11,
                  "typeName": "OverweightIndex",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 568,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 569
            }
          },
          "docs": []
        },
        {
          "id": 569,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                4,
                14
              ]
            }
          },
          "docs": []
        },
        {
          "id": 570,
          "path": [
            "cumulus_pallet_dmp_queue",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Unknown",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "The message index given is unknown."
                  ]
                },
                {
                  "name": "OverLimit",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "The amount of weight given is possibly not enough for executing the message."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 571,
          "path": [
            "pallet_xcm",
            "pallet",
            "QueryStatus"
          ],
          "params": [
            {
              "name": "BlockNumber",
              "typeId": 4
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Pending",
                  "fields": [
                    {
                      "name": "responder",
                      "typeId": 235,
                      "typeName": "VersionedMultiLocation",
                      "docs": []
                    },
                    {
                      "name": "maybe_match_querier",
                      "typeId": 572,
                      "typeName": "Option<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "maybe_notify",
                      "typeId": 573,
                      "typeName": "Option<(u8, u8)>",
                      "docs": []
                    },
                    {
                      "name": "timeout",
                      "typeId": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "VersionNotifier",
                  "fields": [
                    {
                      "name": "origin",
                      "typeId": 235,
                      "typeName": "VersionedMultiLocation",
                      "docs": []
                    },
                    {
                      "name": "is_active",
                      "typeId": 37,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Ready",
                  "fields": [
                    {
                      "name": "response",
                      "typeId": 575,
                      "typeName": "VersionedResponse",
                      "docs": []
                    },
                    {
                      "name": "at",
                      "typeId": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 572,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 235
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 235,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 573,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 574
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 574,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 574,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                2,
                2
              ]
            }
          },
          "docs": []
        },
        {
          "id": 575,
          "path": [
            "xcm",
            "VersionedResponse"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "V2",
                  "fields": [
                    {
                      "typeId": 253,
                      "typeName": "v2::Response",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "V3",
                  "fields": [
                    {
                      "typeId": 272,
                      "typeName": "v3::Response",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 576,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                4,
                235
              ]
            }
          },
          "docs": []
        },
        {
          "id": 577,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                11,
                9,
                4
              ]
            }
          },
          "docs": []
        },
        {
          "id": 578,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 579
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 580,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 579,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                235,
                4
              ]
            }
          },
          "docs": []
        },
        {
          "id": 580,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 579
            }
          },
          "docs": []
        },
        {
          "id": 581,
          "path": [
            "pallet_xcm",
            "pallet",
            "VersionMigrationStage"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "MigrateSupportedVersion",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "MigrateVersionNotifiers",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "NotifyCurrentTargets",
                  "fields": [
                    {
                      "typeId": 582,
                      "typeName": "Option<Vec<u8>>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "MigrateAndNotifyOldTargets",
                  "fields": [],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 582,
          "path": [
            "Option"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 14
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "typeId": 14,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 583,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                4,
                0,
                584
              ]
            }
          },
          "docs": []
        },
        {
          "id": 584,
          "path": [
            "xcm",
            "VersionedAssetId"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "V3",
                  "fields": [
                    {
                      "typeId": 269,
                      "typeName": "v3::AssetId",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 585,
          "path": [
            "pallet_xcm",
            "pallet",
            "RemoteLockedFungibleRecord"
          ],
          "params": [
            {
              "name": "ConsumerIdentifier",
              "typeId": 53
            },
            {
              "name": "MaxConsumers"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "u128",
                  "docs": []
                },
                {
                  "name": "owner",
                  "typeId": 235,
                  "typeName": "VersionedMultiLocation",
                  "docs": []
                },
                {
                  "name": "locker",
                  "typeId": 235,
                  "typeName": "VersionedMultiLocation",
                  "docs": []
                },
                {
                  "name": "consumers",
                  "typeId": 586,
                  "typeName": "BoundedVec<(ConsumerIdentifier, u128), MaxConsumers>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 586,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 587
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 588,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 587,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                53,
                6
              ]
            }
          },
          "docs": []
        },
        {
          "id": 588,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 587
            }
          },
          "docs": []
        },
        {
          "id": 589,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 590
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 591,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 590,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                6,
                235
              ]
            }
          },
          "docs": []
        },
        {
          "id": 591,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 590
            }
          },
          "docs": []
        },
        {
          "id": 592,
          "path": [
            "pallet_xcm",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Unreachable",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "The desired destination was unreachable, generally because there is a no way of routing",
                    "to it."
                  ]
                },
                {
                  "name": "SendFailure",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "There was some other issue (i.e. not to do with routing) in sending the message. Perhaps",
                    "a lack of space for buffering the message."
                  ]
                },
                {
                  "name": "Filtered",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "The message execution fails the filter."
                  ]
                },
                {
                  "name": "UnweighableMessage",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "The message's weight could not be determined."
                  ]
                },
                {
                  "name": "DestinationNotInvertible",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "The destination `MultiLocation` provided cannot be inverted."
                  ]
                },
                {
                  "name": "Empty",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "The assets to be sent are empty."
                  ]
                },
                {
                  "name": "CannotReanchor",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "Could not re-anchor the assets to declare the fees for the destination chain."
                  ]
                },
                {
                  "name": "TooManyAssets",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "Too many assets have been attempted for transfer."
                  ]
                },
                {
                  "name": "InvalidOrigin",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "Origin is invalid for sending."
                  ]
                },
                {
                  "name": "BadVersion",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "The version of the `Versioned` value used is not able to be interpreted."
                  ]
                },
                {
                  "name": "BadLocation",
                  "fields": [],
                  "index": 10,
                  "docs": [
                    "The given location could not be used (e.g. because it cannot be expressed in the",
                    "desired version of XCM)."
                  ]
                },
                {
                  "name": "NoSubscription",
                  "fields": [],
                  "index": 11,
                  "docs": [
                    "The referenced subscription could not be found."
                  ]
                },
                {
                  "name": "AlreadySubscribed",
                  "fields": [],
                  "index": 12,
                  "docs": [
                    "The location is invalid since it already has a subscription from us."
                  ]
                },
                {
                  "name": "InvalidAsset",
                  "fields": [],
                  "index": 13,
                  "docs": [
                    "Invalid asset for the operation."
                  ]
                },
                {
                  "name": "LowBalance",
                  "fields": [],
                  "index": 14,
                  "docs": [
                    "The owner does not own (all) of the asset that they wish to do the operation on."
                  ]
                },
                {
                  "name": "TooManyLocks",
                  "fields": [],
                  "index": 15,
                  "docs": [
                    "The asset owner has too many locks on the asset."
                  ]
                },
                {
                  "name": "AccountNotSovereign",
                  "fields": [],
                  "index": 16,
                  "docs": [
                    "The given account is not an identifiable sovereign account for any location."
                  ]
                },
                {
                  "name": "FeesNotMet",
                  "fields": [],
                  "index": 17,
                  "docs": [
                    "The operation required fees to be paid which the initiator could not meet."
                  ]
                },
                {
                  "name": "LockNotFound",
                  "fields": [],
                  "index": 18,
                  "docs": [
                    "A remote lock with the corresponding data could not be found."
                  ]
                },
                {
                  "name": "InUse",
                  "fields": [],
                  "index": 19,
                  "docs": [
                    "The unlock operation cannot succeed because there are still consumers of the lock."
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 593,
          "path": [
            "pallet_assets",
            "types",
            "AssetDetails"
          ],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            },
            {
              "name": "AccountId",
              "typeId": 0
            },
            {
              "name": "DepositBalance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "owner",
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "issuer",
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "admin",
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "freezer",
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "supply",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "deposit",
                  "typeId": 6,
                  "typeName": "DepositBalance",
                  "docs": []
                },
                {
                  "name": "min_balance",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "is_sufficient",
                  "typeId": 37,
                  "typeName": "bool",
                  "docs": []
                },
                {
                  "name": "accounts",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "sufficients",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "approvals",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "status",
                  "typeId": 594,
                  "typeName": "AssetStatus",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 594,
          "path": [
            "pallet_assets",
            "types",
            "AssetStatus"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Live",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Frozen",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Destroying",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 595,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                6,
                0
              ]
            }
          },
          "docs": []
        },
        {
          "id": 596,
          "path": [
            "pallet_assets",
            "types",
            "AssetAccount"
          ],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            },
            {
              "name": "DepositBalance",
              "typeId": 6
            },
            {
              "name": "Extra",
              "typeId": 53
            },
            {
              "name": "AccountId",
              "typeId": 0
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "balance",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "status",
                  "typeId": 597,
                  "typeName": "AccountStatus",
                  "docs": []
                },
                {
                  "name": "reason",
                  "typeId": 598,
                  "typeName": "ExistenceReason<DepositBalance, AccountId>",
                  "docs": []
                },
                {
                  "name": "extra",
                  "typeId": 53,
                  "typeName": "Extra",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 597,
          "path": [
            "pallet_assets",
            "types",
            "AccountStatus"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Liquid",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Frozen",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Blocked",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 598,
          "path": [
            "pallet_assets",
            "types",
            "ExistenceReason"
          ],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            },
            {
              "name": "AccountId",
              "typeId": 0
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Consumer",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Sufficient",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "DepositHeld",
                  "fields": [
                    {
                      "typeId": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "DepositRefunded",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "DepositFrom",
                  "fields": [
                    {
                      "typeId": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "typeId": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 599,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                6,
                0,
                0
              ]
            }
          },
          "docs": []
        },
        {
          "id": 600,
          "path": [
            "pallet_assets",
            "types",
            "Approval"
          ],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            },
            {
              "name": "DepositBalance",
              "typeId": 6
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "deposit",
                  "typeId": 6,
                  "typeName": "DepositBalance",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 601,
          "path": [
            "pallet_assets",
            "types",
            "AssetMetadata"
          ],
          "params": [
            {
              "name": "DepositBalance",
              "typeId": 6
            },
            {
              "name": "BoundedString",
              "typeId": 602
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "deposit",
                  "typeId": 6,
                  "typeName": "DepositBalance",
                  "docs": []
                },
                {
                  "name": "name",
                  "typeId": 602,
                  "typeName": "BoundedString",
                  "docs": []
                },
                {
                  "name": "symbol",
                  "typeId": 602,
                  "typeName": "BoundedString",
                  "docs": []
                },
                {
                  "name": "decimals",
                  "typeId": 2,
                  "typeName": "u8",
                  "docs": []
                },
                {
                  "name": "is_frozen",
                  "typeId": 37,
                  "typeName": "bool",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 602,
          "path": [
            "bounded_collections",
            "bounded_vec",
            "BoundedVec"
          ],
          "params": [
            {
              "name": "T",
              "typeId": 2
            },
            {
              "name": "S"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 14,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 603,
          "path": [
            "pallet_assets",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "BalanceLow",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Account balance must be greater than or equal to the transfer amount."
                  ]
                },
                {
                  "name": "NoAccount",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "The account to alter does not exist."
                  ]
                },
                {
                  "name": "NoPermission",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "The signing account has no permission to do the operation."
                  ]
                },
                {
                  "name": "Unknown",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "The given asset ID is unknown."
                  ]
                },
                {
                  "name": "Frozen",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "The origin account is frozen."
                  ]
                },
                {
                  "name": "InUse",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "The asset ID is already taken."
                  ]
                },
                {
                  "name": "BadWitness",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "Invalid witness data given."
                  ]
                },
                {
                  "name": "MinBalanceZero",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "Minimum balance should be non-zero."
                  ]
                },
                {
                  "name": "UnavailableConsumer",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "Unable to increment the consumer reference counters on the account. Either no provider",
                    "reference exists to allow a non-zero balance of a non-self-sufficient asset, or one",
                    "fewer then the maximum number of consumers has been reached."
                  ]
                },
                {
                  "name": "BadMetadata",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "Invalid metadata given."
                  ]
                },
                {
                  "name": "Unapproved",
                  "fields": [],
                  "index": 10,
                  "docs": [
                    "No approval exists that would allow the transfer."
                  ]
                },
                {
                  "name": "WouldDie",
                  "fields": [],
                  "index": 11,
                  "docs": [
                    "The source account would not survive the transfer and it needs to stay alive."
                  ]
                },
                {
                  "name": "AlreadyExists",
                  "fields": [],
                  "index": 12,
                  "docs": [
                    "The asset-account already exists."
                  ]
                },
                {
                  "name": "NoDeposit",
                  "fields": [],
                  "index": 13,
                  "docs": [
                    "The asset-account doesn't have an associated deposit."
                  ]
                },
                {
                  "name": "WouldBurn",
                  "fields": [],
                  "index": 14,
                  "docs": [
                    "The operation would result in funds being burned."
                  ]
                },
                {
                  "name": "LiveAsset",
                  "fields": [],
                  "index": 15,
                  "docs": [
                    "The asset is a live asset and is actively being used. Usually emit for operations such",
                    "as `start_destroy` which require the asset to be in a destroying state."
                  ]
                },
                {
                  "name": "AssetNotLive",
                  "fields": [],
                  "index": 16,
                  "docs": [
                    "The asset is not live, and likely being destroyed."
                  ]
                },
                {
                  "name": "IncorrectStatus",
                  "fields": [],
                  "index": 17,
                  "docs": [
                    "The asset status is not the expected status."
                  ]
                },
                {
                  "name": "NotFrozen",
                  "fields": [],
                  "index": 18,
                  "docs": [
                    "The asset should be frozen before the given operation."
                  ]
                },
                {
                  "name": "CallbackFailed",
                  "fields": [],
                  "index": 19,
                  "docs": [
                    "Callback action resulted in error"
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 604,
          "path": [
            "pallet_asset_manager",
            "pallet",
            "AssetInfo"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "creator",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "deposit",
                  "typeId": 6,
                  "typeName": "DepositBalanceOf<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 605,
          "path": [],
          "params": [],
          "type": {
            "tag": "Sequence",
            "value": {
              "typeParam": 299
            }
          },
          "docs": []
        },
        {
          "id": 606,
          "path": [
            "pallet_asset_manager",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "ErrorCreatingAsset",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "AssetAlreadyExists",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "AssetDoesNotExist",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "TooLowNumAssetsWeightHint",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "LocalAssetLimitReached",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "ErrorDestroyingAsset",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "NotSufficientDeposit",
                  "fields": [],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "NonExistentLocalAsset",
                  "fields": [],
                  "index": 7,
                  "docs": []
                }
              ]
            }
          },
          "docs": [
            "An error that can occur while executing the mapping pallet's logic."
          ]
        },
        {
          "id": 607,
          "path": [
            "orml_xtokens",
            "module",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "AssetHasNoReserve",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Asset has no reserve location."
                  ]
                },
                {
                  "name": "NotCrossChainTransfer",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Not cross-chain transfer."
                  ]
                },
                {
                  "name": "InvalidDest",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Invalid transfer destination."
                  ]
                },
                {
                  "name": "NotCrossChainTransferableCurrency",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Currency is not cross-chain transferable."
                  ]
                },
                {
                  "name": "UnweighableMessage",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "The message's weight could not be determined."
                  ]
                },
                {
                  "name": "XcmExecutionFailed",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "XCM execution failed."
                  ]
                },
                {
                  "name": "CannotReanchor",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "Could not re-anchor the assets to declare the fees for the",
                    "destination chain."
                  ]
                },
                {
                  "name": "InvalidAncestry",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "Could not get ancestry of asset reserve location."
                  ]
                },
                {
                  "name": "InvalidAsset",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "The MultiAsset is invalid."
                  ]
                },
                {
                  "name": "DestinationNotInvertible",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "The destination `MultiLocation` provided cannot be inverted."
                  ]
                },
                {
                  "name": "BadVersion",
                  "fields": [],
                  "index": 10,
                  "docs": [
                    "The version of the `Versioned` value used is not able to be",
                    "interpreted."
                  ]
                },
                {
                  "name": "DistinctReserveForAssetAndFee",
                  "fields": [],
                  "index": 11,
                  "docs": [
                    "We tried sending distinct asset and fee but they have different",
                    "reserve chains."
                  ]
                },
                {
                  "name": "ZeroFee",
                  "fields": [],
                  "index": 12,
                  "docs": [
                    "The fee is zero."
                  ]
                },
                {
                  "name": "ZeroAmount",
                  "fields": [],
                  "index": 13,
                  "docs": [
                    "The transfering asset amount is zero."
                  ]
                },
                {
                  "name": "TooManyAssetsBeingSent",
                  "fields": [],
                  "index": 14,
                  "docs": [
                    "The number of assets to be sent is over the maximum."
                  ]
                },
                {
                  "name": "AssetIndexNonExistent",
                  "fields": [],
                  "index": 15,
                  "docs": [
                    "The specified index does not exist in a MultiAssets struct."
                  ]
                },
                {
                  "name": "FeeNotEnough",
                  "fields": [],
                  "index": 16,
                  "docs": [
                    "Fee is not enough."
                  ]
                },
                {
                  "name": "NotSupportedMultiLocation",
                  "fields": [],
                  "index": 17,
                  "docs": [
                    "Not supported MultiLocation"
                  ]
                },
                {
                  "name": "MinXcmFeeNotDefined",
                  "fields": [],
                  "index": 18,
                  "docs": [
                    "MinXcmFee not registered for certain reserve location"
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 608,
          "path": [
            "pallet_xcm_transactor",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "IndexAlreadyClaimed",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "UnclaimedIndex",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "NotOwner",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "UnweighableMessage",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "CannotReanchor",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "AssetHasNoReserve",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "InvalidDest",
                  "fields": [],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "NotCrossChainTransfer",
                  "fields": [],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "AssetIsNotReserveInDestination",
                  "fields": [],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "DestinationNotInvertible",
                  "fields": [],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "ErrorDelivering",
                  "fields": [],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "DispatchWeightBiggerThanTotalWeight",
                  "fields": [],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "WeightOverflow",
                  "fields": [],
                  "index": 12,
                  "docs": []
                },
                {
                  "name": "AmountOverflow",
                  "fields": [],
                  "index": 13,
                  "docs": []
                },
                {
                  "name": "TransactorInfoNotSet",
                  "fields": [],
                  "index": 14,
                  "docs": []
                },
                {
                  "name": "NotCrossChainTransferableCurrency",
                  "fields": [],
                  "index": 15,
                  "docs": []
                },
                {
                  "name": "XcmExecuteError",
                  "fields": [],
                  "index": 16,
                  "docs": []
                },
                {
                  "name": "BadVersion",
                  "fields": [],
                  "index": 17,
                  "docs": []
                },
                {
                  "name": "MaxWeightTransactReached",
                  "fields": [],
                  "index": 18,
                  "docs": []
                },
                {
                  "name": "UnableToWithdrawAsset",
                  "fields": [],
                  "index": 19,
                  "docs": []
                },
                {
                  "name": "FeePerSecondNotSet",
                  "fields": [],
                  "index": 20,
                  "docs": []
                },
                {
                  "name": "SignedTransactNotAllowedForDestination",
                  "fields": [],
                  "index": 21,
                  "docs": []
                },
                {
                  "name": "FailedMultiLocationToJunction",
                  "fields": [],
                  "index": 22,
                  "docs": []
                },
                {
                  "name": "HrmpHandlerNotImplemented",
                  "fields": [],
                  "index": 23,
                  "docs": []
                },
                {
                  "name": "TooMuchFeeUsed",
                  "fields": [],
                  "index": 24,
                  "docs": []
                },
                {
                  "name": "ErrorValidating",
                  "fields": [],
                  "index": 25,
                  "docs": []
                },
                {
                  "name": "RefundNotSupportedWithTransactInfo",
                  "fields": [],
                  "index": 26,
                  "docs": []
                }
              ]
            }
          },
          "docs": [
            "An error that can occur while executing the mapping pallet's logic."
          ]
        },
        {
          "id": 609,
          "path": [
            "pallet_assets",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            },
            {
              "name": "I"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "BalanceLow",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Account balance must be greater than or equal to the transfer amount."
                  ]
                },
                {
                  "name": "NoAccount",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "The account to alter does not exist."
                  ]
                },
                {
                  "name": "NoPermission",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "The signing account has no permission to do the operation."
                  ]
                },
                {
                  "name": "Unknown",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "The given asset ID is unknown."
                  ]
                },
                {
                  "name": "Frozen",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "The origin account is frozen."
                  ]
                },
                {
                  "name": "InUse",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "The asset ID is already taken."
                  ]
                },
                {
                  "name": "BadWitness",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "Invalid witness data given."
                  ]
                },
                {
                  "name": "MinBalanceZero",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "Minimum balance should be non-zero."
                  ]
                },
                {
                  "name": "UnavailableConsumer",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "Unable to increment the consumer reference counters on the account. Either no provider",
                    "reference exists to allow a non-zero balance of a non-self-sufficient asset, or one",
                    "fewer then the maximum number of consumers has been reached."
                  ]
                },
                {
                  "name": "BadMetadata",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "Invalid metadata given."
                  ]
                },
                {
                  "name": "Unapproved",
                  "fields": [],
                  "index": 10,
                  "docs": [
                    "No approval exists that would allow the transfer."
                  ]
                },
                {
                  "name": "WouldDie",
                  "fields": [],
                  "index": 11,
                  "docs": [
                    "The source account would not survive the transfer and it needs to stay alive."
                  ]
                },
                {
                  "name": "AlreadyExists",
                  "fields": [],
                  "index": 12,
                  "docs": [
                    "The asset-account already exists."
                  ]
                },
                {
                  "name": "NoDeposit",
                  "fields": [],
                  "index": 13,
                  "docs": [
                    "The asset-account doesn't have an associated deposit."
                  ]
                },
                {
                  "name": "WouldBurn",
                  "fields": [],
                  "index": 14,
                  "docs": [
                    "The operation would result in funds being burned."
                  ]
                },
                {
                  "name": "LiveAsset",
                  "fields": [],
                  "index": 15,
                  "docs": [
                    "The asset is a live asset and is actively being used. Usually emit for operations such",
                    "as `start_destroy` which require the asset to be in a destroying state."
                  ]
                },
                {
                  "name": "AssetNotLive",
                  "fields": [],
                  "index": 16,
                  "docs": [
                    "The asset is not live, and likely being destroyed."
                  ]
                },
                {
                  "name": "IncorrectStatus",
                  "fields": [],
                  "index": 17,
                  "docs": [
                    "The asset status is not the expected status."
                  ]
                },
                {
                  "name": "NotFrozen",
                  "fields": [],
                  "index": 18,
                  "docs": [
                    "The asset should be frozen before the given operation."
                  ]
                },
                {
                  "name": "CallbackFailed",
                  "fields": [],
                  "index": 19,
                  "docs": [
                    "Callback action resulted in error"
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 610,
          "path": [
            "pallet_ethereum_xcm",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "EthereumXcmExecutionSuspended",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Xcm to Ethereum execution is suspended"
                  ]
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 611,
          "path": [
            "pallet_randomness",
            "types",
            "RequestState"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "request",
                  "typeId": 612,
                  "typeName": "Request<BalanceOf<T>, RequestInfo<T>>",
                  "docs": []
                },
                {
                  "name": "deposit",
                  "typeId": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 612,
          "path": [
            "pallet_randomness",
            "types",
            "Request"
          ],
          "params": [
            {
              "name": "Balance",
              "typeId": 6
            },
            {
              "name": "Info",
              "typeId": 613
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "refund_address",
                  "typeId": 64,
                  "typeName": "H160",
                  "docs": []
                },
                {
                  "name": "contract_address",
                  "typeId": 64,
                  "typeName": "H160",
                  "docs": []
                },
                {
                  "name": "fee",
                  "typeId": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "gas_limit",
                  "typeId": 11,
                  "typeName": "u64",
                  "docs": []
                },
                {
                  "name": "num_words",
                  "typeId": 2,
                  "typeName": "u8",
                  "docs": []
                },
                {
                  "name": "salt",
                  "typeId": 12,
                  "typeName": "H256",
                  "docs": []
                },
                {
                  "name": "info",
                  "typeId": 613,
                  "typeName": "Info",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 613,
          "path": [
            "pallet_randomness",
            "types",
            "RequestInfo"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "BabeEpoch",
                  "fields": [
                    {
                      "typeId": 11,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "typeId": 11,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Local",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {
                      "typeId": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 614,
          "path": [
            "pallet_randomness",
            "types",
            "RequestType"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "BabeEpoch",
                  "fields": [
                    {
                      "typeId": 11,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Local",
                  "fields": [
                    {
                      "typeId": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 615,
          "path": [
            "pallet_randomness",
            "types",
            "RandomnessResult"
          ],
          "params": [
            {
              "name": "Hash",
              "typeId": 12
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "name": "randomness",
                  "typeId": 207,
                  "typeName": "Option<Hash>",
                  "docs": []
                },
                {
                  "name": "request_count",
                  "typeId": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 616,
          "path": [
            "pallet_randomness",
            "pallet",
            "Error"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "RequestCounterOverflowed",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "RequestFeeOverflowed",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "MustRequestAtLeastOneWord",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "CannotRequestMoreWordsThanMax",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "CannotRequestRandomnessAfterMaxDelay",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "CannotRequestRandomnessBeforeMinDelay",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "RequestDNE",
                  "fields": [],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "RequestCannotYetBeFulfilled",
                  "fields": [],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "OnlyRequesterCanIncreaseFee",
                  "fields": [],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "RequestHasNotExpired",
                  "fields": [],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "RandomnessResultDNE",
                  "fields": [],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "RandomnessResultNotFilled",
                  "fields": [],
                  "index": 11,
                  "docs": []
                }
              ]
            }
          },
          "docs": [
            "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
          ]
        },
        {
          "id": 617,
          "path": [
            "fp_self_contained",
            "unchecked_extrinsic",
            "UncheckedExtrinsic"
          ],
          "params": [
            {
              "name": "Address",
              "typeId": 0
            },
            {
              "name": "Call",
              "typeId": 86
            },
            {
              "name": "Signature",
              "typeId": 618
            },
            {
              "name": "Extra",
              "typeId": 619
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 629,
                  "typeName": "sp_runtime::generic::UncheckedExtrinsic<Address, Call, Signature, Extra\n>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 618,
          "path": [
            "account",
            "EthereumSignature"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 227,
                  "typeName": "ecdsa::Signature",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 619,
          "path": [],
          "params": [],
          "type": {
            "tag": "Tuple",
            "value": {
              "fields": [
                620,
                621,
                622,
                623,
                624,
                626,
                627,
                628
              ]
            }
          },
          "docs": []
        },
        {
          "id": 620,
          "path": [
            "frame_system",
            "extensions",
            "check_non_zero_sender",
            "CheckNonZeroSender"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": []
            }
          },
          "docs": []
        },
        {
          "id": 621,
          "path": [
            "frame_system",
            "extensions",
            "check_spec_version",
            "CheckSpecVersion"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": []
            }
          },
          "docs": []
        },
        {
          "id": 622,
          "path": [
            "frame_system",
            "extensions",
            "check_tx_version",
            "CheckTxVersion"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": []
            }
          },
          "docs": []
        },
        {
          "id": 623,
          "path": [
            "frame_system",
            "extensions",
            "check_genesis",
            "CheckGenesis"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": []
            }
          },
          "docs": []
        },
        {
          "id": 624,
          "path": [
            "frame_system",
            "extensions",
            "check_mortality",
            "CheckMortality"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 625,
                  "typeName": "Era",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 625,
          "path": [
            "sp_runtime",
            "generic",
            "era",
            "Era"
          ],
          "params": [],
          "type": {
            "tag": "Enum",
            "value": {
              "members": [
                {
                  "name": "Immortal",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Mortal1",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Mortal2",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Mortal3",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Mortal4",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Mortal5",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Mortal6",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "Mortal7",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "Mortal8",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "Mortal9",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "Mortal10",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "Mortal11",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "Mortal12",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": []
                },
                {
                  "name": "Mortal13",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": []
                },
                {
                  "name": "Mortal14",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": []
                },
                {
                  "name": "Mortal15",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": []
                },
                {
                  "name": "Mortal16",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 16,
                  "docs": []
                },
                {
                  "name": "Mortal17",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 17,
                  "docs": []
                },
                {
                  "name": "Mortal18",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 18,
                  "docs": []
                },
                {
                  "name": "Mortal19",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": []
                },
                {
                  "name": "Mortal20",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 20,
                  "docs": []
                },
                {
                  "name": "Mortal21",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": []
                },
                {
                  "name": "Mortal22",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 22,
                  "docs": []
                },
                {
                  "name": "Mortal23",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 23,
                  "docs": []
                },
                {
                  "name": "Mortal24",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 24,
                  "docs": []
                },
                {
                  "name": "Mortal25",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 25,
                  "docs": []
                },
                {
                  "name": "Mortal26",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 26,
                  "docs": []
                },
                {
                  "name": "Mortal27",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 27,
                  "docs": []
                },
                {
                  "name": "Mortal28",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 28,
                  "docs": []
                },
                {
                  "name": "Mortal29",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 29,
                  "docs": []
                },
                {
                  "name": "Mortal30",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 30,
                  "docs": []
                },
                {
                  "name": "Mortal31",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 31,
                  "docs": []
                },
                {
                  "name": "Mortal32",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 32,
                  "docs": []
                },
                {
                  "name": "Mortal33",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 33,
                  "docs": []
                },
                {
                  "name": "Mortal34",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 34,
                  "docs": []
                },
                {
                  "name": "Mortal35",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 35,
                  "docs": []
                },
                {
                  "name": "Mortal36",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 36,
                  "docs": []
                },
                {
                  "name": "Mortal37",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 37,
                  "docs": []
                },
                {
                  "name": "Mortal38",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 38,
                  "docs": []
                },
                {
                  "name": "Mortal39",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 39,
                  "docs": []
                },
                {
                  "name": "Mortal40",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 40,
                  "docs": []
                },
                {
                  "name": "Mortal41",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 41,
                  "docs": []
                },
                {
                  "name": "Mortal42",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 42,
                  "docs": []
                },
                {
                  "name": "Mortal43",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 43,
                  "docs": []
                },
                {
                  "name": "Mortal44",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 44,
                  "docs": []
                },
                {
                  "name": "Mortal45",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 45,
                  "docs": []
                },
                {
                  "name": "Mortal46",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 46,
                  "docs": []
                },
                {
                  "name": "Mortal47",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 47,
                  "docs": []
                },
                {
                  "name": "Mortal48",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 48,
                  "docs": []
                },
                {
                  "name": "Mortal49",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 49,
                  "docs": []
                },
                {
                  "name": "Mortal50",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 50,
                  "docs": []
                },
                {
                  "name": "Mortal51",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 51,
                  "docs": []
                },
                {
                  "name": "Mortal52",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 52,
                  "docs": []
                },
                {
                  "name": "Mortal53",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 53,
                  "docs": []
                },
                {
                  "name": "Mortal54",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 54,
                  "docs": []
                },
                {
                  "name": "Mortal55",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 55,
                  "docs": []
                },
                {
                  "name": "Mortal56",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 56,
                  "docs": []
                },
                {
                  "name": "Mortal57",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 57,
                  "docs": []
                },
                {
                  "name": "Mortal58",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 58,
                  "docs": []
                },
                {
                  "name": "Mortal59",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 59,
                  "docs": []
                },
                {
                  "name": "Mortal60",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 60,
                  "docs": []
                },
                {
                  "name": "Mortal61",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 61,
                  "docs": []
                },
                {
                  "name": "Mortal62",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 62,
                  "docs": []
                },
                {
                  "name": "Mortal63",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 63,
                  "docs": []
                },
                {
                  "name": "Mortal64",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 64,
                  "docs": []
                },
                {
                  "name": "Mortal65",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 65,
                  "docs": []
                },
                {
                  "name": "Mortal66",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 66,
                  "docs": []
                },
                {
                  "name": "Mortal67",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 67,
                  "docs": []
                },
                {
                  "name": "Mortal68",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 68,
                  "docs": []
                },
                {
                  "name": "Mortal69",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 69,
                  "docs": []
                },
                {
                  "name": "Mortal70",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 70,
                  "docs": []
                },
                {
                  "name": "Mortal71",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 71,
                  "docs": []
                },
                {
                  "name": "Mortal72",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 72,
                  "docs": []
                },
                {
                  "name": "Mortal73",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 73,
                  "docs": []
                },
                {
                  "name": "Mortal74",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 74,
                  "docs": []
                },
                {
                  "name": "Mortal75",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 75,
                  "docs": []
                },
                {
                  "name": "Mortal76",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 76,
                  "docs": []
                },
                {
                  "name": "Mortal77",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 77,
                  "docs": []
                },
                {
                  "name": "Mortal78",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 78,
                  "docs": []
                },
                {
                  "name": "Mortal79",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 79,
                  "docs": []
                },
                {
                  "name": "Mortal80",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 80,
                  "docs": []
                },
                {
                  "name": "Mortal81",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 81,
                  "docs": []
                },
                {
                  "name": "Mortal82",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 82,
                  "docs": []
                },
                {
                  "name": "Mortal83",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 83,
                  "docs": []
                },
                {
                  "name": "Mortal84",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 84,
                  "docs": []
                },
                {
                  "name": "Mortal85",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 85,
                  "docs": []
                },
                {
                  "name": "Mortal86",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 86,
                  "docs": []
                },
                {
                  "name": "Mortal87",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 87,
                  "docs": []
                },
                {
                  "name": "Mortal88",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 88,
                  "docs": []
                },
                {
                  "name": "Mortal89",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 89,
                  "docs": []
                },
                {
                  "name": "Mortal90",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 90,
                  "docs": []
                },
                {
                  "name": "Mortal91",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 91,
                  "docs": []
                },
                {
                  "name": "Mortal92",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 92,
                  "docs": []
                },
                {
                  "name": "Mortal93",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 93,
                  "docs": []
                },
                {
                  "name": "Mortal94",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 94,
                  "docs": []
                },
                {
                  "name": "Mortal95",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 95,
                  "docs": []
                },
                {
                  "name": "Mortal96",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 96,
                  "docs": []
                },
                {
                  "name": "Mortal97",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 97,
                  "docs": []
                },
                {
                  "name": "Mortal98",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 98,
                  "docs": []
                },
                {
                  "name": "Mortal99",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 99,
                  "docs": []
                },
                {
                  "name": "Mortal100",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 100,
                  "docs": []
                },
                {
                  "name": "Mortal101",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 101,
                  "docs": []
                },
                {
                  "name": "Mortal102",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 102,
                  "docs": []
                },
                {
                  "name": "Mortal103",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 103,
                  "docs": []
                },
                {
                  "name": "Mortal104",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 104,
                  "docs": []
                },
                {
                  "name": "Mortal105",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 105,
                  "docs": []
                },
                {
                  "name": "Mortal106",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 106,
                  "docs": []
                },
                {
                  "name": "Mortal107",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 107,
                  "docs": []
                },
                {
                  "name": "Mortal108",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 108,
                  "docs": []
                },
                {
                  "name": "Mortal109",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 109,
                  "docs": []
                },
                {
                  "name": "Mortal110",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 110,
                  "docs": []
                },
                {
                  "name": "Mortal111",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 111,
                  "docs": []
                },
                {
                  "name": "Mortal112",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 112,
                  "docs": []
                },
                {
                  "name": "Mortal113",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 113,
                  "docs": []
                },
                {
                  "name": "Mortal114",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 114,
                  "docs": []
                },
                {
                  "name": "Mortal115",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 115,
                  "docs": []
                },
                {
                  "name": "Mortal116",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 116,
                  "docs": []
                },
                {
                  "name": "Mortal117",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 117,
                  "docs": []
                },
                {
                  "name": "Mortal118",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 118,
                  "docs": []
                },
                {
                  "name": "Mortal119",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 119,
                  "docs": []
                },
                {
                  "name": "Mortal120",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 120,
                  "docs": []
                },
                {
                  "name": "Mortal121",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 121,
                  "docs": []
                },
                {
                  "name": "Mortal122",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 122,
                  "docs": []
                },
                {
                  "name": "Mortal123",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 123,
                  "docs": []
                },
                {
                  "name": "Mortal124",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 124,
                  "docs": []
                },
                {
                  "name": "Mortal125",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 125,
                  "docs": []
                },
                {
                  "name": "Mortal126",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 126,
                  "docs": []
                },
                {
                  "name": "Mortal127",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 127,
                  "docs": []
                },
                {
                  "name": "Mortal128",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 128,
                  "docs": []
                },
                {
                  "name": "Mortal129",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 129,
                  "docs": []
                },
                {
                  "name": "Mortal130",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 130,
                  "docs": []
                },
                {
                  "name": "Mortal131",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 131,
                  "docs": []
                },
                {
                  "name": "Mortal132",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 132,
                  "docs": []
                },
                {
                  "name": "Mortal133",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 133,
                  "docs": []
                },
                {
                  "name": "Mortal134",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 134,
                  "docs": []
                },
                {
                  "name": "Mortal135",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 135,
                  "docs": []
                },
                {
                  "name": "Mortal136",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 136,
                  "docs": []
                },
                {
                  "name": "Mortal137",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 137,
                  "docs": []
                },
                {
                  "name": "Mortal138",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 138,
                  "docs": []
                },
                {
                  "name": "Mortal139",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 139,
                  "docs": []
                },
                {
                  "name": "Mortal140",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 140,
                  "docs": []
                },
                {
                  "name": "Mortal141",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 141,
                  "docs": []
                },
                {
                  "name": "Mortal142",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 142,
                  "docs": []
                },
                {
                  "name": "Mortal143",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 143,
                  "docs": []
                },
                {
                  "name": "Mortal144",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 144,
                  "docs": []
                },
                {
                  "name": "Mortal145",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 145,
                  "docs": []
                },
                {
                  "name": "Mortal146",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 146,
                  "docs": []
                },
                {
                  "name": "Mortal147",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 147,
                  "docs": []
                },
                {
                  "name": "Mortal148",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 148,
                  "docs": []
                },
                {
                  "name": "Mortal149",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 149,
                  "docs": []
                },
                {
                  "name": "Mortal150",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 150,
                  "docs": []
                },
                {
                  "name": "Mortal151",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 151,
                  "docs": []
                },
                {
                  "name": "Mortal152",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 152,
                  "docs": []
                },
                {
                  "name": "Mortal153",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 153,
                  "docs": []
                },
                {
                  "name": "Mortal154",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 154,
                  "docs": []
                },
                {
                  "name": "Mortal155",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 155,
                  "docs": []
                },
                {
                  "name": "Mortal156",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 156,
                  "docs": []
                },
                {
                  "name": "Mortal157",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 157,
                  "docs": []
                },
                {
                  "name": "Mortal158",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 158,
                  "docs": []
                },
                {
                  "name": "Mortal159",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 159,
                  "docs": []
                },
                {
                  "name": "Mortal160",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 160,
                  "docs": []
                },
                {
                  "name": "Mortal161",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 161,
                  "docs": []
                },
                {
                  "name": "Mortal162",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 162,
                  "docs": []
                },
                {
                  "name": "Mortal163",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 163,
                  "docs": []
                },
                {
                  "name": "Mortal164",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 164,
                  "docs": []
                },
                {
                  "name": "Mortal165",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 165,
                  "docs": []
                },
                {
                  "name": "Mortal166",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 166,
                  "docs": []
                },
                {
                  "name": "Mortal167",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 167,
                  "docs": []
                },
                {
                  "name": "Mortal168",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 168,
                  "docs": []
                },
                {
                  "name": "Mortal169",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 169,
                  "docs": []
                },
                {
                  "name": "Mortal170",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 170,
                  "docs": []
                },
                {
                  "name": "Mortal171",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 171,
                  "docs": []
                },
                {
                  "name": "Mortal172",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 172,
                  "docs": []
                },
                {
                  "name": "Mortal173",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 173,
                  "docs": []
                },
                {
                  "name": "Mortal174",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 174,
                  "docs": []
                },
                {
                  "name": "Mortal175",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 175,
                  "docs": []
                },
                {
                  "name": "Mortal176",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 176,
                  "docs": []
                },
                {
                  "name": "Mortal177",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 177,
                  "docs": []
                },
                {
                  "name": "Mortal178",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 178,
                  "docs": []
                },
                {
                  "name": "Mortal179",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 179,
                  "docs": []
                },
                {
                  "name": "Mortal180",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 180,
                  "docs": []
                },
                {
                  "name": "Mortal181",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 181,
                  "docs": []
                },
                {
                  "name": "Mortal182",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 182,
                  "docs": []
                },
                {
                  "name": "Mortal183",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 183,
                  "docs": []
                },
                {
                  "name": "Mortal184",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 184,
                  "docs": []
                },
                {
                  "name": "Mortal185",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 185,
                  "docs": []
                },
                {
                  "name": "Mortal186",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 186,
                  "docs": []
                },
                {
                  "name": "Mortal187",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 187,
                  "docs": []
                },
                {
                  "name": "Mortal188",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 188,
                  "docs": []
                },
                {
                  "name": "Mortal189",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 189,
                  "docs": []
                },
                {
                  "name": "Mortal190",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 190,
                  "docs": []
                },
                {
                  "name": "Mortal191",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 191,
                  "docs": []
                },
                {
                  "name": "Mortal192",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 192,
                  "docs": []
                },
                {
                  "name": "Mortal193",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 193,
                  "docs": []
                },
                {
                  "name": "Mortal194",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 194,
                  "docs": []
                },
                {
                  "name": "Mortal195",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 195,
                  "docs": []
                },
                {
                  "name": "Mortal196",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 196,
                  "docs": []
                },
                {
                  "name": "Mortal197",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 197,
                  "docs": []
                },
                {
                  "name": "Mortal198",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 198,
                  "docs": []
                },
                {
                  "name": "Mortal199",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 199,
                  "docs": []
                },
                {
                  "name": "Mortal200",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 200,
                  "docs": []
                },
                {
                  "name": "Mortal201",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 201,
                  "docs": []
                },
                {
                  "name": "Mortal202",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 202,
                  "docs": []
                },
                {
                  "name": "Mortal203",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 203,
                  "docs": []
                },
                {
                  "name": "Mortal204",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 204,
                  "docs": []
                },
                {
                  "name": "Mortal205",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 205,
                  "docs": []
                },
                {
                  "name": "Mortal206",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 206,
                  "docs": []
                },
                {
                  "name": "Mortal207",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 207,
                  "docs": []
                },
                {
                  "name": "Mortal208",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 208,
                  "docs": []
                },
                {
                  "name": "Mortal209",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 209,
                  "docs": []
                },
                {
                  "name": "Mortal210",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 210,
                  "docs": []
                },
                {
                  "name": "Mortal211",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 211,
                  "docs": []
                },
                {
                  "name": "Mortal212",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 212,
                  "docs": []
                },
                {
                  "name": "Mortal213",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 213,
                  "docs": []
                },
                {
                  "name": "Mortal214",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 214,
                  "docs": []
                },
                {
                  "name": "Mortal215",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 215,
                  "docs": []
                },
                {
                  "name": "Mortal216",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 216,
                  "docs": []
                },
                {
                  "name": "Mortal217",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 217,
                  "docs": []
                },
                {
                  "name": "Mortal218",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 218,
                  "docs": []
                },
                {
                  "name": "Mortal219",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 219,
                  "docs": []
                },
                {
                  "name": "Mortal220",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 220,
                  "docs": []
                },
                {
                  "name": "Mortal221",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 221,
                  "docs": []
                },
                {
                  "name": "Mortal222",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 222,
                  "docs": []
                },
                {
                  "name": "Mortal223",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 223,
                  "docs": []
                },
                {
                  "name": "Mortal224",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 224,
                  "docs": []
                },
                {
                  "name": "Mortal225",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 225,
                  "docs": []
                },
                {
                  "name": "Mortal226",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 226,
                  "docs": []
                },
                {
                  "name": "Mortal227",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 227,
                  "docs": []
                },
                {
                  "name": "Mortal228",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 228,
                  "docs": []
                },
                {
                  "name": "Mortal229",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 229,
                  "docs": []
                },
                {
                  "name": "Mortal230",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 230,
                  "docs": []
                },
                {
                  "name": "Mortal231",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 231,
                  "docs": []
                },
                {
                  "name": "Mortal232",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 232,
                  "docs": []
                },
                {
                  "name": "Mortal233",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 233,
                  "docs": []
                },
                {
                  "name": "Mortal234",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 234,
                  "docs": []
                },
                {
                  "name": "Mortal235",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 235,
                  "docs": []
                },
                {
                  "name": "Mortal236",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 236,
                  "docs": []
                },
                {
                  "name": "Mortal237",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 237,
                  "docs": []
                },
                {
                  "name": "Mortal238",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 238,
                  "docs": []
                },
                {
                  "name": "Mortal239",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 239,
                  "docs": []
                },
                {
                  "name": "Mortal240",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 240,
                  "docs": []
                },
                {
                  "name": "Mortal241",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 241,
                  "docs": []
                },
                {
                  "name": "Mortal242",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 242,
                  "docs": []
                },
                {
                  "name": "Mortal243",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 243,
                  "docs": []
                },
                {
                  "name": "Mortal244",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 244,
                  "docs": []
                },
                {
                  "name": "Mortal245",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 245,
                  "docs": []
                },
                {
                  "name": "Mortal246",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 246,
                  "docs": []
                },
                {
                  "name": "Mortal247",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 247,
                  "docs": []
                },
                {
                  "name": "Mortal248",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 248,
                  "docs": []
                },
                {
                  "name": "Mortal249",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 249,
                  "docs": []
                },
                {
                  "name": "Mortal250",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 250,
                  "docs": []
                },
                {
                  "name": "Mortal251",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 251,
                  "docs": []
                },
                {
                  "name": "Mortal252",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 252,
                  "docs": []
                },
                {
                  "name": "Mortal253",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 253,
                  "docs": []
                },
                {
                  "name": "Mortal254",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 254,
                  "docs": []
                },
                {
                  "name": "Mortal255",
                  "fields": [
                    {
                      "typeId": 2,
                      "docs": []
                    }
                  ],
                  "index": 255,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 626,
          "path": [
            "frame_system",
            "extensions",
            "check_nonce",
            "CheckNonce"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 132,
                  "typeName": "T::Index",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 627,
          "path": [
            "frame_system",
            "extensions",
            "check_weight",
            "CheckWeight"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": []
            }
          },
          "docs": []
        },
        {
          "id": 628,
          "path": [
            "pallet_transaction_payment",
            "ChargeTransactionPayment"
          ],
          "params": [
            {
              "name": "T"
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 108,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 629,
          "path": [
            "sp_runtime",
            "generic",
            "unchecked_extrinsic",
            "UncheckedExtrinsic"
          ],
          "params": [
            {
              "name": "Address",
              "typeId": 0
            },
            {
              "name": "Call",
              "typeId": 86
            },
            {
              "name": "Signature",
              "typeId": 618
            },
            {
              "name": "Extra",
              "typeId": 619
            }
          ],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": [
                {
                  "typeId": 14,
                  "docs": []
                }
              ]
            }
          },
          "docs": []
        },
        {
          "id": 630,
          "path": [
            "moonbeam_runtime",
            "Runtime"
          ],
          "params": [],
          "type": {
            "tag": "Struct",
            "value": {
              "fields": []
            }
          },
          "docs": []
        }
      ],
      "pallets": [
        {
          "name": "System",
          "storage": {
            "prefix": "System",
            "entries": [
              {
                "name": "Account",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 3
                  }
                },
                "default": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080",
                "docs": [
                  " The full account information for a particular account ID."
                ]
              },
              {
                "name": "ExtrinsicCount",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 4
                  }
                },
                "default": "0x00",
                "docs": [
                  " Total extrinsics count for the current block."
                ]
              },
              {
                "name": "BlockWeight",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 8
                  }
                },
                "default": "0x000000000000",
                "docs": [
                  " The current weight for the block."
                ]
              },
              {
                "name": "AllExtrinsicsLen",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 4
                  }
                },
                "default": "0x00",
                "docs": [
                  " Total length (in bytes) for all extrinsics put together, for the current block."
                ]
              },
              {
                "name": "BlockHash",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "key": 4,
                    "value": 12
                  }
                },
                "default": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Map of block numbers to block hashes."
                ]
              },
              {
                "name": "ExtrinsicData",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "key": 4,
                    "value": 14
                  }
                },
                "default": "0x00",
                "docs": [
                  " Extrinsics data for the current block (maps an extrinsic's index to its data)."
                ]
              },
              {
                "name": "Number",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " The current block number being processed. Set by `execute_block`."
                ]
              },
              {
                "name": "ParentHash",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 12
                  }
                },
                "default": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Hash of the previous block."
                ]
              },
              {
                "name": "Digest",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 15
                  }
                },
                "default": "0x00",
                "docs": [
                  " Digest of the current block, also part of the block header."
                ]
              },
              {
                "name": "Events",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 19
                  }
                },
                "default": "0x00",
                "docs": [
                  " Events deposited for the current block.",
                  "",
                  " NOTE: The item is unbound and should therefore never be read on chain.",
                  " It could otherwise inflate the PoV size of a block.",
                  "",
                  " Events have a large in-memory size. Box the events to not go out-of-memory",
                  " just in case someone still reads them from within the runtime."
                ]
              },
              {
                "name": "EventCount",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " The number of events in the `Events<T>` list."
                ]
              },
              {
                "name": "EventTopics",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "key": 12,
                    "value": 351
                  }
                },
                "default": "0x00",
                "docs": [
                  " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                  " of events in the `<Events<T>>` list.",
                  "",
                  " All topic vectors have deterministic storage locations depending on the topic. This",
                  " allows light-clients to leverage the changes trie storage tracking mechanism and",
                  " in case of changes fetch the list of events of interest.",
                  "",
                  " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just",
                  " the `EventIndex` then in case if the topic has the same contents on the next block",
                  " no notification will be triggered thus the event might be lost."
                ]
              },
              {
                "name": "LastRuntimeUpgrade",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 352
                  }
                },
                "default": "0x00",
                "docs": [
                  " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
                ]
              },
              {
                "name": "UpgradedToU32RefCount",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 37
                  }
                },
                "default": "0x00",
                "docs": [
                  " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
                ]
              },
              {
                "name": "UpgradedToTripleRefCount",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 37
                  }
                },
                "default": "0x00",
                "docs": [
                  " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
                  " (default) if not."
                ]
              },
              {
                "name": "ExecutionPhase",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 350
                  }
                },
                "default": "0x00",
                "docs": [
                  " The execution phase of the block."
                ]
              }
            ]
          },
          "calls": 87,
          "event": 22,
          "constants": [
            {
              "name": "BlockWeights",
              "typeId": 353,
              "value": "0x0203815d00070088526a740200400102ca9a3b00010780bf9b9c4b0200d000010700e6bd4f570200f000010000c2e9171b000107901951bf680200200101070088526a7402004001010700a2941a1d02005000c2e9171b00000000",
              "docs": [
                " Block & extrinsics weights: base values and limits."
              ]
            },
            {
              "name": "BlockLength",
              "typeId": 356,
              "value": "0x00003c000000500000005000",
              "docs": [
                " The maximum length of a block (in bytes)."
              ]
            },
            {
              "name": "BlockHashCount",
              "typeId": 4,
              "value": "0x00010000",
              "docs": [
                " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
              ]
            },
            {
              "name": "DbWeight",
              "typeId": 358,
              "value": "0x40787d010000000000e1f50500000000",
              "docs": [
                " The weight of runtime database operations the runtime can invoke."
              ]
            },
            {
              "name": "Version",
              "typeId": 359,
              "value": "0x206d6f6f6e6265616d206d6f6f6e6265616d03000000c5090000000000003cd2bc9897eed08f1503000000df6acb689907609b0400000037e397fc7c91f5e40200000040fe3ad401f8959a06000000f78b278be53f454c02000000ab3c0572291feb8b01000000bc9d89904f5b923f01000000bd78255d4feeea1f04000000a33d43f58731ad8402000000582211f65bb14b8905000000e65b00e46cedd0aa0200000037c8bb1350a9a2a8040000002aa62120049dd2d201000000ea93e3f16f3d696202000000ba8173bf23b2e6f8010000000200000000",
              "docs": [
                " Get the chain's current version."
              ]
            },
            {
              "name": "SS58Prefix",
              "typeId": 56,
              "value": "0x0405",
              "docs": [
                " The designated SS58 prefix of this chain.",
                "",
                " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
                " that the runtime should know about the prefix in order to make use of it as",
                " an identifier of the chain."
              ]
            }
          ],
          "error": 363,
          "index": 0
        },
        {
          "name": "ParachainSystem",
          "storage": {
            "prefix": "ParachainSystem",
            "entries": [
              {
                "name": "PendingValidationCode",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 14
                  }
                },
                "default": "0x00",
                "docs": [
                  " In case of a scheduled upgrade, this storage field contains the validation code to be applied.",
                  "",
                  " As soon as the relay chain gives us the go-ahead signal, we will overwrite the [`:code`][well_known_keys::CODE]",
                  " which will result the next block process with the new validation code. This concludes the upgrade process.",
                  "",
                  " [well_known_keys::CODE]: sp_core::storage::well_known_keys::CODE"
                ]
              },
              {
                "name": "NewValidationCode",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 14
                  }
                },
                "default": "0x00",
                "docs": [
                  " Validation code that is set by the parachain and is to be communicated to collator and",
                  " consequently the relay-chain.",
                  "",
                  " This will be cleared in `on_initialize` of each new block if no other pallet already set",
                  " the value."
                ]
              },
              {
                "name": "ValidationData",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 93
                  }
                },
                "default": "0x00",
                "docs": [
                  " The [`PersistedValidationData`] set for this block.",
                  " This value is expected to be set only once per block and it's never stored",
                  " in the trie."
                ]
              },
              {
                "name": "DidSetValidationCode",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 37
                  }
                },
                "default": "0x00",
                "docs": [
                  " Were the validation data set to notify the relay chain?"
                ]
              },
              {
                "name": "LastRelayChainBlockNumber",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " The relay chain block number associated with the last parachain block."
                ]
              },
              {
                "name": "UpgradeRestrictionSignal",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 364
                  }
                },
                "default": "0x00",
                "docs": [
                  " An option which indicates if the relay-chain restricts signalling a validation code upgrade.",
                  " In other words, if this is `Some` and [`NewValidationCode`] is `Some` then the produced",
                  " candidate will be invalid.",
                  "",
                  " This storage item is a mirror of the corresponding value for the current parachain from the",
                  " relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is",
                  " set after the inherent."
                ]
              },
              {
                "name": "RelayStateProof",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 95
                  }
                },
                "default": "0x00",
                "docs": [
                  " The state proof for the last relay parent block.",
                  "",
                  " This field is meant to be updated each block with the validation data inherent. Therefore,",
                  " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                  "",
                  " This data is also absent from the genesis."
                ]
              },
              {
                "name": "RelevantMessagingState",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 366
                  }
                },
                "default": "0x00",
                "docs": [
                  " The snapshot of some state related to messaging relevant to the current parachain as per",
                  " the relay parent.",
                  "",
                  " This field is meant to be updated each block with the validation data inherent. Therefore,",
                  " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                  "",
                  " This data is also absent from the genesis."
                ]
              },
              {
                "name": "HostConfiguration",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 371
                  }
                },
                "default": "0x00",
                "docs": [
                  " The parachain host configuration that was obtained from the relay parent.",
                  "",
                  " This field is meant to be updated each block with the validation data inherent. Therefore,",
                  " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                  "",
                  " This data is also absent from the genesis."
                ]
              },
              {
                "name": "LastDmqMqcHead",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 372
                  }
                },
                "default": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " The last downward message queue chain head we have observed.",
                  "",
                  " This value is loaded before and saved after processing inbound downward messages carried",
                  " by the system inherent."
                ]
              },
              {
                "name": "LastHrmpMqcHeads",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 373
                  }
                },
                "default": "0x00",
                "docs": [
                  " The message queue chain heads we have observed per each channel incoming channel.",
                  "",
                  " This value is loaded before and saved after processing inbound downward messages carried",
                  " by the system inherent."
                ]
              },
              {
                "name": "ProcessedDownwardMessages",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " Number of downward messages processed in a block.",
                  "",
                  " This will be cleared in `on_initialize` of each new block."
                ]
              },
              {
                "name": "HrmpWatermark",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " HRMP watermark that was set in a block.",
                  "",
                  " This will be cleared in `on_initialize` of each new block."
                ]
              },
              {
                "name": "HrmpOutboundMessages",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 376
                  }
                },
                "default": "0x00",
                "docs": [
                  " HRMP messages that were sent in a block.",
                  "",
                  " This will be cleared in `on_initialize` of each new block."
                ]
              },
              {
                "name": "UpwardMessages",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 90
                  }
                },
                "default": "0x00",
                "docs": [
                  " Upward messages that were sent in a block.",
                  "",
                  " This will be cleared in `on_initialize` of each new block."
                ]
              },
              {
                "name": "PendingUpwardMessages",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 90
                  }
                },
                "default": "0x00",
                "docs": [
                  " Upward messages that are still pending and not yet send to the relay chain."
                ]
              },
              {
                "name": "AnnouncedHrmpMessagesPerCandidate",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " The number of HRMP messages we observed in `on_initialize` and thus used that number for",
                  " announcing the weight of `on_initialize` and `on_finalize`."
                ]
              },
              {
                "name": "ReservedXcmpWeightOverride",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 9
                  }
                },
                "default": "0x00",
                "docs": [
                  " The weight we reserve at the beginning of the block for processing XCMP messages. This",
                  " overrides the amount set in the Config trait."
                ]
              },
              {
                "name": "ReservedDmpWeightOverride",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 9
                  }
                },
                "default": "0x00",
                "docs": [
                  " The weight we reserve at the beginning of the block for processing DMP messages. This",
                  " overrides the amount set in the Config trait."
                ]
              },
              {
                "name": "AuthorizedUpgrade",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 378
                  }
                },
                "default": "0x00",
                "docs": [
                  " The next authorized upgrade, if there is one."
                ]
              },
              {
                "name": "CustomValidationHeadData",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 14
                  }
                },
                "default": "0x00",
                "docs": [
                  " A custom head data that should be returned as result of `validate_block`.",
                  "",
                  " See [`Pallet::set_custom_validation_head_data`] for more information."
                ]
              }
            ]
          },
          "calls": 91,
          "event": 31,
          "constants": [],
          "error": 379,
          "index": 1
        },
        {
          "name": "Timestamp",
          "storage": {
            "prefix": "Timestamp",
            "entries": [
              {
                "name": "Now",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 11
                  }
                },
                "default": "0x0000000000000000",
                "docs": [
                  " Current time for the current block."
                ]
              },
              {
                "name": "DidUpdate",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 37
                  }
                },
                "default": "0x00",
                "docs": [
                  " Did the timestamp get updated in this block?"
                ]
              }
            ]
          },
          "calls": 105,
          "constants": [
            {
              "name": "MinimumPeriod",
              "typeId": 11,
              "value": "0x7017000000000000",
              "docs": [
                " The minimum period between blocks. Beware that this is different to the *expected*",
                " period that the block production apparatus provides. Your chosen consensus system will",
                " generally work with this to determine a sensible block time. e.g. For Aura, it will be",
                " double this period on default settings."
              ]
            }
          ],
          "index": 3
        },
        {
          "name": "ParachainInfo",
          "storage": {
            "prefix": "ParachainInfo",
            "entries": [
              {
                "name": "ParachainId",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 100
                  }
                },
                "default": "0x64000000",
                "docs": []
              }
            ]
          },
          "constants": [],
          "index": 4
        },
        {
          "name": "RootTesting",
          "storage": {
            "prefix": "RootTesting",
            "entries": []
          },
          "calls": 106,
          "constants": [],
          "index": 5
        },
        {
          "name": "Balances",
          "storage": {
            "prefix": "Balances",
            "entries": [
              {
                "name": "TotalIssuance",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 6
                  }
                },
                "default": "0x00000000000000000000000000000000",
                "docs": [
                  " The total units issued in the system."
                ]
              },
              {
                "name": "InactiveIssuance",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 6
                  }
                },
                "default": "0x00000000000000000000000000000000",
                "docs": [
                  " The total units of outstanding deactivated balance in the system."
                ]
              },
              {
                "name": "Account",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 5
                  }
                },
                "default": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080",
                "docs": [
                  " The Balances pallet example of storing the balance of an account.",
                  "",
                  " # Example",
                  "",
                  " ```nocompile",
                  "  impl pallet_balances::Config for Runtime {",
                  "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>",
                  "  }",
                  " ```",
                  "",
                  " You can also store the balance of an account in the `System` pallet.",
                  "",
                  " # Example",
                  "",
                  " ```nocompile",
                  "  impl pallet_balances::Config for Runtime {",
                  "   type AccountStore = System",
                  "  }",
                  " ```",
                  "",
                  " But this comes with tradeoffs, storing account balances in the system pallet stores",
                  " `frame_system` data alongside the account data contrary to storing account balances in the",
                  " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
                  " NOTE: This is only used in the case that this pallet is used to store balances."
                ]
              },
              {
                "name": "Locks",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 380
                  }
                },
                "default": "0x00",
                "docs": [
                  " Any liquidity locks on some account balances.",
                  " NOTE: Should only be accessed when setting, changing and freeing a lock."
                ]
              },
              {
                "name": "Reserves",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 384
                  }
                },
                "default": "0x00",
                "docs": [
                  " Named reserves on some account balances."
                ]
              },
              {
                "name": "Holds",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 387
                  }
                },
                "default": "0x00",
                "docs": [
                  " Holds on account balances."
                ]
              },
              {
                "name": "Freezes",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 387
                  }
                },
                "default": "0x00",
                "docs": [
                  " Freeze locks on account balances."
                ]
              }
            ]
          },
          "calls": 107,
          "event": 33,
          "constants": [
            {
              "name": "ExistentialDeposit",
              "typeId": 6,
              "value": "0x00000000000000000000000000000000",
              "docs": [
                " The minimum amount required to keep an account open. MUST BE GREATER THAN ZERO!",
                "",
                " If you *really* need it to be zero, you can enable the feature `insecure_zero_ed` for",
                " this pallet. However, you do so at your own risk: this will open up a major DoS vector.",
                " In case you have multiple sources of provider references, you may also get unexpected",
                " behaviour if you set this to zero.",
                "",
                " Bottom line: Do yourself a favour and make it at least one!"
              ]
            },
            {
              "name": "MaxLocks",
              "typeId": 4,
              "value": "0x32000000",
              "docs": [
                " The maximum number of locks that should exist on an account.",
                " Not strictly enforced, but used for weight estimation."
              ]
            },
            {
              "name": "MaxReserves",
              "typeId": 4,
              "value": "0x32000000",
              "docs": [
                " The maximum number of named reserves that can exist on an account."
              ]
            },
            {
              "name": "MaxHolds",
              "typeId": 4,
              "value": "0x00000000",
              "docs": [
                " The maximum number of holds that can exist on an account at any time."
              ]
            },
            {
              "name": "MaxFreezes",
              "typeId": 4,
              "value": "0x00000000",
              "docs": [
                " The maximum number of individual freeze locks that can exist on an account at any time."
              ]
            }
          ],
          "error": 390,
          "index": 10
        },
        {
          "name": "TransactionPayment",
          "storage": {
            "prefix": "TransactionPayment",
            "entries": [
              {
                "name": "NextFeeMultiplier",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 391
                  }
                },
                "default": "0x000064a7b3b6e00d0000000000000000",
                "docs": []
              },
              {
                "name": "StorageVersion",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 392
                  }
                },
                "default": "0x00",
                "docs": []
              }
            ]
          },
          "event": 35,
          "constants": [
            {
              "name": "OperationalFeeMultiplier",
              "typeId": 2,
              "value": "0x05",
              "docs": [
                " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
                " `priority`",
                "",
                " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later",
                " added to a tip component in regular `priority` calculations.",
                " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
                " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
                "",
                " ```rust,ignore",
                " // For `Normal`",
                " let priority = priority_calc(tip);",
                "",
                " // For `Operational`",
                " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
                " let priority = priority_calc(tip + virtual_tip);",
                " ```",
                "",
                " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
                " sent with the transaction. So, not only does the transaction get a priority bump based",
                " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
                " transactions."
              ]
            }
          ],
          "index": 11
        },
        {
          "name": "ParachainStaking",
          "storage": {
            "prefix": "ParachainStaking",
            "entries": [
              {
                "name": "CollatorCommission",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 42
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " Commission percent taken off of rewards for all collators"
                ]
              },
              {
                "name": "TotalSelected",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " The total candidates selected every round"
                ]
              },
              {
                "name": "ParachainBondInfo",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 393
                  }
                },
                "default": "0x000000000000000000000000000000000000000000",
                "docs": [
                  " Parachain bond config info { account, percent_of_inflation }"
                ]
              },
              {
                "name": "Round",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 394
                  }
                },
                "default": "0x010000000100000014000000",
                "docs": [
                  " Current round index and next round scheduled transition"
                ]
              },
              {
                "name": "DelegatorState",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "key": 0,
                    "value": 395
                  }
                },
                "default": "0x00",
                "docs": [
                  " Get delegator state associated with an account if account is delegating else None"
                ]
              },
              {
                "name": "CandidateInfo",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "key": 0,
                    "value": 400
                  }
                },
                "default": "0x00",
                "docs": [
                  " Get collator candidate info associated with an account if account is candidate else None"
                ]
              },
              {
                "name": "DelegationScheduledRequests",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 405
                  }
                },
                "default": "0x00",
                "docs": [
                  " Stores outstanding delegation requests per collator."
                ]
              },
              {
                "name": "AutoCompoundingDelegations",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 408
                  }
                },
                "default": "0x00",
                "docs": [
                  " Stores auto-compounding configuration per collator."
                ]
              },
              {
                "name": "TopDelegations",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "key": 0,
                    "value": 411
                  }
                },
                "default": "0x00",
                "docs": [
                  " Top delegations for collator candidate"
                ]
              },
              {
                "name": "BottomDelegations",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "key": 0,
                    "value": 411
                  }
                },
                "default": "0x00",
                "docs": [
                  " Bottom delegations for collator candidate"
                ]
              },
              {
                "name": "SelectedCandidates",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 412
                  }
                },
                "default": "0x00",
                "docs": [
                  " The collator candidates selected for the current round"
                ]
              },
              {
                "name": "Total",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 6
                  }
                },
                "default": "0x00000000000000000000000000000000",
                "docs": [
                  " Total capital locked by this staking pallet"
                ]
              },
              {
                "name": "CandidatePool",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 413
                  }
                },
                "default": "0x00",
                "docs": [
                  " The pool of collator candidates, each with their total backing stake"
                ]
              },
              {
                "name": "AtStake",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat",
                      "twox64Concat"
                    ],
                    "key": 415,
                    "value": 416
                  }
                },
                "default": "0x000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Snapshot of collator delegation stake at the start of the round"
                ]
              },
              {
                "name": "DelayedPayouts",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "key": 4,
                    "value": 419
                  }
                },
                "default": "0x00",
                "docs": [
                  " Delayed payouts"
                ]
              },
              {
                "name": "Staked",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "key": 4,
                    "value": 6
                  }
                },
                "default": "0x00000000000000000000000000000000",
                "docs": [
                  " Total counted stake for selected candidates in the round"
                ]
              },
              {
                "name": "InflationConfig",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 420
                  }
                },
                "default": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Inflation configuration"
                ]
              },
              {
                "name": "Points",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "key": 4,
                    "value": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " Total points awarded to collators for block production in the round"
                ]
              },
              {
                "name": "AwardedPts",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat",
                      "twox64Concat"
                    ],
                    "key": 415,
                    "value": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " Points for each collator per round"
                ]
              }
            ]
          },
          "calls": 110,
          "event": 36,
          "constants": [
            {
              "name": "MinBlocksPerRound",
              "typeId": 4,
              "value": "0x0a000000",
              "docs": [
                " Minimum number of blocks per round"
              ]
            },
            {
              "name": "LeaveCandidatesDelay",
              "typeId": 4,
              "value": "0x1c000000",
              "docs": [
                " Number of rounds that candidates remain bonded before exit request is executable"
              ]
            },
            {
              "name": "CandidateBondLessDelay",
              "typeId": 4,
              "value": "0x1c000000",
              "docs": [
                " Number of rounds candidate requests to decrease self-bond must wait to be executable"
              ]
            },
            {
              "name": "LeaveDelegatorsDelay",
              "typeId": 4,
              "value": "0x1c000000",
              "docs": [
                " Number of rounds that delegators remain bonded before exit request is executable"
              ]
            },
            {
              "name": "RevokeDelegationDelay",
              "typeId": 4,
              "value": "0x1c000000",
              "docs": [
                " Number of rounds that delegations remain bonded before revocation request is executable"
              ]
            },
            {
              "name": "DelegationBondLessDelay",
              "typeId": 4,
              "value": "0x1c000000",
              "docs": [
                " Number of rounds that delegation less requests must wait before executable"
              ]
            },
            {
              "name": "RewardPaymentDelay",
              "typeId": 4,
              "value": "0x02000000",
              "docs": [
                " Number of rounds after which block authors are rewarded"
              ]
            },
            {
              "name": "MinSelectedCandidates",
              "typeId": 4,
              "value": "0x08000000",
              "docs": [
                " Minimum number of selected candidates every round"
              ]
            },
            {
              "name": "MaxTopDelegationsPerCandidate",
              "typeId": 4,
              "value": "0x2c010000",
              "docs": [
                " Maximum top delegations counted per candidate"
              ]
            },
            {
              "name": "MaxBottomDelegationsPerCandidate",
              "typeId": 4,
              "value": "0x32000000",
              "docs": [
                " Maximum bottom delegations (not counted) per candidate"
              ]
            },
            {
              "name": "MaxDelegationsPerDelegator",
              "typeId": 4,
              "value": "0x64000000",
              "docs": [
                " Maximum delegations per delegator"
              ]
            },
            {
              "name": "MinCandidateStk",
              "typeId": 6,
              "value": "0x00000042db999d3784a7010000000000",
              "docs": [
                " Minimum stake required for any account to be a collator candidate"
              ]
            },
            {
              "name": "MinDelegation",
              "typeId": 6,
              "value": "0x000088b116afe3b50200000000000000",
              "docs": [
                " Minimum stake for any registered on-chain account to delegate"
              ]
            },
            {
              "name": "MaxCandidates",
              "typeId": 4,
              "value": "0xc8000000",
              "docs": [
                " Maximum candidates"
              ]
            }
          ],
          "error": 421,
          "index": 20
        },
        {
          "name": "AuthorInherent",
          "storage": {
            "prefix": "AuthorInherent",
            "entries": [
              {
                "name": "Author",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 0
                  }
                },
                "default": "0x00",
                "docs": [
                  " Author of current block."
                ]
              },
              {
                "name": "HighestSlotSeen",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " The highest slot that has been seen in the history of this chain.",
                  " This is a strictly-increasing value."
                ]
              }
            ]
          },
          "calls": 113,
          "constants": [],
          "error": 422,
          "index": 21
        },
        {
          "name": "AuthorFilter",
          "storage": {
            "prefix": "AuthorFilter",
            "entries": [
              {
                "name": "EligibleRatio",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 41
                  }
                },
                "default": "0x32",
                "docs": []
              },
              {
                "name": "EligibleCount",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 44
                  }
                },
                "default": "0x32000000",
                "docs": [
                  " The number of active authors that will be eligible at each height."
                ]
              }
            ]
          },
          "calls": 114,
          "event": 43,
          "constants": [],
          "index": 22
        },
        {
          "name": "AuthorMapping",
          "storage": {
            "prefix": "AuthorMapping",
            "entries": [
              {
                "name": "MappingWithDeposit",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "key": 46,
                    "value": 423
                  }
                },
                "default": "0x00",
                "docs": [
                  " We maintain a mapping from the NimbusIds used in the consensus layer",
                  " to the AccountIds runtime."
                ]
              },
              {
                "name": "NimbusLookup",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 46
                  }
                },
                "default": "0x00",
                "docs": [
                  " We maintain a reverse mapping from AccountIds to NimbusIDS"
                ]
              }
            ]
          },
          "calls": 115,
          "event": 45,
          "constants": [],
          "error": 424,
          "index": 23
        },
        {
          "name": "MoonbeamOrbiters",
          "storage": {
            "prefix": "MoonbeamOrbiters",
            "entries": [
              {
                "name": "AccountLookupOverride",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 50
                  }
                },
                "default": "0x00",
                "docs": [
                  " Account lookup override"
                ]
              },
              {
                "name": "CollatorsPool",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 425
                  }
                },
                "default": "0x00",
                "docs": [
                  " Current orbiters, with their \"parent\" collator"
                ]
              },
              {
                "name": "CounterForCollatorsPool",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  "Counter for the related counted storage map"
                ]
              },
              {
                "name": "CurrentRound",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " Current round index"
                ]
              },
              {
                "name": "ForceRotation",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 37
                  }
                },
                "default": "0x00",
                "docs": [
                  " If true, it forces the rotation at the next round.",
                  " A use case: when changing RotatePeriod, you need a migration code that sets this value to",
                  " true to avoid holes in OrbiterPerRound."
                ]
              },
              {
                "name": "MinOrbiterDeposit",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 6
                  }
                },
                "default": "0x00",
                "docs": [
                  " Minimum deposit required to be registered as an orbiter"
                ]
              },
              {
                "name": "OrbiterPerRound",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat",
                      "blake2_128Concat"
                    ],
                    "key": 415,
                    "value": 0
                  }
                },
                "default": "0x00",
                "docs": [
                  " Store active orbiter per round and per parent collator"
                ]
              },
              {
                "name": "RegisteredOrbiter",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 37
                  }
                },
                "default": "0x00",
                "docs": [
                  " Check if account is an orbiter"
                ]
              }
            ]
          },
          "calls": 116,
          "event": 49,
          "constants": [
            {
              "name": "MaxPoolSize",
              "typeId": 4,
              "value": "0x08000000",
              "docs": [
                " Maximum number of orbiters per collator."
              ]
            },
            {
              "name": "MaxRoundArchive",
              "typeId": 4,
              "value": "0x04000000",
              "docs": [
                " Maximum number of round to keep on storage."
              ]
            },
            {
              "name": "RotatePeriod",
              "typeId": 4,
              "value": "0x01000000",
              "docs": [
                " Number of rounds before changing the selected orbiter.",
                " WARNING: when changing `RotatePeriod`, you need a migration code that sets",
                " `ForceRotation` to true to avoid holes in `OrbiterPerRound`."
              ]
            }
          ],
          "error": 428,
          "index": 24
        },
        {
          "name": "Utility",
          "calls": 117,
          "event": 51,
          "constants": [
            {
              "name": "batched_calls_limit",
              "typeId": 4,
              "value": "0xaa2a0000",
              "docs": [
                " The limit on the number of batched calls."
              ]
            }
          ],
          "error": 429,
          "index": 30
        },
        {
          "name": "Proxy",
          "storage": {
            "prefix": "Proxy",
            "entries": [
              {
                "name": "Proxies",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "key": 0,
                    "value": 430
                  }
                },
                "default": "0x0000000000000000000000000000000000",
                "docs": [
                  " The set of account proxies. Maps the account which has delegated to the accounts",
                  " which are being delegated to, together with the amount held on deposit."
                ]
              },
              {
                "name": "Announcements",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "key": 0,
                    "value": 434
                  }
                },
                "default": "0x0000000000000000000000000000000000",
                "docs": [
                  " The announcements made by the proxy (key)."
                ]
              }
            ]
          },
          "calls": 139,
          "event": 54,
          "constants": [
            {
              "name": "ProxyDepositBase",
              "typeId": 6,
              "value": "0x0000f007985ae38b0000000000000000",
              "docs": [
                " The base amount of currency needed to reserve for creating a proxy.",
                "",
                " This is held for an additional storage item whose value size is",
                " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."
              ]
            },
            {
              "name": "ProxyDepositFactor",
              "typeId": 6,
              "value": "0x0000d52ae311ea020000000000000000",
              "docs": [
                " The amount of currency needed per proxy added.",
                "",
                " This is held for adding 32 bytes plus an instance of `ProxyType` more into a",
                " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take",
                " into account `32 + proxy_type.encode().len()` bytes of data."
              ]
            },
            {
              "name": "MaxProxies",
              "typeId": 4,
              "value": "0x20000000",
              "docs": [
                " The maximum amount of proxies allowed for a single account."
              ]
            },
            {
              "name": "MaxPending",
              "typeId": 4,
              "value": "0x20000000",
              "docs": [
                " The maximum amount of time-delayed announcements that are allowed to be pending."
              ]
            },
            {
              "name": "AnnouncementDepositBase",
              "typeId": 6,
              "value": "0x0000f007985ae38b0000000000000000",
              "docs": [
                " The base amount of currency needed to reserve for creating an announcement.",
                "",
                " This is held when a new storage item holding a `Balance` is created (typically 16",
                " bytes)."
              ]
            },
            {
              "name": "AnnouncementDepositFactor",
              "typeId": 6,
              "value": "0x000038720885c5070000000000000000",
              "docs": [
                " The amount of currency needed per announcement made.",
                "",
                " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)",
                " into a pre-existing storage value."
              ]
            }
          ],
          "error": 438,
          "index": 31
        },
        {
          "name": "MaintenanceMode",
          "storage": {
            "prefix": "MaintenanceMode",
            "entries": [
              {
                "name": "MaintenanceMode",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 37
                  }
                },
                "default": "0x00",
                "docs": [
                  " Whether the site is in maintenance mode"
                ]
              }
            ]
          },
          "calls": 141,
          "event": 57,
          "constants": [],
          "error": 439,
          "index": 32
        },
        {
          "name": "Identity",
          "storage": {
            "prefix": "Identity",
            "entries": [
              {
                "name": "IdentityOf",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "key": 0,
                    "value": 440
                  }
                },
                "default": "0x00",
                "docs": [
                  " Information that is pertinent to identify the entity behind an account.",
                  "",
                  " TWOX-NOTE: OK ― `AccountId` is a secure hash."
                ]
              },
              {
                "name": "SuperOf",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 180
                  }
                },
                "default": "0x00",
                "docs": [
                  " The super-identity of an alternative \"sub\" identity together with its name, within that",
                  " context. If the account is not some other account's sub-identity, then just `None`."
                ]
              },
              {
                "name": "SubsOf",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "key": 0,
                    "value": 444
                  }
                },
                "default": "0x0000000000000000000000000000000000",
                "docs": [
                  " Alternative \"sub\" identities of this account.",
                  "",
                  " The first item is the deposit, the second is a vector of the accounts.",
                  "",
                  " TWOX-NOTE: OK ― `AccountId` is a secure hash."
                ]
              },
              {
                "name": "Registrars",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 446
                  }
                },
                "default": "0x00",
                "docs": [
                  " The set of registrars. Not expected to get very big as can only be added through a",
                  " special origin (likely a council motion).",
                  "",
                  " The index into this can be cast to `RegistrarIndex` to get a valid value."
                ]
              }
            ]
          },
          "calls": 142,
          "event": 58,
          "constants": [
            {
              "name": "BasicDeposit",
              "typeId": 6,
              "value": "0x00006a2a592395ae0000000000000000",
              "docs": [
                " The amount held on deposit for a registered identity"
              ]
            },
            {
              "name": "FieldDeposit",
              "typeId": 6,
              "value": "0x0000c2cf80ca28090000000000000000",
              "docs": [
                " The amount held on deposit per additional field for a registered identity."
              ]
            },
            {
              "name": "SubAccountDeposit",
              "typeId": 6,
              "value": "0x0000ddac351322920000000000000000",
              "docs": [
                " The amount held on deposit for a registered subaccount. This should account for the fact",
                " that one storage item's value will increase by the size of an account ID, and there will",
                " be another trie item whose value is the size of an account ID plus 32 bytes."
              ]
            },
            {
              "name": "MaxSubAccounts",
              "typeId": 4,
              "value": "0x64000000",
              "docs": [
                " The maximum number of sub-accounts allowed per identified account."
              ]
            },
            {
              "name": "MaxAdditionalFields",
              "typeId": 4,
              "value": "0x64000000",
              "docs": [
                " Maximum number of additional fields that may be stored in an ID. Needed to bound the I/O",
                " required to access an identity, but can be pretty high."
              ]
            },
            {
              "name": "MaxRegistrars",
              "typeId": 4,
              "value": "0x14000000",
              "docs": [
                " Maxmimum number of registrars allowed in the system. Needed to bound the complexity",
                " of, e.g., updating judgements."
              ]
            }
          ],
          "error": 450,
          "index": 33
        },
        {
          "name": "Migrations",
          "storage": {
            "prefix": "Migrations",
            "entries": [
              {
                "name": "FullyUpgraded",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 37
                  }
                },
                "default": "0x00",
                "docs": [
                  " True if all required migrations have completed"
                ]
              },
              {
                "name": "MigrationState",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "key": 14,
                    "value": 37
                  }
                },
                "default": "0x00",
                "docs": [
                  " MigrationState tracks the progress of a migration.",
                  " Maps name (Vec<u8>) -> whether or not migration has been completed (bool)"
                ]
              },
              {
                "name": "ShouldPauseXcm",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 37
                  }
                },
                "default": "0x00",
                "docs": [
                  " Temporary value that is set to true at the beginning of the block during which the execution",
                  " of xcm messages must be paused."
                ]
              }
            ]
          },
          "event": 59,
          "constants": [],
          "error": 451,
          "index": 34
        },
        {
          "name": "ProxyGenesisCompanion",
          "constants": [],
          "index": 35
        },
        {
          "name": "Multisig",
          "storage": {
            "prefix": "Multisig",
            "entries": [
              {
                "name": "Multisigs",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat",
                      "blake2_128Concat"
                    ],
                    "key": 452,
                    "value": 453
                  }
                },
                "default": "0x00",
                "docs": [
                  " The set of open multisig operations."
                ]
              }
            ]
          },
          "calls": 184,
          "event": 60,
          "constants": [
            {
              "name": "DepositBase",
              "typeId": 6,
              "value": "0x00004872eebd19980000000000000000",
              "docs": [
                " The base amount of currency needed to reserve for creating a multisig execution or to",
                " store a dispatch call for later.",
                "",
                " This is held for an additional storage item whose value size is",
                " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is",
                " `32 + sizeof(AccountId)` bytes."
              ]
            },
            {
              "name": "DepositFactor",
              "typeId": 6,
              "value": "0x000014bbf08ac6020000000000000000",
              "docs": [
                " The amount of currency needed per unit threshold when creating a multisig execution.",
                "",
                " This is held for adding 32 bytes more into a pre-existing storage value."
              ]
            },
            {
              "name": "MaxSignatories",
              "typeId": 4,
              "value": "0x64000000",
              "docs": [
                " The maximum amount of signatories allowed in the multisig."
              ]
            }
          ],
          "error": 455,
          "index": 36
        },
        {
          "name": "EthereumChainId",
          "storage": {
            "prefix": "EthereumChainId",
            "entries": [
              {
                "name": "ChainId",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 11
                  }
                },
                "default": "0x0000000000000000",
                "docs": []
              }
            ]
          },
          "constants": [],
          "index": 50
        },
        {
          "name": "EVM",
          "storage": {
            "prefix": "EVM",
            "entries": [
              {
                "name": "AccountCodes",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "key": 64,
                    "value": 14
                  }
                },
                "default": "0x00",
                "docs": []
              },
              {
                "name": "AccountCodesMetadata",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "key": 64,
                    "value": 456
                  }
                },
                "default": "0x00",
                "docs": []
              },
              {
                "name": "AccountStorages",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat",
                      "blake2_128Concat"
                    ],
                    "key": 457,
                    "value": 12
                  }
                },
                "default": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": []
              }
            ]
          },
          "calls": 186,
          "event": 62,
          "constants": [],
          "error": 458,
          "index": 51
        },
        {
          "name": "Ethereum",
          "storage": {
            "prefix": "Ethereum",
            "entries": [
              {
                "name": "Pending",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 459
                  }
                },
                "default": "0x00",
                "docs": [
                  " Current building block's transactions and receipts."
                ]
              },
              {
                "name": "CurrentBlock",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 468
                  }
                },
                "default": "0x00",
                "docs": [
                  " The current Ethereum block."
                ]
              },
              {
                "name": "CurrentReceipts",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 473
                  }
                },
                "default": "0x00",
                "docs": [
                  " The current Ethereum receipts."
                ]
              },
              {
                "name": "CurrentTransactionStatuses",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 474
                  }
                },
                "default": "0x00",
                "docs": [
                  " The current transaction statuses."
                ]
              },
              {
                "name": "BlockHash",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "key": 187,
                    "value": 12
                  }
                },
                "default": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": []
              }
            ]
          },
          "calls": 192,
          "event": 66,
          "constants": [],
          "error": 475,
          "index": 52
        },
        {
          "name": "Scheduler",
          "storage": {
            "prefix": "Scheduler",
            "entries": [
              {
                "name": "IncompleteSince",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 4
                  }
                },
                "default": "0x00",
                "docs": []
              },
              {
                "name": "Agenda",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "key": 4,
                    "value": 476
                  }
                },
                "default": "0x00",
                "docs": [
                  " Items to be executed, indexed by the block number that they should be executed on."
                ]
              },
              {
                "name": "Lookup",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "key": 13,
                    "value": 76
                  }
                },
                "default": "0x00",
                "docs": [
                  " Lookup from a name to the block number and index of the task.",
                  "",
                  " For v3 -> v4 the previously unbounded identities are Blake2-256 hashed to form the v4",
                  " identities."
                ]
              }
            ]
          },
          "calls": 202,
          "event": 75,
          "constants": [
            {
              "name": "MaximumWeight",
              "typeId": 9,
              "value": "0x0700e6bd4f570200f000",
              "docs": [
                " The maximum weight that may be scheduled per block for any dispatchables."
              ]
            },
            {
              "name": "MaxScheduledPerBlock",
              "typeId": 4,
              "value": "0x32000000",
              "docs": [
                " The maximum number of scheduled calls in the queue for a single block.",
                "",
                " NOTE:",
                " + Dependent pallets' benchmarks might require a higher limit for the setting. Set a",
                " higher limit under `runtime-benchmarks` feature."
              ]
            }
          ],
          "error": 480,
          "index": 60
        },
        {
          "name": "Democracy",
          "storage": {
            "prefix": "Democracy",
            "entries": [
              {
                "name": "PublicPropCount",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " The number of (public) proposals that have been made so far."
                ]
              },
              {
                "name": "PublicProps",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 481
                  }
                },
                "default": "0x00",
                "docs": [
                  " The public proposals. Unsorted. The second item is the proposal."
                ]
              },
              {
                "name": "DepositOf",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "key": 4,
                    "value": 484
                  }
                },
                "default": "0x00",
                "docs": [
                  " Those who have locked a deposit.",
                  "",
                  " TWOX-NOTE: Safe, as increasing integer keys are safe."
                ]
              },
              {
                "name": "ReferendumCount",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " The next free referendum index, aka the number of referenda started so far."
                ]
              },
              {
                "name": "LowestUnbaked",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " The lowest referendum index representing an unbaked referendum. Equal to",
                  " `ReferendumCount` if there isn't a unbaked referendum."
                ]
              },
              {
                "name": "ReferendumInfoOf",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "key": 4,
                    "value": 485
                  }
                },
                "default": "0x00",
                "docs": [
                  " Information concerning any given referendum.",
                  "",
                  " TWOX-NOTE: SAFE as indexes are not under an attacker’s control."
                ]
              },
              {
                "name": "VotingOf",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "key": 0,
                    "value": 488
                  }
                },
                "default": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " All votes for a particular voter. We store the balance for the number of votes that we",
                  " have recorded. The second item is the total amount of delegations, that will be added.",
                  "",
                  " TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway."
                ]
              },
              {
                "name": "LastTabledWasExternal",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 37
                  }
                },
                "default": "0x00",
                "docs": [
                  " True if the last referendum tabled was submitted externally. False if it was a public",
                  " proposal."
                ]
              },
              {
                "name": "NextExternal",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 494
                  }
                },
                "default": "0x00",
                "docs": [
                  " The referendum to be tabled whenever it would be valid to table an external proposal.",
                  " This happens when a referendum needs to be tabled and one of two conditions are met:",
                  " - `LastTabledWasExternal` is `false`; or",
                  " - `PublicProps` is empty."
                ]
              },
              {
                "name": "Blacklist",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "identity"
                    ],
                    "key": 12,
                    "value": 495
                  }
                },
                "default": "0x00",
                "docs": [
                  " A record of who vetoed what. Maps proposal hash to a possible existent block number",
                  " (until when it may not be resubmitted) and who vetoed it."
                ]
              },
              {
                "name": "Cancellations",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "identity"
                    ],
                    "key": 12,
                    "value": 37
                  }
                },
                "default": "0x00",
                "docs": [
                  " Record of all proposals that have been subject to emergency cancellation."
                ]
              },
              {
                "name": "MetadataOf",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "key": 81,
                    "value": 12
                  }
                },
                "default": "0x00",
                "docs": [
                  " General information concerning any proposal or referendum.",
                  " The `PreimageHash` refers to the preimage of the `Preimages` provider which can be a JSON",
                  " dump or IPFS hash of a JSON file.",
                  "",
                  " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)",
                  " large preimages."
                ]
              }
            ]
          },
          "calls": 204,
          "event": 77,
          "constants": [
            {
              "name": "EnactmentPeriod",
              "typeId": 4,
              "value": "0xc43b0000",
              "docs": [
                " The period between a proposal being approved and enacted.",
                "",
                " It should generally be a little more than the unstake period to ensure that",
                " voting stakers have an opportunity to remove themselves from the system in the case",
                " where they are on the losing side of a vote."
              ]
            },
            {
              "name": "LaunchPeriod",
              "typeId": 4,
              "value": "0xe0c40000",
              "docs": [
                " How often (in blocks) new public referenda are launched."
              ]
            },
            {
              "name": "VotingPeriod",
              "typeId": 4,
              "value": "0xc0890100",
              "docs": [
                " How often (in blocks) to check for new votes."
              ]
            },
            {
              "name": "VoteLockingPeriod",
              "typeId": 4,
              "value": "0xe0c40000",
              "docs": [
                " The minimum period of vote locking.",
                "",
                " It should be no shorter than enactment period to ensure that in the case of an approval,",
                " those successful voters are locked into the consequences that their votes entail."
              ]
            },
            {
              "name": "MinimumDeposit",
              "typeId": 6,
              "value": "0x0000408cb5781daf1500000000000000",
              "docs": [
                " The minimum amount to be used as a deposit for a public referendum proposal."
              ]
            },
            {
              "name": "InstantAllowed",
              "typeId": 37,
              "value": "0x01",
              "docs": [
                " Indicator for whether an emergency origin is even allowed to happen. Some chains may",
                " want to set this permanently to `false`, others may want to condition it on things such",
                " as an upgrade having happened recently."
              ]
            },
            {
              "name": "FastTrackVotingPeriod",
              "typeId": 4,
              "value": "0x201c0000",
              "docs": [
                " Minimum voting period allowed for a fast-track referendum."
              ]
            },
            {
              "name": "CooloffPeriod",
              "typeId": 4,
              "value": "0xe0c40000",
              "docs": [
                " Period in blocks where an external proposal may not be re-submitted after being vetoed."
              ]
            },
            {
              "name": "MaxVotes",
              "typeId": 4,
              "value": "0x64000000",
              "docs": [
                " The maximum number of votes for an account.",
                "",
                " Also used to compute weight, an overly big value can",
                " lead to extrinsic with very big weight: see `delegate` for instance."
              ]
            },
            {
              "name": "MaxProposals",
              "typeId": 4,
              "value": "0x64000000",
              "docs": [
                " The maximum number of public proposals that can exist at any time."
              ]
            },
            {
              "name": "MaxDeposits",
              "typeId": 4,
              "value": "0x64000000",
              "docs": [
                " The maximum number of deposits a public proposal may have at any time."
              ]
            },
            {
              "name": "MaxBlacklisted",
              "typeId": 4,
              "value": "0x64000000",
              "docs": [
                " The maximum number of items which can be blacklisted."
              ]
            }
          ],
          "error": 496,
          "index": 61
        },
        {
          "name": "Preimage",
          "storage": {
            "prefix": "Preimage",
            "entries": [
              {
                "name": "StatusFor",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "identity"
                    ],
                    "key": 12,
                    "value": 497
                  }
                },
                "default": "0x00",
                "docs": [
                  " The request status of a given hash."
                ]
              },
              {
                "name": "PreimageFor",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "identity"
                    ],
                    "key": 500,
                    "value": 501
                  }
                },
                "default": "0x00",
                "docs": []
              }
            ]
          },
          "calls": 208,
          "event": 82,
          "constants": [],
          "error": 502,
          "index": 62
        },
        {
          "name": "ConvictionVoting",
          "storage": {
            "prefix": "ConvictionVoting",
            "entries": [
              {
                "name": "VotingFor",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat",
                      "twox64Concat"
                    ],
                    "key": 503,
                    "value": 504
                  }
                },
                "default": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " All voting for a particular voter in a particular voting class. We store the balance for the",
                  " number of votes that we have recorded."
                ]
              },
              {
                "name": "ClassLocksFor",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "key": 0,
                    "value": 512
                  }
                },
                "default": "0x00",
                "docs": [
                  " The voting classes which have a non-zero lock requirement and the lock amounts which they",
                  " require. The actual amount locked on behalf of this pallet should always be the maximum of",
                  " this list."
                ]
              }
            ]
          },
          "calls": 209,
          "event": 83,
          "constants": [
            {
              "name": "MaxVotes",
              "typeId": 4,
              "value": "0x14000000",
              "docs": [
                " The maximum number of concurrent votes an account may have.",
                "",
                " Also used to compute weight, an overly large value can lead to extrinsics with large",
                " weight estimation: see `delegate` for instance."
              ]
            },
            {
              "name": "VoteLockingPeriod",
              "typeId": 4,
              "value": "0x201c0000",
              "docs": [
                " The minimum period of vote locking.",
                "",
                " It should be no shorter than enactment period to ensure that in the case of an approval,",
                " those successful voters are locked into the consequences that their votes entail."
              ]
            }
          ],
          "error": 515,
          "index": 63
        },
        {
          "name": "Referenda",
          "storage": {
            "prefix": "Referenda",
            "entries": [
              {
                "name": "ReferendumCount",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " The next free referendum index, aka the number of referenda started so far."
                ]
              },
              {
                "name": "ReferendumInfoFor",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 516
                  }
                },
                "default": "0x00",
                "docs": [
                  " Information concerning any given referendum."
                ]
              },
              {
                "name": "TrackQueue",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "key": 56,
                    "value": 524
                  }
                },
                "default": "0x00",
                "docs": [
                  " The sorted list of referenda ready to be decided but not yet being decided, ordered by",
                  " conviction-weighted approvals.",
                  "",
                  " This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`."
                ]
              },
              {
                "name": "DecidingCount",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "key": 56,
                    "value": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " The number of referenda being decided currently."
                ]
              },
              {
                "name": "MetadataOf",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 12
                  }
                },
                "default": "0x00",
                "docs": [
                  " The metadata is a general information concerning the referendum.",
                  " The `PreimageHash` refers to the preimage of the `Preimages` provider which can be a JSON",
                  " dump or IPFS hash of a JSON file.",
                  "",
                  " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)",
                  " large preimages."
                ]
              }
            ]
          },
          "calls": 214,
          "event": 84,
          "constants": [
            {
              "name": "SubmissionDeposit",
              "typeId": 6,
              "value": "0x0000a0dec5adc9353600000000000000",
              "docs": [
                " The minimum amount to be used as a deposit for a public referendum proposal."
              ]
            },
            {
              "name": "MaxQueued",
              "typeId": 4,
              "value": "0x64000000",
              "docs": [
                " Maximum size of the referendum queue for a single track."
              ]
            },
            {
              "name": "UndecidingTimeout",
              "typeId": 4,
              "value": "0xc0890100",
              "docs": [
                " The number of blocks after submission that a referendum must begin being decided by.",
                " Once this passes, then anyone may cancel the referendum."
              ]
            },
            {
              "name": "AlarmInterval",
              "typeId": 4,
              "value": "0x01000000",
              "docs": [
                " Quantization level for the referendum wakeup scheduler. A higher number will result in",
                " fewer storage reads/writes needed for smaller voters, but also result in delays to the",
                " automatic referendum status changes. Explicit servicing instructions are unaffected."
              ]
            },
            {
              "name": "Tracks",
              "typeId": 527,
              "value": "0x14000010726f6f740500000000000042db999d3784a7010000000000201c0000c0890100201c0000201c000002ffc99a3b00000000ffc99a3b0000000000000000000000000000ca9a3b404b4c0080b2e60e01004877686974656c69737465645f63616c6c657264000000000000ed95c28f055a2a00000000000032000000c0890100320000009600000002ffc99a3b00000000ffc99a3b000000000000000000000000029dea000000000000e6af2d00000000001616ffffffffffff02003467656e6572616c5f61646d696e0a000000000040b2bac9e0191e020000000000002c010000c0890100201c0000201c000002ffc99a3b00000000ffc99a3b0000000000000000000000000290d73e0d000000005743de130000000054de10f6ffffffff0300507265666572656e64756d5f63616e63656c6c657214000000000000ed95c28f055a2a0000000000002c010000c0890100840300003200000002ffc99a3b00000000ffc99a3b000000000000000000000000027d440d0000000000888a8300000000008bd8f2ffffffffff0400447265666572656e64756d5f6b696c6c657264000000000000da2b851f0bb4540000000000002c010000c0890100840300003200000002ffc99a3b00000000ffc99a3b000000000000000000000000027d440d0000000000888a8300000000008bd8f2ffffffffff",
              "docs": [
                " Information concerning the different referendum tracks."
              ]
            }
          ],
          "error": 533,
          "index": 64
        },
        {
          "name": "Whitelist",
          "storage": {
            "prefix": "Whitelist",
            "entries": [
              {
                "name": "WhitelistedCall",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "key": 12,
                    "value": 53
                  }
                },
                "default": "0x00",
                "docs": []
              }
            ]
          },
          "calls": 216,
          "event": 328,
          "constants": [],
          "error": 534,
          "index": 66
        },
        {
          "name": "CouncilCollective",
          "storage": {
            "prefix": "CouncilCollective",
            "entries": [
              {
                "name": "Proposals",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 535
                  }
                },
                "default": "0x00",
                "docs": [
                  " The hashes of the active proposals."
                ]
              },
              {
                "name": "ProposalOf",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "identity"
                    ],
                    "key": 12,
                    "value": 86
                  }
                },
                "default": "0x00",
                "docs": [
                  " Actual proposal for a given hash, if it's current."
                ]
              },
              {
                "name": "Voting",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "identity"
                    ],
                    "key": 12,
                    "value": 536
                  }
                },
                "default": "0x00",
                "docs": [
                  " Votes on a given proposal, if it is ongoing."
                ]
              },
              {
                "name": "ProposalCount",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " Proposals so far."
                ]
              },
              {
                "name": "Members",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 109
                  }
                },
                "default": "0x00",
                "docs": [
                  " The current members of the collective. This is stored sorted (just by value)."
                ]
              },
              {
                "name": "Prime",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 0
                  }
                },
                "default": "0x00",
                "docs": [
                  " The prime member that helps determine the default vote behavior in case of absentations."
                ]
              }
            ]
          },
          "calls": 217,
          "event": 332,
          "constants": [
            {
              "name": "MaxProposalWeight",
              "typeId": 9,
              "value": "0x07004429353a0200a000",
              "docs": [
                " The maximum weight of a dispatch call that can be proposed and executed."
              ]
            }
          ],
          "error": 537,
          "index": 70
        },
        {
          "name": "TechCommitteeCollective",
          "storage": {
            "prefix": "TechCommitteeCollective",
            "entries": [
              {
                "name": "Proposals",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 535
                  }
                },
                "default": "0x00",
                "docs": [
                  " The hashes of the active proposals."
                ]
              },
              {
                "name": "ProposalOf",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "identity"
                    ],
                    "key": 12,
                    "value": 86
                  }
                },
                "default": "0x00",
                "docs": [
                  " Actual proposal for a given hash, if it's current."
                ]
              },
              {
                "name": "Voting",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "identity"
                    ],
                    "key": 12,
                    "value": 536
                  }
                },
                "default": "0x00",
                "docs": [
                  " Votes on a given proposal, if it is ongoing."
                ]
              },
              {
                "name": "ProposalCount",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " Proposals so far."
                ]
              },
              {
                "name": "Members",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 109
                  }
                },
                "default": "0x00",
                "docs": [
                  " The current members of the collective. This is stored sorted (just by value)."
                ]
              },
              {
                "name": "Prime",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 0
                  }
                },
                "default": "0x00",
                "docs": [
                  " The prime member that helps determine the default vote behavior in case of absentations."
                ]
              }
            ]
          },
          "calls": 218,
          "event": 333,
          "constants": [
            {
              "name": "MaxProposalWeight",
              "typeId": 9,
              "value": "0x07004429353a0200a000",
              "docs": [
                " The maximum weight of a dispatch call that can be proposed and executed."
              ]
            }
          ],
          "error": 538,
          "index": 71
        },
        {
          "name": "TreasuryCouncilCollective",
          "storage": {
            "prefix": "TreasuryCouncilCollective",
            "entries": [
              {
                "name": "Proposals",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 539
                  }
                },
                "default": "0x00",
                "docs": [
                  " The hashes of the active proposals."
                ]
              },
              {
                "name": "ProposalOf",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "identity"
                    ],
                    "key": 12,
                    "value": 86
                  }
                },
                "default": "0x00",
                "docs": [
                  " Actual proposal for a given hash, if it's current."
                ]
              },
              {
                "name": "Voting",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "identity"
                    ],
                    "key": 12,
                    "value": 536
                  }
                },
                "default": "0x00",
                "docs": [
                  " Votes on a given proposal, if it is ongoing."
                ]
              },
              {
                "name": "ProposalCount",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " Proposals so far."
                ]
              },
              {
                "name": "Members",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 109
                  }
                },
                "default": "0x00",
                "docs": [
                  " The current members of the collective. This is stored sorted (just by value)."
                ]
              },
              {
                "name": "Prime",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 0
                  }
                },
                "default": "0x00",
                "docs": [
                  " The prime member that helps determine the default vote behavior in case of absentations."
                ]
              }
            ]
          },
          "calls": 219,
          "event": 334,
          "constants": [
            {
              "name": "MaxProposalWeight",
              "typeId": 9,
              "value": "0x07004429353a0200a000",
              "docs": [
                " The maximum weight of a dispatch call that can be proposed and executed."
              ]
            }
          ],
          "error": 540,
          "index": 72
        },
        {
          "name": "OpenTechCommitteeCollective",
          "storage": {
            "prefix": "OpenTechCommitteeCollective",
            "entries": [
              {
                "name": "Proposals",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 535
                  }
                },
                "default": "0x00",
                "docs": [
                  " The hashes of the active proposals."
                ]
              },
              {
                "name": "ProposalOf",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "identity"
                    ],
                    "key": 12,
                    "value": 86
                  }
                },
                "default": "0x00",
                "docs": [
                  " Actual proposal for a given hash, if it's current."
                ]
              },
              {
                "name": "Voting",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "identity"
                    ],
                    "key": 12,
                    "value": 536
                  }
                },
                "default": "0x00",
                "docs": [
                  " Votes on a given proposal, if it is ongoing."
                ]
              },
              {
                "name": "ProposalCount",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " Proposals so far."
                ]
              },
              {
                "name": "Members",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 109
                  }
                },
                "default": "0x00",
                "docs": [
                  " The current members of the collective. This is stored sorted (just by value)."
                ]
              },
              {
                "name": "Prime",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 0
                  }
                },
                "default": "0x00",
                "docs": [
                  " The prime member that helps determine the default vote behavior in case of absentations."
                ]
              }
            ]
          },
          "calls": 220,
          "event": 335,
          "constants": [
            {
              "name": "MaxProposalWeight",
              "typeId": 9,
              "value": "0x07004429353a0200a000",
              "docs": [
                " The maximum weight of a dispatch call that can be proposed and executed."
              ]
            }
          ],
          "error": 541,
          "index": 73
        },
        {
          "name": "Treasury",
          "storage": {
            "prefix": "Treasury",
            "entries": [
              {
                "name": "ProposalCount",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " Number of proposals that have been made."
                ]
              },
              {
                "name": "Proposals",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "key": 4,
                    "value": 542
                  }
                },
                "default": "0x00",
                "docs": [
                  " Proposals that have been made."
                ]
              },
              {
                "name": "Deactivated",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 6
                  }
                },
                "default": "0x00000000000000000000000000000000",
                "docs": [
                  " The amount which has been reported as inactive to Currency."
                ]
              },
              {
                "name": "Approvals",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 543
                  }
                },
                "default": "0x00",
                "docs": [
                  " Proposal indices that have been approved but not yet awarded."
                ]
              }
            ]
          },
          "calls": 221,
          "event": 336,
          "constants": [
            {
              "name": "ProposalBond",
              "typeId": 545,
              "value": "0x50c30000",
              "docs": [
                " Fraction of a proposal's value that should be bonded in order to place the proposal.",
                " An accepted proposal gets these back. A rejected proposal does not."
              ]
            },
            {
              "name": "ProposalBondMinimum",
              "typeId": 6,
              "value": "0x000010632d5ec76b0500000000000000",
              "docs": [
                " Minimum amount of funds that should be placed in a deposit for making a proposal."
              ]
            },
            {
              "name": "ProposalBondMaximum",
              "typeId": 310,
              "value": "0x00",
              "docs": [
                " Maximum amount of funds that should be placed in a deposit for making a proposal."
              ]
            },
            {
              "name": "SpendPeriod",
              "typeId": 4,
              "value": "0xc0a80000",
              "docs": [
                " Period between successive spends."
              ]
            },
            {
              "name": "Burn",
              "typeId": 545,
              "value": "0x00000000",
              "docs": [
                " Percentage of spare funds (if any) that are burnt per spend period."
              ]
            },
            {
              "name": "PalletId",
              "typeId": 546,
              "value": "0x70792f7472737279",
              "docs": [
                " The treasury's pallet id, used for deriving its sovereign account ID."
              ]
            },
            {
              "name": "MaxApprovals",
              "typeId": 4,
              "value": "0x64000000",
              "docs": [
                " The maximum number of approvals that can wait in the spending queue.",
                "",
                " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."
              ]
            }
          ],
          "error": 547,
          "index": 80
        },
        {
          "name": "CrowdloanRewards",
          "storage": {
            "prefix": "CrowdloanRewards",
            "entries": [
              {
                "name": "AccountsPayable",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 548
                  }
                },
                "default": "0x00",
                "docs": []
              },
              {
                "name": "ClaimedRelayChainIds",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "key": 13,
                    "value": 53
                  }
                },
                "default": "0x00",
                "docs": []
              },
              {
                "name": "UnassociatedContributions",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "key": 13,
                    "value": 548
                  }
                },
                "default": "0x00",
                "docs": []
              },
              {
                "name": "Initialized",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 37
                  }
                },
                "default": "0x00",
                "docs": []
              },
              {
                "name": "InitRelayBlock",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " Vesting block height at the initialization of the pallet"
                ]
              },
              {
                "name": "EndRelayBlock",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " Vesting block height at the initialization of the pallet"
                ]
              },
              {
                "name": "InitializedRewardAmount",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 6
                  }
                },
                "default": "0x00000000000000000000000000000000",
                "docs": [
                  " Total initialized amount so far. We store this to make pallet funds == contributors reward",
                  " check easier and more efficient"
                ]
              },
              {
                "name": "TotalContributors",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " Total number of contributors to aid hinting benchmarking"
                ]
              }
            ]
          },
          "calls": 222,
          "event": 337,
          "constants": [
            {
              "name": "InitializationPayment",
              "typeId": 42,
              "value": "0x00a3e111",
              "docs": [
                " Percentage to be payed at initialization"
              ]
            },
            {
              "name": "MaxInitContributors",
              "typeId": 4,
              "value": "0xf4010000",
              "docs": []
            },
            {
              "name": "RewardAddressRelayVoteThreshold",
              "typeId": 42,
              "value": "0x00ca9a3b",
              "docs": [
                " A fraction representing the percentage of proofs",
                " that need to be presented to change a reward address through the relay keys"
              ]
            },
            {
              "name": "SignatureNetworkIdentifier",
              "typeId": 14,
              "value": "0x246d6f6f6e6265616d2d",
              "docs": [
                " Network Identifier to be appended into the signatures for reward address change/association",
                " Prevents replay attacks from one network to the other"
              ]
            }
          ],
          "error": 550,
          "index": 90
        },
        {
          "name": "XcmpQueue",
          "storage": {
            "prefix": "XcmpQueue",
            "entries": [
              {
                "name": "InboundXcmpStatus",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 551
                  }
                },
                "default": "0x00",
                "docs": [
                  " Status of the inbound XCMP channels."
                ]
              },
              {
                "name": "InboundXcmpMessages",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat",
                      "twox64Concat"
                    ],
                    "key": 557,
                    "value": 14
                  }
                },
                "default": "0x00",
                "docs": [
                  " Inbound aggregate XCMP messages. It can only be one per ParaId/block."
                ]
              },
              {
                "name": "OutboundXcmpStatus",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 558
                  }
                },
                "default": "0x00",
                "docs": [
                  " The non-empty XCMP channels in order of becoming non-empty, and the index of the first",
                  " and last outbound message. If the two indices are equal, then it indicates an empty",
                  " queue and there must be a non-`Ok` `OutboundStatus`. We assume queues grow no greater",
                  " than 65535 items. Queue indices for normal messages begin at one; zero is reserved in",
                  " case of the need to send a high-priority signal message this block.",
                  " The bool is true if there is a signal message waiting to be sent."
                ]
              },
              {
                "name": "OutboundXcmpMessages",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat",
                      "twox64Concat"
                    ],
                    "key": 561,
                    "value": 14
                  }
                },
                "default": "0x00",
                "docs": [
                  " The messages outbound in a given XCMP channel."
                ]
              },
              {
                "name": "SignalMessages",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "key": 100,
                    "value": 14
                  }
                },
                "default": "0x00",
                "docs": [
                  " Any signal messages waiting to be sent."
                ]
              },
              {
                "name": "QueueConfig",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 562
                  }
                },
                "default": "0x020000000500000001000000821a06000008000700c817a80402000400",
                "docs": [
                  " The configuration which controls the dynamics of the outbound queue."
                ]
              },
              {
                "name": "Overweight",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "key": 11,
                    "value": 563
                  }
                },
                "default": "0x00",
                "docs": [
                  " The messages that exceeded max individual message weight budget.",
                  "",
                  " These message stay in this storage map until they are manually dispatched via",
                  " `service_overweight`."
                ]
              },
              {
                "name": "CounterForOverweight",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  "Counter for the related counted storage map"
                ]
              },
              {
                "name": "OverweightCount",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 11
                  }
                },
                "default": "0x0000000000000000",
                "docs": [
                  " The number of overweight messages ever recorded in `Overweight`. Also doubles as the next",
                  " available free overweight index."
                ]
              },
              {
                "name": "QueueSuspended",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 37
                  }
                },
                "default": "0x00",
                "docs": [
                  " Whether or not the XCMP queue is suspended from executing incoming XCMs or not."
                ]
              }
            ]
          },
          "event": 338,
          "constants": [],
          "error": 564,
          "index": 100
        },
        {
          "name": "CumulusXcm",
          "event": 339,
          "constants": [],
          "error": 565,
          "index": 101
        },
        {
          "name": "DmpQueue",
          "storage": {
            "prefix": "DmpQueue",
            "entries": [
              {
                "name": "Configuration",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 566
                  }
                },
                "default": "0x0700e40b540202000400",
                "docs": [
                  " The configuration."
                ]
              },
              {
                "name": "PageIndex",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 567
                  }
                },
                "default": "0x00000000000000000000000000000000",
                "docs": [
                  " The page index."
                ]
              },
              {
                "name": "Pages",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 568
                  }
                },
                "default": "0x00",
                "docs": [
                  " The queue pages."
                ]
              },
              {
                "name": "Overweight",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "key": 11,
                    "value": 569
                  }
                },
                "default": "0x00",
                "docs": [
                  " The overweight messages."
                ]
              },
              {
                "name": "CounterForOverweight",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  "Counter for the related counted storage map"
                ]
              }
            ]
          },
          "calls": 233,
          "event": 341,
          "constants": [],
          "error": 570,
          "index": 102
        },
        {
          "name": "PolkadotXcm",
          "storage": {
            "prefix": "PolkadotXcm",
            "entries": [
              {
                "name": "QueryCounter",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 11
                  }
                },
                "default": "0x0000000000000000",
                "docs": [
                  " The latest available query index."
                ]
              },
              {
                "name": "Queries",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "key": 11,
                    "value": 571
                  }
                },
                "default": "0x00",
                "docs": [
                  " The ongoing queries."
                ]
              },
              {
                "name": "AssetTraps",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "identity"
                    ],
                    "key": 12,
                    "value": 4
                  }
                },
                "default": "0x00000000",
                "docs": [
                  " The existing asset traps.",
                  "",
                  " Key is the blake2 256 hash of (origin, versioned `MultiAssets`) pair. Value is the number of",
                  " times this pair has been trapped (usually just 1 if it exists at all)."
                ]
              },
              {
                "name": "SafeXcmVersion",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 4
                  }
                },
                "default": "0x00",
                "docs": [
                  " Default version to encode XCM when latest version of destination is unknown. If `None`,",
                  " then the destinations whose XCM version is unknown are considered unreachable."
                ]
              },
              {
                "name": "SupportedVersion",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat",
                      "blake2_128Concat"
                    ],
                    "key": 576,
                    "value": 4
                  }
                },
                "default": "0x00",
                "docs": [
                  " The Latest versions that we know various locations support."
                ]
              },
              {
                "name": "VersionNotifiers",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat",
                      "blake2_128Concat"
                    ],
                    "key": 576,
                    "value": 11
                  }
                },
                "default": "0x00",
                "docs": [
                  " All locations that we have requested version notifications from."
                ]
              },
              {
                "name": "VersionNotifyTargets",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat",
                      "blake2_128Concat"
                    ],
                    "key": 576,
                    "value": 577
                  }
                },
                "default": "0x00",
                "docs": [
                  " The target locations that are subscribed to our version changes, as well as the most recent",
                  " of our versions we informed them of."
                ]
              },
              {
                "name": "VersionDiscoveryQueue",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 578
                  }
                },
                "default": "0x00",
                "docs": [
                  " Destinations whose latest XCM version we would like to know. Duplicates not allowed, and",
                  " the `u32` counter is the number of times that a send to the destination has been attempted,",
                  " which is used as a prioritization."
                ]
              },
              {
                "name": "CurrentMigration",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 581
                  }
                },
                "default": "0x00",
                "docs": [
                  " The current migration's stage, if any."
                ]
              },
              {
                "name": "RemoteLockedFungibles",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat",
                      "blake2_128Concat",
                      "blake2_128Concat"
                    ],
                    "key": 583,
                    "value": 585
                  }
                },
                "default": "0x00",
                "docs": [
                  " Fungible assets which we know are locked on a remote chain."
                ]
              },
              {
                "name": "LockedFungibles",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 589
                  }
                },
                "default": "0x00",
                "docs": [
                  " Fungible assets which we know are locked on this chain."
                ]
              },
              {
                "name": "XcmExecutionSuspended",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 37
                  }
                },
                "default": "0x00",
                "docs": [
                  " Global suspension state of the XCM executor."
                ]
              }
            ]
          },
          "calls": 234,
          "event": 342,
          "constants": [],
          "error": 592,
          "index": 103
        },
        {
          "name": "Assets",
          "storage": {
            "prefix": "Assets",
            "entries": [
              {
                "name": "Asset",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "key": 6,
                    "value": 593
                  }
                },
                "default": "0x00",
                "docs": [
                  " Details of an asset."
                ]
              },
              {
                "name": "Account",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat",
                      "blake2_128Concat"
                    ],
                    "key": 595,
                    "value": 596
                  }
                },
                "default": "0x00",
                "docs": [
                  " The holdings of a specific account for a specific asset."
                ]
              },
              {
                "name": "Approvals",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat",
                      "blake2_128Concat",
                      "blake2_128Concat"
                    ],
                    "key": 599,
                    "value": 600
                  }
                },
                "default": "0x00",
                "docs": [
                  " Approved balance transfers. First balance is the amount approved for transfer. Second",
                  " is the amount of `T::Currency` reserved for storing this.",
                  " First key is the asset ID, second key is the owner and third key is the delegate."
                ]
              },
              {
                "name": "Metadata",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "key": 6,
                    "value": 601
                  }
                },
                "default": "0x0000000000000000000000000000000000000000",
                "docs": [
                  " Metadata of an asset."
                ]
              }
            ]
          },
          "calls": 297,
          "event": 343,
          "constants": [
            {
              "name": "RemoveItemsLimit",
              "typeId": 4,
              "value": "0x90020000",
              "docs": [
                " Max number of items to destroy per `destroy_accounts` and `destroy_approvals` call.",
                "",
                " Must be configured to result in a weight that makes each call fit in a block."
              ]
            },
            {
              "name": "AssetDeposit",
              "typeId": 6,
              "value": "0x000040b2bac9e0191e02000000000000",
              "docs": [
                " The basic amount of funds that must be reserved for an asset."
              ]
            },
            {
              "name": "AssetAccountDeposit",
              "typeId": 6,
              "value": "0x00007a6510a0468d0000000000000000",
              "docs": [
                " The amount of funds that must be reserved for a non-provider asset account to be",
                " maintained."
              ]
            },
            {
              "name": "MetadataDepositBase",
              "typeId": 6,
              "value": "0x00002c396afb36940000000000000000",
              "docs": [
                " The basic amount of funds that must be reserved when adding metadata to your asset."
              ]
            },
            {
              "name": "MetadataDepositPerByte",
              "typeId": 6,
              "value": "0x0000c16ff28623000000000000000000",
              "docs": [
                " The additional funds that must be reserved for the number of bytes you store in your",
                " metadata."
              ]
            },
            {
              "name": "ApprovalDeposit",
              "typeId": 6,
              "value": "0x00000000000000000000000000000000",
              "docs": [
                " The amount of funds that must be reserved when creating a new approval."
              ]
            },
            {
              "name": "StringLimit",
              "typeId": 4,
              "value": "0x32000000",
              "docs": [
                " The maximum length of a name or symbol stored on-chain."
              ]
            }
          ],
          "error": 603,
          "index": 104
        },
        {
          "name": "AssetManager",
          "storage": {
            "prefix": "AssetManager",
            "entries": [
              {
                "name": "AssetIdType",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "key": 6,
                    "value": 299
                  }
                },
                "default": "0x00",
                "docs": [
                  " Mapping from an asset id to asset type.",
                  " This is mostly used when receiving transaction specifying an asset directly,",
                  " like transferring an asset from this chain to another."
                ]
              },
              {
                "name": "AssetTypeId",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "key": 299,
                    "value": 6
                  }
                },
                "default": "0x00",
                "docs": [
                  " Reverse mapping of AssetIdType. Mapping from an asset type to an asset id.",
                  " This is mostly used when receiving a multilocation XCM message to retrieve",
                  " the corresponding asset in which tokens should me minted."
                ]
              },
              {
                "name": "AssetTypeUnitsPerSecond",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "key": 299,
                    "value": 6
                  }
                },
                "default": "0x00",
                "docs": [
                  " Stores the units per second for local execution for a AssetType.",
                  " This is used to know how to charge for XCM execution in a particular",
                  " asset",
                  " Not all assets might contain units per second, hence the different storage"
                ]
              },
              {
                "name": "LocalAssetCounter",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 6
                  }
                },
                "default": "0x00000000000000000000000000000000",
                "docs": [
                  " Stores the counter of the number of local assets that have been",
                  " created so far",
                  " This value can be used to salt the creation of an assetId, e.g.,",
                  " by hashing it. This is particularly useful for cases like moonbeam",
                  " where letting users choose their assetId would result in collision",
                  " in the evm side."
                ]
              },
              {
                "name": "LocalAssetDeposit",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "key": 6,
                    "value": 604
                  }
                },
                "default": "0x00",
                "docs": [
                  " Local asset deposits, a mapping from assetId to a struct",
                  " holding the creator (from which the deposit was reserved) and",
                  " the deposit amount"
                ]
              },
              {
                "name": "SupportedFeePaymentAssets",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 605
                  }
                },
                "default": "0x00",
                "docs": []
              }
            ]
          },
          "calls": 298,
          "event": 344,
          "constants": [
            {
              "name": "LocalAssetDeposit",
              "typeId": 6,
              "value": "0x000040b2bac9e0191e02000000000000",
              "docs": [
                " The basic amount of funds that must be reserved for a local asset."
              ]
            }
          ],
          "error": 606,
          "index": 105
        },
        {
          "name": "XTokens",
          "storage": {
            "prefix": "XTokens",
            "entries": []
          },
          "calls": 301,
          "event": 345,
          "constants": [
            {
              "name": "SelfLocation",
              "typeId": 129,
              "value": "0x0000",
              "docs": [
                " Self chain location."
              ]
            },
            {
              "name": "BaseXcmWeight",
              "typeId": 9,
              "value": "0x0208af2f00",
              "docs": [
                " Base XCM weight.",
                "",
                " The actually weight for an XCM message is `T::BaseXcmWeight +",
                " T::Weigher::weight(&msg)`."
              ]
            }
          ],
          "error": 607,
          "index": 106
        },
        {
          "name": "XcmTransactor",
          "storage": {
            "prefix": "XcmTransactor",
            "entries": [
              {
                "name": "IndexToAccount",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "key": 56,
                    "value": 0
                  }
                },
                "default": "0x00",
                "docs": [
                  " Since we are using pallet-utility for account derivation (through AsDerivative),",
                  " we need to provide an index for the account derivation. This storage item stores the index",
                  " assigned for a given local account. These indices are usable as derivative in the relay chain"
                ]
              },
              {
                "name": "TransactInfoWithWeightLimit",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "key": 129,
                    "value": 347
                  }
                },
                "default": "0x00",
                "docs": [
                  " Stores the transact info of a MultiLocation. This defines how much extra weight we need to",
                  " add when we want to transact in the destination chain and maximum amount of weight allowed",
                  " by the destination chain"
                ]
              },
              {
                "name": "DestinationAssetFeePerSecond",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "key": 129,
                    "value": 6
                  }
                },
                "default": "0x00",
                "docs": [
                  " Stores the fee per second for an asset in its reserve chain. This allows us to convert",
                  " from weight to fee"
                ]
              }
            ]
          },
          "calls": 306,
          "event": 346,
          "constants": [
            {
              "name": "SelfLocation",
              "typeId": 129,
              "value": "0x0000",
              "docs": [
                " Self chain location."
              ]
            },
            {
              "name": "BaseXcmWeight",
              "typeId": 9,
              "value": "0x0208af2f00",
              "docs": [
                "",
                " The actual weight for an XCM message is `T::BaseXcmWeight +",
                " T::Weigher::weight(&msg)`."
              ]
            }
          ],
          "error": 608,
          "index": 107
        },
        {
          "name": "LocalAssets",
          "storage": {
            "prefix": "LocalAssets",
            "entries": [
              {
                "name": "Asset",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "key": 6,
                    "value": 593
                  }
                },
                "default": "0x00",
                "docs": [
                  " Details of an asset."
                ]
              },
              {
                "name": "Account",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat",
                      "blake2_128Concat"
                    ],
                    "key": 595,
                    "value": 596
                  }
                },
                "default": "0x00",
                "docs": [
                  " The holdings of a specific account for a specific asset."
                ]
              },
              {
                "name": "Approvals",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat",
                      "blake2_128Concat",
                      "blake2_128Concat"
                    ],
                    "key": 599,
                    "value": 600
                  }
                },
                "default": "0x00",
                "docs": [
                  " Approved balance transfers. First balance is the amount approved for transfer. Second",
                  " is the amount of `T::Currency` reserved for storing this.",
                  " First key is the asset ID, second key is the owner and third key is the delegate."
                ]
              },
              {
                "name": "Metadata",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "blake2_128Concat"
                    ],
                    "key": 6,
                    "value": 601
                  }
                },
                "default": "0x0000000000000000000000000000000000000000",
                "docs": [
                  " Metadata of an asset."
                ]
              }
            ]
          },
          "calls": 316,
          "event": 348,
          "constants": [
            {
              "name": "RemoveItemsLimit",
              "typeId": 4,
              "value": "0x90020000",
              "docs": [
                " Max number of items to destroy per `destroy_accounts` and `destroy_approvals` call.",
                "",
                " Must be configured to result in a weight that makes each call fit in a block."
              ]
            },
            {
              "name": "AssetDeposit",
              "typeId": 6,
              "value": "0x000040b2bac9e0191e02000000000000",
              "docs": [
                " The basic amount of funds that must be reserved for an asset."
              ]
            },
            {
              "name": "AssetAccountDeposit",
              "typeId": 6,
              "value": "0x00007a6510a0468d0000000000000000",
              "docs": [
                " The amount of funds that must be reserved for a non-provider asset account to be",
                " maintained."
              ]
            },
            {
              "name": "MetadataDepositBase",
              "typeId": 6,
              "value": "0x00002c396afb36940000000000000000",
              "docs": [
                " The basic amount of funds that must be reserved when adding metadata to your asset."
              ]
            },
            {
              "name": "MetadataDepositPerByte",
              "typeId": 6,
              "value": "0x0000c16ff28623000000000000000000",
              "docs": [
                " The additional funds that must be reserved for the number of bytes you store in your",
                " metadata."
              ]
            },
            {
              "name": "ApprovalDeposit",
              "typeId": 6,
              "value": "0x00000000000000000000000000000000",
              "docs": [
                " The amount of funds that must be reserved when creating a new approval."
              ]
            },
            {
              "name": "StringLimit",
              "typeId": 4,
              "value": "0x32000000",
              "docs": [
                " The maximum length of a name or symbol stored on-chain."
              ]
            }
          ],
          "error": 609,
          "index": 108
        },
        {
          "name": "EthereumXcm",
          "storage": {
            "prefix": "EthereumXcm",
            "entries": [
              {
                "name": "Nonce",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 187
                  }
                },
                "default": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Global nonce used for building Ethereum transaction payload."
                ]
              },
              {
                "name": "EthereumXcmSuspended",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 37
                  }
                },
                "default": "0x00",
                "docs": [
                  " Whether or not Ethereum-XCM is suspended from executing"
                ]
              }
            ]
          },
          "calls": 317,
          "constants": [],
          "error": 610,
          "index": 109
        },
        {
          "name": "Erc20XcmBridge",
          "constants": [],
          "index": 110
        },
        {
          "name": "Randomness",
          "storage": {
            "prefix": "Randomness",
            "entries": [
              {
                "name": "Requests",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "key": 11,
                    "value": 611
                  }
                },
                "default": "0x00",
                "docs": [
                  " Randomness requests not yet fulfilled or purged"
                ]
              },
              {
                "name": "RequestCount",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 11
                  }
                },
                "default": "0x0000000000000000",
                "docs": [
                  " Number of randomness requests made so far, used to generate the next request's uid"
                ]
              },
              {
                "name": "LocalVrfOutput",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 207
                  }
                },
                "default": "0x00",
                "docs": [
                  " Current local per-block VRF randomness",
                  " Set in `on_initialize`"
                ]
              },
              {
                "name": "RelayEpoch",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 11
                  }
                },
                "default": "0x0000000000000000",
                "docs": [
                  " Relay epoch"
                ]
              },
              {
                "name": "InherentIncluded",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 53
                  }
                },
                "default": "0x00",
                "docs": [
                  " Ensures the mandatory inherent was included in the block"
                ]
              },
              {
                "name": "NotFirstBlock",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 53
                  }
                },
                "default": "0x00",
                "docs": [
                  " Records whether this is the first block (genesis or runtime upgrade)"
                ]
              },
              {
                "name": "RandomnessResults",
                "modifier": {
                  "tag": "Optional"
                },
                "type": {
                  "tag": "Map",
                  "value": {
                    "hashers": [
                      "twox64Concat"
                    ],
                    "key": 614,
                    "value": 615
                  }
                },
                "default": "0x00",
                "docs": [
                  " Snapshot of randomness to fulfill all requests that are for the same raw randomness",
                  " Removed once $value.request_count == 0"
                ]
              },
              {
                "name": "PreviousLocalVrfOutput",
                "modifier": {
                  "tag": "Default"
                },
                "type": {
                  "tag": "Plain",
                  "value": {
                    "value": 12
                  }
                },
                "default": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Previous local per-block VRF randomness",
                  " Set in `on_finalize` of last block"
                ]
              }
            ]
          },
          "calls": 325,
          "event": 349,
          "constants": [
            {
              "name": "Deposit",
              "typeId": 6,
              "value": "0x000010632d5ec76b0500000000000000",
              "docs": [
                " The amount that should be taken as a security deposit when requesting randomness."
              ]
            },
            {
              "name": "MaxRandomWords",
              "typeId": 2,
              "value": "0x64",
              "docs": [
                " Maximum number of random words that can be requested per request"
              ]
            },
            {
              "name": "MinBlockDelay",
              "typeId": 4,
              "value": "0x02000000",
              "docs": [
                " Local per-block VRF requests must be at least this many blocks after the block in which",
                " they were requested"
              ]
            },
            {
              "name": "MaxBlockDelay",
              "typeId": 4,
              "value": "0xd0070000",
              "docs": [
                " Local per-block VRF requests must be at most this many blocks after the block in which",
                " they were requested"
              ]
            },
            {
              "name": "BlockExpirationDelay",
              "typeId": 4,
              "value": "0x10270000",
              "docs": [
                " Local requests expire and can be purged from storage after this many blocks/epochs"
              ]
            },
            {
              "name": "EpochExpirationDelay",
              "typeId": 11,
              "value": "0x1027000000000000",
              "docs": [
                " Babe requests expire and can be purged from storage after this many blocks/epochs"
              ]
            }
          ],
          "error": 616,
          "index": 120
        }
      ],
      "extrinsic": {
        "typeId": 617,
        "version": 4,
        "signedExtensions": [
          {
            "ident": "CheckNonZeroSender",
            "typeId": 620,
            "additionalSigned": 53
          },
          {
            "ident": "CheckSpecVersion",
            "typeId": 621,
            "additionalSigned": 4
          },
          {
            "ident": "CheckTxVersion",
            "typeId": 622,
            "additionalSigned": 4
          },
          {
            "ident": "CheckGenesis",
            "typeId": 623,
            "additionalSigned": 12
          },
          {
            "ident": "CheckMortality",
            "typeId": 624,
            "additionalSigned": 12
          },
          {
            "ident": "CheckNonce",
            "typeId": 626,
            "additionalSigned": 53
          },
          {
            "ident": "CheckWeight",
            "typeId": 627,
            "additionalSigned": 53
          },
          {
            "ident": "ChargeTransactionPayment",
            "typeId": 628,
            "additionalSigned": 53
          }
        ]
      },
      "runtimeType": 630
    }
  }
}