// Generated by @delightfuldot/codegen
import type {
  AccountId20,
  Bytes,
  FixedBytes,
  FixedI64,
  FixedU128,
  H160,
  H256,
  Perbill,
  Percent,
  Permill,
  U256,
} from '@delightfuldot/codecs';

export type {
  Bytes,
  FixedBytes,
  AccountId20,
  H256,
  Percent,
  Perbill,
  H160,
  U256,
  FixedU128,
  FixedI64,
  Permill,
} from '@delightfuldot/codecs';

export type FrameSystemAccountInfo = {
  nonce: number;
  consumers: number;
  providers: number;
  sufficients: number;
  data: PalletBalancesAccountData;
};

export type PalletBalancesAccountData = {
  free: bigint;
  reserved: bigint;
  frozen: bigint;
  flags: PalletBalancesExtraFlags;
};

export type PalletBalancesExtraFlags = bigint;

export type SpWeightsWeightV2Weight = {
  refTime: bigint;
  proofSize: bigint;
};

export type SpRuntimeDigest = {
  logs: Array<SpRuntimeDigestDigestItem>;
};

export type SpRuntimeDigestDigestItem =
  | { tag: 'PreRuntime'; value: [FixedBytes<4>, Bytes] }
  | { tag: 'Consensus'; value: [FixedBytes<4>, Bytes] }
  | { tag: 'Seal'; value: [FixedBytes<4>, Bytes] }
  | { tag: 'Other'; value: Bytes }
  | { tag: 'RuntimeEnvironmentUpdated'; value: never };

export type FrameSystemEventRecord = {
  phase: FrameSystemPhase;
  event: MoonbeamRuntimeRuntimeEvent;
  topics: Array<H256>;
};

export type MoonbeamRuntimeRuntimeEvent =
  | { tag: 'System'; value: FrameSystemEvent }
  | { tag: 'ParachainSystem'; value: CumulusPalletParachainSystemEvent }
  | { tag: 'Balances'; value: PalletBalancesEvent }
  | { tag: 'TransactionPayment'; value: PalletTransactionPaymentEvent }
  | { tag: 'ParachainStaking'; value: PalletParachainStakingEvent }
  | { tag: 'AuthorFilter'; value: PalletAuthorSlotFilterEvent }
  | { tag: 'AuthorMapping'; value: PalletAuthorMappingEvent }
  | { tag: 'MoonbeamOrbiters'; value: PalletMoonbeamOrbitersEvent }
  | { tag: 'Utility'; value: PalletUtilityEvent }
  | { tag: 'Proxy'; value: PalletProxyEvent }
  | { tag: 'MaintenanceMode'; value: PalletMaintenanceModeEvent }
  | { tag: 'Identity'; value: PalletIdentityEvent }
  | { tag: 'Migrations'; value: PalletMigrationsEvent }
  | { tag: 'Multisig'; value: PalletMultisigEvent }
  | { tag: 'EVM'; value: PalletEvmEvent }
  | { tag: 'Ethereum'; value: PalletEthereumEvent }
  | { tag: 'Scheduler'; value: PalletSchedulerEvent }
  | { tag: 'Democracy'; value: PalletDemocracyEvent }
  | { tag: 'Preimage'; value: PalletPreimageEvent }
  | { tag: 'ConvictionVoting'; value: PalletConvictionVotingEvent }
  | { tag: 'Referenda'; value: PalletReferendaEvent }
  | { tag: 'Whitelist'; value: PalletWhitelistEvent }
  | { tag: 'CouncilCollective'; value: PalletCollectiveEvent }
  | { tag: 'TechCommitteeCollective'; value: PalletCollectiveEvent }
  | { tag: 'TreasuryCouncilCollective'; value: PalletCollectiveEvent }
  | { tag: 'OpenTechCommitteeCollective'; value: PalletCollectiveEvent }
  | { tag: 'Treasury'; value: PalletTreasuryEvent }
  | { tag: 'CrowdloanRewards'; value: PalletCrowdloanRewardsEvent }
  | { tag: 'XcmpQueue'; value: CumulusPalletXcmpQueueEvent }
  | { tag: 'CumulusXcm'; value: CumulusPalletXcmEvent }
  | { tag: 'DmpQueue'; value: CumulusPalletDmpQueueEvent }
  | { tag: 'PolkadotXcm'; value: PalletXcmEvent }
  | { tag: 'Assets'; value: PalletAssetsEvent }
  | { tag: 'AssetManager'; value: PalletAssetManagerEvent }
  | { tag: 'XTokens'; value: OrmlXtokensModuleEvent }
  | { tag: 'XcmTransactor'; value: PalletXcmTransactorEvent }
  | { tag: 'LocalAssets'; value: PalletAssetsEvent }
  | { tag: 'Randomness'; value: PalletRandomnessEvent };

export type FrameSystemEvent =
  | {
      tag: 'ExtrinsicSuccess';
      value: {
        dispatchInfo: FrameSupportDispatchDispatchInfo;
      };
    }
  | {
      tag: 'ExtrinsicFailed';
      value: {
        dispatchError: SpRuntimeDispatchError;
        dispatchInfo: FrameSupportDispatchDispatchInfo;
      };
    }
  | { tag: 'CodeUpdated'; value: never }
  | {
      tag: 'NewAccount';
      value: {
        account: AccountId20;
      };
    }
  | {
      tag: 'KilledAccount';
      value: {
        account: AccountId20;
      };
    }
  | {
      tag: 'Remarked';
      value: {
        sender: AccountId20;
        hash: H256;
      };
    };

export type FrameSupportDispatchDispatchInfo = {
  weight: SpWeightsWeightV2Weight;
  class: FrameSupportDispatchDispatchClass;
  paysFee: FrameSupportDispatchPays;
};

export type FrameSupportDispatchDispatchClass = 'normal' | 'operational' | 'mandatory';

export type FrameSupportDispatchPays = 'yes' | 'no';

export type SpRuntimeDispatchError =
  | { tag: 'Other'; value: never }
  | { tag: 'CannotLookup'; value: never }
  | { tag: 'BadOrigin'; value: never }
  | { tag: 'Module'; value: SpRuntimeModuleError }
  | { tag: 'ConsumerRemaining'; value: never }
  | { tag: 'NoProviders'; value: never }
  | { tag: 'TooManyConsumers'; value: never }
  | { tag: 'Token'; value: SpRuntimeTokenError }
  | { tag: 'Arithmetic'; value: SpArithmeticArithmeticError }
  | { tag: 'Transactional'; value: SpRuntimeTransactionalError }
  | { tag: 'Exhausted'; value: never }
  | { tag: 'Corruption'; value: never }
  | { tag: 'Unavailable'; value: never }
  | { tag: 'RootNotAllowed'; value: never };

export type SpRuntimeModuleError = {
  index: number;
  error: FixedBytes<4>;
};

export type SpRuntimeTokenError =
  | 'fundsUnavailable'
  | 'onlyProvider'
  | 'belowMinimum'
  | 'cannotCreate'
  | 'unknownAsset'
  | 'frozen'
  | 'unsupported'
  | 'cannotCreateHold'
  | 'notExpendable'
  | 'blocked';

export type SpArithmeticArithmeticError = 'underflow' | 'overflow' | 'divisionByZero';

export type SpRuntimeTransactionalError = 'limitReached' | 'noLayer';

export type CumulusPalletParachainSystemEvent =
  | { tag: 'ValidationFunctionStored'; value: never }
  | {
      tag: 'ValidationFunctionApplied';
      value: {
        relayChainBlockNum: number;
      };
    }
  | { tag: 'ValidationFunctionDiscarded'; value: never }
  | {
      tag: 'UpgradeAuthorized';
      value: {
        codeHash: H256;
      };
    }
  | {
      tag: 'DownwardMessagesReceived';
      value: {
        count: number;
      };
    }
  | {
      tag: 'DownwardMessagesProcessed';
      value: {
        weightUsed: SpWeightsWeightV2Weight;
        dmqHead: H256;
      };
    }
  | {
      tag: 'UpwardMessageSent';
      value: {
        messageHash?: FixedBytes<32> | undefined;
      };
    };

export type PalletBalancesEvent =
  | {
      tag: 'Endowed';
      value: {
        account: AccountId20;
        freeBalance: bigint;
      };
    }
  | {
      tag: 'DustLost';
      value: {
        account: AccountId20;
        amount: bigint;
      };
    }
  | {
      tag: 'Transfer';
      value: {
        from: AccountId20;
        to: AccountId20;
        amount: bigint;
      };
    }
  | {
      tag: 'BalanceSet';
      value: {
        who: AccountId20;
        free: bigint;
      };
    }
  | {
      tag: 'Reserved';
      value: {
        who: AccountId20;
        amount: bigint;
      };
    }
  | {
      tag: 'Unreserved';
      value: {
        who: AccountId20;
        amount: bigint;
      };
    }
  | {
      tag: 'ReserveRepatriated';
      value: {
        from: AccountId20;
        to: AccountId20;
        amount: bigint;
        destinationStatus: FrameSupportTokensMiscBalanceStatus;
      };
    }
  | {
      tag: 'Deposit';
      value: {
        who: AccountId20;
        amount: bigint;
      };
    }
  | {
      tag: 'Withdraw';
      value: {
        who: AccountId20;
        amount: bigint;
      };
    }
  | {
      tag: 'Slashed';
      value: {
        who: AccountId20;
        amount: bigint;
      };
    }
  | {
      tag: 'Minted';
      value: {
        who: AccountId20;
        amount: bigint;
      };
    }
  | {
      tag: 'Burned';
      value: {
        who: AccountId20;
        amount: bigint;
      };
    }
  | {
      tag: 'Suspended';
      value: {
        who: AccountId20;
        amount: bigint;
      };
    }
  | {
      tag: 'Restored';
      value: {
        who: AccountId20;
        amount: bigint;
      };
    }
  | {
      tag: 'Upgraded';
      value: {
        who: AccountId20;
      };
    }
  | {
      tag: 'Issued';
      value: {
        amount: bigint;
      };
    }
  | {
      tag: 'Rescinded';
      value: {
        amount: bigint;
      };
    }
  | {
      tag: 'Locked';
      value: {
        who: AccountId20;
        amount: bigint;
      };
    }
  | {
      tag: 'Unlocked';
      value: {
        who: AccountId20;
        amount: bigint;
      };
    }
  | {
      tag: 'Frozen';
      value: {
        who: AccountId20;
        amount: bigint;
      };
    }
  | {
      tag: 'Thawed';
      value: {
        who: AccountId20;
        amount: bigint;
      };
    };

export type FrameSupportTokensMiscBalanceStatus = 'free' | 'reserved';

export type PalletTransactionPaymentEvent = {
  tag: 'TransactionFeePaid';
  value: {
    who: AccountId20;
    actualFee: bigint;
    tip: bigint;
  };
};

export type PalletParachainStakingEvent =
  | {
      tag: 'NewRound';
      value: {
        startingBlock: number;
        round: number;
        selectedCollatorsNumber: number;
        totalBalance: bigint;
      };
    }
  | {
      tag: 'JoinedCollatorCandidates';
      value: {
        account: AccountId20;
        amountLocked: bigint;
        newTotalAmtLocked: bigint;
      };
    }
  | {
      tag: 'CollatorChosen';
      value: {
        round: number;
        collatorAccount: AccountId20;
        totalExposedAmount: bigint;
      };
    }
  | {
      tag: 'CandidateBondLessRequested';
      value: {
        candidate: AccountId20;
        amountToDecrease: bigint;
        executeRound: number;
      };
    }
  | {
      tag: 'CandidateBondedMore';
      value: {
        candidate: AccountId20;
        amount: bigint;
        newTotalBond: bigint;
      };
    }
  | {
      tag: 'CandidateBondedLess';
      value: {
        candidate: AccountId20;
        amount: bigint;
        newBond: bigint;
      };
    }
  | {
      tag: 'CandidateWentOffline';
      value: {
        candidate: AccountId20;
      };
    }
  | {
      tag: 'CandidateBackOnline';
      value: {
        candidate: AccountId20;
      };
    }
  | {
      tag: 'CandidateScheduledExit';
      value: {
        exitAllowedRound: number;
        candidate: AccountId20;
        scheduledExit: number;
      };
    }
  | {
      tag: 'CancelledCandidateExit';
      value: {
        candidate: AccountId20;
      };
    }
  | {
      tag: 'CancelledCandidateBondLess';
      value: {
        candidate: AccountId20;
        amount: bigint;
        executeRound: number;
      };
    }
  | {
      tag: 'CandidateLeft';
      value: {
        exCandidate: AccountId20;
        unlockedAmount: bigint;
        newTotalAmtLocked: bigint;
      };
    }
  | {
      tag: 'DelegationDecreaseScheduled';
      value: {
        delegator: AccountId20;
        candidate: AccountId20;
        amountToDecrease: bigint;
        executeRound: number;
      };
    }
  | {
      tag: 'DelegationIncreased';
      value: {
        delegator: AccountId20;
        candidate: AccountId20;
        amount: bigint;
        inTop: boolean;
      };
    }
  | {
      tag: 'DelegationDecreased';
      value: {
        delegator: AccountId20;
        candidate: AccountId20;
        amount: bigint;
        inTop: boolean;
      };
    }
  | {
      tag: 'DelegatorExitScheduled';
      value: {
        round: number;
        delegator: AccountId20;
        scheduledExit: number;
      };
    }
  | {
      tag: 'DelegationRevocationScheduled';
      value: {
        round: number;
        delegator: AccountId20;
        candidate: AccountId20;
        scheduledExit: number;
      };
    }
  | {
      tag: 'DelegatorLeft';
      value: {
        delegator: AccountId20;
        unstakedAmount: bigint;
      };
    }
  | {
      tag: 'DelegationRevoked';
      value: {
        delegator: AccountId20;
        candidate: AccountId20;
        unstakedAmount: bigint;
      };
    }
  | {
      tag: 'DelegationKicked';
      value: {
        delegator: AccountId20;
        candidate: AccountId20;
        unstakedAmount: bigint;
      };
    }
  | {
      tag: 'DelegatorExitCancelled';
      value: {
        delegator: AccountId20;
      };
    }
  | {
      tag: 'CancelledDelegationRequest';
      value: {
        delegator: AccountId20;
        cancelledRequest: PalletParachainStakingDelegationRequestsCancelledScheduledRequest;
        collator: AccountId20;
      };
    }
  | {
      tag: 'Delegation';
      value: {
        delegator: AccountId20;
        lockedAmount: bigint;
        candidate: AccountId20;
        delegatorPosition: PalletParachainStakingDelegatorAdded;
        autoCompound: Percent;
      };
    }
  | {
      tag: 'DelegatorLeftCandidate';
      value: {
        delegator: AccountId20;
        candidate: AccountId20;
        unstakedAmount: bigint;
        totalCandidateStaked: bigint;
      };
    }
  | {
      tag: 'Rewarded';
      value: {
        account: AccountId20;
        rewards: bigint;
      };
    }
  | {
      tag: 'ReservedForParachainBond';
      value: {
        account: AccountId20;
        value: bigint;
      };
    }
  | {
      tag: 'ParachainBondAccountSet';
      value: {
        old: AccountId20;
        new: AccountId20;
      };
    }
  | {
      tag: 'ParachainBondReservePercentSet';
      value: {
        old: Percent;
        new: Percent;
      };
    }
  | {
      tag: 'InflationSet';
      value: {
        annualMin: Perbill;
        annualIdeal: Perbill;
        annualMax: Perbill;
        roundMin: Perbill;
        roundIdeal: Perbill;
        roundMax: Perbill;
      };
    }
  | {
      tag: 'StakeExpectationsSet';
      value: {
        expectMin: bigint;
        expectIdeal: bigint;
        expectMax: bigint;
      };
    }
  | {
      tag: 'TotalSelectedSet';
      value: {
        old: number;
        new: number;
      };
    }
  | {
      tag: 'CollatorCommissionSet';
      value: {
        old: Perbill;
        new: Perbill;
      };
    }
  | {
      tag: 'BlocksPerRoundSet';
      value: {
        currentRound: number;
        firstBlock: number;
        old: number;
        new: number;
        newPerRoundInflationMin: Perbill;
        newPerRoundInflationIdeal: Perbill;
        newPerRoundInflationMax: Perbill;
      };
    }
  | {
      tag: 'AutoCompoundSet';
      value: {
        candidate: AccountId20;
        delegator: AccountId20;
        value: Percent;
      };
    }
  | {
      tag: 'Compounded';
      value: {
        candidate: AccountId20;
        delegator: AccountId20;
        amount: bigint;
      };
    };

export type PalletParachainStakingDelegationRequestsCancelledScheduledRequest = {
  whenExecutable: number;
  action: PalletParachainStakingDelegationRequestsDelegationAction;
};

export type PalletParachainStakingDelegationRequestsDelegationAction =
  | { tag: 'Revoke'; value: bigint }
  | { tag: 'Decrease'; value: bigint };

export type PalletParachainStakingDelegatorAdded =
  | {
      tag: 'AddedToTop';
      value: {
        newTotal: bigint;
      };
    }
  | { tag: 'AddedToBottom'; value: never };

export type PalletAuthorSlotFilterEvent = { tag: 'EligibleUpdated'; value: PalletAuthorSlotFilterNumNonZeroU32 };

export type PalletAuthorSlotFilterNumNonZeroU32 = number;

export type PalletAuthorMappingEvent =
  | {
      tag: 'KeysRegistered';
      value: {
        nimbusId: NimbusPrimitivesNimbusCryptoPublic;
        accountId: AccountId20;
        keys: SessionKeysPrimitivesVrfVrfCryptoPublic;
      };
    }
  | {
      tag: 'KeysRemoved';
      value: {
        nimbusId: NimbusPrimitivesNimbusCryptoPublic;
        accountId: AccountId20;
        keys: SessionKeysPrimitivesVrfVrfCryptoPublic;
      };
    }
  | {
      tag: 'KeysRotated';
      value: {
        newNimbusId: NimbusPrimitivesNimbusCryptoPublic;
        accountId: AccountId20;
        newKeys: SessionKeysPrimitivesVrfVrfCryptoPublic;
      };
    };

export type NimbusPrimitivesNimbusCryptoPublic = SpCoreSr25519Public;

export type SpCoreSr25519Public = FixedBytes<32>;

export type SessionKeysPrimitivesVrfVrfCryptoPublic = SpCoreSr25519Public;

export type PalletMoonbeamOrbitersEvent =
  | {
      tag: 'OrbiterJoinCollatorPool';
      value: {
        collator: AccountId20;
        orbiter: AccountId20;
      };
    }
  | {
      tag: 'OrbiterLeaveCollatorPool';
      value: {
        collator: AccountId20;
        orbiter: AccountId20;
      };
    }
  | {
      tag: 'OrbiterRewarded';
      value: {
        account: AccountId20;
        rewards: bigint;
      };
    }
  | {
      tag: 'OrbiterRotation';
      value: {
        collator: AccountId20;
        oldOrbiter?: AccountId20 | undefined;
        newOrbiter?: AccountId20 | undefined;
      };
    }
  | {
      tag: 'OrbiterRegistered';
      value: {
        account: AccountId20;
        deposit: bigint;
      };
    }
  | {
      tag: 'OrbiterUnregistered';
      value: {
        account: AccountId20;
      };
    };

export type PalletUtilityEvent =
  | {
      tag: 'BatchInterrupted';
      value: {
        index: number;
        error: SpRuntimeDispatchError;
      };
    }
  | { tag: 'BatchCompleted'; value: never }
  | { tag: 'BatchCompletedWithErrors'; value: never }
  | { tag: 'ItemCompleted'; value: never }
  | {
      tag: 'ItemFailed';
      value: {
        error: SpRuntimeDispatchError;
      };
    }
  | {
      tag: 'DispatchedAs';
      value: {
        result: never | SpRuntimeDispatchError;
      };
    };

export type PalletProxyEvent =
  | {
      tag: 'ProxyExecuted';
      value: {
        result: never | SpRuntimeDispatchError;
      };
    }
  | {
      tag: 'PureCreated';
      value: {
        pure: AccountId20;
        who: AccountId20;
        proxyType: MoonbeamRuntimeProxyType;
        disambiguationIndex: number;
      };
    }
  | {
      tag: 'Announced';
      value: {
        real: AccountId20;
        proxy: AccountId20;
        callHash: H256;
      };
    }
  | {
      tag: 'ProxyAdded';
      value: {
        delegator: AccountId20;
        delegatee: AccountId20;
        proxyType: MoonbeamRuntimeProxyType;
        delay: number;
      };
    }
  | {
      tag: 'ProxyRemoved';
      value: {
        delegator: AccountId20;
        delegatee: AccountId20;
        proxyType: MoonbeamRuntimeProxyType;
        delay: number;
      };
    };

export type MoonbeamRuntimeProxyType =
  | 'any'
  | 'nonTransfer'
  | 'governance'
  | 'staking'
  | 'cancelProxy'
  | 'balances'
  | 'authorMapping'
  | 'identityJudgement';

export type PalletMaintenanceModeEvent =
  | { tag: 'EnteredMaintenanceMode'; value: never }
  | { tag: 'NormalOperationResumed'; value: never }
  | {
      tag: 'FailedToSuspendIdleXcmExecution';
      value: {
        error: SpRuntimeDispatchError;
      };
    }
  | {
      tag: 'FailedToResumeIdleXcmExecution';
      value: {
        error: SpRuntimeDispatchError;
      };
    };

export type PalletIdentityEvent =
  | {
      tag: 'IdentitySet';
      value: {
        who: AccountId20;
      };
    }
  | {
      tag: 'IdentityCleared';
      value: {
        who: AccountId20;
        deposit: bigint;
      };
    }
  | {
      tag: 'IdentityKilled';
      value: {
        who: AccountId20;
        deposit: bigint;
      };
    }
  | {
      tag: 'JudgementRequested';
      value: {
        who: AccountId20;
        registrarIndex: number;
      };
    }
  | {
      tag: 'JudgementUnrequested';
      value: {
        who: AccountId20;
        registrarIndex: number;
      };
    }
  | {
      tag: 'JudgementGiven';
      value: {
        target: AccountId20;
        registrarIndex: number;
      };
    }
  | {
      tag: 'RegistrarAdded';
      value: {
        registrarIndex: number;
      };
    }
  | {
      tag: 'SubIdentityAdded';
      value: {
        sub: AccountId20;
        main: AccountId20;
        deposit: bigint;
      };
    }
  | {
      tag: 'SubIdentityRemoved';
      value: {
        sub: AccountId20;
        main: AccountId20;
        deposit: bigint;
      };
    }
  | {
      tag: 'SubIdentityRevoked';
      value: {
        sub: AccountId20;
        main: AccountId20;
        deposit: bigint;
      };
    };

export type PalletMigrationsEvent =
  | { tag: 'RuntimeUpgradeStarted'; value: never }
  | {
      tag: 'RuntimeUpgradeCompleted';
      value: {
        weight: SpWeightsWeightV2Weight;
      };
    }
  | {
      tag: 'MigrationStarted';
      value: {
        migrationName: Bytes;
      };
    }
  | {
      tag: 'MigrationCompleted';
      value: {
        migrationName: Bytes;
        consumedWeight: SpWeightsWeightV2Weight;
      };
    }
  | {
      tag: 'FailedToSuspendIdleXcmExecution';
      value: {
        error: SpRuntimeDispatchError;
      };
    }
  | {
      tag: 'FailedToResumeIdleXcmExecution';
      value: {
        error: SpRuntimeDispatchError;
      };
    };

export type PalletMultisigEvent =
  | {
      tag: 'NewMultisig';
      value: {
        approving: AccountId20;
        multisig: AccountId20;
        callHash: FixedBytes<32>;
      };
    }
  | {
      tag: 'MultisigApproval';
      value: {
        approving: AccountId20;
        timepoint: PalletMultisigTimepoint;
        multisig: AccountId20;
        callHash: FixedBytes<32>;
      };
    }
  | {
      tag: 'MultisigExecuted';
      value: {
        approving: AccountId20;
        timepoint: PalletMultisigTimepoint;
        multisig: AccountId20;
        callHash: FixedBytes<32>;
        result: never | SpRuntimeDispatchError;
      };
    }
  | {
      tag: 'MultisigCancelled';
      value: {
        cancelling: AccountId20;
        timepoint: PalletMultisigTimepoint;
        multisig: AccountId20;
        callHash: FixedBytes<32>;
      };
    };

export type PalletMultisigTimepoint = {
  height: number;
  index: number;
};

export type PalletEvmEvent =
  | {
      tag: 'Log';
      value: {
        log: EthereumLog;
      };
    }
  | {
      tag: 'Created';
      value: {
        address: H160;
      };
    }
  | {
      tag: 'CreatedFailed';
      value: {
        address: H160;
      };
    }
  | {
      tag: 'Executed';
      value: {
        address: H160;
      };
    }
  | {
      tag: 'ExecutedFailed';
      value: {
        address: H160;
      };
    };

export type EthereumLog = {
  address: H160;
  topics: Array<H256>;
  data: Bytes;
};

export type PalletEthereumEvent = {
  tag: 'Executed';
  value: {
    from: H160;
    to: H160;
    transactionHash: H256;
    exitReason: EvmCoreErrorExitReason;
    extraData: Bytes;
  };
};

export type EvmCoreErrorExitReason =
  | { tag: 'Succeed'; value: EvmCoreErrorExitSucceed }
  | { tag: 'Error'; value: EvmCoreErrorExitError }
  | { tag: 'Revert'; value: EvmCoreErrorExitRevert }
  | { tag: 'Fatal'; value: EvmCoreErrorExitFatal };

export type EvmCoreErrorExitSucceed = 'stopped' | 'returned' | 'suicided';

export type EvmCoreErrorExitError =
  | { tag: 'StackUnderflow'; value: never }
  | { tag: 'StackOverflow'; value: never }
  | { tag: 'InvalidJump'; value: never }
  | { tag: 'InvalidRange'; value: never }
  | { tag: 'DesignatedInvalid'; value: never }
  | { tag: 'CallTooDeep'; value: never }
  | { tag: 'CreateCollision'; value: never }
  | { tag: 'CreateContractLimit'; value: never }
  | { tag: 'InvalidCode'; value: EvmCoreOpcode }
  | { tag: 'OutOfOffset'; value: never }
  | { tag: 'OutOfGas'; value: never }
  | { tag: 'OutOfFund'; value: never }
  | { tag: 'PCUnderflow'; value: never }
  | { tag: 'CreateEmpty'; value: never }
  | { tag: 'Other'; value: string }
  | { tag: 'MaxNonce'; value: never };

export type EvmCoreOpcode = number;

export type EvmCoreErrorExitRevert = 'reverted';

export type EvmCoreErrorExitFatal =
  | { tag: 'NotSupported'; value: never }
  | { tag: 'UnhandledInterrupt'; value: never }
  | { tag: 'CallErrorAsFatal'; value: EvmCoreErrorExitError }
  | { tag: 'Other'; value: string };

export type PalletSchedulerEvent =
  | {
      tag: 'Scheduled';
      value: {
        when: number;
        index: number;
      };
    }
  | {
      tag: 'Canceled';
      value: {
        when: number;
        index: number;
      };
    }
  | {
      tag: 'Dispatched';
      value: {
        task: [number, number];
        id?: FixedBytes<32> | undefined;
        result: never | SpRuntimeDispatchError;
      };
    }
  | {
      tag: 'CallUnavailable';
      value: {
        task: [number, number];
        id?: FixedBytes<32> | undefined;
      };
    }
  | {
      tag: 'PeriodicFailed';
      value: {
        task: [number, number];
        id?: FixedBytes<32> | undefined;
      };
    }
  | {
      tag: 'PermanentlyOverweight';
      value: {
        task: [number, number];
        id?: FixedBytes<32> | undefined;
      };
    };

export type PalletDemocracyEvent =
  | {
      tag: 'Proposed';
      value: {
        proposalIndex: number;
        deposit: bigint;
      };
    }
  | {
      tag: 'Tabled';
      value: {
        proposalIndex: number;
        deposit: bigint;
      };
    }
  | { tag: 'ExternalTabled'; value: never }
  | {
      tag: 'Started';
      value: {
        refIndex: number;
        threshold: PalletDemocracyVoteThreshold;
      };
    }
  | {
      tag: 'Passed';
      value: {
        refIndex: number;
      };
    }
  | {
      tag: 'NotPassed';
      value: {
        refIndex: number;
      };
    }
  | {
      tag: 'Cancelled';
      value: {
        refIndex: number;
      };
    }
  | {
      tag: 'Delegated';
      value: {
        who: AccountId20;
        target: AccountId20;
      };
    }
  | {
      tag: 'Undelegated';
      value: {
        account: AccountId20;
      };
    }
  | {
      tag: 'Vetoed';
      value: {
        who: AccountId20;
        proposalHash: H256;
        until: number;
      };
    }
  | {
      tag: 'Blacklisted';
      value: {
        proposalHash: H256;
      };
    }
  | {
      tag: 'Voted';
      value: {
        voter: AccountId20;
        refIndex: number;
        vote: PalletDemocracyVoteAccountVote;
      };
    }
  | {
      tag: 'Seconded';
      value: {
        seconder: AccountId20;
        propIndex: number;
      };
    }
  | {
      tag: 'ProposalCanceled';
      value: {
        propIndex: number;
      };
    }
  | {
      tag: 'MetadataSet';
      value: {
        owner: PalletDemocracyMetadataOwner;
        hash: H256;
      };
    }
  | {
      tag: 'MetadataCleared';
      value: {
        owner: PalletDemocracyMetadataOwner;
        hash: H256;
      };
    }
  | {
      tag: 'MetadataTransferred';
      value: {
        prevOwner: PalletDemocracyMetadataOwner;
        owner: PalletDemocracyMetadataOwner;
        hash: H256;
      };
    };

export type PalletDemocracyVoteThreshold = 'superMajorityApprove' | 'superMajorityAgainst' | 'simpleMajority';

export type PalletDemocracyVoteAccountVote =
  | {
      tag: 'Standard';
      value: {
        vote: PalletDemocracyVote;
        balance: bigint;
      };
    }
  | {
      tag: 'Split';
      value: {
        aye: bigint;
        nay: bigint;
      };
    };

export type PalletDemocracyVote = number;

export type PalletDemocracyMetadataOwner =
  | { tag: 'External'; value: never }
  | { tag: 'Proposal'; value: number }
  | { tag: 'Referendum'; value: number };

export type PalletPreimageEvent =
  | {
      tag: 'Noted';
      value: {
        hash: H256;
      };
    }
  | {
      tag: 'Requested';
      value: {
        hash: H256;
      };
    }
  | {
      tag: 'Cleared';
      value: {
        hash: H256;
      };
    };

export type PalletConvictionVotingEvent =
  | { tag: 'Delegated'; value: [AccountId20, AccountId20] }
  | { tag: 'Undelegated'; value: AccountId20 };

export type PalletReferendaEvent =
  | {
      tag: 'Submitted';
      value: {
        index: number;
        track: number;
        proposal: FrameSupportPreimagesBounded;
      };
    }
  | {
      tag: 'DecisionDepositPlaced';
      value: {
        index: number;
        who: AccountId20;
        amount: bigint;
      };
    }
  | {
      tag: 'DecisionDepositRefunded';
      value: {
        index: number;
        who: AccountId20;
        amount: bigint;
      };
    }
  | {
      tag: 'DepositSlashed';
      value: {
        who: AccountId20;
        amount: bigint;
      };
    }
  | {
      tag: 'DecisionStarted';
      value: {
        index: number;
        track: number;
        proposal: FrameSupportPreimagesBounded;
        tally: PalletConvictionVotingTally;
      };
    }
  | {
      tag: 'ConfirmStarted';
      value: {
        index: number;
      };
    }
  | {
      tag: 'ConfirmAborted';
      value: {
        index: number;
      };
    }
  | {
      tag: 'Confirmed';
      value: {
        index: number;
        tally: PalletConvictionVotingTally;
      };
    }
  | {
      tag: 'Approved';
      value: {
        index: number;
      };
    }
  | {
      tag: 'Rejected';
      value: {
        index: number;
        tally: PalletConvictionVotingTally;
      };
    }
  | {
      tag: 'TimedOut';
      value: {
        index: number;
        tally: PalletConvictionVotingTally;
      };
    }
  | {
      tag: 'Cancelled';
      value: {
        index: number;
        tally: PalletConvictionVotingTally;
      };
    }
  | {
      tag: 'Killed';
      value: {
        index: number;
        tally: PalletConvictionVotingTally;
      };
    }
  | {
      tag: 'SubmissionDepositRefunded';
      value: {
        index: number;
        who: AccountId20;
        amount: bigint;
      };
    }
  | {
      tag: 'MetadataSet';
      value: {
        index: number;
        hash: H256;
      };
    }
  | {
      tag: 'MetadataCleared';
      value: {
        index: number;
        hash: H256;
      };
    };

export type FrameSupportPreimagesBounded =
  | {
      tag: 'Legacy';
      value: {
        hash: H256;
      };
    }
  | { tag: 'Inline'; value: Bytes }
  | {
      tag: 'Lookup';
      value: {
        hash: H256;
        len: number;
      };
    };

export type MoonbeamRuntimeRuntimeCall =
  | { tag: 'System'; value: FrameSystemCall }
  | { tag: 'ParachainSystem'; value: CumulusPalletParachainSystemCall }
  | { tag: 'Timestamp'; value: PalletTimestampCall }
  | { tag: 'RootTesting'; value: PalletRootTestingCall }
  | { tag: 'Balances'; value: PalletBalancesCall }
  | { tag: 'ParachainStaking'; value: PalletParachainStakingCall }
  | { tag: 'AuthorInherent'; value: PalletAuthorInherentCall }
  | { tag: 'AuthorFilter'; value: PalletAuthorSlotFilterCall }
  | { tag: 'AuthorMapping'; value: PalletAuthorMappingCall }
  | { tag: 'MoonbeamOrbiters'; value: PalletMoonbeamOrbitersCall }
  | { tag: 'Utility'; value: PalletUtilityCall }
  | { tag: 'Proxy'; value: PalletProxyCall }
  | { tag: 'MaintenanceMode'; value: PalletMaintenanceModeCall }
  | { tag: 'Identity'; value: PalletIdentityCall }
  | { tag: 'Multisig'; value: PalletMultisigCall }
  | { tag: 'EVM'; value: PalletEvmCall }
  | { tag: 'Ethereum'; value: PalletEthereumCall }
  | { tag: 'Scheduler'; value: PalletSchedulerCall }
  | { tag: 'Democracy'; value: PalletDemocracyCall }
  | { tag: 'Preimage'; value: PalletPreimageCall }
  | { tag: 'ConvictionVoting'; value: PalletConvictionVotingCall }
  | { tag: 'Referenda'; value: PalletReferendaCall }
  | { tag: 'Whitelist'; value: PalletWhitelistCall }
  | { tag: 'CouncilCollective'; value: PalletCollectiveCall }
  | { tag: 'TechCommitteeCollective'; value: PalletCollectiveCall }
  | { tag: 'TreasuryCouncilCollective'; value: PalletCollectiveCall }
  | { tag: 'OpenTechCommitteeCollective'; value: PalletCollectiveCall }
  | { tag: 'Treasury'; value: PalletTreasuryCall }
  | { tag: 'CrowdloanRewards'; value: PalletCrowdloanRewardsCall }
  | { tag: 'DmpQueue'; value: CumulusPalletDmpQueueCall }
  | { tag: 'PolkadotXcm'; value: PalletXcmCall }
  | { tag: 'Assets'; value: PalletAssetsCall }
  | { tag: 'AssetManager'; value: PalletAssetManagerCall }
  | { tag: 'XTokens'; value: OrmlXtokensModuleCall }
  | { tag: 'XcmTransactor'; value: PalletXcmTransactorCall }
  | { tag: 'LocalAssets'; value: PalletAssetsCall }
  | { tag: 'EthereumXcm'; value: PalletEthereumXcmCall }
  | { tag: 'Randomness'; value: PalletRandomnessCall };

export type FrameSystemCall =
  | {
      tag: 'remark';
      value: {
        remark: Bytes;
      };
    }
  | {
      tag: 'set_heap_pages';
      value: {
        pages: bigint;
      };
    }
  | {
      tag: 'set_code';
      value: {
        code: Bytes;
      };
    }
  | {
      tag: 'set_code_without_checks';
      value: {
        code: Bytes;
      };
    }
  | {
      tag: 'set_storage';
      value: {
        items: Array<[Bytes, Bytes]>;
      };
    }
  | {
      tag: 'kill_storage';
      value: {
        keys: Array<Bytes>;
      };
    }
  | {
      tag: 'kill_prefix';
      value: {
        prefix: Bytes;
        subkeys: number;
      };
    }
  | {
      tag: 'remark_with_event';
      value: {
        remark: Bytes;
      };
    };

export type CumulusPalletParachainSystemCall =
  | {
      tag: 'set_validation_data';
      value: {
        data: CumulusPrimitivesParachainInherentParachainInherentData;
      };
    }
  | {
      tag: 'sudo_send_upward_message';
      value: {
        message: Bytes;
      };
    }
  | {
      tag: 'authorize_upgrade';
      value: {
        codeHash: H256;
        checkVersion: boolean;
      };
    }
  | {
      tag: 'enact_authorized_upgrade';
      value: {
        code: Bytes;
      };
    };

export type CumulusPrimitivesParachainInherentParachainInherentData = {
  validationData: PolkadotPrimitivesV4PersistedValidationData;
  relayChainState: SpTrieStorageProof;
  downwardMessages: Array<PolkadotCorePrimitivesInboundDownwardMessage>;
  horizontalMessages: Array<[PolkadotParachainPrimitivesId, Array<PolkadotCorePrimitivesInboundHrmpMessage>]>;
};

export type PolkadotPrimitivesV4PersistedValidationData = {
  parentHead: PolkadotParachainPrimitivesHeadData;
  relayParentNumber: number;
  relayParentStorageRoot: H256;
  maxPovSize: number;
};

export type PolkadotParachainPrimitivesHeadData = Bytes;

export type SpTrieStorageProof = {
  trieNodes: BTreeSet;
};

export type BTreeSet = Array<Bytes>;

export type PolkadotCorePrimitivesInboundDownwardMessage = {
  sentAt: number;
  msg: Bytes;
};

export type PolkadotParachainPrimitivesId = number;

export type PolkadotCorePrimitivesInboundHrmpMessage = {
  sentAt: number;
  data: Bytes;
};

export type PalletTimestampCall = {
  tag: 'set';
  value: {
    now: bigint;
  };
};

export type PalletRootTestingCall = {
  tag: 'fill_block';
  value: {
    ratio: Perbill;
  };
};

export type PalletBalancesCall =
  | {
      tag: 'transfer_allow_death';
      value: {
        dest: AccountId20;
        value: bigint;
      };
    }
  | {
      tag: 'set_balance_deprecated';
      value: {
        who: AccountId20;
        newFree: bigint;
        oldReserved: bigint;
      };
    }
  | {
      tag: 'force_transfer';
      value: {
        source: AccountId20;
        dest: AccountId20;
        value: bigint;
      };
    }
  | {
      tag: 'transfer_keep_alive';
      value: {
        dest: AccountId20;
        value: bigint;
      };
    }
  | {
      tag: 'transfer_all';
      value: {
        dest: AccountId20;
        keepAlive: boolean;
      };
    }
  | {
      tag: 'force_unreserve';
      value: {
        who: AccountId20;
        amount: bigint;
      };
    }
  | {
      tag: 'upgrade_accounts';
      value: {
        who: Array<AccountId20>;
      };
    }
  | {
      tag: 'transfer';
      value: {
        dest: AccountId20;
        value: bigint;
      };
    }
  | {
      tag: 'force_set_balance';
      value: {
        who: AccountId20;
        newFree: bigint;
      };
    };

export type PalletParachainStakingCall =
  | {
      tag: 'set_staking_expectations';
      value: {
        expectations: {
          min: bigint;
          ideal: bigint;
          max: bigint;
        };
      };
    }
  | {
      tag: 'set_inflation';
      value: {
        schedule: {
          min: Perbill;
          ideal: Perbill;
          max: Perbill;
        };
      };
    }
  | {
      tag: 'set_parachain_bond_account';
      value: {
        new: AccountId20;
      };
    }
  | {
      tag: 'set_parachain_bond_reserve_percent';
      value: {
        new: Percent;
      };
    }
  | {
      tag: 'set_total_selected';
      value: {
        new: number;
      };
    }
  | {
      tag: 'set_collator_commission';
      value: {
        new: Perbill;
      };
    }
  | {
      tag: 'set_blocks_per_round';
      value: {
        new: number;
      };
    }
  | {
      tag: 'join_candidates';
      value: {
        bond: bigint;
        candidateCount: number;
      };
    }
  | {
      tag: 'schedule_leave_candidates';
      value: {
        candidateCount: number;
      };
    }
  | {
      tag: 'execute_leave_candidates';
      value: {
        candidate: AccountId20;
        candidateDelegationCount: number;
      };
    }
  | {
      tag: 'cancel_leave_candidates';
      value: {
        candidateCount: number;
      };
    }
  | { tag: 'go_offline'; value: never }
  | { tag: 'go_online'; value: never }
  | {
      tag: 'candidate_bond_more';
      value: {
        more: bigint;
      };
    }
  | {
      tag: 'schedule_candidate_bond_less';
      value: {
        less: bigint;
      };
    }
  | {
      tag: 'execute_candidate_bond_less';
      value: {
        candidate: AccountId20;
      };
    }
  | { tag: 'cancel_candidate_bond_less'; value: never }
  | {
      tag: 'delegate';
      value: {
        candidate: AccountId20;
        amount: bigint;
        candidateDelegationCount: number;
        delegationCount: number;
      };
    }
  | {
      tag: 'delegate_with_auto_compound';
      value: {
        candidate: AccountId20;
        amount: bigint;
        autoCompound: Percent;
        candidateDelegationCount: number;
        candidateAutoCompoundingDelegationCount: number;
        delegationCount: number;
      };
    }
  | { tag: 'removed_call_19'; value: never }
  | { tag: 'removed_call_20'; value: never }
  | { tag: 'removed_call_21'; value: never }
  | {
      tag: 'schedule_revoke_delegation';
      value: {
        collator: AccountId20;
      };
    }
  | {
      tag: 'delegator_bond_more';
      value: {
        candidate: AccountId20;
        more: bigint;
      };
    }
  | {
      tag: 'schedule_delegator_bond_less';
      value: {
        candidate: AccountId20;
        less: bigint;
      };
    }
  | {
      tag: 'execute_delegation_request';
      value: {
        delegator: AccountId20;
        candidate: AccountId20;
      };
    }
  | {
      tag: 'cancel_delegation_request';
      value: {
        candidate: AccountId20;
      };
    }
  | {
      tag: 'set_auto_compound';
      value: {
        candidate: AccountId20;
        value: Percent;
        candidateAutoCompoundingDelegationCountHint: number;
        delegationCountHint: number;
      };
    }
  | {
      tag: 'hotfix_remove_delegation_requests_exited_candidates';
      value: {
        candidates: Array<AccountId20>;
      };
    };

export type PalletAuthorInherentCall = 'kickOffAuthorshipValidation';

export type PalletAuthorSlotFilterCall = {
  tag: 'set_eligible';
  value: {
    new: PalletAuthorSlotFilterNumNonZeroU32;
  };
};

export type PalletAuthorMappingCall =
  | {
      tag: 'add_association';
      value: {
        nimbusId: NimbusPrimitivesNimbusCryptoPublic;
      };
    }
  | {
      tag: 'update_association';
      value: {
        oldNimbusId: NimbusPrimitivesNimbusCryptoPublic;
        newNimbusId: NimbusPrimitivesNimbusCryptoPublic;
      };
    }
  | {
      tag: 'clear_association';
      value: {
        nimbusId: NimbusPrimitivesNimbusCryptoPublic;
      };
    }
  | { tag: 'remove_keys'; value: never }
  | {
      tag: 'set_keys';
      value: {
        keys: Bytes;
      };
    };

export type PalletMoonbeamOrbitersCall =
  | {
      tag: 'collator_add_orbiter';
      value: {
        orbiter: AccountId20;
      };
    }
  | {
      tag: 'collator_remove_orbiter';
      value: {
        orbiter: AccountId20;
      };
    }
  | {
      tag: 'orbiter_leave_collator_pool';
      value: {
        collator: AccountId20;
      };
    }
  | { tag: 'orbiter_register'; value: never }
  | {
      tag: 'orbiter_unregister';
      value: {
        collatorsPoolCount: number;
      };
    }
  | {
      tag: 'add_collator';
      value: {
        collator: AccountId20;
      };
    }
  | {
      tag: 'remove_collator';
      value: {
        collator: AccountId20;
      };
    };

export type PalletUtilityCall =
  | {
      tag: 'batch';
      value: {
        calls: Array<MoonbeamRuntimeRuntimeCall>;
      };
    }
  | {
      tag: 'as_derivative';
      value: {
        index: number;
        call: MoonbeamRuntimeRuntimeCall;
      };
    }
  | {
      tag: 'batch_all';
      value: {
        calls: Array<MoonbeamRuntimeRuntimeCall>;
      };
    }
  | {
      tag: 'dispatch_as';
      value: {
        asOrigin: MoonbeamRuntimeOriginCaller;
        call: MoonbeamRuntimeRuntimeCall;
      };
    }
  | {
      tag: 'force_batch';
      value: {
        calls: Array<MoonbeamRuntimeRuntimeCall>;
      };
    }
  | {
      tag: 'with_weight';
      value: {
        call: MoonbeamRuntimeRuntimeCall;
        weight: SpWeightsWeightV2Weight;
      };
    };

export type MoonbeamRuntimeOriginCaller =
  | { tag: 'system'; value: FrameSupportDispatchRawOrigin }
  | { tag: 'Ethereum'; value: PalletEthereumRawOrigin }
  | { tag: 'Origins'; value: MoonbeamRuntimeGovernanceOriginsCustomOriginsOrigin }
  | { tag: 'CouncilCollective'; value: PalletCollectiveRawOrigin }
  | { tag: 'TechCommitteeCollective'; value: PalletCollectiveRawOrigin }
  | { tag: 'TreasuryCouncilCollective'; value: PalletCollectiveRawOrigin }
  | { tag: 'OpenTechCommitteeCollective'; value: PalletCollectiveRawOrigin }
  | { tag: 'CumulusXcm'; value: CumulusPalletXcmOrigin }
  | { tag: 'PolkadotXcm'; value: PalletXcmOrigin }
  | { tag: 'EthereumXcm'; value: PalletEthereumXcmRawOrigin }
  | { tag: 'Void'; value: SpCoreVoid };

export type FrameSupportDispatchRawOrigin =
  | { tag: 'Root'; value: never }
  | { tag: 'Signed'; value: AccountId20 }
  | { tag: 'None'; value: never };

export type PalletEthereumRawOrigin = { tag: 'EthereumTransaction'; value: H160 };

export type MoonbeamRuntimeGovernanceOriginsCustomOriginsOrigin =
  | 'whitelistedCaller'
  | 'generalAdmin'
  | 'referendumCanceller'
  | 'referendumKiller';

export type PalletCollectiveRawOrigin =
  | { tag: 'Members'; value: [number, number] }
  | { tag: 'Member'; value: AccountId20 }
  | { tag: '_Phantom'; value: never };

export type CumulusPalletXcmOrigin =
  | { tag: 'Relay'; value: never }
  | { tag: 'SiblingParachain'; value: PolkadotParachainPrimitivesId };

export type PalletXcmOrigin =
  | { tag: 'Xcm'; value: XcmV3MultilocationMultiLocation }
  | { tag: 'Response'; value: XcmV3MultilocationMultiLocation };

export type XcmV3MultilocationMultiLocation = {
  parents: number;
  interior: XcmV3Junctions;
};

export type XcmV3Junctions =
  | { tag: 'Here'; value: never }
  | { tag: 'X1'; value: XcmV3Junction }
  | { tag: 'X2'; value: [XcmV3Junction, XcmV3Junction] }
  | { tag: 'X3'; value: [XcmV3Junction, XcmV3Junction, XcmV3Junction] }
  | { tag: 'X4'; value: [XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction] }
  | { tag: 'X5'; value: [XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction] }
  | { tag: 'X6'; value: [XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction] }
  | {
      tag: 'X7';
      value: [XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction];
    }
  | {
      tag: 'X8';
      value: [
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
      ];
    };

export type XcmV3Junction =
  | { tag: 'Parachain'; value: number }
  | {
      tag: 'AccountId32';
      value: {
        network?: XcmV3JunctionNetworkId | undefined;
        id: FixedBytes<32>;
      };
    }
  | {
      tag: 'AccountIndex64';
      value: {
        network?: XcmV3JunctionNetworkId | undefined;
        index: bigint;
      };
    }
  | {
      tag: 'AccountKey20';
      value: {
        network?: XcmV3JunctionNetworkId | undefined;
        key: FixedBytes<20>;
      };
    }
  | { tag: 'PalletInstance'; value: number }
  | { tag: 'GeneralIndex'; value: bigint }
  | {
      tag: 'GeneralKey';
      value: {
        length: number;
        data: FixedBytes<32>;
      };
    }
  | { tag: 'OnlyChild'; value: never }
  | {
      tag: 'Plurality';
      value: {
        id: XcmV3JunctionBodyId;
        part: XcmV3JunctionBodyPart;
      };
    }
  | { tag: 'GlobalConsensus'; value: XcmV3JunctionNetworkId };

export type XcmV3JunctionNetworkId =
  | { tag: 'ByGenesis'; value: FixedBytes<32> }
  | {
      tag: 'ByFork';
      value: {
        blockNumber: bigint;
        blockHash: FixedBytes<32>;
      };
    }
  | { tag: 'Polkadot'; value: never }
  | { tag: 'Kusama'; value: never }
  | { tag: 'Westend'; value: never }
  | { tag: 'Rococo'; value: never }
  | { tag: 'Wococo'; value: never }
  | {
      tag: 'Ethereum';
      value: {
        chainId: bigint;
      };
    }
  | { tag: 'BitcoinCore'; value: never }
  | { tag: 'BitcoinCash'; value: never };

export type XcmV3JunctionBodyId =
  | { tag: 'Unit'; value: never }
  | { tag: 'Moniker'; value: FixedBytes<4> }
  | { tag: 'Index'; value: number }
  | { tag: 'Executive'; value: never }
  | { tag: 'Technical'; value: never }
  | { tag: 'Legislative'; value: never }
  | { tag: 'Judicial'; value: never }
  | { tag: 'Defense'; value: never }
  | { tag: 'Administration'; value: never }
  | { tag: 'Treasury'; value: never };

export type XcmV3JunctionBodyPart =
  | { tag: 'Voice'; value: never }
  | {
      tag: 'Members';
      value: {
        count: number;
      };
    }
  | {
      tag: 'Fraction';
      value: {
        nom: number;
        denom: number;
      };
    }
  | {
      tag: 'AtLeastProportion';
      value: {
        nom: number;
        denom: number;
      };
    }
  | {
      tag: 'MoreThanProportion';
      value: {
        nom: number;
        denom: number;
      };
    };

export type PalletEthereumXcmRawOrigin = { tag: 'XcmEthereumTransaction'; value: H160 };

export type SpCoreVoid = never;

export type PalletProxyCall =
  | {
      tag: 'proxy';
      value: {
        real: AccountId20;
        forceProxyType?: MoonbeamRuntimeProxyType | undefined;
        call: MoonbeamRuntimeRuntimeCall;
      };
    }
  | {
      tag: 'add_proxy';
      value: {
        delegate: AccountId20;
        proxyType: MoonbeamRuntimeProxyType;
        delay: number;
      };
    }
  | {
      tag: 'remove_proxy';
      value: {
        delegate: AccountId20;
        proxyType: MoonbeamRuntimeProxyType;
        delay: number;
      };
    }
  | { tag: 'remove_proxies'; value: never }
  | {
      tag: 'create_pure';
      value: {
        proxyType: MoonbeamRuntimeProxyType;
        delay: number;
        index: number;
      };
    }
  | {
      tag: 'kill_pure';
      value: {
        spawner: AccountId20;
        proxyType: MoonbeamRuntimeProxyType;
        index: number;
        height: number;
        extIndex: number;
      };
    }
  | {
      tag: 'announce';
      value: {
        real: AccountId20;
        callHash: H256;
      };
    }
  | {
      tag: 'remove_announcement';
      value: {
        real: AccountId20;
        callHash: H256;
      };
    }
  | {
      tag: 'reject_announcement';
      value: {
        delegate: AccountId20;
        callHash: H256;
      };
    }
  | {
      tag: 'proxy_announced';
      value: {
        delegate: AccountId20;
        real: AccountId20;
        forceProxyType?: MoonbeamRuntimeProxyType | undefined;
        call: MoonbeamRuntimeRuntimeCall;
      };
    };

export type PalletMaintenanceModeCall = 'enterMaintenanceMode' | 'resumeNormalOperation';

export type PalletIdentityCall =
  | {
      tag: 'add_registrar';
      value: {
        account: AccountId20;
      };
    }
  | {
      tag: 'set_identity';
      value: {
        info: PalletIdentityIdentityInfo;
      };
    }
  | {
      tag: 'set_subs';
      value: {
        subs: Array<[AccountId20, PalletIdentityData]>;
      };
    }
  | { tag: 'clear_identity'; value: never }
  | {
      tag: 'request_judgement';
      value: {
        regIndex: number;
        maxFee: bigint;
      };
    }
  | {
      tag: 'cancel_request';
      value: {
        regIndex: number;
      };
    }
  | {
      tag: 'set_fee';
      value: {
        index: number;
        fee: bigint;
      };
    }
  | {
      tag: 'set_account_id';
      value: {
        index: number;
        new: AccountId20;
      };
    }
  | {
      tag: 'set_fields';
      value: {
        index: number;
        fields: PalletIdentityBitFlags;
      };
    }
  | {
      tag: 'provide_judgement';
      value: {
        regIndex: number;
        target: AccountId20;
        judgement: PalletIdentityJudgement;
        identity: H256;
      };
    }
  | {
      tag: 'kill_identity';
      value: {
        target: AccountId20;
      };
    }
  | {
      tag: 'add_sub';
      value: {
        sub: AccountId20;
        data: PalletIdentityData;
      };
    }
  | {
      tag: 'rename_sub';
      value: {
        sub: AccountId20;
        data: PalletIdentityData;
      };
    }
  | {
      tag: 'remove_sub';
      value: {
        sub: AccountId20;
      };
    }
  | { tag: 'quit_sub'; value: never };

export type PalletIdentityIdentityInfo = {
  additional: Array<[PalletIdentityData, PalletIdentityData]>;
  display: PalletIdentityData;
  legal: PalletIdentityData;
  web: PalletIdentityData;
  riot: PalletIdentityData;
  email: PalletIdentityData;
  pgpFingerprint?: FixedBytes<20> | undefined;
  image: PalletIdentityData;
  twitter: PalletIdentityData;
};

export type PalletIdentityData =
  | { tag: 'None'; value: never }
  | { tag: 'Raw0'; value: FixedBytes<0> }
  | { tag: 'Raw1'; value: FixedBytes<1> }
  | { tag: 'Raw2'; value: FixedBytes<2> }
  | { tag: 'Raw3'; value: FixedBytes<3> }
  | { tag: 'Raw4'; value: FixedBytes<4> }
  | { tag: 'Raw5'; value: FixedBytes<5> }
  | { tag: 'Raw6'; value: FixedBytes<6> }
  | { tag: 'Raw7'; value: FixedBytes<7> }
  | { tag: 'Raw8'; value: FixedBytes<8> }
  | { tag: 'Raw9'; value: FixedBytes<9> }
  | { tag: 'Raw10'; value: FixedBytes<10> }
  | { tag: 'Raw11'; value: FixedBytes<11> }
  | { tag: 'Raw12'; value: FixedBytes<12> }
  | { tag: 'Raw13'; value: FixedBytes<13> }
  | { tag: 'Raw14'; value: FixedBytes<14> }
  | { tag: 'Raw15'; value: FixedBytes<15> }
  | { tag: 'Raw16'; value: FixedBytes<16> }
  | { tag: 'Raw17'; value: FixedBytes<17> }
  | { tag: 'Raw18'; value: FixedBytes<18> }
  | { tag: 'Raw19'; value: FixedBytes<19> }
  | { tag: 'Raw20'; value: FixedBytes<20> }
  | { tag: 'Raw21'; value: FixedBytes<21> }
  | { tag: 'Raw22'; value: FixedBytes<22> }
  | { tag: 'Raw23'; value: FixedBytes<23> }
  | { tag: 'Raw24'; value: FixedBytes<24> }
  | { tag: 'Raw25'; value: FixedBytes<25> }
  | { tag: 'Raw26'; value: FixedBytes<26> }
  | { tag: 'Raw27'; value: FixedBytes<27> }
  | { tag: 'Raw28'; value: FixedBytes<28> }
  | { tag: 'Raw29'; value: FixedBytes<29> }
  | { tag: 'Raw30'; value: FixedBytes<30> }
  | { tag: 'Raw31'; value: FixedBytes<31> }
  | { tag: 'Raw32'; value: FixedBytes<32> }
  | { tag: 'BlakeTwo256'; value: FixedBytes<32> }
  | { tag: 'Sha256'; value: FixedBytes<32> }
  | { tag: 'Keccak256'; value: FixedBytes<32> }
  | { tag: 'ShaThree256'; value: FixedBytes<32> };

export type PalletIdentityBitFlags = bigint;

export type PalletIdentityIdentityField =
  | 'display'
  | 'legal'
  | 'web'
  | 'riot'
  | 'email'
  | 'pgpFingerprint'
  | 'image'
  | 'twitter';

export type PalletIdentityJudgement =
  | { tag: 'Unknown'; value: never }
  | { tag: 'FeePaid'; value: bigint }
  | { tag: 'Reasonable'; value: never }
  | { tag: 'KnownGood'; value: never }
  | { tag: 'OutOfDate'; value: never }
  | { tag: 'LowQuality'; value: never }
  | { tag: 'Erroneous'; value: never };

export type PalletMultisigCall =
  | {
      tag: 'as_multi_threshold_1';
      value: {
        otherSignatories: Array<AccountId20>;
        call: MoonbeamRuntimeRuntimeCall;
      };
    }
  | {
      tag: 'as_multi';
      value: {
        threshold: number;
        otherSignatories: Array<AccountId20>;
        maybeTimepoint?: PalletMultisigTimepoint | undefined;
        call: MoonbeamRuntimeRuntimeCall;
        maxWeight: SpWeightsWeightV2Weight;
      };
    }
  | {
      tag: 'approve_as_multi';
      value: {
        threshold: number;
        otherSignatories: Array<AccountId20>;
        maybeTimepoint?: PalletMultisigTimepoint | undefined;
        callHash: FixedBytes<32>;
        maxWeight: SpWeightsWeightV2Weight;
      };
    }
  | {
      tag: 'cancel_as_multi';
      value: {
        threshold: number;
        otherSignatories: Array<AccountId20>;
        timepoint: PalletMultisigTimepoint;
        callHash: FixedBytes<32>;
      };
    };

export type PalletEvmCall =
  | {
      tag: 'withdraw';
      value: {
        address: H160;
        value: bigint;
      };
    }
  | {
      tag: 'call';
      value: {
        source: H160;
        target: H160;
        input: Bytes;
        value: U256;
        gasLimit: bigint;
        maxFeePerGas: U256;
        maxPriorityFeePerGas?: U256 | undefined;
        nonce?: U256 | undefined;
        accessList: Array<[H160, Array<H256>]>;
      };
    }
  | {
      tag: 'create';
      value: {
        source: H160;
        init: Bytes;
        value: U256;
        gasLimit: bigint;
        maxFeePerGas: U256;
        maxPriorityFeePerGas?: U256 | undefined;
        nonce?: U256 | undefined;
        accessList: Array<[H160, Array<H256>]>;
      };
    }
  | {
      tag: 'create2';
      value: {
        source: H160;
        init: Bytes;
        salt: H256;
        value: U256;
        gasLimit: bigint;
        maxFeePerGas: U256;
        maxPriorityFeePerGas?: U256 | undefined;
        nonce?: U256 | undefined;
        accessList: Array<[H160, Array<H256>]>;
      };
    };

export type PalletEthereumCall = {
  tag: 'transact';
  value: {
    transaction: EthereumTransactionTransactionV2;
  };
};

export type EthereumTransactionTransactionV2 =
  | { tag: 'Legacy'; value: EthereumTransactionLegacyTransaction }
  | { tag: 'EIP2930'; value: EthereumTransactionEip2930Transaction }
  | { tag: 'EIP1559'; value: EthereumTransactionEip1559Transaction };

export type EthereumTransactionLegacyTransaction = {
  nonce: U256;
  gasPrice: U256;
  gasLimit: U256;
  action: EthereumTransactionTransactionAction;
  value: U256;
  input: Bytes;
  signature: EthereumTransactionTransactionSignature;
};

export type EthereumTransactionTransactionAction = { tag: 'Call'; value: H160 } | { tag: 'Create'; value: never };

export type EthereumTransactionTransactionSignature = {
  v: EthereumTransactionTransactionRecoveryId;
  r: H256;
  s: H256;
};

export type EthereumTransactionTransactionRecoveryId = bigint;

export type EthereumTransactionEip2930Transaction = {
  chainId: bigint;
  nonce: U256;
  gasPrice: U256;
  gasLimit: U256;
  action: EthereumTransactionTransactionAction;
  value: U256;
  input: Bytes;
  accessList: Array<EthereumTransactionAccessListItem>;
  oddYParity: boolean;
  r: H256;
  s: H256;
};

export type EthereumTransactionAccessListItem = {
  address: H160;
  storageKeys: Array<H256>;
};

export type EthereumTransactionEip1559Transaction = {
  chainId: bigint;
  nonce: U256;
  maxPriorityFeePerGas: U256;
  maxFeePerGas: U256;
  gasLimit: U256;
  action: EthereumTransactionTransactionAction;
  value: U256;
  input: Bytes;
  accessList: Array<EthereumTransactionAccessListItem>;
  oddYParity: boolean;
  r: H256;
  s: H256;
};

export type PalletSchedulerCall =
  | {
      tag: 'schedule';
      value: {
        when: number;
        maybePeriodic?: [number, number] | undefined;
        priority: number;
        call: MoonbeamRuntimeRuntimeCall;
      };
    }
  | {
      tag: 'cancel';
      value: {
        when: number;
        index: number;
      };
    }
  | {
      tag: 'schedule_named';
      value: {
        id: FixedBytes<32>;
        when: number;
        maybePeriodic?: [number, number] | undefined;
        priority: number;
        call: MoonbeamRuntimeRuntimeCall;
      };
    }
  | {
      tag: 'cancel_named';
      value: {
        id: FixedBytes<32>;
      };
    }
  | {
      tag: 'schedule_after';
      value: {
        after: number;
        maybePeriodic?: [number, number] | undefined;
        priority: number;
        call: MoonbeamRuntimeRuntimeCall;
      };
    }
  | {
      tag: 'schedule_named_after';
      value: {
        id: FixedBytes<32>;
        after: number;
        maybePeriodic?: [number, number] | undefined;
        priority: number;
        call: MoonbeamRuntimeRuntimeCall;
      };
    };

export type PalletDemocracyCall =
  | {
      tag: 'propose';
      value: {
        proposal: FrameSupportPreimagesBounded;
        value: bigint;
      };
    }
  | {
      tag: 'second';
      value: {
        proposal: number;
      };
    }
  | {
      tag: 'vote';
      value: {
        refIndex: number;
        vote: PalletDemocracyVoteAccountVote;
      };
    }
  | {
      tag: 'emergency_cancel';
      value: {
        refIndex: number;
      };
    }
  | {
      tag: 'external_propose';
      value: {
        proposal: FrameSupportPreimagesBounded;
      };
    }
  | {
      tag: 'external_propose_majority';
      value: {
        proposal: FrameSupportPreimagesBounded;
      };
    }
  | {
      tag: 'external_propose_default';
      value: {
        proposal: FrameSupportPreimagesBounded;
      };
    }
  | {
      tag: 'fast_track';
      value: {
        proposalHash: H256;
        votingPeriod: number;
        delay: number;
      };
    }
  | {
      tag: 'veto_external';
      value: {
        proposalHash: H256;
      };
    }
  | {
      tag: 'cancel_referendum';
      value: {
        refIndex: number;
      };
    }
  | {
      tag: 'delegate';
      value: {
        to: AccountId20;
        conviction: PalletDemocracyConviction;
        balance: bigint;
      };
    }
  | { tag: 'undelegate'; value: never }
  | { tag: 'clear_public_proposals'; value: never }
  | {
      tag: 'unlock';
      value: {
        target: AccountId20;
      };
    }
  | {
      tag: 'remove_vote';
      value: {
        index: number;
      };
    }
  | {
      tag: 'remove_other_vote';
      value: {
        target: AccountId20;
        index: number;
      };
    }
  | {
      tag: 'blacklist';
      value: {
        proposalHash: H256;
        maybeRefIndex?: number | undefined;
      };
    }
  | {
      tag: 'cancel_proposal';
      value: {
        propIndex: number;
      };
    }
  | {
      tag: 'set_metadata';
      value: {
        owner: PalletDemocracyMetadataOwner;
        maybeHash?: H256 | undefined;
      };
    };

export type PalletDemocracyConviction =
  | 'none'
  | 'locked1x'
  | 'locked2x'
  | 'locked3x'
  | 'locked4x'
  | 'locked5x'
  | 'locked6x';

export type PalletPreimageCall =
  | {
      tag: 'note_preimage';
      value: {
        bytes: Bytes;
      };
    }
  | {
      tag: 'unnote_preimage';
      value: {
        hash: H256;
      };
    }
  | {
      tag: 'request_preimage';
      value: {
        hash: H256;
      };
    }
  | {
      tag: 'unrequest_preimage';
      value: {
        hash: H256;
      };
    };

export type PalletConvictionVotingCall =
  | {
      tag: 'vote';
      value: {
        pollIndex: number;
        vote: PalletConvictionVotingVoteAccountVote;
      };
    }
  | {
      tag: 'delegate';
      value: {
        class: number;
        to: AccountId20;
        conviction: PalletConvictionVotingConviction;
        balance: bigint;
      };
    }
  | {
      tag: 'undelegate';
      value: {
        class: number;
      };
    }
  | {
      tag: 'unlock';
      value: {
        class: number;
        target: AccountId20;
      };
    }
  | {
      tag: 'remove_vote';
      value: {
        class?: number | undefined;
        index: number;
      };
    }
  | {
      tag: 'remove_other_vote';
      value: {
        target: AccountId20;
        class: number;
        index: number;
      };
    };

export type PalletConvictionVotingVoteAccountVote =
  | {
      tag: 'Standard';
      value: {
        vote: PalletConvictionVotingVote;
        balance: bigint;
      };
    }
  | {
      tag: 'Split';
      value: {
        aye: bigint;
        nay: bigint;
      };
    }
  | {
      tag: 'SplitAbstain';
      value: {
        aye: bigint;
        nay: bigint;
        abstain: bigint;
      };
    };

export type PalletConvictionVotingVote = number;

export type PalletConvictionVotingConviction =
  | 'none'
  | 'locked1x'
  | 'locked2x'
  | 'locked3x'
  | 'locked4x'
  | 'locked5x'
  | 'locked6x';

export type PalletReferendaCall =
  | {
      tag: 'submit';
      value: {
        proposalOrigin: MoonbeamRuntimeOriginCaller;
        proposal: FrameSupportPreimagesBounded;
        enactmentMoment: FrameSupportScheduleDispatchTime;
      };
    }
  | {
      tag: 'place_decision_deposit';
      value: {
        index: number;
      };
    }
  | {
      tag: 'refund_decision_deposit';
      value: {
        index: number;
      };
    }
  | {
      tag: 'cancel';
      value: {
        index: number;
      };
    }
  | {
      tag: 'kill';
      value: {
        index: number;
      };
    }
  | {
      tag: 'nudge_referendum';
      value: {
        index: number;
      };
    }
  | {
      tag: 'one_fewer_deciding';
      value: {
        track: number;
      };
    }
  | {
      tag: 'refund_submission_deposit';
      value: {
        index: number;
      };
    }
  | {
      tag: 'set_metadata';
      value: {
        index: number;
        maybeHash?: H256 | undefined;
      };
    };

export type FrameSupportScheduleDispatchTime = { tag: 'At'; value: number } | { tag: 'After'; value: number };

export type PalletWhitelistCall =
  | {
      tag: 'whitelist_call';
      value: {
        callHash: H256;
      };
    }
  | {
      tag: 'remove_whitelisted_call';
      value: {
        callHash: H256;
      };
    }
  | {
      tag: 'dispatch_whitelisted_call';
      value: {
        callHash: H256;
        callEncodedLen: number;
        callWeightWitness: SpWeightsWeightV2Weight;
      };
    }
  | {
      tag: 'dispatch_whitelisted_call_with_preimage';
      value: {
        call: MoonbeamRuntimeRuntimeCall;
      };
    };

export type PalletCollectiveCall =
  | {
      tag: 'set_members';
      value: {
        newMembers: Array<AccountId20>;
        prime?: AccountId20 | undefined;
        oldCount: number;
      };
    }
  | {
      tag: 'execute';
      value: {
        proposal: MoonbeamRuntimeRuntimeCall;
        lengthBound: number;
      };
    }
  | {
      tag: 'propose';
      value: {
        threshold: number;
        proposal: MoonbeamRuntimeRuntimeCall;
        lengthBound: number;
      };
    }
  | {
      tag: 'vote';
      value: {
        proposal: H256;
        index: number;
        approve: boolean;
      };
    }
  | {
      tag: 'disapprove_proposal';
      value: {
        proposalHash: H256;
      };
    }
  | {
      tag: 'close';
      value: {
        proposalHash: H256;
        index: number;
        proposalWeightBound: SpWeightsWeightV2Weight;
        lengthBound: number;
      };
    };

export type PalletTreasuryCall =
  | {
      tag: 'propose_spend';
      value: {
        value: bigint;
        beneficiary: AccountId20;
      };
    }
  | {
      tag: 'reject_proposal';
      value: {
        proposalId: number;
      };
    }
  | {
      tag: 'approve_proposal';
      value: {
        proposalId: number;
      };
    }
  | {
      tag: 'spend';
      value: {
        amount: bigint;
        beneficiary: AccountId20;
      };
    }
  | {
      tag: 'remove_approval';
      value: {
        proposalId: number;
      };
    };

export type PalletCrowdloanRewardsCall =
  | {
      tag: 'associate_native_identity';
      value: {
        rewardAccount: AccountId20;
        relayAccount: FixedBytes<32>;
        proof: SpRuntimeMultiSignature;
      };
    }
  | {
      tag: 'change_association_with_relay_keys';
      value: {
        rewardAccount: AccountId20;
        previousAccount: AccountId20;
        proofs: Array<[FixedBytes<32>, SpRuntimeMultiSignature]>;
      };
    }
  | { tag: 'claim'; value: never }
  | {
      tag: 'update_reward_address';
      value: {
        newRewardAccount: AccountId20;
      };
    }
  | {
      tag: 'complete_initialization';
      value: {
        leaseEndingBlock: number;
      };
    }
  | {
      tag: 'initialize_reward_vec';
      value: {
        rewards?: Array<[FixedBytes<32>, AccountId20 | undefined, bigint]>;
      };
    };

export type SpRuntimeMultiSignature =
  | { tag: 'Ed25519'; value: SpCoreEd25519Signature }
  | { tag: 'Sr25519'; value: SpCoreSr25519Signature }
  | { tag: 'Ecdsa'; value: SpCoreEcdsaSignature };

export type SpCoreEd25519Signature = FixedBytes<64>;

export type SpCoreSr25519Signature = FixedBytes<64>;

export type SpCoreEcdsaSignature = FixedBytes<65>;

export type CumulusPalletDmpQueueCall = {
  tag: 'service_overweight';
  value: {
    index: bigint;
    weightLimit: SpWeightsWeightV2Weight;
  };
};

export type PalletXcmCall =
  | {
      tag: 'send';
      value: {
        dest: XcmVersionedMultiLocation;
        message: XcmVersionedXcm;
      };
    }
  | {
      tag: 'teleport_assets';
      value: {
        dest: XcmVersionedMultiLocation;
        beneficiary: XcmVersionedMultiLocation;
        assets: XcmVersionedMultiAssets;
        feeAssetItem: number;
      };
    }
  | {
      tag: 'reserve_transfer_assets';
      value: {
        dest: XcmVersionedMultiLocation;
        beneficiary: XcmVersionedMultiLocation;
        assets: XcmVersionedMultiAssets;
        feeAssetItem: number;
      };
    }
  | {
      tag: 'execute';
      value: {
        message: XcmVersionedXcm;
        maxWeight: SpWeightsWeightV2Weight;
      };
    }
  | {
      tag: 'force_xcm_version';
      value: {
        location: XcmV3MultilocationMultiLocation;
        xcmVersion: number;
      };
    }
  | {
      tag: 'force_default_xcm_version';
      value: {
        maybeXcmVersion?: number | undefined;
      };
    }
  | {
      tag: 'force_subscribe_version_notify';
      value: {
        location: XcmVersionedMultiLocation;
      };
    }
  | {
      tag: 'force_unsubscribe_version_notify';
      value: {
        location: XcmVersionedMultiLocation;
      };
    }
  | {
      tag: 'limited_reserve_transfer_assets';
      value: {
        dest: XcmVersionedMultiLocation;
        beneficiary: XcmVersionedMultiLocation;
        assets: XcmVersionedMultiAssets;
        feeAssetItem: number;
        weightLimit: XcmV3WeightLimit;
      };
    }
  | {
      tag: 'limited_teleport_assets';
      value: {
        dest: XcmVersionedMultiLocation;
        beneficiary: XcmVersionedMultiLocation;
        assets: XcmVersionedMultiAssets;
        feeAssetItem: number;
        weightLimit: XcmV3WeightLimit;
      };
    }
  | {
      tag: 'force_suspension';
      value: {
        suspended: boolean;
      };
    };

export type XcmVersionedMultiLocation =
  | { tag: 'V2'; value: XcmV2MultilocationMultiLocation }
  | { tag: 'V3'; value: XcmV3MultilocationMultiLocation };

export type XcmV2MultilocationMultiLocation = {
  parents: number;
  interior: XcmV2MultilocationJunctions;
};

export type XcmV2MultilocationJunctions =
  | { tag: 'Here'; value: never }
  | { tag: 'X1'; value: XcmV2Junction }
  | { tag: 'X2'; value: [XcmV2Junction, XcmV2Junction] }
  | { tag: 'X3'; value: [XcmV2Junction, XcmV2Junction, XcmV2Junction] }
  | { tag: 'X4'; value: [XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction] }
  | { tag: 'X5'; value: [XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction] }
  | { tag: 'X6'; value: [XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction] }
  | {
      tag: 'X7';
      value: [XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction];
    }
  | {
      tag: 'X8';
      value: [
        XcmV2Junction,
        XcmV2Junction,
        XcmV2Junction,
        XcmV2Junction,
        XcmV2Junction,
        XcmV2Junction,
        XcmV2Junction,
        XcmV2Junction,
      ];
    };

export type XcmV2Junction =
  | { tag: 'Parachain'; value: number }
  | {
      tag: 'AccountId32';
      value: {
        network: XcmV2NetworkId;
        id: FixedBytes<32>;
      };
    }
  | {
      tag: 'AccountIndex64';
      value: {
        network: XcmV2NetworkId;
        index: bigint;
      };
    }
  | {
      tag: 'AccountKey20';
      value: {
        network: XcmV2NetworkId;
        key: FixedBytes<20>;
      };
    }
  | { tag: 'PalletInstance'; value: number }
  | { tag: 'GeneralIndex'; value: bigint }
  | { tag: 'GeneralKey'; value: Bytes }
  | { tag: 'OnlyChild'; value: never }
  | {
      tag: 'Plurality';
      value: {
        id: XcmV2BodyId;
        part: XcmV2BodyPart;
      };
    };

export type XcmV2NetworkId =
  | { tag: 'Any'; value: never }
  | { tag: 'Named'; value: Bytes }
  | { tag: 'Polkadot'; value: never }
  | { tag: 'Kusama'; value: never };

export type XcmV2BodyId =
  | { tag: 'Unit'; value: never }
  | { tag: 'Named'; value: Bytes }
  | { tag: 'Index'; value: number }
  | { tag: 'Executive'; value: never }
  | { tag: 'Technical'; value: never }
  | { tag: 'Legislative'; value: never }
  | { tag: 'Judicial'; value: never }
  | { tag: 'Defense'; value: never }
  | { tag: 'Administration'; value: never }
  | { tag: 'Treasury'; value: never };

export type XcmV2BodyPart =
  | { tag: 'Voice'; value: never }
  | {
      tag: 'Members';
      value: {
        count: number;
      };
    }
  | {
      tag: 'Fraction';
      value: {
        nom: number;
        denom: number;
      };
    }
  | {
      tag: 'AtLeastProportion';
      value: {
        nom: number;
        denom: number;
      };
    }
  | {
      tag: 'MoreThanProportion';
      value: {
        nom: number;
        denom: number;
      };
    };

export type XcmVersionedXcm = { tag: 'V2'; value: XcmV2Xcm } | { tag: 'V3'; value: XcmV3Xcm };

export type XcmV2Xcm = Array<XcmV2Instruction>;

export type XcmV2Instruction =
  | { tag: 'WithdrawAsset'; value: XcmV2MultiassetMultiAssets }
  | { tag: 'ReserveAssetDeposited'; value: XcmV2MultiassetMultiAssets }
  | { tag: 'ReceiveTeleportedAsset'; value: XcmV2MultiassetMultiAssets }
  | {
      tag: 'QueryResponse';
      value: {
        queryId: bigint;
        response: XcmV2Response;
        maxWeight: bigint;
      };
    }
  | {
      tag: 'TransferAsset';
      value: {
        assets: XcmV2MultiassetMultiAssets;
        beneficiary: XcmV2MultilocationMultiLocation;
      };
    }
  | {
      tag: 'TransferReserveAsset';
      value: {
        assets: XcmV2MultiassetMultiAssets;
        dest: XcmV2MultilocationMultiLocation;
        xcm: XcmV2Xcm;
      };
    }
  | {
      tag: 'Transact';
      value: {
        originType: XcmV2OriginKind;
        requireWeightAtMost: bigint;
        call: XcmDoubleEncoded;
      };
    }
  | {
      tag: 'HrmpNewChannelOpenRequest';
      value: {
        sender: number;
        maxMessageSize: number;
        maxCapacity: number;
      };
    }
  | {
      tag: 'HrmpChannelAccepted';
      value: {
        recipient: number;
      };
    }
  | {
      tag: 'HrmpChannelClosing';
      value: {
        initiator: number;
        sender: number;
        recipient: number;
      };
    }
  | { tag: 'ClearOrigin'; value: never }
  | { tag: 'DescendOrigin'; value: XcmV2MultilocationJunctions }
  | {
      tag: 'ReportError';
      value: {
        queryId: bigint;
        dest: XcmV2MultilocationMultiLocation;
        maxResponseWeight: bigint;
      };
    }
  | {
      tag: 'DepositAsset';
      value: {
        assets: XcmV2MultiassetMultiAssetFilter;
        maxAssets: number;
        beneficiary: XcmV2MultilocationMultiLocation;
      };
    }
  | {
      tag: 'DepositReserveAsset';
      value: {
        assets: XcmV2MultiassetMultiAssetFilter;
        maxAssets: number;
        dest: XcmV2MultilocationMultiLocation;
        xcm: XcmV2Xcm;
      };
    }
  | {
      tag: 'ExchangeAsset';
      value: {
        give: XcmV2MultiassetMultiAssetFilter;
        receive: XcmV2MultiassetMultiAssets;
      };
    }
  | {
      tag: 'InitiateReserveWithdraw';
      value: {
        assets: XcmV2MultiassetMultiAssetFilter;
        reserve: XcmV2MultilocationMultiLocation;
        xcm: XcmV2Xcm;
      };
    }
  | {
      tag: 'InitiateTeleport';
      value: {
        assets: XcmV2MultiassetMultiAssetFilter;
        dest: XcmV2MultilocationMultiLocation;
        xcm: XcmV2Xcm;
      };
    }
  | {
      tag: 'QueryHolding';
      value: {
        queryId: bigint;
        dest: XcmV2MultilocationMultiLocation;
        assets: XcmV2MultiassetMultiAssetFilter;
        maxResponseWeight: bigint;
      };
    }
  | {
      tag: 'BuyExecution';
      value: {
        fees: XcmV2MultiassetMultiAsset;
        weightLimit: XcmV2WeightLimit;
      };
    }
  | { tag: 'RefundSurplus'; value: never }
  | { tag: 'SetErrorHandler'; value: XcmV2Xcm }
  | { tag: 'SetAppendix'; value: XcmV2Xcm }
  | { tag: 'ClearError'; value: never }
  | {
      tag: 'ClaimAsset';
      value: {
        assets: XcmV2MultiassetMultiAssets;
        ticket: XcmV2MultilocationMultiLocation;
      };
    }
  | { tag: 'Trap'; value: bigint }
  | {
      tag: 'SubscribeVersion';
      value: {
        queryId: bigint;
        maxResponseWeight: bigint;
      };
    }
  | { tag: 'UnsubscribeVersion'; value: never };

export type XcmV2MultiassetMultiAssets = Array<XcmV2MultiassetMultiAsset>;

export type XcmV2MultiassetMultiAsset = {
  id: XcmV2MultiassetAssetId;
  fun: XcmV2MultiassetFungibility;
};

export type XcmV2MultiassetAssetId =
  | { tag: 'Concrete'; value: XcmV2MultilocationMultiLocation }
  | { tag: 'Abstract'; value: Bytes };

export type XcmV2MultiassetFungibility =
  | { tag: 'Fungible'; value: bigint }
  | { tag: 'NonFungible'; value: XcmV2MultiassetAssetInstance };

export type XcmV2MultiassetAssetInstance =
  | { tag: 'Undefined'; value: never }
  | { tag: 'Index'; value: bigint }
  | { tag: 'Array4'; value: FixedBytes<4> }
  | { tag: 'Array8'; value: FixedBytes<8> }
  | { tag: 'Array16'; value: FixedBytes<16> }
  | { tag: 'Array32'; value: FixedBytes<32> }
  | { tag: 'Blob'; value: Bytes };

export type XcmV2Response =
  | { tag: 'Null'; value: never }
  | { tag: 'Assets'; value: XcmV2MultiassetMultiAssets }
  | { tag: 'ExecutionResult'; value: [number, XcmV2TraitsError] | undefined }
  | { tag: 'Version'; value: number };

export type XcmV2TraitsError =
  | { tag: 'Overflow'; value: never }
  | { tag: 'Unimplemented'; value: never }
  | { tag: 'UntrustedReserveLocation'; value: never }
  | { tag: 'UntrustedTeleportLocation'; value: never }
  | { tag: 'MultiLocationFull'; value: never }
  | { tag: 'MultiLocationNotInvertible'; value: never }
  | { tag: 'BadOrigin'; value: never }
  | { tag: 'InvalidLocation'; value: never }
  | { tag: 'AssetNotFound'; value: never }
  | { tag: 'FailedToTransactAsset'; value: never }
  | { tag: 'NotWithdrawable'; value: never }
  | { tag: 'LocationCannotHold'; value: never }
  | { tag: 'ExceedsMaxMessageSize'; value: never }
  | { tag: 'DestinationUnsupported'; value: never }
  | { tag: 'Transport'; value: never }
  | { tag: 'Unroutable'; value: never }
  | { tag: 'UnknownClaim'; value: never }
  | { tag: 'FailedToDecode'; value: never }
  | { tag: 'MaxWeightInvalid'; value: never }
  | { tag: 'NotHoldingFees'; value: never }
  | { tag: 'TooExpensive'; value: never }
  | { tag: 'Trap'; value: bigint }
  | { tag: 'UnhandledXcmVersion'; value: never }
  | { tag: 'WeightLimitReached'; value: bigint }
  | { tag: 'Barrier'; value: never }
  | { tag: 'WeightNotComputable'; value: never };

export type XcmV2OriginKind = 'native' | 'sovereignAccount' | 'superuser' | 'xcm';

export type XcmDoubleEncoded = {
  encoded: Bytes;
};

export type XcmV2MultiassetMultiAssetFilter =
  | { tag: 'Definite'; value: XcmV2MultiassetMultiAssets }
  | { tag: 'Wild'; value: XcmV2MultiassetWildMultiAsset };

export type XcmV2MultiassetWildMultiAsset =
  | { tag: 'All'; value: never }
  | {
      tag: 'AllOf';
      value: {
        id: XcmV2MultiassetAssetId;
        fun: XcmV2MultiassetWildFungibility;
      };
    };

export type XcmV2MultiassetWildFungibility = 'fungible' | 'nonFungible';

export type XcmV2WeightLimit = { tag: 'Unlimited'; value: never } | { tag: 'Limited'; value: bigint };

export type XcmV3Xcm = Array<XcmV3Instruction>;

export type XcmV3Instruction =
  | { tag: 'WithdrawAsset'; value: XcmV3MultiassetMultiAssets }
  | { tag: 'ReserveAssetDeposited'; value: XcmV3MultiassetMultiAssets }
  | { tag: 'ReceiveTeleportedAsset'; value: XcmV3MultiassetMultiAssets }
  | {
      tag: 'QueryResponse';
      value: {
        queryId: bigint;
        response: XcmV3Response;
        maxWeight: SpWeightsWeightV2Weight;
        querier?: XcmV3MultilocationMultiLocation | undefined;
      };
    }
  | {
      tag: 'TransferAsset';
      value: {
        assets: XcmV3MultiassetMultiAssets;
        beneficiary: XcmV3MultilocationMultiLocation;
      };
    }
  | {
      tag: 'TransferReserveAsset';
      value: {
        assets: XcmV3MultiassetMultiAssets;
        dest: XcmV3MultilocationMultiLocation;
        xcm: XcmV3Xcm;
      };
    }
  | {
      tag: 'Transact';
      value: {
        originKind: XcmV2OriginKind;
        requireWeightAtMost: SpWeightsWeightV2Weight;
        call: XcmDoubleEncoded;
      };
    }
  | {
      tag: 'HrmpNewChannelOpenRequest';
      value: {
        sender: number;
        maxMessageSize: number;
        maxCapacity: number;
      };
    }
  | {
      tag: 'HrmpChannelAccepted';
      value: {
        recipient: number;
      };
    }
  | {
      tag: 'HrmpChannelClosing';
      value: {
        initiator: number;
        sender: number;
        recipient: number;
      };
    }
  | { tag: 'ClearOrigin'; value: never }
  | { tag: 'DescendOrigin'; value: XcmV3Junctions }
  | { tag: 'ReportError'; value: XcmV3QueryResponseInfo }
  | {
      tag: 'DepositAsset';
      value: {
        assets: XcmV3MultiassetMultiAssetFilter;
        beneficiary: XcmV3MultilocationMultiLocation;
      };
    }
  | {
      tag: 'DepositReserveAsset';
      value: {
        assets: XcmV3MultiassetMultiAssetFilter;
        dest: XcmV3MultilocationMultiLocation;
        xcm: XcmV3Xcm;
      };
    }
  | {
      tag: 'ExchangeAsset';
      value: {
        give: XcmV3MultiassetMultiAssetFilter;
        want: XcmV3MultiassetMultiAssets;
        maximal: boolean;
      };
    }
  | {
      tag: 'InitiateReserveWithdraw';
      value: {
        assets: XcmV3MultiassetMultiAssetFilter;
        reserve: XcmV3MultilocationMultiLocation;
        xcm: XcmV3Xcm;
      };
    }
  | {
      tag: 'InitiateTeleport';
      value: {
        assets: XcmV3MultiassetMultiAssetFilter;
        dest: XcmV3MultilocationMultiLocation;
        xcm: XcmV3Xcm;
      };
    }
  | {
      tag: 'ReportHolding';
      value: {
        responseInfo: XcmV3QueryResponseInfo;
        assets: XcmV3MultiassetMultiAssetFilter;
      };
    }
  | {
      tag: 'BuyExecution';
      value: {
        fees: XcmV3MultiassetMultiAsset;
        weightLimit: XcmV3WeightLimit;
      };
    }
  | { tag: 'RefundSurplus'; value: never }
  | { tag: 'SetErrorHandler'; value: XcmV3Xcm }
  | { tag: 'SetAppendix'; value: XcmV3Xcm }
  | { tag: 'ClearError'; value: never }
  | {
      tag: 'ClaimAsset';
      value: {
        assets: XcmV3MultiassetMultiAssets;
        ticket: XcmV3MultilocationMultiLocation;
      };
    }
  | { tag: 'Trap'; value: bigint }
  | {
      tag: 'SubscribeVersion';
      value: {
        queryId: bigint;
        maxResponseWeight: SpWeightsWeightV2Weight;
      };
    }
  | { tag: 'UnsubscribeVersion'; value: never }
  | { tag: 'BurnAsset'; value: XcmV3MultiassetMultiAssets }
  | { tag: 'ExpectAsset'; value: XcmV3MultiassetMultiAssets }
  | { tag: 'ExpectOrigin'; value: XcmV3MultilocationMultiLocation | undefined }
  | { tag: 'ExpectError'; value: [number, XcmV3TraitsError] | undefined }
  | { tag: 'ExpectTransactStatus'; value: XcmV3MaybeErrorCode }
  | {
      tag: 'QueryPallet';
      value: {
        moduleName: Bytes;
        responseInfo: XcmV3QueryResponseInfo;
      };
    }
  | {
      tag: 'ExpectPallet';
      value: {
        index: number;
        name: Bytes;
        moduleName: Bytes;
        crateMajor: number;
        minCrateMinor: number;
      };
    }
  | { tag: 'ReportTransactStatus'; value: XcmV3QueryResponseInfo }
  | { tag: 'ClearTransactStatus'; value: never }
  | { tag: 'UniversalOrigin'; value: XcmV3Junction }
  | {
      tag: 'ExportMessage';
      value: {
        network: XcmV3JunctionNetworkId;
        destination: XcmV3Junctions;
        xcm: XcmV3Xcm;
      };
    }
  | {
      tag: 'LockAsset';
      value: {
        asset: XcmV3MultiassetMultiAsset;
        unlocker: XcmV3MultilocationMultiLocation;
      };
    }
  | {
      tag: 'UnlockAsset';
      value: {
        asset: XcmV3MultiassetMultiAsset;
        target: XcmV3MultilocationMultiLocation;
      };
    }
  | {
      tag: 'NoteUnlockable';
      value: {
        asset: XcmV3MultiassetMultiAsset;
        owner: XcmV3MultilocationMultiLocation;
      };
    }
  | {
      tag: 'RequestUnlock';
      value: {
        asset: XcmV3MultiassetMultiAsset;
        locker: XcmV3MultilocationMultiLocation;
      };
    }
  | {
      tag: 'SetFeesMode';
      value: {
        jitWithdraw: boolean;
      };
    }
  | { tag: 'SetTopic'; value: FixedBytes<32> }
  | { tag: 'ClearTopic'; value: never }
  | { tag: 'AliasOrigin'; value: XcmV3MultilocationMultiLocation }
  | {
      tag: 'UnpaidExecution';
      value: {
        weightLimit: XcmV3WeightLimit;
        checkOrigin?: XcmV3MultilocationMultiLocation | undefined;
      };
    };

export type XcmV3MultiassetMultiAssets = Array<XcmV3MultiassetMultiAsset>;

export type XcmV3MultiassetMultiAsset = {
  id: XcmV3MultiassetAssetId;
  fun: XcmV3MultiassetFungibility;
};

export type XcmV3MultiassetAssetId =
  | { tag: 'Concrete'; value: XcmV3MultilocationMultiLocation }
  | { tag: 'Abstract'; value: FixedBytes<32> };

export type XcmV3MultiassetFungibility =
  | { tag: 'Fungible'; value: bigint }
  | { tag: 'NonFungible'; value: XcmV3MultiassetAssetInstance };

export type XcmV3MultiassetAssetInstance =
  | { tag: 'Undefined'; value: never }
  | { tag: 'Index'; value: bigint }
  | { tag: 'Array4'; value: FixedBytes<4> }
  | { tag: 'Array8'; value: FixedBytes<8> }
  | { tag: 'Array16'; value: FixedBytes<16> }
  | { tag: 'Array32'; value: FixedBytes<32> };

export type XcmV3Response =
  | { tag: 'Null'; value: never }
  | { tag: 'Assets'; value: XcmV3MultiassetMultiAssets }
  | { tag: 'ExecutionResult'; value: [number, XcmV3TraitsError] | undefined }
  | { tag: 'Version'; value: number }
  | { tag: 'PalletsInfo'; value: Array<XcmV3PalletInfo> }
  | { tag: 'DispatchResult'; value: XcmV3MaybeErrorCode };

export type XcmV3TraitsError =
  | { tag: 'Overflow'; value: never }
  | { tag: 'Unimplemented'; value: never }
  | { tag: 'UntrustedReserveLocation'; value: never }
  | { tag: 'UntrustedTeleportLocation'; value: never }
  | { tag: 'LocationFull'; value: never }
  | { tag: 'LocationNotInvertible'; value: never }
  | { tag: 'BadOrigin'; value: never }
  | { tag: 'InvalidLocation'; value: never }
  | { tag: 'AssetNotFound'; value: never }
  | { tag: 'FailedToTransactAsset'; value: never }
  | { tag: 'NotWithdrawable'; value: never }
  | { tag: 'LocationCannotHold'; value: never }
  | { tag: 'ExceedsMaxMessageSize'; value: never }
  | { tag: 'DestinationUnsupported'; value: never }
  | { tag: 'Transport'; value: never }
  | { tag: 'Unroutable'; value: never }
  | { tag: 'UnknownClaim'; value: never }
  | { tag: 'FailedToDecode'; value: never }
  | { tag: 'MaxWeightInvalid'; value: never }
  | { tag: 'NotHoldingFees'; value: never }
  | { tag: 'TooExpensive'; value: never }
  | { tag: 'Trap'; value: bigint }
  | { tag: 'ExpectationFalse'; value: never }
  | { tag: 'PalletNotFound'; value: never }
  | { tag: 'NameMismatch'; value: never }
  | { tag: 'VersionIncompatible'; value: never }
  | { tag: 'HoldingWouldOverflow'; value: never }
  | { tag: 'ExportError'; value: never }
  | { tag: 'ReanchorFailed'; value: never }
  | { tag: 'NoDeal'; value: never }
  | { tag: 'FeesNotMet'; value: never }
  | { tag: 'LockError'; value: never }
  | { tag: 'NoPermission'; value: never }
  | { tag: 'Unanchored'; value: never }
  | { tag: 'NotDepositable'; value: never }
  | { tag: 'UnhandledXcmVersion'; value: never }
  | { tag: 'WeightLimitReached'; value: SpWeightsWeightV2Weight }
  | { tag: 'Barrier'; value: never }
  | { tag: 'WeightNotComputable'; value: never }
  | { tag: 'ExceedsStackLimit'; value: never };

export type XcmV3PalletInfo = {
  index: number;
  name: Bytes;
  moduleName: Bytes;
  major: number;
  minor: number;
  patch: number;
};

export type XcmV3MaybeErrorCode =
  | { tag: 'Success'; value: never }
  | { tag: 'Error'; value: Bytes }
  | { tag: 'TruncatedError'; value: Bytes };

export type XcmV3QueryResponseInfo = {
  destination: XcmV3MultilocationMultiLocation;
  queryId: bigint;
  maxWeight: SpWeightsWeightV2Weight;
};

export type XcmV3MultiassetMultiAssetFilter =
  | { tag: 'Definite'; value: XcmV3MultiassetMultiAssets }
  | { tag: 'Wild'; value: XcmV3MultiassetWildMultiAsset };

export type XcmV3MultiassetWildMultiAsset =
  | { tag: 'All'; value: never }
  | {
      tag: 'AllOf';
      value: {
        id: XcmV3MultiassetAssetId;
        fun: XcmV3MultiassetWildFungibility;
      };
    }
  | { tag: 'AllCounted'; value: number }
  | {
      tag: 'AllOfCounted';
      value: {
        id: XcmV3MultiassetAssetId;
        fun: XcmV3MultiassetWildFungibility;
        count: number;
      };
    };

export type XcmV3MultiassetWildFungibility = 'fungible' | 'nonFungible';

export type XcmV3WeightLimit = { tag: 'Unlimited'; value: never } | { tag: 'Limited'; value: SpWeightsWeightV2Weight };

export type XcmVersionedMultiAssets =
  | { tag: 'V2'; value: XcmV2MultiassetMultiAssets }
  | { tag: 'V3'; value: XcmV3MultiassetMultiAssets };

export type PalletAssetsCall =
  | {
      tag: 'create';
      value: {
        id: bigint;
        admin: AccountId20;
        minBalance: bigint;
      };
    }
  | {
      tag: 'force_create';
      value: {
        id: bigint;
        owner: AccountId20;
        isSufficient: boolean;
        minBalance: bigint;
      };
    }
  | {
      tag: 'start_destroy';
      value: {
        id: bigint;
      };
    }
  | {
      tag: 'destroy_accounts';
      value: {
        id: bigint;
      };
    }
  | {
      tag: 'destroy_approvals';
      value: {
        id: bigint;
      };
    }
  | {
      tag: 'finish_destroy';
      value: {
        id: bigint;
      };
    }
  | {
      tag: 'mint';
      value: {
        id: bigint;
        beneficiary: AccountId20;
        amount: bigint;
      };
    }
  | {
      tag: 'burn';
      value: {
        id: bigint;
        who: AccountId20;
        amount: bigint;
      };
    }
  | {
      tag: 'transfer';
      value: {
        id: bigint;
        target: AccountId20;
        amount: bigint;
      };
    }
  | {
      tag: 'transfer_keep_alive';
      value: {
        id: bigint;
        target: AccountId20;
        amount: bigint;
      };
    }
  | {
      tag: 'force_transfer';
      value: {
        id: bigint;
        source: AccountId20;
        dest: AccountId20;
        amount: bigint;
      };
    }
  | {
      tag: 'freeze';
      value: {
        id: bigint;
        who: AccountId20;
      };
    }
  | {
      tag: 'thaw';
      value: {
        id: bigint;
        who: AccountId20;
      };
    }
  | {
      tag: 'freeze_asset';
      value: {
        id: bigint;
      };
    }
  | {
      tag: 'thaw_asset';
      value: {
        id: bigint;
      };
    }
  | {
      tag: 'transfer_ownership';
      value: {
        id: bigint;
        owner: AccountId20;
      };
    }
  | {
      tag: 'set_team';
      value: {
        id: bigint;
        issuer: AccountId20;
        admin: AccountId20;
        freezer: AccountId20;
      };
    }
  | {
      tag: 'set_metadata';
      value: {
        id: bigint;
        name: Bytes;
        symbol: Bytes;
        decimals: number;
      };
    }
  | {
      tag: 'clear_metadata';
      value: {
        id: bigint;
      };
    }
  | {
      tag: 'force_set_metadata';
      value: {
        id: bigint;
        name: Bytes;
        symbol: Bytes;
        decimals: number;
        isFrozen: boolean;
      };
    }
  | {
      tag: 'force_clear_metadata';
      value: {
        id: bigint;
      };
    }
  | {
      tag: 'force_asset_status';
      value: {
        id: bigint;
        owner: AccountId20;
        issuer: AccountId20;
        admin: AccountId20;
        freezer: AccountId20;
        minBalance: bigint;
        isSufficient: boolean;
        isFrozen: boolean;
      };
    }
  | {
      tag: 'approve_transfer';
      value: {
        id: bigint;
        delegate: AccountId20;
        amount: bigint;
      };
    }
  | {
      tag: 'cancel_approval';
      value: {
        id: bigint;
        delegate: AccountId20;
      };
    }
  | {
      tag: 'force_cancel_approval';
      value: {
        id: bigint;
        owner: AccountId20;
        delegate: AccountId20;
      };
    }
  | {
      tag: 'transfer_approved';
      value: {
        id: bigint;
        owner: AccountId20;
        destination: AccountId20;
        amount: bigint;
      };
    }
  | {
      tag: 'touch';
      value: {
        id: bigint;
      };
    }
  | {
      tag: 'refund';
      value: {
        id: bigint;
        allowBurn: boolean;
      };
    }
  | {
      tag: 'set_min_balance';
      value: {
        id: bigint;
        minBalance: bigint;
      };
    }
  | {
      tag: 'touch_other';
      value: {
        id: bigint;
        who: AccountId20;
      };
    }
  | {
      tag: 'refund_other';
      value: {
        id: bigint;
        who: AccountId20;
      };
    }
  | {
      tag: 'block';
      value: {
        id: bigint;
        who: AccountId20;
      };
    };

export type PalletAssetManagerCall =
  | {
      tag: 'register_foreign_asset';
      value: {
        asset: MoonbeamRuntimeXcmConfigAssetType;
        metadata: MoonbeamRuntimeAssetConfigAssetRegistrarMetadata;
        minAmount: bigint;
        isSufficient: boolean;
      };
    }
  | {
      tag: 'set_asset_units_per_second';
      value: {
        assetType: MoonbeamRuntimeXcmConfigAssetType;
        unitsPerSecond: bigint;
        numAssetsWeightHint: number;
      };
    }
  | {
      tag: 'change_existing_asset_type';
      value: {
        assetId: bigint;
        newAssetType: MoonbeamRuntimeXcmConfigAssetType;
        numAssetsWeightHint: number;
      };
    }
  | {
      tag: 'remove_supported_asset';
      value: {
        assetType: MoonbeamRuntimeXcmConfigAssetType;
        numAssetsWeightHint: number;
      };
    }
  | {
      tag: 'remove_existing_asset_type';
      value: {
        assetId: bigint;
        numAssetsWeightHint: number;
      };
    }
  | {
      tag: 'register_local_asset';
      value: {
        creator: AccountId20;
        owner: AccountId20;
        isSufficient: boolean;
        minBalance: bigint;
      };
    }
  | {
      tag: 'destroy_foreign_asset';
      value: {
        assetId: bigint;
        numAssetsWeightHint: number;
      };
    }
  | {
      tag: 'destroy_local_asset';
      value: {
        assetId: bigint;
      };
    };

export type MoonbeamRuntimeXcmConfigAssetType = { tag: 'Xcm'; value: XcmV3MultilocationMultiLocation };

export type MoonbeamRuntimeAssetConfigAssetRegistrarMetadata = {
  name: Bytes;
  symbol: Bytes;
  decimals: number;
  isFrozen: boolean;
};

export type OrmlXtokensModuleCall =
  | {
      tag: 'transfer';
      value: {
        currencyId: MoonbeamRuntimeXcmConfigCurrencyId;
        amount: bigint;
        dest: XcmVersionedMultiLocation;
        destWeightLimit: XcmV3WeightLimit;
      };
    }
  | {
      tag: 'transfer_multiasset';
      value: {
        asset: XcmVersionedMultiAsset;
        dest: XcmVersionedMultiLocation;
        destWeightLimit: XcmV3WeightLimit;
      };
    }
  | {
      tag: 'transfer_with_fee';
      value: {
        currencyId: MoonbeamRuntimeXcmConfigCurrencyId;
        amount: bigint;
        fee: bigint;
        dest: XcmVersionedMultiLocation;
        destWeightLimit: XcmV3WeightLimit;
      };
    }
  | {
      tag: 'transfer_multiasset_with_fee';
      value: {
        asset: XcmVersionedMultiAsset;
        fee: XcmVersionedMultiAsset;
        dest: XcmVersionedMultiLocation;
        destWeightLimit: XcmV3WeightLimit;
      };
    }
  | {
      tag: 'transfer_multicurrencies';
      value: {
        currencies: Array<[MoonbeamRuntimeXcmConfigCurrencyId, bigint]>;
        feeItem: number;
        dest: XcmVersionedMultiLocation;
        destWeightLimit: XcmV3WeightLimit;
      };
    }
  | {
      tag: 'transfer_multiassets';
      value: {
        assets: XcmVersionedMultiAssets;
        feeItem: number;
        dest: XcmVersionedMultiLocation;
        destWeightLimit: XcmV3WeightLimit;
      };
    };

export type MoonbeamRuntimeXcmConfigCurrencyId =
  | { tag: 'SelfReserve'; value: never }
  | { tag: 'ForeignAsset'; value: bigint }
  | { tag: 'LocalAssetReserve'; value: bigint }
  | {
      tag: 'Erc20';
      value: {
        contractAddress: H160;
      };
    };

export type XcmVersionedMultiAsset =
  | { tag: 'V2'; value: XcmV2MultiassetMultiAsset }
  | { tag: 'V3'; value: XcmV3MultiassetMultiAsset };

export type PalletXcmTransactorCall =
  | {
      tag: 'register';
      value: {
        who: AccountId20;
        index: number;
      };
    }
  | {
      tag: 'deregister';
      value: {
        index: number;
      };
    }
  | {
      tag: 'transact_through_derivative';
      value: {
        dest: MoonbeamRuntimeXcmConfigTransactors;
        index: number;
        fee: PalletXcmTransactorCurrencyPayment;
        innerCall: Bytes;
        weightInfo: PalletXcmTransactorTransactWeights;
        refund: boolean;
      };
    }
  | {
      tag: 'transact_through_sovereign';
      value: {
        dest: XcmVersionedMultiLocation;
        feePayer: AccountId20;
        fee: PalletXcmTransactorCurrencyPayment;
        call: Bytes;
        originKind: XcmV2OriginKind;
        weightInfo: PalletXcmTransactorTransactWeights;
        refund: boolean;
      };
    }
  | {
      tag: 'set_transact_info';
      value: {
        location: XcmVersionedMultiLocation;
        transactExtraWeight: SpWeightsWeightV2Weight;
        maxWeight: SpWeightsWeightV2Weight;
        transactExtraWeightSigned?: SpWeightsWeightV2Weight | undefined;
      };
    }
  | {
      tag: 'remove_transact_info';
      value: {
        location: XcmVersionedMultiLocation;
      };
    }
  | {
      tag: 'transact_through_signed';
      value: {
        dest: XcmVersionedMultiLocation;
        fee: PalletXcmTransactorCurrencyPayment;
        call: Bytes;
        weightInfo: PalletXcmTransactorTransactWeights;
        refund: boolean;
      };
    }
  | {
      tag: 'set_fee_per_second';
      value: {
        assetLocation: XcmVersionedMultiLocation;
        feePerSecond: bigint;
      };
    }
  | {
      tag: 'remove_fee_per_second';
      value: {
        assetLocation: XcmVersionedMultiLocation;
      };
    }
  | {
      tag: 'hrmp_manage';
      value: {
        action: PalletXcmTransactorHrmpOperation;
        fee: PalletXcmTransactorCurrencyPayment;
        weightInfo: PalletXcmTransactorTransactWeights;
      };
    };

export type MoonbeamRuntimeXcmConfigTransactors = 'relay';

export type PalletXcmTransactorCurrencyPayment = {
  currency: PalletXcmTransactorCurrency;
  feeAmount?: bigint | undefined;
};

export type PalletXcmTransactorCurrency =
  | { tag: 'AsCurrencyId'; value: MoonbeamRuntimeXcmConfigCurrencyId }
  | { tag: 'AsMultiLocation'; value: XcmVersionedMultiLocation };

export type PalletXcmTransactorTransactWeights = {
  transactRequiredWeightAtMost: SpWeightsWeightV2Weight;
  overallWeight?: SpWeightsWeightV2Weight | undefined;
};

export type PalletXcmTransactorHrmpOperation =
  | { tag: 'InitOpen'; value: PalletXcmTransactorHrmpInitParams }
  | {
      tag: 'Accept';
      value: {
        paraId: PolkadotParachainPrimitivesId;
      };
    }
  | { tag: 'Close'; value: PolkadotParachainPrimitivesHrmpChannelId }
  | {
      tag: 'Cancel';
      value: {
        channelId: PolkadotParachainPrimitivesHrmpChannelId;
        openRequests: number;
      };
    };

export type PalletXcmTransactorHrmpInitParams = {
  paraId: PolkadotParachainPrimitivesId;
  proposedMaxCapacity: number;
  proposedMaxMessageSize: number;
};

export type PolkadotParachainPrimitivesHrmpChannelId = {
  sender: PolkadotParachainPrimitivesId;
  recipient: PolkadotParachainPrimitivesId;
};

export type PalletEthereumXcmCall =
  | {
      tag: 'transact';
      value: {
        xcmTransaction: XcmPrimitivesEthereumXcmEthereumXcmTransaction;
      };
    }
  | {
      tag: 'transact_through_proxy';
      value: {
        transactAs: H160;
        xcmTransaction: XcmPrimitivesEthereumXcmEthereumXcmTransaction;
      };
    }
  | { tag: 'suspend_ethereum_xcm_execution'; value: never }
  | { tag: 'resume_ethereum_xcm_execution'; value: never };

export type XcmPrimitivesEthereumXcmEthereumXcmTransaction =
  | { tag: 'V1'; value: XcmPrimitivesEthereumXcmEthereumXcmTransactionV1 }
  | { tag: 'V2'; value: XcmPrimitivesEthereumXcmEthereumXcmTransactionV2 };

export type XcmPrimitivesEthereumXcmEthereumXcmTransactionV1 = {
  gasLimit: U256;
  feePayment: XcmPrimitivesEthereumXcmEthereumXcmFee;
  action: EthereumTransactionTransactionAction;
  value: U256;
  input: Bytes;
  accessList?: Array<[H160, Array<H256>]> | undefined;
};

export type XcmPrimitivesEthereumXcmEthereumXcmFee =
  | { tag: 'Manual'; value: XcmPrimitivesEthereumXcmManualEthereumXcmFee }
  | { tag: 'Auto'; value: never };

export type XcmPrimitivesEthereumXcmManualEthereumXcmFee = {
  gasPrice?: U256 | undefined;
  maxFeePerGas?: U256 | undefined;
};

export type XcmPrimitivesEthereumXcmEthereumXcmTransactionV2 = {
  gasLimit: U256;
  action: EthereumTransactionTransactionAction;
  value: U256;
  input: Bytes;
  accessList?: Array<[H160, Array<H256>]> | undefined;
};

export type PalletRandomnessCall = 'setBabeRandomnessResults';

export type PalletConvictionVotingTally = {
  ayes: bigint;
  nays: bigint;
  support: bigint;
};

export type PalletWhitelistEvent =
  | {
      tag: 'CallWhitelisted';
      value: {
        callHash: H256;
      };
    }
  | {
      tag: 'WhitelistedCallRemoved';
      value: {
        callHash: H256;
      };
    }
  | {
      tag: 'WhitelistedCallDispatched';
      value: {
        callHash: H256;
        result: FrameSupportDispatchPostDispatchInfo | SpRuntimeDispatchErrorWithPostInfo;
      };
    };

export type FrameSupportDispatchPostDispatchInfo = {
  actualWeight?: SpWeightsWeightV2Weight | undefined;
  paysFee: FrameSupportDispatchPays;
};

export type SpRuntimeDispatchErrorWithPostInfo = {
  postInfo: FrameSupportDispatchPostDispatchInfo;
  error: SpRuntimeDispatchError;
};

export type PalletCollectiveEvent =
  | {
      tag: 'Proposed';
      value: {
        account: AccountId20;
        proposalIndex: number;
        proposalHash: H256;
        threshold: number;
      };
    }
  | {
      tag: 'Voted';
      value: {
        account: AccountId20;
        proposalHash: H256;
        voted: boolean;
        yes: number;
        no: number;
      };
    }
  | {
      tag: 'Approved';
      value: {
        proposalHash: H256;
      };
    }
  | {
      tag: 'Disapproved';
      value: {
        proposalHash: H256;
      };
    }
  | {
      tag: 'Executed';
      value: {
        proposalHash: H256;
        result: never | SpRuntimeDispatchError;
      };
    }
  | {
      tag: 'MemberExecuted';
      value: {
        proposalHash: H256;
        result: never | SpRuntimeDispatchError;
      };
    }
  | {
      tag: 'Closed';
      value: {
        proposalHash: H256;
        yes: number;
        no: number;
      };
    };

export type PalletTreasuryEvent =
  | {
      tag: 'Proposed';
      value: {
        proposalIndex: number;
      };
    }
  | {
      tag: 'Spending';
      value: {
        budgetRemaining: bigint;
      };
    }
  | {
      tag: 'Awarded';
      value: {
        proposalIndex: number;
        award: bigint;
        account: AccountId20;
      };
    }
  | {
      tag: 'Rejected';
      value: {
        proposalIndex: number;
        slashed: bigint;
      };
    }
  | {
      tag: 'Burnt';
      value: {
        burntFunds: bigint;
      };
    }
  | {
      tag: 'Rollover';
      value: {
        rolloverBalance: bigint;
      };
    }
  | {
      tag: 'Deposit';
      value: {
        value: bigint;
      };
    }
  | {
      tag: 'SpendApproved';
      value: {
        proposalIndex: number;
        amount: bigint;
        beneficiary: AccountId20;
      };
    }
  | {
      tag: 'UpdatedInactive';
      value: {
        reactivated: bigint;
        deactivated: bigint;
      };
    };

export type PalletCrowdloanRewardsEvent =
  | { tag: 'InitialPaymentMade'; value: [AccountId20, bigint] }
  | { tag: 'NativeIdentityAssociated'; value: [FixedBytes<32>, AccountId20, bigint] }
  | { tag: 'RewardsPaid'; value: [AccountId20, bigint] }
  | { tag: 'RewardAddressUpdated'; value: [AccountId20, AccountId20] }
  | { tag: 'InitializedAlreadyInitializedAccount'; value: [FixedBytes<32>, AccountId20 | undefined, bigint] }
  | { tag: 'InitializedAccountWithNotEnoughContribution'; value: [FixedBytes<32>, AccountId20 | undefined, bigint] };

export type CumulusPalletXcmpQueueEvent =
  | {
      tag: 'Success';
      value: {
        messageHash?: FixedBytes<32> | undefined;
        weight: SpWeightsWeightV2Weight;
      };
    }
  | {
      tag: 'Fail';
      value: {
        messageHash?: FixedBytes<32> | undefined;
        error: XcmV3TraitsError;
        weight: SpWeightsWeightV2Weight;
      };
    }
  | {
      tag: 'BadVersion';
      value: {
        messageHash?: FixedBytes<32> | undefined;
      };
    }
  | {
      tag: 'BadFormat';
      value: {
        messageHash?: FixedBytes<32> | undefined;
      };
    }
  | {
      tag: 'XcmpMessageSent';
      value: {
        messageHash?: FixedBytes<32> | undefined;
      };
    }
  | {
      tag: 'OverweightEnqueued';
      value: {
        sender: PolkadotParachainPrimitivesId;
        sentAt: number;
        index: bigint;
        required: SpWeightsWeightV2Weight;
      };
    }
  | {
      tag: 'OverweightServiced';
      value: {
        index: bigint;
        used: SpWeightsWeightV2Weight;
      };
    };

export type CumulusPalletXcmEvent =
  | { tag: 'InvalidFormat'; value: FixedBytes<32> }
  | { tag: 'UnsupportedVersion'; value: FixedBytes<32> }
  | { tag: 'ExecutedDownward'; value: [FixedBytes<32>, XcmV3TraitsOutcome] };

export type XcmV3TraitsOutcome =
  | { tag: 'Complete'; value: SpWeightsWeightV2Weight }
  | { tag: 'Incomplete'; value: [SpWeightsWeightV2Weight, XcmV3TraitsError] }
  | { tag: 'Error'; value: XcmV3TraitsError };

export type CumulusPalletDmpQueueEvent =
  | {
      tag: 'InvalidFormat';
      value: {
        messageId: FixedBytes<32>;
      };
    }
  | {
      tag: 'UnsupportedVersion';
      value: {
        messageId: FixedBytes<32>;
      };
    }
  | {
      tag: 'ExecutedDownward';
      value: {
        messageId: FixedBytes<32>;
        outcome: XcmV3TraitsOutcome;
      };
    }
  | {
      tag: 'WeightExhausted';
      value: {
        messageId: FixedBytes<32>;
        remainingWeight: SpWeightsWeightV2Weight;
        requiredWeight: SpWeightsWeightV2Weight;
      };
    }
  | {
      tag: 'OverweightEnqueued';
      value: {
        messageId: FixedBytes<32>;
        overweightIndex: bigint;
        requiredWeight: SpWeightsWeightV2Weight;
      };
    }
  | {
      tag: 'OverweightServiced';
      value: {
        overweightIndex: bigint;
        weightUsed: SpWeightsWeightV2Weight;
      };
    }
  | {
      tag: 'MaxMessagesExhausted';
      value: {
        messageId: FixedBytes<32>;
      };
    };

export type PalletXcmEvent =
  | { tag: 'Attempted'; value: XcmV3TraitsOutcome }
  | { tag: 'Sent'; value: [XcmV3MultilocationMultiLocation, XcmV3MultilocationMultiLocation, XcmV3Xcm] }
  | { tag: 'UnexpectedResponse'; value: [XcmV3MultilocationMultiLocation, bigint] }
  | { tag: 'ResponseReady'; value: [bigint, XcmV3Response] }
  | { tag: 'Notified'; value: [bigint, number, number] }
  | { tag: 'NotifyOverweight'; value: [bigint, number, number, SpWeightsWeightV2Weight, SpWeightsWeightV2Weight] }
  | { tag: 'NotifyDispatchError'; value: [bigint, number, number] }
  | { tag: 'NotifyDecodeFailed'; value: [bigint, number, number] }
  | {
      tag: 'InvalidResponder';
      value: [XcmV3MultilocationMultiLocation, bigint, XcmV3MultilocationMultiLocation | undefined];
    }
  | { tag: 'InvalidResponderVersion'; value: [XcmV3MultilocationMultiLocation, bigint] }
  | { tag: 'ResponseTaken'; value: bigint }
  | { tag: 'AssetsTrapped'; value: [H256, XcmV3MultilocationMultiLocation, XcmVersionedMultiAssets] }
  | { tag: 'VersionChangeNotified'; value: [XcmV3MultilocationMultiLocation, number, XcmV3MultiassetMultiAssets] }
  | { tag: 'SupportedVersionChanged'; value: [XcmV3MultilocationMultiLocation, number] }
  | { tag: 'NotifyTargetSendFail'; value: [XcmV3MultilocationMultiLocation, bigint, XcmV3TraitsError] }
  | { tag: 'NotifyTargetMigrationFail'; value: [XcmVersionedMultiLocation, bigint] }
  | { tag: 'InvalidQuerierVersion'; value: [XcmV3MultilocationMultiLocation, bigint] }
  | {
      tag: 'InvalidQuerier';
      value: [
        XcmV3MultilocationMultiLocation,
        bigint,
        XcmV3MultilocationMultiLocation,
        XcmV3MultilocationMultiLocation | undefined,
      ];
    }
  | { tag: 'VersionNotifyStarted'; value: [XcmV3MultilocationMultiLocation, XcmV3MultiassetMultiAssets] }
  | { tag: 'VersionNotifyRequested'; value: [XcmV3MultilocationMultiLocation, XcmV3MultiassetMultiAssets] }
  | { tag: 'VersionNotifyUnrequested'; value: [XcmV3MultilocationMultiLocation, XcmV3MultiassetMultiAssets] }
  | { tag: 'FeesPaid'; value: [XcmV3MultilocationMultiLocation, XcmV3MultiassetMultiAssets] }
  | { tag: 'AssetsClaimed'; value: [H256, XcmV3MultilocationMultiLocation, XcmVersionedMultiAssets] };

export type PalletAssetsEvent =
  | {
      tag: 'Created';
      value: {
        assetId: bigint;
        creator: AccountId20;
        owner: AccountId20;
      };
    }
  | {
      tag: 'Issued';
      value: {
        assetId: bigint;
        owner: AccountId20;
        amount: bigint;
      };
    }
  | {
      tag: 'Transferred';
      value: {
        assetId: bigint;
        from: AccountId20;
        to: AccountId20;
        amount: bigint;
      };
    }
  | {
      tag: 'Burned';
      value: {
        assetId: bigint;
        owner: AccountId20;
        balance: bigint;
      };
    }
  | {
      tag: 'TeamChanged';
      value: {
        assetId: bigint;
        issuer: AccountId20;
        admin: AccountId20;
        freezer: AccountId20;
      };
    }
  | {
      tag: 'OwnerChanged';
      value: {
        assetId: bigint;
        owner: AccountId20;
      };
    }
  | {
      tag: 'Frozen';
      value: {
        assetId: bigint;
        who: AccountId20;
      };
    }
  | {
      tag: 'Thawed';
      value: {
        assetId: bigint;
        who: AccountId20;
      };
    }
  | {
      tag: 'AssetFrozen';
      value: {
        assetId: bigint;
      };
    }
  | {
      tag: 'AssetThawed';
      value: {
        assetId: bigint;
      };
    }
  | {
      tag: 'AccountsDestroyed';
      value: {
        assetId: bigint;
        accountsDestroyed: number;
        accountsRemaining: number;
      };
    }
  | {
      tag: 'ApprovalsDestroyed';
      value: {
        assetId: bigint;
        approvalsDestroyed: number;
        approvalsRemaining: number;
      };
    }
  | {
      tag: 'DestructionStarted';
      value: {
        assetId: bigint;
      };
    }
  | {
      tag: 'Destroyed';
      value: {
        assetId: bigint;
      };
    }
  | {
      tag: 'ForceCreated';
      value: {
        assetId: bigint;
        owner: AccountId20;
      };
    }
  | {
      tag: 'MetadataSet';
      value: {
        assetId: bigint;
        name: Bytes;
        symbol: Bytes;
        decimals: number;
        isFrozen: boolean;
      };
    }
  | {
      tag: 'MetadataCleared';
      value: {
        assetId: bigint;
      };
    }
  | {
      tag: 'ApprovedTransfer';
      value: {
        assetId: bigint;
        source: AccountId20;
        delegate: AccountId20;
        amount: bigint;
      };
    }
  | {
      tag: 'ApprovalCancelled';
      value: {
        assetId: bigint;
        owner: AccountId20;
        delegate: AccountId20;
      };
    }
  | {
      tag: 'TransferredApproved';
      value: {
        assetId: bigint;
        owner: AccountId20;
        delegate: AccountId20;
        destination: AccountId20;
        amount: bigint;
      };
    }
  | {
      tag: 'AssetStatusChanged';
      value: {
        assetId: bigint;
      };
    }
  | {
      tag: 'AssetMinBalanceChanged';
      value: {
        assetId: bigint;
        newMinBalance: bigint;
      };
    }
  | {
      tag: 'Touched';
      value: {
        assetId: bigint;
        who: AccountId20;
        depositor: AccountId20;
      };
    }
  | {
      tag: 'Blocked';
      value: {
        assetId: bigint;
        who: AccountId20;
      };
    };

export type PalletAssetManagerEvent =
  | {
      tag: 'ForeignAssetRegistered';
      value: {
        assetId: bigint;
        asset: MoonbeamRuntimeXcmConfigAssetType;
        metadata: MoonbeamRuntimeAssetConfigAssetRegistrarMetadata;
      };
    }
  | {
      tag: 'UnitsPerSecondChanged';
      value: {
        assetType: MoonbeamRuntimeXcmConfigAssetType;
        unitsPerSecond: bigint;
      };
    }
  | {
      tag: 'ForeignAssetTypeChanged';
      value: {
        assetId: bigint;
        newAssetType: MoonbeamRuntimeXcmConfigAssetType;
      };
    }
  | {
      tag: 'ForeignAssetRemoved';
      value: {
        assetId: bigint;
        assetType: MoonbeamRuntimeXcmConfigAssetType;
      };
    }
  | {
      tag: 'SupportedAssetRemoved';
      value: {
        assetType: MoonbeamRuntimeXcmConfigAssetType;
      };
    }
  | {
      tag: 'LocalAssetRegistered';
      value: {
        assetId: bigint;
        creator: AccountId20;
        owner: AccountId20;
      };
    }
  | {
      tag: 'ForeignAssetDestroyed';
      value: {
        assetId: bigint;
        assetType: MoonbeamRuntimeXcmConfigAssetType;
      };
    }
  | {
      tag: 'LocalAssetDestroyed';
      value: {
        assetId: bigint;
      };
    };

export type OrmlXtokensModuleEvent = {
  tag: 'TransferredMultiAssets';
  value: {
    sender: AccountId20;
    assets: XcmV3MultiassetMultiAssets;
    fee: XcmV3MultiassetMultiAsset;
    dest: XcmV3MultilocationMultiLocation;
  };
};

export type PalletXcmTransactorEvent =
  | {
      tag: 'TransactedDerivative';
      value: {
        accountId: AccountId20;
        dest: XcmV3MultilocationMultiLocation;
        call: Bytes;
        index: number;
      };
    }
  | {
      tag: 'TransactedSovereign';
      value: {
        feePayer: AccountId20;
        dest: XcmV3MultilocationMultiLocation;
        call: Bytes;
      };
    }
  | {
      tag: 'TransactedSigned';
      value: {
        feePayer: AccountId20;
        dest: XcmV3MultilocationMultiLocation;
        call: Bytes;
      };
    }
  | {
      tag: 'RegisteredDerivative';
      value: {
        accountId: AccountId20;
        index: number;
      };
    }
  | {
      tag: 'DeRegisteredDerivative';
      value: {
        index: number;
      };
    }
  | {
      tag: 'TransactFailed';
      value: {
        error: XcmV3TraitsError;
      };
    }
  | {
      tag: 'TransactInfoChanged';
      value: {
        location: XcmV3MultilocationMultiLocation;
        remoteInfo: PalletXcmTransactorRemoteTransactInfoWithMaxWeight;
      };
    }
  | {
      tag: 'TransactInfoRemoved';
      value: {
        location: XcmV3MultilocationMultiLocation;
      };
    }
  | {
      tag: 'DestFeePerSecondChanged';
      value: {
        location: XcmV3MultilocationMultiLocation;
        feePerSecond: bigint;
      };
    }
  | {
      tag: 'DestFeePerSecondRemoved';
      value: {
        location: XcmV3MultilocationMultiLocation;
      };
    }
  | {
      tag: 'HrmpManagementSent';
      value: {
        action: PalletXcmTransactorHrmpOperation;
      };
    };

export type PalletXcmTransactorRemoteTransactInfoWithMaxWeight = {
  transactExtraWeight: SpWeightsWeightV2Weight;
  maxWeight: SpWeightsWeightV2Weight;
  transactExtraWeightSigned?: SpWeightsWeightV2Weight | undefined;
};

export type PalletRandomnessEvent =
  | {
      tag: 'RandomnessRequestedBabeEpoch';
      value: {
        id: bigint;
        refundAddress: H160;
        contractAddress: H160;
        fee: bigint;
        gasLimit: bigint;
        numWords: number;
        salt: H256;
        earliestEpoch: bigint;
      };
    }
  | {
      tag: 'RandomnessRequestedLocal';
      value: {
        id: bigint;
        refundAddress: H160;
        contractAddress: H160;
        fee: bigint;
        gasLimit: bigint;
        numWords: number;
        salt: H256;
        earliestBlock: number;
      };
    }
  | {
      tag: 'RequestFulfilled';
      value: {
        id: bigint;
      };
    }
  | {
      tag: 'RequestFeeIncreased';
      value: {
        id: bigint;
        newFee: bigint;
      };
    }
  | {
      tag: 'RequestExpirationExecuted';
      value: {
        id: bigint;
      };
    };

export type FrameSystemPhase =
  | { tag: 'ApplyExtrinsic'; value: number }
  | { tag: 'Finalization'; value: never }
  | { tag: 'Initialization'; value: never };

export type FrameSystemLastRuntimeUpgradeInfo = {
  specVersion: number;
  specName: string;
};

export type FrameSystemLimitsBlockWeights = {
  baseBlock: SpWeightsWeightV2Weight;
  maxBlock: SpWeightsWeightV2Weight;
  perClass: {
    normal: FrameSystemLimitsWeightsPerClass;
    operational: FrameSystemLimitsWeightsPerClass;
    mandatory: FrameSystemLimitsWeightsPerClass;
  };
};

export type FrameSystemLimitsWeightsPerClass = {
  baseExtrinsic: SpWeightsWeightV2Weight;
  maxExtrinsic?: SpWeightsWeightV2Weight | undefined;
  maxTotal?: SpWeightsWeightV2Weight | undefined;
  reserved?: SpWeightsWeightV2Weight | undefined;
};

export type FrameSystemLimitsBlockLength = {
  max: {
    normal: number;
    operational: number;
    mandatory: number;
  };
};

export type SpWeightsRuntimeDbWeight = {
  read: bigint;
  write: bigint;
};

export type SpVersionRuntimeVersion = {
  specName: string;
  implName: string;
  authoringVersion: number;
  specVersion: number;
  implVersion: number;
  apis: Array<[FixedBytes<8>, number]>;
  transactionVersion: number;
  stateVersion: number;
};

export type FrameSystemError =
  | 'invalidSpecName'
  | 'specVersionNeedsToIncrease'
  | 'failedToExtractRuntimeVersion'
  | 'nonDefaultComposite'
  | 'nonZeroRefCount'
  | 'callFiltered';

export type PolkadotPrimitivesV4UpgradeRestriction = 'present';

export type CumulusPalletParachainSystemRelayStateSnapshotMessagingStateSnapshot = {
  dmqMqcHead: H256;
  relayDispatchQueueSize: CumulusPalletParachainSystemRelayStateSnapshotRelayDispachQueueSize;
  ingressChannels: Array<[PolkadotParachainPrimitivesId, PolkadotPrimitivesV4AbridgedHrmpChannel]>;
  egressChannels: Array<[PolkadotParachainPrimitivesId, PolkadotPrimitivesV4AbridgedHrmpChannel]>;
};

export type CumulusPalletParachainSystemRelayStateSnapshotRelayDispachQueueSize = {
  remainingCount: number;
  remainingSize: number;
};

export type PolkadotPrimitivesV4AbridgedHrmpChannel = {
  maxCapacity: number;
  maxTotalSize: number;
  maxMessageSize: number;
  msgCount: number;
  totalSize: number;
  mqcHead?: H256 | undefined;
};

export type PolkadotPrimitivesV4AbridgedHostConfiguration = {
  maxCodeSize: number;
  maxHeadDataSize: number;
  maxUpwardQueueCount: number;
  maxUpwardQueueSize: number;
  maxUpwardMessageSize: number;
  maxUpwardMessageNumPerCandidate: number;
  hrmpMaxMessageNumPerCandidate: number;
  validationUpgradeCooldown: number;
  validationUpgradeDelay: number;
};

export type CumulusPrimitivesParachainInherentMessageQueueChain = H256;

export type PolkadotCorePrimitivesOutboundHrmpMessage = {
  recipient: PolkadotParachainPrimitivesId;
  data: Bytes;
};

export type CumulusPalletParachainSystemCodeUpgradeAuthorization = {
  codeHash: H256;
  checkVersion: boolean;
};

export type CumulusPalletParachainSystemError =
  | 'overlappingUpgrades'
  | 'prohibitedByPolkadot'
  | 'tooBig'
  | 'validationDataNotAvailable'
  | 'hostConfigurationNotAvailable'
  | 'notScheduled'
  | 'nothingAuthorized'
  | 'unauthorized';

export type PalletBalancesBalanceLock = {
  id: FixedBytes<8>;
  amount: bigint;
  reasons: PalletBalancesReasons;
};

export type PalletBalancesReasons = 'fee' | 'misc' | 'all';

export type PalletBalancesReserveData = {
  id: FixedBytes<4>;
  amount: bigint;
};

export type PalletBalancesIdAmount = {
  id: never;
  amount: bigint;
};

export type PalletBalancesError =
  | 'vestingBalance'
  | 'liquidityRestrictions'
  | 'insufficientBalance'
  | 'existentialDeposit'
  | 'expendability'
  | 'existingVestingSchedule'
  | 'deadAccount'
  | 'tooManyReserves'
  | 'tooManyHolds'
  | 'tooManyFreezes';

export type PalletTransactionPaymentReleases = 'v1Ancient' | 'v2';

export type PalletParachainStakingParachainBondConfig = {
  account: AccountId20;
  percent: Percent;
};

export type PalletParachainStakingRoundInfo = {
  current: number;
  first: number;
  length: number;
};

export type PalletParachainStakingDelegator = {
  id: AccountId20;
  delegations: PalletParachainStakingSetOrderedSet;
  total: bigint;
  lessTotal: bigint;
  status: PalletParachainStakingDelegatorStatus;
};

export type PalletParachainStakingSetOrderedSet = Array<PalletParachainStakingBond>;

export type PalletParachainStakingBond = {
  owner: AccountId20;
  amount: bigint;
};

export type PalletParachainStakingDelegatorStatus = { tag: 'Active'; value: never } | { tag: 'Leaving'; value: number };

export type PalletParachainStakingCandidateMetadata = {
  bond: bigint;
  delegationCount: number;
  totalCounted: bigint;
  lowestTopDelegationAmount: bigint;
  highestBottomDelegationAmount: bigint;
  lowestBottomDelegationAmount: bigint;
  topCapacity: PalletParachainStakingCapacityStatus;
  bottomCapacity: PalletParachainStakingCapacityStatus;
  request?: PalletParachainStakingCandidateBondLessRequest | undefined;
  status: PalletParachainStakingCollatorStatus;
};

export type PalletParachainStakingCapacityStatus = 'full' | 'empty' | 'partial';

export type PalletParachainStakingCandidateBondLessRequest = {
  amount: bigint;
  whenExecutable: number;
};

export type PalletParachainStakingCollatorStatus =
  | { tag: 'Active'; value: never }
  | { tag: 'Idle'; value: never }
  | { tag: 'Leaving'; value: number };

export type PalletParachainStakingDelegationRequestsScheduledRequest = {
  delegator: AccountId20;
  whenExecutable: number;
  action: PalletParachainStakingDelegationRequestsDelegationAction;
};

export type PalletParachainStakingAutoCompoundAutoCompoundConfig = {
  delegator: AccountId20;
  value: Percent;
};

export type PalletParachainStakingDelegations = {
  delegations: Array<PalletParachainStakingBond>;
  total: bigint;
};

export type PalletParachainStakingSetBoundedOrderedSet = Array<PalletParachainStakingBond>;

export type PalletParachainStakingCollatorSnapshot = {
  bond: bigint;
  delegations: Array<PalletParachainStakingBondWithAutoCompound>;
  total: bigint;
};

export type PalletParachainStakingBondWithAutoCompound = {
  owner: AccountId20;
  amount: bigint;
  autoCompound: Percent;
};

export type PalletParachainStakingDelayedPayout = {
  roundIssuance: bigint;
  totalStakingReward: bigint;
  collatorCommission: Perbill;
};

export type PalletParachainStakingInflationInflationInfo = {
  expect: {
    min: bigint;
    ideal: bigint;
    max: bigint;
  };
  annual: {
    min: Perbill;
    ideal: Perbill;
    max: Perbill;
  };
  round: {
    min: Perbill;
    ideal: Perbill;
    max: Perbill;
  };
};

export type PalletParachainStakingError =
  | 'delegatorDNE'
  | 'delegatorDNEinTopNorBottom'
  | 'delegatorDNEInDelegatorSet'
  | 'candidateDNE'
  | 'delegationDNE'
  | 'delegatorExists'
  | 'candidateExists'
  | 'candidateBondBelowMin'
  | 'insufficientBalance'
  | 'delegatorBondBelowMin'
  | 'delegationBelowMin'
  | 'alreadyOffline'
  | 'alreadyActive'
  | 'delegatorAlreadyLeaving'
  | 'delegatorNotLeaving'
  | 'delegatorCannotLeaveYet'
  | 'cannotDelegateIfLeaving'
  | 'candidateAlreadyLeaving'
  | 'candidateNotLeaving'
  | 'candidateCannotLeaveYet'
  | 'cannotGoOnlineIfLeaving'
  | 'exceedMaxDelegationsPerDelegator'
  | 'alreadyDelegatedCandidate'
  | 'invalidSchedule'
  | 'cannotSetBelowMin'
  | 'roundLengthMustBeGreaterThanTotalSelectedCollators'
  | 'noWritingSameValue'
  | 'tooLowCandidateCountWeightHintJoinCandidates'
  | 'tooLowCandidateCountWeightHintCancelLeaveCandidates'
  | 'tooLowCandidateCountToLeaveCandidates'
  | 'tooLowDelegationCountToDelegate'
  | 'tooLowCandidateDelegationCountToDelegate'
  | 'tooLowCandidateDelegationCountToLeaveCandidates'
  | 'tooLowDelegationCountToLeaveDelegators'
  | 'pendingCandidateRequestsDNE'
  | 'pendingCandidateRequestAlreadyExists'
  | 'pendingCandidateRequestNotDueYet'
  | 'pendingDelegationRequestDNE'
  | 'pendingDelegationRequestAlreadyExists'
  | 'pendingDelegationRequestNotDueYet'
  | 'cannotDelegateLessThanOrEqualToLowestBottomWhenFull'
  | 'pendingDelegationRevoke'
  | 'tooLowDelegationCountToAutoCompound'
  | 'tooLowCandidateAutoCompoundingDelegationCountToAutoCompound'
  | 'tooLowCandidateAutoCompoundingDelegationCountToDelegate'
  | 'tooLowCandidateAutoCompoundingDelegationCountToLeaveCandidates'
  | 'tooLowCandidateCountWeightHint'
  | 'tooLowCandidateCountWeightHintGoOffline'
  | 'candidateLimitReached'
  | 'cannotSetAboveMaxCandidates'
  | 'removedCall';

export type PalletAuthorInherentError = 'authorAlreadySet' | 'noAccountId' | 'cannotBeAuthor';

export type PalletAuthorMappingRegistrationInfo = {
  account: AccountId20;
  deposit: bigint;
  keys: SessionKeysPrimitivesVrfVrfCryptoPublic;
};

export type PalletAuthorMappingError =
  | 'associationNotFound'
  | 'notYourAssociation'
  | 'cannotAffordSecurityDeposit'
  | 'alreadyAssociated'
  | 'oldAuthorIdNotFound'
  | 'wrongKeySize'
  | 'decodeNimbusFailed'
  | 'decodeKeysFailed';

export type PalletMoonbeamOrbitersCollatorPoolInfo = {
  orbiters: Array<AccountId20>;
  maybeCurrentOrbiter?: PalletMoonbeamOrbitersCurrentOrbiter | undefined;
  nextOrbiter: number;
};

export type PalletMoonbeamOrbitersCurrentOrbiter = {
  accountId: AccountId20;
  removed: boolean;
};

export type PalletMoonbeamOrbitersError =
  | 'collatorAlreadyAdded'
  | 'collatorNotFound'
  | 'collatorPoolTooLarge'
  | 'collatorsPoolCountTooLow'
  | 'minOrbiterDepositNotSet'
  | 'orbiterAlreadyInPool'
  | 'orbiterDepositNotFound'
  | 'orbiterNotFound'
  | 'orbiterStillInAPool';

export type PalletUtilityError = 'tooManyCalls';

export type PalletProxyProxyDefinition = {
  delegate: AccountId20;
  proxyType: MoonbeamRuntimeProxyType;
  delay: number;
};

export type PalletProxyAnnouncement = {
  real: AccountId20;
  callHash: H256;
  height: number;
};

export type PalletProxyError =
  | 'tooMany'
  | 'notFound'
  | 'notProxy'
  | 'unproxyable'
  | 'duplicate'
  | 'noPermission'
  | 'unannounced'
  | 'noSelfProxy';

export type PalletMaintenanceModeError = 'alreadyInMaintenanceMode' | 'notInMaintenanceMode';

export type PalletIdentityRegistration = {
  judgements: Array<[number, PalletIdentityJudgement]>;
  deposit: bigint;
  info: PalletIdentityIdentityInfo;
};

export type PalletIdentityRegistrarInfo = {
  account: AccountId20;
  fee: bigint;
  fields: PalletIdentityBitFlags;
};

export type PalletIdentityError =
  | 'tooManySubAccounts'
  | 'notFound'
  | 'notNamed'
  | 'emptyIndex'
  | 'feeChanged'
  | 'noIdentity'
  | 'stickyJudgement'
  | 'judgementGiven'
  | 'invalidJudgement'
  | 'invalidIndex'
  | 'invalidTarget'
  | 'tooManyFields'
  | 'tooManyRegistrars'
  | 'alreadyClaimed'
  | 'notSub'
  | 'notOwned'
  | 'judgementForDifferentIdentity'
  | 'judgementPaymentFailed';

export type PalletMigrationsError =
  | 'preimageMissing'
  | 'wrongUpperBound'
  | 'preimageIsTooBig'
  | 'preimageAlreadyExists';

export type PalletMultisigMultisig = {
  when: PalletMultisigTimepoint;
  deposit: bigint;
  depositor: AccountId20;
  approvals: Array<AccountId20>;
};

export type PalletMultisigError =
  | 'minimumThreshold'
  | 'alreadyApproved'
  | 'noApprovalsNeeded'
  | 'tooFewSignatories'
  | 'tooManySignatories'
  | 'signatoriesOutOfOrder'
  | 'senderInSignatories'
  | 'notFound'
  | 'notOwner'
  | 'noTimepoint'
  | 'wrongTimepoint'
  | 'unexpectedTimepoint'
  | 'maxWeightTooLow'
  | 'alreadyStored';

export type PalletEvmCodeMetadata = {
  size: bigint;
  hash: H256;
};

export type PalletEvmError =
  | 'balanceLow'
  | 'feeOverflow'
  | 'paymentOverflow'
  | 'withdrawFailed'
  | 'gasPriceTooLow'
  | 'invalidNonce'
  | 'gasLimitTooLow'
  | 'gasLimitTooHigh'
  | 'undefined'
  | 'reentrancy'
  | 'transactionMustComeFromEOA';

export type FpRpcTransactionStatus = {
  transactionHash: H256;
  transactionIndex: number;
  from: H160;
  to?: H160 | undefined;
  contractAddress?: H160 | undefined;
  logs: Array<EthereumLog>;
  logsBloom: EthbloomBloom;
};

export type EthbloomBloom = FixedBytes<256>;

export type EthereumReceiptReceiptV3 =
  | { tag: 'Legacy'; value: EthereumReceiptEip658ReceiptData }
  | { tag: 'EIP2930'; value: EthereumReceiptEip658ReceiptData }
  | { tag: 'EIP1559'; value: EthereumReceiptEip658ReceiptData };

export type EthereumReceiptEip658ReceiptData = {
  statusCode: number;
  usedGas: U256;
  logsBloom: EthbloomBloom;
  logs: Array<EthereumLog>;
};

export type EthereumBlock = {
  header: EthereumHeader;
  transactions: Array<EthereumTransactionTransactionV2>;
  ommers: Array<EthereumHeader>;
};

export type EthereumHeader = {
  parentHash: H256;
  ommersHash: H256;
  beneficiary: H160;
  stateRoot: H256;
  transactionsRoot: H256;
  receiptsRoot: H256;
  logsBloom: EthbloomBloom;
  difficulty: U256;
  number: U256;
  gasLimit: U256;
  gasUsed: U256;
  timestamp: bigint;
  extraData: Bytes;
  mixHash: H256;
  nonce: EthereumTypesHashH64;
};

export type EthereumTypesHashH64 = FixedBytes<8>;

export type PalletEthereumError = 'invalidSignature' | 'preLogExists';

export type PalletSchedulerScheduled = {
  maybeId?: FixedBytes<32> | undefined;
  priority: number;
  call: FrameSupportPreimagesBounded;
  maybePeriodic?: [number, number] | undefined;
  origin: MoonbeamRuntimeOriginCaller;
};

export type PalletSchedulerError =
  | 'failedToSchedule'
  | 'notFound'
  | 'targetBlockNumberInPast'
  | 'rescheduleNoChange'
  | 'named';

export type PalletDemocracyReferendumInfo =
  | { tag: 'Ongoing'; value: PalletDemocracyReferendumStatus }
  | {
      tag: 'Finished';
      value: {
        approved: boolean;
        end: number;
      };
    };

export type PalletDemocracyReferendumStatus = {
  end: number;
  proposal: FrameSupportPreimagesBounded;
  threshold: PalletDemocracyVoteThreshold;
  delay: number;
  tally: PalletDemocracyTally;
};

export type PalletDemocracyTally = {
  ayes: bigint;
  nays: bigint;
  turnout: bigint;
};

export type PalletDemocracyVoteVoting =
  | {
      tag: 'Direct';
      value: {
        votes: Array<[number, PalletDemocracyVoteAccountVote]>;
        delegations: PalletDemocracyDelegations;
        prior: PalletDemocracyVotePriorLock;
      };
    }
  | {
      tag: 'Delegating';
      value: {
        balance: bigint;
        target: AccountId20;
        conviction: PalletDemocracyConviction;
        delegations: PalletDemocracyDelegations;
        prior: PalletDemocracyVotePriorLock;
      };
    };

export type PalletDemocracyDelegations = {
  votes: bigint;
  capital: bigint;
};

export type PalletDemocracyVotePriorLock = [number, bigint];

export type PalletDemocracyError =
  | 'valueLow'
  | 'proposalMissing'
  | 'alreadyCanceled'
  | 'duplicateProposal'
  | 'proposalBlacklisted'
  | 'notSimpleMajority'
  | 'invalidHash'
  | 'noProposal'
  | 'alreadyVetoed'
  | 'referendumInvalid'
  | 'noneWaiting'
  | 'notVoter'
  | 'noPermission'
  | 'alreadyDelegating'
  | 'insufficientFunds'
  | 'notDelegating'
  | 'votesExist'
  | 'instantNotAllowed'
  | 'nonsense'
  | 'wrongUpperBound'
  | 'maxVotesReached'
  | 'tooMany'
  | 'votingPeriodLow'
  | 'preimageNotExist';

export type PalletPreimageRequestStatus =
  | {
      tag: 'Unrequested';
      value: {
        deposit: [AccountId20, bigint];
        len: number;
      };
    }
  | {
      tag: 'Requested';
      value: {
        deposit?: [AccountId20, bigint] | undefined;
        count: number;
        len?: number | undefined;
      };
    };

export type PalletPreimageError =
  | 'tooBig'
  | 'alreadyNoted'
  | 'notAuthorized'
  | 'notNoted'
  | 'requested'
  | 'notRequested';

export type PalletConvictionVotingVoteVoting =
  | { tag: 'Casting'; value: PalletConvictionVotingVoteCasting }
  | { tag: 'Delegating'; value: PalletConvictionVotingVoteDelegating };

export type PalletConvictionVotingVoteCasting = {
  votes: Array<[number, PalletConvictionVotingVoteAccountVote]>;
  delegations: PalletConvictionVotingDelegations;
  prior: PalletConvictionVotingVotePriorLock;
};

export type PalletConvictionVotingDelegations = {
  votes: bigint;
  capital: bigint;
};

export type PalletConvictionVotingVotePriorLock = [number, bigint];

export type PalletConvictionVotingVoteDelegating = {
  balance: bigint;
  target: AccountId20;
  conviction: PalletConvictionVotingConviction;
  delegations: PalletConvictionVotingDelegations;
  prior: PalletConvictionVotingVotePriorLock;
};

export type PalletConvictionVotingError =
  | 'notOngoing'
  | 'notVoter'
  | 'noPermission'
  | 'noPermissionYet'
  | 'alreadyDelegating'
  | 'alreadyVoting'
  | 'insufficientFunds'
  | 'notDelegating'
  | 'nonsense'
  | 'maxVotesReached'
  | 'classNeeded'
  | 'badClass';

export type PalletReferendaReferendumInfo =
  | { tag: 'Ongoing'; value: PalletReferendaReferendumStatus }
  | { tag: 'Approved'; value: [number, PalletReferendaDeposit | undefined, PalletReferendaDeposit | undefined] }
  | { tag: 'Rejected'; value: [number, PalletReferendaDeposit | undefined, PalletReferendaDeposit | undefined] }
  | { tag: 'Cancelled'; value: [number, PalletReferendaDeposit | undefined, PalletReferendaDeposit | undefined] }
  | { tag: 'TimedOut'; value: [number, PalletReferendaDeposit | undefined, PalletReferendaDeposit | undefined] }
  | { tag: 'Killed'; value: number };

export type PalletReferendaReferendumStatus = {
  track: number;
  origin: MoonbeamRuntimeOriginCaller;
  proposal: FrameSupportPreimagesBounded;
  enactment: FrameSupportScheduleDispatchTime;
  submitted: number;
  submissionDeposit: PalletReferendaDeposit;
  decisionDeposit?: PalletReferendaDeposit | undefined;
  deciding?: PalletReferendaDecidingStatus | undefined;
  tally: PalletConvictionVotingTally;
  inQueue: boolean;
  alarm?: [number, [number, number]] | undefined;
};

export type PalletReferendaDeposit = {
  who: AccountId20;
  amount: bigint;
};

export type PalletReferendaDecidingStatus = {
  since: number;
  confirming?: number | undefined;
};

export type PalletReferendaTrackInfo = {
  name: string;
  maxDeciding: number;
  decisionDeposit: bigint;
  preparePeriod: number;
  decisionPeriod: number;
  confirmPeriod: number;
  minEnactmentPeriod: number;
  minApproval: PalletReferendaCurve;
  minSupport: PalletReferendaCurve;
};

export type PalletReferendaCurve =
  | {
      tag: 'LinearDecreasing';
      value: {
        length: Perbill;
        floor: Perbill;
        ceil: Perbill;
      };
    }
  | {
      tag: 'SteppedDecreasing';
      value: {
        begin: Perbill;
        end: Perbill;
        step: Perbill;
        period: Perbill;
      };
    }
  | {
      tag: 'Reciprocal';
      value: {
        factor: FixedI64;
        xOffset: FixedI64;
        yOffset: FixedI64;
      };
    };

export type PalletReferendaError =
  | 'notOngoing'
  | 'hasDeposit'
  | 'badTrack'
  | 'full'
  | 'queueEmpty'
  | 'badReferendum'
  | 'nothingToDo'
  | 'noTrack'
  | 'unfinished'
  | 'noPermission'
  | 'noDeposit'
  | 'badStatus'
  | 'preimageNotExist';

export type PalletWhitelistError =
  | 'unavailablePreImage'
  | 'undecodableCall'
  | 'invalidCallWeightWitness'
  | 'callIsNotWhitelisted'
  | 'callAlreadyWhitelisted';

export type PalletCollectiveVotes = {
  index: number;
  threshold: number;
  ayes: Array<AccountId20>;
  nays: Array<AccountId20>;
  end: number;
};

export type PalletCollectiveError =
  | 'notMember'
  | 'duplicateProposal'
  | 'proposalMissing'
  | 'wrongIndex'
  | 'duplicateVote'
  | 'alreadyInitialized'
  | 'tooEarly'
  | 'tooManyProposals'
  | 'wrongProposalWeight'
  | 'wrongProposalLength';

export type PalletTreasuryProposal = {
  proposer: AccountId20;
  value: bigint;
  beneficiary: AccountId20;
  bond: bigint;
};

export type FrameSupportPalletId = FixedBytes<8>;

export type PalletTreasuryError =
  | 'insufficientProposersBalance'
  | 'invalidIndex'
  | 'tooManyApprovals'
  | 'insufficientPermission'
  | 'proposalNotApproved';

export type PalletCrowdloanRewardsRewardInfo = {
  totalReward: bigint;
  claimedReward: bigint;
  contributedRelayAddresses: Array<FixedBytes<32>>;
};

export type PalletCrowdloanRewardsError =
  | 'alreadyAssociated'
  | 'batchBeyondFundPot'
  | 'firstClaimAlreadyDone'
  | 'rewardNotHighEnough'
  | 'invalidClaimSignature'
  | 'invalidFreeClaimSignature'
  | 'noAssociatedClaim'
  | 'rewardsAlreadyClaimed'
  | 'rewardVecAlreadyInitialized'
  | 'rewardVecNotFullyInitializedYet'
  | 'rewardsDoNotMatchFund'
  | 'tooManyContributors'
  | 'vestingPeriodNonValid'
  | 'nonContributedAddressProvided'
  | 'insufficientNumberOfValidProofs';

export type CumulusPalletXcmpQueueInboundChannelDetails = {
  sender: PolkadotParachainPrimitivesId;
  state: CumulusPalletXcmpQueueInboundState;
  messageMetadata: Array<[number, PolkadotParachainPrimitivesXcmpMessageFormat]>;
};

export type CumulusPalletXcmpQueueInboundState = 'ok' | 'suspended';

export type PolkadotParachainPrimitivesXcmpMessageFormat =
  | 'concatenatedVersionedXcm'
  | 'concatenatedEncodedBlob'
  | 'signals';

export type CumulusPalletXcmpQueueOutboundChannelDetails = {
  recipient: PolkadotParachainPrimitivesId;
  state: CumulusPalletXcmpQueueOutboundState;
  signalsExist: boolean;
  firstIndex: number;
  lastIndex: number;
};

export type CumulusPalletXcmpQueueOutboundState = 'ok' | 'suspended';

export type CumulusPalletXcmpQueueQueueConfigData = {
  suspendThreshold: number;
  dropThreshold: number;
  resumeThreshold: number;
  thresholdWeight: SpWeightsWeightV2Weight;
  weightRestrictDecay: SpWeightsWeightV2Weight;
  xcmpMaxIndividualWeight: SpWeightsWeightV2Weight;
};

export type CumulusPalletXcmpQueueError =
  | 'failedToSend'
  | 'badXcmOrigin'
  | 'badXcm'
  | 'badOverweightIndex'
  | 'weightOverLimit';

export type CumulusPalletXcmError = never;

export type CumulusPalletDmpQueueConfigData = {
  maxIndividual: SpWeightsWeightV2Weight;
};

export type CumulusPalletDmpQueuePageIndexData = {
  beginUsed: number;
  endUsed: number;
  overweightCount: bigint;
};

export type CumulusPalletDmpQueueError = 'unknown' | 'overLimit';

export type PalletXcmQueryStatus =
  | {
      tag: 'Pending';
      value: {
        responder: XcmVersionedMultiLocation;
        maybeMatchQuerier?: XcmVersionedMultiLocation | undefined;
        maybeNotify?: [number, number] | undefined;
        timeout: number;
      };
    }
  | {
      tag: 'VersionNotifier';
      value: {
        origin: XcmVersionedMultiLocation;
        isActive: boolean;
      };
    }
  | {
      tag: 'Ready';
      value: {
        response: XcmVersionedResponse;
        at: number;
      };
    };

export type XcmVersionedResponse = { tag: 'V2'; value: XcmV2Response } | { tag: 'V3'; value: XcmV3Response };

export type PalletXcmVersionMigrationStage =
  | { tag: 'MigrateSupportedVersion'; value: never }
  | { tag: 'MigrateVersionNotifiers'; value: never }
  | { tag: 'NotifyCurrentTargets'; value: Bytes | undefined }
  | { tag: 'MigrateAndNotifyOldTargets'; value: never };

export type XcmVersionedAssetId = { tag: 'V3'; value: XcmV3MultiassetAssetId };

export type PalletXcmRemoteLockedFungibleRecord = {
  amount: bigint;
  owner: XcmVersionedMultiLocation;
  locker: XcmVersionedMultiLocation;
  consumers: Array<[never, bigint]>;
};

export type PalletXcmError =
  | 'unreachable'
  | 'sendFailure'
  | 'filtered'
  | 'unweighableMessage'
  | 'destinationNotInvertible'
  | 'empty'
  | 'cannotReanchor'
  | 'tooManyAssets'
  | 'invalidOrigin'
  | 'badVersion'
  | 'badLocation'
  | 'noSubscription'
  | 'alreadySubscribed'
  | 'invalidAsset'
  | 'lowBalance'
  | 'tooManyLocks'
  | 'accountNotSovereign'
  | 'feesNotMet'
  | 'lockNotFound'
  | 'inUse';

export type PalletAssetsAssetDetails = {
  owner: AccountId20;
  issuer: AccountId20;
  admin: AccountId20;
  freezer: AccountId20;
  supply: bigint;
  deposit: bigint;
  minBalance: bigint;
  isSufficient: boolean;
  accounts: number;
  sufficients: number;
  approvals: number;
  status: PalletAssetsAssetStatus;
};

export type PalletAssetsAssetStatus = 'live' | 'frozen' | 'destroying';

export type PalletAssetsAssetAccount = {
  balance: bigint;
  status: PalletAssetsAccountStatus;
  reason: PalletAssetsExistenceReason;
  extra: never;
};

export type PalletAssetsAccountStatus = 'liquid' | 'frozen' | 'blocked';

export type PalletAssetsExistenceReason =
  | { tag: 'Consumer'; value: never }
  | { tag: 'Sufficient'; value: never }
  | { tag: 'DepositHeld'; value: bigint }
  | { tag: 'DepositRefunded'; value: never }
  | { tag: 'DepositFrom'; value: [AccountId20, bigint] };

export type PalletAssetsApproval = {
  amount: bigint;
  deposit: bigint;
};

export type PalletAssetsAssetMetadata = {
  deposit: bigint;
  name: Bytes;
  symbol: Bytes;
  decimals: number;
  isFrozen: boolean;
};

export type PalletAssetsError =
  | 'balanceLow'
  | 'noAccount'
  | 'noPermission'
  | 'unknown'
  | 'frozen'
  | 'inUse'
  | 'badWitness'
  | 'minBalanceZero'
  | 'unavailableConsumer'
  | 'badMetadata'
  | 'unapproved'
  | 'wouldDie'
  | 'alreadyExists'
  | 'noDeposit'
  | 'wouldBurn'
  | 'liveAsset'
  | 'assetNotLive'
  | 'incorrectStatus'
  | 'notFrozen'
  | 'callbackFailed';

export type PalletAssetManagerAssetInfo = {
  creator: AccountId20;
  deposit: bigint;
};

export type PalletAssetManagerError =
  | 'errorCreatingAsset'
  | 'assetAlreadyExists'
  | 'assetDoesNotExist'
  | 'tooLowNumAssetsWeightHint'
  | 'localAssetLimitReached'
  | 'errorDestroyingAsset'
  | 'notSufficientDeposit'
  | 'nonExistentLocalAsset';

export type OrmlXtokensModuleError =
  | 'assetHasNoReserve'
  | 'notCrossChainTransfer'
  | 'invalidDest'
  | 'notCrossChainTransferableCurrency'
  | 'unweighableMessage'
  | 'xcmExecutionFailed'
  | 'cannotReanchor'
  | 'invalidAncestry'
  | 'invalidAsset'
  | 'destinationNotInvertible'
  | 'badVersion'
  | 'distinctReserveForAssetAndFee'
  | 'zeroFee'
  | 'zeroAmount'
  | 'tooManyAssetsBeingSent'
  | 'assetIndexNonExistent'
  | 'feeNotEnough'
  | 'notSupportedMultiLocation'
  | 'minXcmFeeNotDefined';

export type PalletXcmTransactorError =
  | 'indexAlreadyClaimed'
  | 'unclaimedIndex'
  | 'notOwner'
  | 'unweighableMessage'
  | 'cannotReanchor'
  | 'assetHasNoReserve'
  | 'invalidDest'
  | 'notCrossChainTransfer'
  | 'assetIsNotReserveInDestination'
  | 'destinationNotInvertible'
  | 'errorDelivering'
  | 'dispatchWeightBiggerThanTotalWeight'
  | 'weightOverflow'
  | 'amountOverflow'
  | 'transactorInfoNotSet'
  | 'notCrossChainTransferableCurrency'
  | 'xcmExecuteError'
  | 'badVersion'
  | 'maxWeightTransactReached'
  | 'unableToWithdrawAsset'
  | 'feePerSecondNotSet'
  | 'signedTransactNotAllowedForDestination'
  | 'failedMultiLocationToJunction'
  | 'hrmpHandlerNotImplemented'
  | 'tooMuchFeeUsed'
  | 'errorValidating'
  | 'refundNotSupportedWithTransactInfo';

export type PalletEthereumXcmError = 'ethereumXcmExecutionSuspended';

export type PalletRandomnessRequestState = {
  request: PalletRandomnessRequest;
  deposit: bigint;
};

export type PalletRandomnessRequest = {
  refundAddress: H160;
  contractAddress: H160;
  fee: bigint;
  gasLimit: bigint;
  numWords: number;
  salt: H256;
  info: PalletRandomnessRequestInfo;
};

export type PalletRandomnessRequestInfo =
  | { tag: 'BabeEpoch'; value: [bigint, bigint] }
  | { tag: 'Local'; value: [number, number] };

export type PalletRandomnessRequestType = { tag: 'BabeEpoch'; value: bigint } | { tag: 'Local'; value: number };

export type PalletRandomnessRandomnessResult = {
  randomness?: H256 | undefined;
  requestCount: bigint;
};

export type PalletRandomnessError =
  | 'requestCounterOverflowed'
  | 'requestFeeOverflowed'
  | 'mustRequestAtLeastOneWord'
  | 'cannotRequestMoreWordsThanMax'
  | 'cannotRequestRandomnessAfterMaxDelay'
  | 'cannotRequestRandomnessBeforeMinDelay'
  | 'requestDNE'
  | 'requestCannotYetBeFulfilled'
  | 'onlyRequesterCanIncreaseFee'
  | 'requestHasNotExpired'
  | 'randomnessResultDNE'
  | 'randomnessResultNotFilled';

export type FpSelfContainedUncheckedExtrinsic = SpRuntimeUncheckedExtrinsic;

export type AccountEthereumSignature = SpCoreEcdsaSignature;

export type FrameSystemExtensionsCheckNonZeroSender = never;

export type FrameSystemExtensionsCheckSpecVersion = never;

export type FrameSystemExtensionsCheckTxVersion = never;

export type FrameSystemExtensionsCheckGenesis = never;

export type FrameSystemExtensionsCheckMortality = SpRuntimeEra;

export type SpRuntimeEra =
  | { tag: 'Immortal'; value: never }
  | { tag: 'Mortal1'; value: number }
  | { tag: 'Mortal2'; value: number }
  | { tag: 'Mortal3'; value: number }
  | { tag: 'Mortal4'; value: number }
  | { tag: 'Mortal5'; value: number }
  | { tag: 'Mortal6'; value: number }
  | { tag: 'Mortal7'; value: number }
  | { tag: 'Mortal8'; value: number }
  | { tag: 'Mortal9'; value: number }
  | { tag: 'Mortal10'; value: number }
  | { tag: 'Mortal11'; value: number }
  | { tag: 'Mortal12'; value: number }
  | { tag: 'Mortal13'; value: number }
  | { tag: 'Mortal14'; value: number }
  | { tag: 'Mortal15'; value: number }
  | { tag: 'Mortal16'; value: number }
  | { tag: 'Mortal17'; value: number }
  | { tag: 'Mortal18'; value: number }
  | { tag: 'Mortal19'; value: number }
  | { tag: 'Mortal20'; value: number }
  | { tag: 'Mortal21'; value: number }
  | { tag: 'Mortal22'; value: number }
  | { tag: 'Mortal23'; value: number }
  | { tag: 'Mortal24'; value: number }
  | { tag: 'Mortal25'; value: number }
  | { tag: 'Mortal26'; value: number }
  | { tag: 'Mortal27'; value: number }
  | { tag: 'Mortal28'; value: number }
  | { tag: 'Mortal29'; value: number }
  | { tag: 'Mortal30'; value: number }
  | { tag: 'Mortal31'; value: number }
  | { tag: 'Mortal32'; value: number }
  | { tag: 'Mortal33'; value: number }
  | { tag: 'Mortal34'; value: number }
  | { tag: 'Mortal35'; value: number }
  | { tag: 'Mortal36'; value: number }
  | { tag: 'Mortal37'; value: number }
  | { tag: 'Mortal38'; value: number }
  | { tag: 'Mortal39'; value: number }
  | { tag: 'Mortal40'; value: number }
  | { tag: 'Mortal41'; value: number }
  | { tag: 'Mortal42'; value: number }
  | { tag: 'Mortal43'; value: number }
  | { tag: 'Mortal44'; value: number }
  | { tag: 'Mortal45'; value: number }
  | { tag: 'Mortal46'; value: number }
  | { tag: 'Mortal47'; value: number }
  | { tag: 'Mortal48'; value: number }
  | { tag: 'Mortal49'; value: number }
  | { tag: 'Mortal50'; value: number }
  | { tag: 'Mortal51'; value: number }
  | { tag: 'Mortal52'; value: number }
  | { tag: 'Mortal53'; value: number }
  | { tag: 'Mortal54'; value: number }
  | { tag: 'Mortal55'; value: number }
  | { tag: 'Mortal56'; value: number }
  | { tag: 'Mortal57'; value: number }
  | { tag: 'Mortal58'; value: number }
  | { tag: 'Mortal59'; value: number }
  | { tag: 'Mortal60'; value: number }
  | { tag: 'Mortal61'; value: number }
  | { tag: 'Mortal62'; value: number }
  | { tag: 'Mortal63'; value: number }
  | { tag: 'Mortal64'; value: number }
  | { tag: 'Mortal65'; value: number }
  | { tag: 'Mortal66'; value: number }
  | { tag: 'Mortal67'; value: number }
  | { tag: 'Mortal68'; value: number }
  | { tag: 'Mortal69'; value: number }
  | { tag: 'Mortal70'; value: number }
  | { tag: 'Mortal71'; value: number }
  | { tag: 'Mortal72'; value: number }
  | { tag: 'Mortal73'; value: number }
  | { tag: 'Mortal74'; value: number }
  | { tag: 'Mortal75'; value: number }
  | { tag: 'Mortal76'; value: number }
  | { tag: 'Mortal77'; value: number }
  | { tag: 'Mortal78'; value: number }
  | { tag: 'Mortal79'; value: number }
  | { tag: 'Mortal80'; value: number }
  | { tag: 'Mortal81'; value: number }
  | { tag: 'Mortal82'; value: number }
  | { tag: 'Mortal83'; value: number }
  | { tag: 'Mortal84'; value: number }
  | { tag: 'Mortal85'; value: number }
  | { tag: 'Mortal86'; value: number }
  | { tag: 'Mortal87'; value: number }
  | { tag: 'Mortal88'; value: number }
  | { tag: 'Mortal89'; value: number }
  | { tag: 'Mortal90'; value: number }
  | { tag: 'Mortal91'; value: number }
  | { tag: 'Mortal92'; value: number }
  | { tag: 'Mortal93'; value: number }
  | { tag: 'Mortal94'; value: number }
  | { tag: 'Mortal95'; value: number }
  | { tag: 'Mortal96'; value: number }
  | { tag: 'Mortal97'; value: number }
  | { tag: 'Mortal98'; value: number }
  | { tag: 'Mortal99'; value: number }
  | { tag: 'Mortal100'; value: number }
  | { tag: 'Mortal101'; value: number }
  | { tag: 'Mortal102'; value: number }
  | { tag: 'Mortal103'; value: number }
  | { tag: 'Mortal104'; value: number }
  | { tag: 'Mortal105'; value: number }
  | { tag: 'Mortal106'; value: number }
  | { tag: 'Mortal107'; value: number }
  | { tag: 'Mortal108'; value: number }
  | { tag: 'Mortal109'; value: number }
  | { tag: 'Mortal110'; value: number }
  | { tag: 'Mortal111'; value: number }
  | { tag: 'Mortal112'; value: number }
  | { tag: 'Mortal113'; value: number }
  | { tag: 'Mortal114'; value: number }
  | { tag: 'Mortal115'; value: number }
  | { tag: 'Mortal116'; value: number }
  | { tag: 'Mortal117'; value: number }
  | { tag: 'Mortal118'; value: number }
  | { tag: 'Mortal119'; value: number }
  | { tag: 'Mortal120'; value: number }
  | { tag: 'Mortal121'; value: number }
  | { tag: 'Mortal122'; value: number }
  | { tag: 'Mortal123'; value: number }
  | { tag: 'Mortal124'; value: number }
  | { tag: 'Mortal125'; value: number }
  | { tag: 'Mortal126'; value: number }
  | { tag: 'Mortal127'; value: number }
  | { tag: 'Mortal128'; value: number }
  | { tag: 'Mortal129'; value: number }
  | { tag: 'Mortal130'; value: number }
  | { tag: 'Mortal131'; value: number }
  | { tag: 'Mortal132'; value: number }
  | { tag: 'Mortal133'; value: number }
  | { tag: 'Mortal134'; value: number }
  | { tag: 'Mortal135'; value: number }
  | { tag: 'Mortal136'; value: number }
  | { tag: 'Mortal137'; value: number }
  | { tag: 'Mortal138'; value: number }
  | { tag: 'Mortal139'; value: number }
  | { tag: 'Mortal140'; value: number }
  | { tag: 'Mortal141'; value: number }
  | { tag: 'Mortal142'; value: number }
  | { tag: 'Mortal143'; value: number }
  | { tag: 'Mortal144'; value: number }
  | { tag: 'Mortal145'; value: number }
  | { tag: 'Mortal146'; value: number }
  | { tag: 'Mortal147'; value: number }
  | { tag: 'Mortal148'; value: number }
  | { tag: 'Mortal149'; value: number }
  | { tag: 'Mortal150'; value: number }
  | { tag: 'Mortal151'; value: number }
  | { tag: 'Mortal152'; value: number }
  | { tag: 'Mortal153'; value: number }
  | { tag: 'Mortal154'; value: number }
  | { tag: 'Mortal155'; value: number }
  | { tag: 'Mortal156'; value: number }
  | { tag: 'Mortal157'; value: number }
  | { tag: 'Mortal158'; value: number }
  | { tag: 'Mortal159'; value: number }
  | { tag: 'Mortal160'; value: number }
  | { tag: 'Mortal161'; value: number }
  | { tag: 'Mortal162'; value: number }
  | { tag: 'Mortal163'; value: number }
  | { tag: 'Mortal164'; value: number }
  | { tag: 'Mortal165'; value: number }
  | { tag: 'Mortal166'; value: number }
  | { tag: 'Mortal167'; value: number }
  | { tag: 'Mortal168'; value: number }
  | { tag: 'Mortal169'; value: number }
  | { tag: 'Mortal170'; value: number }
  | { tag: 'Mortal171'; value: number }
  | { tag: 'Mortal172'; value: number }
  | { tag: 'Mortal173'; value: number }
  | { tag: 'Mortal174'; value: number }
  | { tag: 'Mortal175'; value: number }
  | { tag: 'Mortal176'; value: number }
  | { tag: 'Mortal177'; value: number }
  | { tag: 'Mortal178'; value: number }
  | { tag: 'Mortal179'; value: number }
  | { tag: 'Mortal180'; value: number }
  | { tag: 'Mortal181'; value: number }
  | { tag: 'Mortal182'; value: number }
  | { tag: 'Mortal183'; value: number }
  | { tag: 'Mortal184'; value: number }
  | { tag: 'Mortal185'; value: number }
  | { tag: 'Mortal186'; value: number }
  | { tag: 'Mortal187'; value: number }
  | { tag: 'Mortal188'; value: number }
  | { tag: 'Mortal189'; value: number }
  | { tag: 'Mortal190'; value: number }
  | { tag: 'Mortal191'; value: number }
  | { tag: 'Mortal192'; value: number }
  | { tag: 'Mortal193'; value: number }
  | { tag: 'Mortal194'; value: number }
  | { tag: 'Mortal195'; value: number }
  | { tag: 'Mortal196'; value: number }
  | { tag: 'Mortal197'; value: number }
  | { tag: 'Mortal198'; value: number }
  | { tag: 'Mortal199'; value: number }
  | { tag: 'Mortal200'; value: number }
  | { tag: 'Mortal201'; value: number }
  | { tag: 'Mortal202'; value: number }
  | { tag: 'Mortal203'; value: number }
  | { tag: 'Mortal204'; value: number }
  | { tag: 'Mortal205'; value: number }
  | { tag: 'Mortal206'; value: number }
  | { tag: 'Mortal207'; value: number }
  | { tag: 'Mortal208'; value: number }
  | { tag: 'Mortal209'; value: number }
  | { tag: 'Mortal210'; value: number }
  | { tag: 'Mortal211'; value: number }
  | { tag: 'Mortal212'; value: number }
  | { tag: 'Mortal213'; value: number }
  | { tag: 'Mortal214'; value: number }
  | { tag: 'Mortal215'; value: number }
  | { tag: 'Mortal216'; value: number }
  | { tag: 'Mortal217'; value: number }
  | { tag: 'Mortal218'; value: number }
  | { tag: 'Mortal219'; value: number }
  | { tag: 'Mortal220'; value: number }
  | { tag: 'Mortal221'; value: number }
  | { tag: 'Mortal222'; value: number }
  | { tag: 'Mortal223'; value: number }
  | { tag: 'Mortal224'; value: number }
  | { tag: 'Mortal225'; value: number }
  | { tag: 'Mortal226'; value: number }
  | { tag: 'Mortal227'; value: number }
  | { tag: 'Mortal228'; value: number }
  | { tag: 'Mortal229'; value: number }
  | { tag: 'Mortal230'; value: number }
  | { tag: 'Mortal231'; value: number }
  | { tag: 'Mortal232'; value: number }
  | { tag: 'Mortal233'; value: number }
  | { tag: 'Mortal234'; value: number }
  | { tag: 'Mortal235'; value: number }
  | { tag: 'Mortal236'; value: number }
  | { tag: 'Mortal237'; value: number }
  | { tag: 'Mortal238'; value: number }
  | { tag: 'Mortal239'; value: number }
  | { tag: 'Mortal240'; value: number }
  | { tag: 'Mortal241'; value: number }
  | { tag: 'Mortal242'; value: number }
  | { tag: 'Mortal243'; value: number }
  | { tag: 'Mortal244'; value: number }
  | { tag: 'Mortal245'; value: number }
  | { tag: 'Mortal246'; value: number }
  | { tag: 'Mortal247'; value: number }
  | { tag: 'Mortal248'; value: number }
  | { tag: 'Mortal249'; value: number }
  | { tag: 'Mortal250'; value: number }
  | { tag: 'Mortal251'; value: number }
  | { tag: 'Mortal252'; value: number }
  | { tag: 'Mortal253'; value: number }
  | { tag: 'Mortal254'; value: number }
  | { tag: 'Mortal255'; value: number };

export type FrameSystemExtensionsCheckNonce = number;

export type FrameSystemExtensionsCheckWeight = never;

export type PalletTransactionPaymentChargeTransactionPayment = bigint;

export type SpRuntimeUncheckedExtrinsic = Bytes;

export type MoonbeamRuntimeRuntime = never;
