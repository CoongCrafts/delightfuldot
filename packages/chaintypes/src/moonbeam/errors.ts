// Generated by @delightfuldot/codegen

import type { GenericChainErrors, GenericModuleError } from '@delightfuldot/types';

export interface ChainErrors extends GenericChainErrors {
  system: {
    /**
     * The name of specification does not match between the current runtime
     * and the new runtime.
     **/
    InvalidSpecName: GenericModuleError;

    /**
     * The specification version is not allowed to decrease between the current runtime
     * and the new runtime.
     **/
    SpecVersionNeedsToIncrease: GenericModuleError;

    /**
     * Failed to extract the runtime version from the new runtime.
     *
     * Either calling `Core_version` or decoding `RuntimeVersion` failed.
     **/
    FailedToExtractRuntimeVersion: GenericModuleError;

    /**
     * Suicide called when the account has non-default composite data.
     **/
    NonDefaultComposite: GenericModuleError;

    /**
     * There is a non-zero reference count preventing the account from being purged.
     **/
    NonZeroRefCount: GenericModuleError;

    /**
     * The origin filter prevent the call to be dispatched.
     **/
    CallFiltered: GenericModuleError;
  };
  parachainSystem: {
    /**
     * Attempt to upgrade validation function while existing upgrade pending.
     **/
    OverlappingUpgrades: GenericModuleError;

    /**
     * Polkadot currently prohibits this parachain from upgrading its validation function.
     **/
    ProhibitedByPolkadot: GenericModuleError;

    /**
     * The supplied validation function has compiled into a blob larger than Polkadot is
     * willing to run.
     **/
    TooBig: GenericModuleError;

    /**
     * The inherent which supplies the validation data did not run this block.
     **/
    ValidationDataNotAvailable: GenericModuleError;

    /**
     * The inherent which supplies the host configuration did not run this block.
     **/
    HostConfigurationNotAvailable: GenericModuleError;

    /**
     * No validation function upgrade is currently scheduled.
     **/
    NotScheduled: GenericModuleError;

    /**
     * No code upgrade has been authorized.
     **/
    NothingAuthorized: GenericModuleError;

    /**
     * The given code upgrade has not been authorized.
     **/
    Unauthorized: GenericModuleError;
  };
  balances: {
    /**
     * Vesting balance too high to send value.
     **/
    VestingBalance: GenericModuleError;

    /**
     * Account liquidity restrictions prevent withdrawal.
     **/
    LiquidityRestrictions: GenericModuleError;

    /**
     * Balance too low to send value.
     **/
    InsufficientBalance: GenericModuleError;

    /**
     * Value too low to create account due to existential deposit.
     **/
    ExistentialDeposit: GenericModuleError;

    /**
     * Transfer/payment would kill account.
     **/
    Expendability: GenericModuleError;

    /**
     * A vesting schedule already exists for this account.
     **/
    ExistingVestingSchedule: GenericModuleError;

    /**
     * Beneficiary account must pre-exist.
     **/
    DeadAccount: GenericModuleError;

    /**
     * Number of named reserves exceed `MaxReserves`.
     **/
    TooManyReserves: GenericModuleError;

    /**
     * Number of holds exceed `MaxHolds`.
     **/
    TooManyHolds: GenericModuleError;

    /**
     * Number of freezes exceed `MaxFreezes`.
     **/
    TooManyFreezes: GenericModuleError;
  };
  parachainStaking: {
    DelegatorDNE: GenericModuleError;
    DelegatorDNEinTopNorBottom: GenericModuleError;
    DelegatorDNEInDelegatorSet: GenericModuleError;
    CandidateDNE: GenericModuleError;
    DelegationDNE: GenericModuleError;
    DelegatorExists: GenericModuleError;
    CandidateExists: GenericModuleError;
    CandidateBondBelowMin: GenericModuleError;
    InsufficientBalance: GenericModuleError;
    DelegatorBondBelowMin: GenericModuleError;
    DelegationBelowMin: GenericModuleError;
    AlreadyOffline: GenericModuleError;
    AlreadyActive: GenericModuleError;
    DelegatorAlreadyLeaving: GenericModuleError;
    DelegatorNotLeaving: GenericModuleError;
    DelegatorCannotLeaveYet: GenericModuleError;
    CannotDelegateIfLeaving: GenericModuleError;
    CandidateAlreadyLeaving: GenericModuleError;
    CandidateNotLeaving: GenericModuleError;
    CandidateCannotLeaveYet: GenericModuleError;
    CannotGoOnlineIfLeaving: GenericModuleError;
    ExceedMaxDelegationsPerDelegator: GenericModuleError;
    AlreadyDelegatedCandidate: GenericModuleError;
    InvalidSchedule: GenericModuleError;
    CannotSetBelowMin: GenericModuleError;
    RoundLengthMustBeGreaterThanTotalSelectedCollators: GenericModuleError;
    NoWritingSameValue: GenericModuleError;
    TooLowCandidateCountWeightHintJoinCandidates: GenericModuleError;
    TooLowCandidateCountWeightHintCancelLeaveCandidates: GenericModuleError;
    TooLowCandidateCountToLeaveCandidates: GenericModuleError;
    TooLowDelegationCountToDelegate: GenericModuleError;
    TooLowCandidateDelegationCountToDelegate: GenericModuleError;
    TooLowCandidateDelegationCountToLeaveCandidates: GenericModuleError;
    TooLowDelegationCountToLeaveDelegators: GenericModuleError;
    PendingCandidateRequestsDNE: GenericModuleError;
    PendingCandidateRequestAlreadyExists: GenericModuleError;
    PendingCandidateRequestNotDueYet: GenericModuleError;
    PendingDelegationRequestDNE: GenericModuleError;
    PendingDelegationRequestAlreadyExists: GenericModuleError;
    PendingDelegationRequestNotDueYet: GenericModuleError;
    CannotDelegateLessThanOrEqualToLowestBottomWhenFull: GenericModuleError;
    PendingDelegationRevoke: GenericModuleError;
    TooLowDelegationCountToAutoCompound: GenericModuleError;
    TooLowCandidateAutoCompoundingDelegationCountToAutoCompound: GenericModuleError;
    TooLowCandidateAutoCompoundingDelegationCountToDelegate: GenericModuleError;
    TooLowCollatorCountToNotifyAsInactive: GenericModuleError;
    CannotBeNotifiedAsInactive: GenericModuleError;
    TooLowCandidateAutoCompoundingDelegationCountToLeaveCandidates: GenericModuleError;
    TooLowCandidateCountWeightHint: GenericModuleError;
    TooLowCandidateCountWeightHintGoOffline: GenericModuleError;
    CandidateLimitReached: GenericModuleError;
    CannotSetAboveMaxCandidates: GenericModuleError;
    RemovedCall: GenericModuleError;
    MarkingOfflineNotEnabled: GenericModuleError;
    CurrentRoundTooLow: GenericModuleError;
  };
  authorInherent: {
    /**
     * Author already set in block.
     **/
    AuthorAlreadySet: GenericModuleError;

    /**
     * No AccountId was found to be associated with this author
     **/
    NoAccountId: GenericModuleError;

    /**
     * The author in the inherent is not an eligible author.
     **/
    CannotBeAuthor: GenericModuleError;
  };
  authorMapping: {
    /**
     * The association can't be cleared because it is not found.
     **/
    AssociationNotFound: GenericModuleError;

    /**
     * The association can't be cleared because it belongs to another account.
     **/
    NotYourAssociation: GenericModuleError;

    /**
     * This account cannot set an author because it cannon afford the security deposit
     **/
    CannotAffordSecurityDeposit: GenericModuleError;

    /**
     * The NimbusId in question is already associated and cannot be overwritten
     **/
    AlreadyAssociated: GenericModuleError;

    /**
     * No existing NimbusId can be found for the account
     **/
    OldAuthorIdNotFound: GenericModuleError;

    /**
     * Keys have wrong size
     **/
    WrongKeySize: GenericModuleError;

    /**
     * Failed to decode NimbusId for `set_keys`
     **/
    DecodeNimbusFailed: GenericModuleError;

    /**
     * Failed to decode T::Keys for `set_keys`
     **/
    DecodeKeysFailed: GenericModuleError;
  };
  moonbeamOrbiters: {
    /**
     * The collator is already added in orbiters program.
     **/
    CollatorAlreadyAdded: GenericModuleError;

    /**
     * This collator is not in orbiters program.
     **/
    CollatorNotFound: GenericModuleError;

    /**
     * There are already too many orbiters associated with this collator.
     **/
    CollatorPoolTooLarge: GenericModuleError;

    /**
     * There are more collator pools than the number specified in the parameter.
     **/
    CollatorsPoolCountTooLow: GenericModuleError;

    /**
     * The minimum deposit required to register as an orbiter has not yet been included in the
     * onchain storage
     **/
    MinOrbiterDepositNotSet: GenericModuleError;

    /**
     * This orbiter is already associated with this collator.
     **/
    OrbiterAlreadyInPool: GenericModuleError;

    /**
     * This orbiter has not made a deposit
     **/
    OrbiterDepositNotFound: GenericModuleError;

    /**
     * This orbiter is not found
     **/
    OrbiterNotFound: GenericModuleError;

    /**
     * The orbiter is still at least in one pool
     **/
    OrbiterStillInAPool: GenericModuleError;
  };
  utility: {
    /**
     * Too many calls batched.
     **/
    TooManyCalls: GenericModuleError;
  };
  proxy: {
    /**
     * There are too many proxies registered or too many announcements pending.
     **/
    TooMany: GenericModuleError;

    /**
     * Proxy registration not found.
     **/
    NotFound: GenericModuleError;

    /**
     * Sender is not a proxy of the account to be proxied.
     **/
    NotProxy: GenericModuleError;

    /**
     * A call which is incompatible with the proxy type's filter was attempted.
     **/
    Unproxyable: GenericModuleError;

    /**
     * Account is already a proxy.
     **/
    Duplicate: GenericModuleError;

    /**
     * Call may not be made by proxy because it may escalate its privileges.
     **/
    NoPermission: GenericModuleError;

    /**
     * Announcement, if made at all, was made too recently.
     **/
    Unannounced: GenericModuleError;

    /**
     * Cannot add self as proxy.
     **/
    NoSelfProxy: GenericModuleError;
  };
  maintenanceMode: {
    /**
     * The chain cannot enter maintenance mode because it is already in maintenance mode
     **/
    AlreadyInMaintenanceMode: GenericModuleError;

    /**
     * The chain cannot resume normal operation because it is not in maintenance mode
     **/
    NotInMaintenanceMode: GenericModuleError;
  };
  identity: {
    /**
     * Too many subs-accounts.
     **/
    TooManySubAccounts: GenericModuleError;

    /**
     * Account isn't found.
     **/
    NotFound: GenericModuleError;

    /**
     * Account isn't named.
     **/
    NotNamed: GenericModuleError;

    /**
     * Empty index.
     **/
    EmptyIndex: GenericModuleError;

    /**
     * Fee is changed.
     **/
    FeeChanged: GenericModuleError;

    /**
     * No identity found.
     **/
    NoIdentity: GenericModuleError;

    /**
     * Sticky judgement.
     **/
    StickyJudgement: GenericModuleError;

    /**
     * Judgement given.
     **/
    JudgementGiven: GenericModuleError;

    /**
     * Invalid judgement.
     **/
    InvalidJudgement: GenericModuleError;

    /**
     * The index is invalid.
     **/
    InvalidIndex: GenericModuleError;

    /**
     * The target is invalid.
     **/
    InvalidTarget: GenericModuleError;

    /**
     * Too many additional fields.
     **/
    TooManyFields: GenericModuleError;

    /**
     * Maximum amount of registrars reached. Cannot add any more.
     **/
    TooManyRegistrars: GenericModuleError;

    /**
     * Account ID is already named.
     **/
    AlreadyClaimed: GenericModuleError;

    /**
     * Sender is not a sub-account.
     **/
    NotSub: GenericModuleError;

    /**
     * Sub-account isn't owned by sender.
     **/
    NotOwned: GenericModuleError;

    /**
     * The provided judgement was for a different identity.
     **/
    JudgementForDifferentIdentity: GenericModuleError;

    /**
     * Error that occurs when there is an issue paying for judgement.
     **/
    JudgementPaymentFailed: GenericModuleError;
  };
  migrations: {
    /**
     * Missing preimage in original democracy storage
     **/
    PreimageMissing: GenericModuleError;

    /**
     * Provided upper bound is too low.
     **/
    WrongUpperBound: GenericModuleError;

    /**
     * Preimage is larger than the new max size.
     **/
    PreimageIsTooBig: GenericModuleError;

    /**
     * Preimage already exists in the new storage.
     **/
    PreimageAlreadyExists: GenericModuleError;
  };
  multisig: {
    /**
     * Threshold must be 2 or greater.
     **/
    MinimumThreshold: GenericModuleError;

    /**
     * Call is already approved by this signatory.
     **/
    AlreadyApproved: GenericModuleError;

    /**
     * Call doesn't need any (more) approvals.
     **/
    NoApprovalsNeeded: GenericModuleError;

    /**
     * There are too few signatories in the list.
     **/
    TooFewSignatories: GenericModuleError;

    /**
     * There are too many signatories in the list.
     **/
    TooManySignatories: GenericModuleError;

    /**
     * The signatories were provided out of order; they should be ordered.
     **/
    SignatoriesOutOfOrder: GenericModuleError;

    /**
     * The sender was contained in the other signatories; it shouldn't be.
     **/
    SenderInSignatories: GenericModuleError;

    /**
     * Multisig operation not found when attempting to cancel.
     **/
    NotFound: GenericModuleError;

    /**
     * Only the account that originally created the multisig is able to cancel it.
     **/
    NotOwner: GenericModuleError;

    /**
     * No timepoint was given, yet the multisig operation is already underway.
     **/
    NoTimepoint: GenericModuleError;

    /**
     * A different timepoint was given to the multisig operation that is underway.
     **/
    WrongTimepoint: GenericModuleError;

    /**
     * A timepoint was given, yet no multisig operation is underway.
     **/
    UnexpectedTimepoint: GenericModuleError;

    /**
     * The maximum weight information provided was too low.
     **/
    MaxWeightTooLow: GenericModuleError;

    /**
     * The data to be stored is already stored.
     **/
    AlreadyStored: GenericModuleError;
  };
  evm: {
    /**
     * Not enough balance to perform action
     **/
    BalanceLow: GenericModuleError;

    /**
     * Calculating total fee overflowed
     **/
    FeeOverflow: GenericModuleError;

    /**
     * Calculating total payment overflowed
     **/
    PaymentOverflow: GenericModuleError;

    /**
     * Withdraw fee failed
     **/
    WithdrawFailed: GenericModuleError;

    /**
     * Gas price is too low.
     **/
    GasPriceTooLow: GenericModuleError;

    /**
     * Nonce is invalid
     **/
    InvalidNonce: GenericModuleError;

    /**
     * Gas limit is too low.
     **/
    GasLimitTooLow: GenericModuleError;

    /**
     * Gas limit is too high.
     **/
    GasLimitTooHigh: GenericModuleError;

    /**
     * Undefined error.
     **/
    Undefined: GenericModuleError;

    /**
     * EVM reentrancy
     **/
    Reentrancy: GenericModuleError;

    /**
     * EIP-3607,
     **/
    TransactionMustComeFromEOA: GenericModuleError;
  };
  ethereum: {
    /**
     * Signature is invalid.
     **/
    InvalidSignature: GenericModuleError;

    /**
     * Pre-log is present, therefore transact is not allowed.
     **/
    PreLogExists: GenericModuleError;
  };
  scheduler: {
    /**
     * Failed to schedule a call
     **/
    FailedToSchedule: GenericModuleError;

    /**
     * Cannot find the scheduled call.
     **/
    NotFound: GenericModuleError;

    /**
     * Given target block number is in the past.
     **/
    TargetBlockNumberInPast: GenericModuleError;

    /**
     * Reschedule failed because it does not change scheduled time.
     **/
    RescheduleNoChange: GenericModuleError;

    /**
     * Attempt to use a non-named function on a named task.
     **/
    Named: GenericModuleError;
  };
  democracy: {
    /**
     * Value too low
     **/
    ValueLow: GenericModuleError;

    /**
     * Proposal does not exist
     **/
    ProposalMissing: GenericModuleError;

    /**
     * Cannot cancel the same proposal twice
     **/
    AlreadyCanceled: GenericModuleError;

    /**
     * Proposal already made
     **/
    DuplicateProposal: GenericModuleError;

    /**
     * Proposal still blacklisted
     **/
    ProposalBlacklisted: GenericModuleError;

    /**
     * Next external proposal not simple majority
     **/
    NotSimpleMajority: GenericModuleError;

    /**
     * Invalid hash
     **/
    InvalidHash: GenericModuleError;

    /**
     * No external proposal
     **/
    NoProposal: GenericModuleError;

    /**
     * Identity may not veto a proposal twice
     **/
    AlreadyVetoed: GenericModuleError;

    /**
     * Vote given for invalid referendum
     **/
    ReferendumInvalid: GenericModuleError;

    /**
     * No proposals waiting
     **/
    NoneWaiting: GenericModuleError;

    /**
     * The given account did not vote on the referendum.
     **/
    NotVoter: GenericModuleError;

    /**
     * The actor has no permission to conduct the action.
     **/
    NoPermission: GenericModuleError;

    /**
     * The account is already delegating.
     **/
    AlreadyDelegating: GenericModuleError;

    /**
     * Too high a balance was provided that the account cannot afford.
     **/
    InsufficientFunds: GenericModuleError;

    /**
     * The account is not currently delegating.
     **/
    NotDelegating: GenericModuleError;

    /**
     * The account currently has votes attached to it and the operation cannot succeed until
     * these are removed, either through `unvote` or `reap_vote`.
     **/
    VotesExist: GenericModuleError;

    /**
     * The instant referendum origin is currently disallowed.
     **/
    InstantNotAllowed: GenericModuleError;

    /**
     * Delegation to oneself makes no sense.
     **/
    Nonsense: GenericModuleError;

    /**
     * Invalid upper bound.
     **/
    WrongUpperBound: GenericModuleError;

    /**
     * Maximum number of votes reached.
     **/
    MaxVotesReached: GenericModuleError;

    /**
     * Maximum number of items reached.
     **/
    TooMany: GenericModuleError;

    /**
     * Voting period too low
     **/
    VotingPeriodLow: GenericModuleError;

    /**
     * The preimage does not exist.
     **/
    PreimageNotExist: GenericModuleError;
  };
  preimage: {
    /**
     * Preimage is too large to store on-chain.
     **/
    TooBig: GenericModuleError;

    /**
     * Preimage has already been noted on-chain.
     **/
    AlreadyNoted: GenericModuleError;

    /**
     * The user is not authorized to perform this action.
     **/
    NotAuthorized: GenericModuleError;

    /**
     * The preimage cannot be removed since it has not yet been noted.
     **/
    NotNoted: GenericModuleError;

    /**
     * A preimage may not be removed when there are outstanding requests.
     **/
    Requested: GenericModuleError;

    /**
     * The preimage request cannot be removed since no outstanding requests exist.
     **/
    NotRequested: GenericModuleError;
  };
  convictionVoting: {
    /**
     * Poll is not ongoing.
     **/
    NotOngoing: GenericModuleError;

    /**
     * The given account did not vote on the poll.
     **/
    NotVoter: GenericModuleError;

    /**
     * The actor has no permission to conduct the action.
     **/
    NoPermission: GenericModuleError;

    /**
     * The actor has no permission to conduct the action right now but will do in the future.
     **/
    NoPermissionYet: GenericModuleError;

    /**
     * The account is already delegating.
     **/
    AlreadyDelegating: GenericModuleError;

    /**
     * The account currently has votes attached to it and the operation cannot succeed until
     * these are removed, either through `unvote` or `reap_vote`.
     **/
    AlreadyVoting: GenericModuleError;

    /**
     * Too high a balance was provided that the account cannot afford.
     **/
    InsufficientFunds: GenericModuleError;

    /**
     * The account is not currently delegating.
     **/
    NotDelegating: GenericModuleError;

    /**
     * Delegation to oneself makes no sense.
     **/
    Nonsense: GenericModuleError;

    /**
     * Maximum number of votes reached.
     **/
    MaxVotesReached: GenericModuleError;

    /**
     * The class must be supplied since it is not easily determinable from the state.
     **/
    ClassNeeded: GenericModuleError;

    /**
     * The class ID supplied is invalid.
     **/
    BadClass: GenericModuleError;
  };
  referenda: {
    /**
     * Referendum is not ongoing.
     **/
    NotOngoing: GenericModuleError;

    /**
     * Referendum's decision deposit is already paid.
     **/
    HasDeposit: GenericModuleError;

    /**
     * The track identifier given was invalid.
     **/
    BadTrack: GenericModuleError;

    /**
     * There are already a full complement of referenda in progress for this track.
     **/
    Full: GenericModuleError;

    /**
     * The queue of the track is empty.
     **/
    QueueEmpty: GenericModuleError;

    /**
     * The referendum index provided is invalid in this context.
     **/
    BadReferendum: GenericModuleError;

    /**
     * There was nothing to do in the advancement.
     **/
    NothingToDo: GenericModuleError;

    /**
     * No track exists for the proposal origin.
     **/
    NoTrack: GenericModuleError;

    /**
     * Any deposit cannot be refunded until after the decision is over.
     **/
    Unfinished: GenericModuleError;

    /**
     * The deposit refunder is not the depositor.
     **/
    NoPermission: GenericModuleError;

    /**
     * The deposit cannot be refunded since none was made.
     **/
    NoDeposit: GenericModuleError;

    /**
     * The referendum status is invalid for this operation.
     **/
    BadStatus: GenericModuleError;

    /**
     * The preimage does not exist.
     **/
    PreimageNotExist: GenericModuleError;
  };
  whitelist: {
    /**
     * The preimage of the call hash could not be loaded.
     **/
    UnavailablePreImage: GenericModuleError;

    /**
     * The call could not be decoded.
     **/
    UndecodableCall: GenericModuleError;

    /**
     * The weight of the decoded call was higher than the witness.
     **/
    InvalidCallWeightWitness: GenericModuleError;

    /**
     * The call was not whitelisted.
     **/
    CallIsNotWhitelisted: GenericModuleError;

    /**
     * The call was already whitelisted; No-Op.
     **/
    CallAlreadyWhitelisted: GenericModuleError;
  };
  councilCollective: {
    /**
     * Account is not a member
     **/
    NotMember: GenericModuleError;

    /**
     * Duplicate proposals not allowed
     **/
    DuplicateProposal: GenericModuleError;

    /**
     * Proposal must exist
     **/
    ProposalMissing: GenericModuleError;

    /**
     * Mismatched index
     **/
    WrongIndex: GenericModuleError;

    /**
     * Duplicate vote ignored
     **/
    DuplicateVote: GenericModuleError;

    /**
     * Members are already initialized!
     **/
    AlreadyInitialized: GenericModuleError;

    /**
     * The close call was made too early, before the end of the voting.
     **/
    TooEarly: GenericModuleError;

    /**
     * There can only be a maximum of `MaxProposals` active proposals.
     **/
    TooManyProposals: GenericModuleError;

    /**
     * The given weight bound for the proposal was too low.
     **/
    WrongProposalWeight: GenericModuleError;

    /**
     * The given length bound for the proposal was too low.
     **/
    WrongProposalLength: GenericModuleError;

    /**
     * Prime account is not a member
     **/
    PrimeAccountNotMember: GenericModuleError;
  };
  techCommitteeCollective: {
    /**
     * Account is not a member
     **/
    NotMember: GenericModuleError;

    /**
     * Duplicate proposals not allowed
     **/
    DuplicateProposal: GenericModuleError;

    /**
     * Proposal must exist
     **/
    ProposalMissing: GenericModuleError;

    /**
     * Mismatched index
     **/
    WrongIndex: GenericModuleError;

    /**
     * Duplicate vote ignored
     **/
    DuplicateVote: GenericModuleError;

    /**
     * Members are already initialized!
     **/
    AlreadyInitialized: GenericModuleError;

    /**
     * The close call was made too early, before the end of the voting.
     **/
    TooEarly: GenericModuleError;

    /**
     * There can only be a maximum of `MaxProposals` active proposals.
     **/
    TooManyProposals: GenericModuleError;

    /**
     * The given weight bound for the proposal was too low.
     **/
    WrongProposalWeight: GenericModuleError;

    /**
     * The given length bound for the proposal was too low.
     **/
    WrongProposalLength: GenericModuleError;

    /**
     * Prime account is not a member
     **/
    PrimeAccountNotMember: GenericModuleError;
  };
  treasuryCouncilCollective: {
    /**
     * Account is not a member
     **/
    NotMember: GenericModuleError;

    /**
     * Duplicate proposals not allowed
     **/
    DuplicateProposal: GenericModuleError;

    /**
     * Proposal must exist
     **/
    ProposalMissing: GenericModuleError;

    /**
     * Mismatched index
     **/
    WrongIndex: GenericModuleError;

    /**
     * Duplicate vote ignored
     **/
    DuplicateVote: GenericModuleError;

    /**
     * Members are already initialized!
     **/
    AlreadyInitialized: GenericModuleError;

    /**
     * The close call was made too early, before the end of the voting.
     **/
    TooEarly: GenericModuleError;

    /**
     * There can only be a maximum of `MaxProposals` active proposals.
     **/
    TooManyProposals: GenericModuleError;

    /**
     * The given weight bound for the proposal was too low.
     **/
    WrongProposalWeight: GenericModuleError;

    /**
     * The given length bound for the proposal was too low.
     **/
    WrongProposalLength: GenericModuleError;

    /**
     * Prime account is not a member
     **/
    PrimeAccountNotMember: GenericModuleError;
  };
  openTechCommitteeCollective: {
    /**
     * Account is not a member
     **/
    NotMember: GenericModuleError;

    /**
     * Duplicate proposals not allowed
     **/
    DuplicateProposal: GenericModuleError;

    /**
     * Proposal must exist
     **/
    ProposalMissing: GenericModuleError;

    /**
     * Mismatched index
     **/
    WrongIndex: GenericModuleError;

    /**
     * Duplicate vote ignored
     **/
    DuplicateVote: GenericModuleError;

    /**
     * Members are already initialized!
     **/
    AlreadyInitialized: GenericModuleError;

    /**
     * The close call was made too early, before the end of the voting.
     **/
    TooEarly: GenericModuleError;

    /**
     * There can only be a maximum of `MaxProposals` active proposals.
     **/
    TooManyProposals: GenericModuleError;

    /**
     * The given weight bound for the proposal was too low.
     **/
    WrongProposalWeight: GenericModuleError;

    /**
     * The given length bound for the proposal was too low.
     **/
    WrongProposalLength: GenericModuleError;

    /**
     * Prime account is not a member
     **/
    PrimeAccountNotMember: GenericModuleError;
  };
  treasury: {
    /**
     * Proposer's balance is too low.
     **/
    InsufficientProposersBalance: GenericModuleError;

    /**
     * No proposal or bounty at that index.
     **/
    InvalidIndex: GenericModuleError;

    /**
     * Too many approvals in the queue.
     **/
    TooManyApprovals: GenericModuleError;

    /**
     * The spend origin is valid but the amount it is allowed to spend is lower than the
     * amount to be spent.
     **/
    InsufficientPermission: GenericModuleError;

    /**
     * Proposal has not been approved.
     **/
    ProposalNotApproved: GenericModuleError;
  };
  crowdloanRewards: {
    /**
     * User trying to associate a native identity with a relay chain identity for posterior
     * reward claiming provided an already associated relay chain identity
     **/
    AlreadyAssociated: GenericModuleError;

    /**
     * Trying to introduce a batch that goes beyond the limits of the funds
     **/
    BatchBeyondFundPot: GenericModuleError;

    /**
     * First claim already done
     **/
    FirstClaimAlreadyDone: GenericModuleError;

    /**
     * The contribution is not high enough to be eligible for rewards
     **/
    RewardNotHighEnough: GenericModuleError;

    /**
     * User trying to associate a native identity with a relay chain identity for posterior
     * reward claiming provided a wrong signature
     **/
    InvalidClaimSignature: GenericModuleError;

    /**
     * User trying to claim the first free reward provided the wrong signature
     **/
    InvalidFreeClaimSignature: GenericModuleError;

    /**
     * User trying to claim an award did not have an claim associated with it. This may mean
     * they did not contribute to the crowdloan, or they have not yet associated a native id
     * with their contribution
     **/
    NoAssociatedClaim: GenericModuleError;

    /**
     * User trying to claim rewards has already claimed all rewards associated with its
     * identity and contribution
     **/
    RewardsAlreadyClaimed: GenericModuleError;

    /**
     * Reward vec has already been initialized
     **/
    RewardVecAlreadyInitialized: GenericModuleError;

    /**
     * Reward vec has not yet been fully initialized
     **/
    RewardVecNotFullyInitializedYet: GenericModuleError;

    /**
     * Rewards should match funds of the pallet
     **/
    RewardsDoNotMatchFund: GenericModuleError;

    /**
     * Initialize_reward_vec received too many contributors
     **/
    TooManyContributors: GenericModuleError;

    /**
     * Provided vesting period is not valid
     **/
    VestingPeriodNonValid: GenericModuleError;

    /**
     * User provided a signature from a non-contributor relay account
     **/
    NonContributedAddressProvided: GenericModuleError;

    /**
     * User submitted an unsifficient number of proofs to change the reward address
     **/
    InsufficientNumberOfValidProofs: GenericModuleError;
  };
  xcmpQueue: {
    /**
     * Failed to send XCM message.
     **/
    FailedToSend: GenericModuleError;

    /**
     * Bad XCM origin.
     **/
    BadXcmOrigin: GenericModuleError;

    /**
     * Bad XCM data.
     **/
    BadXcm: GenericModuleError;

    /**
     * Bad overweight index.
     **/
    BadOverweightIndex: GenericModuleError;

    /**
     * Provided weight is possibly not enough to execute the message.
     **/
    WeightOverLimit: GenericModuleError;
  };
  cumulusXcm: {};
  dmpQueue: {
    /**
     * The message index given is unknown.
     **/
    Unknown: GenericModuleError;

    /**
     * The amount of weight given is possibly not enough for executing the message.
     **/
    OverLimit: GenericModuleError;
  };
  polkadotXcm: {
    /**
     * The desired destination was unreachable, generally because there is a no way of routing
     * to it.
     **/
    Unreachable: GenericModuleError;

    /**
     * There was some other issue (i.e. not to do with routing) in sending the message.
     * Perhaps a lack of space for buffering the message.
     **/
    SendFailure: GenericModuleError;

    /**
     * The message execution fails the filter.
     **/
    Filtered: GenericModuleError;

    /**
     * The message's weight could not be determined.
     **/
    UnweighableMessage: GenericModuleError;

    /**
     * The destination `MultiLocation` provided cannot be inverted.
     **/
    DestinationNotInvertible: GenericModuleError;

    /**
     * The assets to be sent are empty.
     **/
    Empty: GenericModuleError;

    /**
     * Could not re-anchor the assets to declare the fees for the destination chain.
     **/
    CannotReanchor: GenericModuleError;

    /**
     * Too many assets have been attempted for transfer.
     **/
    TooManyAssets: GenericModuleError;

    /**
     * Origin is invalid for sending.
     **/
    InvalidOrigin: GenericModuleError;

    /**
     * The version of the `Versioned` value used is not able to be interpreted.
     **/
    BadVersion: GenericModuleError;

    /**
     * The given location could not be used (e.g. because it cannot be expressed in the
     * desired version of XCM).
     **/
    BadLocation: GenericModuleError;

    /**
     * The referenced subscription could not be found.
     **/
    NoSubscription: GenericModuleError;

    /**
     * The location is invalid since it already has a subscription from us.
     **/
    AlreadySubscribed: GenericModuleError;

    /**
     * Invalid asset for the operation.
     **/
    InvalidAsset: GenericModuleError;

    /**
     * The owner does not own (all) of the asset that they wish to do the operation on.
     **/
    LowBalance: GenericModuleError;

    /**
     * The asset owner has too many locks on the asset.
     **/
    TooManyLocks: GenericModuleError;

    /**
     * The given account is not an identifiable sovereign account for any location.
     **/
    AccountNotSovereign: GenericModuleError;

    /**
     * The operation required fees to be paid which the initiator could not meet.
     **/
    FeesNotMet: GenericModuleError;

    /**
     * A remote lock with the corresponding data could not be found.
     **/
    LockNotFound: GenericModuleError;

    /**
     * The unlock operation cannot succeed because there are still consumers of the lock.
     **/
    InUse: GenericModuleError;
  };
  assets: {
    /**
     * Account balance must be greater than or equal to the transfer amount.
     **/
    BalanceLow: GenericModuleError;

    /**
     * The account to alter does not exist.
     **/
    NoAccount: GenericModuleError;

    /**
     * The signing account has no permission to do the operation.
     **/
    NoPermission: GenericModuleError;

    /**
     * The given asset ID is unknown.
     **/
    Unknown: GenericModuleError;

    /**
     * The origin account is frozen.
     **/
    Frozen: GenericModuleError;

    /**
     * The asset ID is already taken.
     **/
    InUse: GenericModuleError;

    /**
     * Invalid witness data given.
     **/
    BadWitness: GenericModuleError;

    /**
     * Minimum balance should be non-zero.
     **/
    MinBalanceZero: GenericModuleError;

    /**
     * Unable to increment the consumer reference counters on the account. Either no provider
     * reference exists to allow a non-zero balance of a non-self-sufficient asset, or one
     * fewer then the maximum number of consumers has been reached.
     **/
    UnavailableConsumer: GenericModuleError;

    /**
     * Invalid metadata given.
     **/
    BadMetadata: GenericModuleError;

    /**
     * No approval exists that would allow the transfer.
     **/
    Unapproved: GenericModuleError;

    /**
     * The source account would not survive the transfer and it needs to stay alive.
     **/
    WouldDie: GenericModuleError;

    /**
     * The asset-account already exists.
     **/
    AlreadyExists: GenericModuleError;

    /**
     * The asset-account doesn't have an associated deposit.
     **/
    NoDeposit: GenericModuleError;

    /**
     * The operation would result in funds being burned.
     **/
    WouldBurn: GenericModuleError;

    /**
     * The asset is a live asset and is actively being used. Usually emit for operations such
     * as `start_destroy` which require the asset to be in a destroying state.
     **/
    LiveAsset: GenericModuleError;

    /**
     * The asset is not live, and likely being destroyed.
     **/
    AssetNotLive: GenericModuleError;

    /**
     * The asset status is not the expected status.
     **/
    IncorrectStatus: GenericModuleError;

    /**
     * The asset should be frozen before the given operation.
     **/
    NotFrozen: GenericModuleError;

    /**
     * Callback action resulted in error
     **/
    CallbackFailed: GenericModuleError;
  };
  assetManager: {
    ErrorCreatingAsset: GenericModuleError;
    AssetAlreadyExists: GenericModuleError;
    AssetDoesNotExist: GenericModuleError;
    TooLowNumAssetsWeightHint: GenericModuleError;
    LocalAssetLimitReached: GenericModuleError;
    ErrorDestroyingAsset: GenericModuleError;
    NotSufficientDeposit: GenericModuleError;
    NonExistentLocalAsset: GenericModuleError;
  };
  xTokens: {
    /**
     * Asset has no reserve location.
     **/
    AssetHasNoReserve: GenericModuleError;

    /**
     * Not cross-chain transfer.
     **/
    NotCrossChainTransfer: GenericModuleError;

    /**
     * Invalid transfer destination.
     **/
    InvalidDest: GenericModuleError;

    /**
     * Currency is not cross-chain transferable.
     **/
    NotCrossChainTransferableCurrency: GenericModuleError;

    /**
     * The message's weight could not be determined.
     **/
    UnweighableMessage: GenericModuleError;

    /**
     * XCM execution failed.
     **/
    XcmExecutionFailed: GenericModuleError;

    /**
     * Could not re-anchor the assets to declare the fees for the
     * destination chain.
     **/
    CannotReanchor: GenericModuleError;

    /**
     * Could not get ancestry of asset reserve location.
     **/
    InvalidAncestry: GenericModuleError;

    /**
     * The MultiAsset is invalid.
     **/
    InvalidAsset: GenericModuleError;

    /**
     * The destination `MultiLocation` provided cannot be inverted.
     **/
    DestinationNotInvertible: GenericModuleError;

    /**
     * The version of the `Versioned` value used is not able to be
     * interpreted.
     **/
    BadVersion: GenericModuleError;

    /**
     * We tried sending distinct asset and fee but they have different
     * reserve chains.
     **/
    DistinctReserveForAssetAndFee: GenericModuleError;

    /**
     * The fee is zero.
     **/
    ZeroFee: GenericModuleError;

    /**
     * The transfering asset amount is zero.
     **/
    ZeroAmount: GenericModuleError;

    /**
     * The number of assets to be sent is over the maximum.
     **/
    TooManyAssetsBeingSent: GenericModuleError;

    /**
     * The specified index does not exist in a MultiAssets struct.
     **/
    AssetIndexNonExistent: GenericModuleError;

    /**
     * Fee is not enough.
     **/
    FeeNotEnough: GenericModuleError;

    /**
     * Not supported MultiLocation
     **/
    NotSupportedMultiLocation: GenericModuleError;

    /**
     * MinXcmFee not registered for certain reserve location
     **/
    MinXcmFeeNotDefined: GenericModuleError;
  };
  xcmTransactor: {
    IndexAlreadyClaimed: GenericModuleError;
    UnclaimedIndex: GenericModuleError;
    NotOwner: GenericModuleError;
    UnweighableMessage: GenericModuleError;
    CannotReanchor: GenericModuleError;
    AssetHasNoReserve: GenericModuleError;
    InvalidDest: GenericModuleError;
    NotCrossChainTransfer: GenericModuleError;
    AssetIsNotReserveInDestination: GenericModuleError;
    DestinationNotInvertible: GenericModuleError;
    ErrorDelivering: GenericModuleError;
    DispatchWeightBiggerThanTotalWeight: GenericModuleError;
    WeightOverflow: GenericModuleError;
    AmountOverflow: GenericModuleError;
    TransactorInfoNotSet: GenericModuleError;
    NotCrossChainTransferableCurrency: GenericModuleError;
    XcmExecuteError: GenericModuleError;
    BadVersion: GenericModuleError;
    MaxWeightTransactReached: GenericModuleError;
    UnableToWithdrawAsset: GenericModuleError;
    FeePerSecondNotSet: GenericModuleError;
    SignedTransactNotAllowedForDestination: GenericModuleError;
    FailedMultiLocationToJunction: GenericModuleError;
    HrmpHandlerNotImplemented: GenericModuleError;
    TooMuchFeeUsed: GenericModuleError;
    ErrorValidating: GenericModuleError;
    RefundNotSupportedWithTransactInfo: GenericModuleError;
  };
  localAssets: {
    /**
     * Account balance must be greater than or equal to the transfer amount.
     **/
    BalanceLow: GenericModuleError;

    /**
     * The account to alter does not exist.
     **/
    NoAccount: GenericModuleError;

    /**
     * The signing account has no permission to do the operation.
     **/
    NoPermission: GenericModuleError;

    /**
     * The given asset ID is unknown.
     **/
    Unknown: GenericModuleError;

    /**
     * The origin account is frozen.
     **/
    Frozen: GenericModuleError;

    /**
     * The asset ID is already taken.
     **/
    InUse: GenericModuleError;

    /**
     * Invalid witness data given.
     **/
    BadWitness: GenericModuleError;

    /**
     * Minimum balance should be non-zero.
     **/
    MinBalanceZero: GenericModuleError;

    /**
     * Unable to increment the consumer reference counters on the account. Either no provider
     * reference exists to allow a non-zero balance of a non-self-sufficient asset, or one
     * fewer then the maximum number of consumers has been reached.
     **/
    UnavailableConsumer: GenericModuleError;

    /**
     * Invalid metadata given.
     **/
    BadMetadata: GenericModuleError;

    /**
     * No approval exists that would allow the transfer.
     **/
    Unapproved: GenericModuleError;

    /**
     * The source account would not survive the transfer and it needs to stay alive.
     **/
    WouldDie: GenericModuleError;

    /**
     * The asset-account already exists.
     **/
    AlreadyExists: GenericModuleError;

    /**
     * The asset-account doesn't have an associated deposit.
     **/
    NoDeposit: GenericModuleError;

    /**
     * The operation would result in funds being burned.
     **/
    WouldBurn: GenericModuleError;

    /**
     * The asset is a live asset and is actively being used. Usually emit for operations such
     * as `start_destroy` which require the asset to be in a destroying state.
     **/
    LiveAsset: GenericModuleError;

    /**
     * The asset is not live, and likely being destroyed.
     **/
    AssetNotLive: GenericModuleError;

    /**
     * The asset status is not the expected status.
     **/
    IncorrectStatus: GenericModuleError;

    /**
     * The asset should be frozen before the given operation.
     **/
    NotFrozen: GenericModuleError;

    /**
     * Callback action resulted in error
     **/
    CallbackFailed: GenericModuleError;
  };
  ethereumXcm: {
    /**
     * Xcm to Ethereum execution is suspended
     **/
    EthereumXcmExecutionSuspended: GenericModuleError;
  };
  randomness: {
    RequestCounterOverflowed: GenericModuleError;
    RequestFeeOverflowed: GenericModuleError;
    MustRequestAtLeastOneWord: GenericModuleError;
    CannotRequestMoreWordsThanMax: GenericModuleError;
    CannotRequestRandomnessAfterMaxDelay: GenericModuleError;
    CannotRequestRandomnessBeforeMinDelay: GenericModuleError;
    RequestDNE: GenericModuleError;
    RequestCannotYetBeFulfilled: GenericModuleError;
    OnlyRequesterCanIncreaseFee: GenericModuleError;
    RequestHasNotExpired: GenericModuleError;
    RandomnessResultDNE: GenericModuleError;
    RandomnessResultNotFilled: GenericModuleError;
  };
}
