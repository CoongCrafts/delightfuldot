// Generated by @delightfuldot/codegen

import type { GenericChainStorage } from '@delightfuldot/types';
import type {
  AccountId32Like,
  H256,
  Bytes,
  Digest,
  FixedBytes,
  AccountId32,
  FixedU128,
  Perbill,
  Percent,
  Data,
  FixedU64,
} from '@delightfuldot/codecs';
import type {
  FrameSystemAccountInfo,
  FrameSupportDispatchPerDispatchClass,
  FrameSystemEventRecord,
  FrameSystemLastRuntimeUpgradeInfo,
  FrameSystemPhase,
  SpConsensusBabeAppPublic,
  SpConsensusSlotsSlot,
  SpConsensusBabeDigestsNextConfigDescriptor,
  SpConsensusBabeDigestsPreDigest,
  SpConsensusBabeBabeEpochConfiguration,
  PalletBalancesAccountData,
  PalletBalancesBalanceLock,
  PalletBalancesReserveData,
  PalletBalancesIdAmount,
  PalletBalancesIdAmount002,
  PalletTransactionPaymentReleases,
  PalletElectionProviderMultiPhasePhase,
  PalletElectionProviderMultiPhaseReadySolution,
  PalletElectionProviderMultiPhaseRoundSnapshot,
  PalletElectionProviderMultiPhaseSolutionOrSnapshotSize,
  SpNposElectionsElectionScore,
  PalletElectionProviderMultiPhaseSignedSignedSubmission,
  PalletStakingStakingLedger,
  PalletStakingRewardDestination,
  PalletStakingValidatorPrefs,
  PalletStakingNominations,
  PalletStakingActiveEraInfo,
  PalletStakingExposure,
  PalletStakingEraRewardPoints,
  PalletStakingForcing,
  PalletStakingUnappliedSlash,
  PalletStakingSlashingSlashingSpans,
  PalletStakingSlashingSpanRecord,
  KitchensinkRuntimeSessionKeys,
  SpCoreCryptoKeyTypeId,
  FrameSupportPreimagesBounded,
  PalletDemocracyReferendumInfo,
  PalletDemocracyVoteVoting,
  PalletDemocracyVoteThreshold,
  PalletDemocracyMetadataOwner,
  KitchensinkRuntimeRuntimeCall,
  PalletCollectiveVotes,
  PalletElectionsPhragmenSeatHolder,
  PalletElectionsPhragmenVoter,
  PalletGrandpaStoredState,
  PalletGrandpaStoredPendingChange,
  PalletTreasuryProposal,
  PalletContractsWasmCodeInfo,
  PalletContractsStorageContractInfo,
  PalletContractsStorageDeletionQueueManager,
  PalletImOnlineSr25519AppSr25519Public,
  SpAuthorityDiscoveryAppPublic,
  SpStakingOffenceOffenceDetails,
  PalletIdentityRegistration,
  PalletIdentityRegistrarInfo,
  PalletSocietyGroupParams,
  PalletSocietyMemberRecord,
  PalletSocietyPayoutRecord,
  PalletSocietyBid,
  PalletSocietyCandidacy,
  PalletSocietyVote,
  PalletSocietyIntakeRecord,
  PalletSocietyTally,
  PalletRecoveryRecoveryConfig,
  PalletRecoveryActiveRecovery,
  PalletVestingVestingInfo,
  PalletVestingReleases,
  PalletSchedulerScheduled,
  PalletPreimageRequestStatus,
  PalletProxyProxyDefinition,
  PalletProxyAnnouncement,
  PalletMultisigMultisig,
  PalletBountiesBounty,
  PalletTipsOpenTip,
  PalletAssetsAssetDetails,
  PalletAssetsAssetAccount,
  PalletAssetsApproval,
  PalletAssetsAssetMetadata,
  PalletLotteryLotteryConfig,
  PalletNisBid,
  PalletNisSummaryRecord,
  PalletNisReceiptRecord,
  PalletUniquesCollectionDetails,
  PalletUniquesItemDetails,
  PalletUniquesCollectionMetadata,
  PalletUniquesItemMetadata,
  PalletNftsCollectionDetails,
  PalletNftsBitFlagsCollectionRole,
  PalletNftsItemDetails,
  PalletNftsCollectionMetadata,
  PalletNftsItemMetadata,
  PalletNftsAttributeDeposit,
  PalletNftsAttributeNamespace,
  PalletNftsPendingSwap,
  PalletNftsCollectionConfig,
  PalletNftsItemConfig,
  PalletNftFractionalizationDetails,
  PalletSalaryStatusType,
  PalletSalaryClaimantStatus,
  PalletCoreFellowshipParamsType,
  PalletCoreFellowshipMemberStatus,
  PalletCoreFellowshipWish,
  PalletTransactionStorageTransactionInfo,
  PalletBagsListListNode,
  PalletBagsListListBag,
  PalletStateTrieMigrationMigrationTask,
  PalletStateTrieMigrationMigrationLimits,
  PalletChildBountiesChildBounty,
  PalletReferendaReferendumInfo,
  PalletConvictionVotingVoteVoting,
  PalletAllianceCid,
  PalletAllianceMemberRole,
  PalletNominationPoolsPoolMember,
  PalletNominationPoolsBondedPoolInner,
  PalletNominationPoolsRewardPool,
  PalletNominationPoolsSubPools,
  PalletNominationPoolsClaimPermission,
  PalletReferendaReferendumInfoTally,
  PalletRankedCollectiveMemberRecord,
  PalletRankedCollectiveVoteRecord,
  PalletAssetConversionPoolInfo,
  PalletAssetConversionNativeOrAssetId,
  PalletFastUnstakeUnstakeRequest,
  PalletMessageQueueBookState,
  PalletMessageQueuePage,
  PalletBrokerConfigRecord,
  PalletBrokerScheduleItem,
  PalletBrokerLeaseRecordItem,
  PalletBrokerStatusRecord,
  PalletBrokerSaleInfoRecord,
  PalletBrokerAllowedRenewalRecord,
  PalletBrokerAllowedRenewalId,
  PalletBrokerRegionRecord,
  PalletBrokerRegionId,
  PalletBrokerContributionRecord,
  PalletBrokerPoolIoRecord,
  PalletBrokerInstaPoolHistoryRecord,
} from './types';

export interface ChainStorage extends GenericChainStorage {
  system: {
    /**
     * The full account information for a particular account ID.
     **/
    account(arg: AccountId32Like): Promise<FrameSystemAccountInfo>;

    /**
     * Total extrinsics count for the current block.
     **/
    extrinsicCount(): Promise<number | undefined>;

    /**
     * The current weight for the block.
     **/
    blockWeight(): Promise<FrameSupportDispatchPerDispatchClass>;

    /**
     * Total length (in bytes) for all extrinsics put together, for the current block.
     **/
    allExtrinsicsLen(): Promise<number | undefined>;

    /**
     * Map of block numbers to block hashes.
     **/
    blockHash(arg: number): Promise<H256>;

    /**
     * Extrinsics data for the current block (maps an extrinsic's index to its data).
     **/
    extrinsicData(arg: number): Promise<Bytes>;

    /**
     * The current block number being processed. Set by `execute_block`.
     **/
    number(): Promise<number>;

    /**
     * Hash of the previous block.
     **/
    parentHash(): Promise<H256>;

    /**
     * Digest of the current block, also part of the block header.
     **/
    digest(): Promise<Digest>;

    /**
     * Events deposited for the current block.
     *
     * NOTE: The item is unbound and should therefore never be read on chain.
     * It could otherwise inflate the PoV size of a block.
     *
     * Events have a large in-memory size. Box the events to not go out-of-memory
     * just in case someone still reads them from within the runtime.
     **/
    events(): Promise<Array<FrameSystemEventRecord>>;

    /**
     * The number of events in the `Events<T>` list.
     **/
    eventCount(): Promise<number>;

    /**
     * Mapping between a topic (represented by T::Hash) and a vector of indexes
     * of events in the `<Events<T>>` list.
     *
     * All topic vectors have deterministic storage locations depending on the topic. This
     * allows light-clients to leverage the changes trie storage tracking mechanism and
     * in case of changes fetch the list of events of interest.
     *
     * The value has the type `(BlockNumberFor<T>, EventIndex)` because if we used only just
     * the `EventIndex` then in case if the topic has the same contents on the next block
     * no notification will be triggered thus the event might be lost.
     **/
    eventTopics(arg: H256): Promise<Array<[number, number]>>;

    /**
     * Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened.
     **/
    lastRuntimeUpgrade(): Promise<FrameSystemLastRuntimeUpgradeInfo | undefined>;

    /**
     * True if we have upgraded so that `type RefCount` is `u32`. False (default) if not.
     **/
    upgradedToU32RefCount(): Promise<boolean>;

    /**
     * True if we have upgraded so that AccountInfo contains three types of `RefCount`. False
     * (default) if not.
     **/
    upgradedToTripleRefCount(): Promise<boolean>;

    /**
     * The execution phase of the block.
     **/
    executionPhase(): Promise<FrameSystemPhase | undefined>;
  };
  babe: {
    /**
     * Current epoch index.
     **/
    epochIndex(): Promise<bigint>;

    /**
     * Current epoch authorities.
     **/
    authorities(): Promise<Array<[SpConsensusBabeAppPublic, bigint]>>;

    /**
     * The slot at which the first epoch actually started. This is 0
     * until the first block of the chain.
     **/
    genesisSlot(): Promise<SpConsensusSlotsSlot>;

    /**
     * Current slot number.
     **/
    currentSlot(): Promise<SpConsensusSlotsSlot>;

    /**
     * The epoch randomness for the *current* epoch.
     *
     * # Security
     *
     * This MUST NOT be used for gambling, as it can be influenced by a
     * malicious validator in the short term. It MAY be used in many
     * cryptographic protocols, however, so long as one remembers that this
     * (like everything else on-chain) it is public. For example, it can be
     * used where a number is needed that cannot have been chosen by an
     * adversary, for purposes such as public-coin zero-knowledge proofs.
     **/
    randomness(): Promise<FixedBytes<32>>;

    /**
     * Pending epoch configuration change that will be applied when the next epoch is enacted.
     **/
    pendingEpochConfigChange(): Promise<SpConsensusBabeDigestsNextConfigDescriptor | undefined>;

    /**
     * Next epoch randomness.
     **/
    nextRandomness(): Promise<FixedBytes<32>>;

    /**
     * Next epoch authorities.
     **/
    nextAuthorities(): Promise<Array<[SpConsensusBabeAppPublic, bigint]>>;

    /**
     * Randomness under construction.
     *
     * We make a trade-off between storage accesses and list length.
     * We store the under-construction randomness in segments of up to
     * `UNDER_CONSTRUCTION_SEGMENT_LENGTH`.
     *
     * Once a segment reaches this length, we begin the next one.
     * We reset all segments and return to `0` at the beginning of every
     * epoch.
     **/
    segmentIndex(): Promise<number>;

    /**
     * TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay.
     **/
    underConstruction(arg: number): Promise<Array<FixedBytes<32>>>;

    /**
     * Temporary value (cleared at block finalization) which is `Some`
     * if per-block initialization has already been called for current block.
     **/
    initialized(): Promise<SpConsensusBabeDigestsPreDigest | undefined | undefined>;

    /**
     * This field should always be populated during block processing unless
     * secondary plain slots are enabled (which don't contain a VRF output).
     *
     * It is set in `on_finalize`, before it will contain the value from the last block.
     **/
    authorVrfRandomness(): Promise<FixedBytes<32> | undefined>;

    /**
     * The block numbers when the last and current epoch have started, respectively `N-1` and
     * `N`.
     * NOTE: We track this is in order to annotate the block number when a given pool of
     * entropy was fixed (i.e. it was known to chain observers). Since epochs are defined in
     * slots, which may be skipped, the block numbers may not line up with the slot numbers.
     **/
    epochStart(): Promise<[number, number]>;

    /**
     * How late the current block is compared to its parent.
     *
     * This entry is populated as part of block execution and is cleaned up
     * on block finalization. Querying this storage entry outside of block
     * execution context should always yield zero.
     **/
    lateness(): Promise<number>;

    /**
     * The configuration for the current epoch. Should never be `None` as it is initialized in
     * genesis.
     **/
    epochConfig(): Promise<SpConsensusBabeBabeEpochConfiguration | undefined>;

    /**
     * The configuration for the next epoch, `None` if the config will not change
     * (you can fallback to `EpochConfig` instead in that case).
     **/
    nextEpochConfig(): Promise<SpConsensusBabeBabeEpochConfiguration | undefined>;

    /**
     * A list of the last 100 skipped epochs and the corresponding session index
     * when the epoch was skipped.
     *
     * This is only used for validating equivocation proofs. An equivocation proof
     * must contains a key-ownership proof for a given session, therefore we need a
     * way to tie together sessions and epoch indices, i.e. we need to validate that
     * a validator was the owner of a given key on a given session, and what the
     * active epoch index was during that session.
     **/
    skippedEpochs(): Promise<Array<[bigint, number]>>;
  };
  timestamp: {
    /**
     * Current time for the current block.
     **/
    now(): Promise<bigint>;

    /**
     * Did the timestamp get updated in this block?
     **/
    didUpdate(): Promise<boolean>;
  };
  authorship: {
    /**
     * Author of current block.
     **/
    author(): Promise<AccountId32 | undefined>;
  };
  indices: {
    /**
     * The lookup from index to account.
     **/
    accounts(arg: number): Promise<[AccountId32, bigint, boolean] | undefined>;
  };
  balances: {
    /**
     * The total units issued in the system.
     **/
    totalIssuance(): Promise<bigint>;

    /**
     * The total units of outstanding deactivated balance in the system.
     **/
    inactiveIssuance(): Promise<bigint>;

    /**
     * The Balances pallet example of storing the balance of an account.
     *
     * # Example
     *
     * ```nocompile
     * impl pallet_balances::Config for Runtime {
     * type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>
     * }
     * ```
     *
     * You can also store the balance of an account in the `System` pallet.
     *
     * # Example
     *
     * ```nocompile
     * impl pallet_balances::Config for Runtime {
     * type AccountStore = System
     * }
     * ```
     *
     * But this comes with tradeoffs, storing account balances in the system pallet stores
     * `frame_system` data alongside the account data contrary to storing account balances in the
     * `Balances` pallet, which uses a `StorageMap` to store balances data only.
     * NOTE: This is only used in the case that this pallet is used to store balances.
     **/
    account(arg: AccountId32Like): Promise<PalletBalancesAccountData>;

    /**
     * Any liquidity locks on some account balances.
     * NOTE: Should only be accessed when setting, changing and freeing a lock.
     **/
    locks(arg: AccountId32Like): Promise<Array<PalletBalancesBalanceLock>>;

    /**
     * Named reserves on some account balances.
     **/
    reserves(arg: AccountId32Like): Promise<Array<PalletBalancesReserveData>>;

    /**
     * Holds on account balances.
     **/
    holds(arg: AccountId32Like): Promise<Array<PalletBalancesIdAmount>>;

    /**
     * Freeze locks on account balances.
     **/
    freezes(arg: AccountId32Like): Promise<Array<PalletBalancesIdAmount002>>;
  };
  transactionPayment: {
    nextFeeMultiplier(): Promise<FixedU128>;
    storageVersion(): Promise<PalletTransactionPaymentReleases>;
  };
  electionProviderMultiPhase: {
    /**
     * Internal counter for the number of rounds.
     *
     * This is useful for de-duplication of transactions submitted to the pool, and general
     * diagnostics of the pallet.
     *
     * This is merely incremented once per every time that an upstream `elect` is called.
     **/
    round(): Promise<number>;

    /**
     * Current phase.
     **/
    currentPhase(): Promise<PalletElectionProviderMultiPhasePhase>;

    /**
     * Current best solution, signed or unsigned, queued to be returned upon `elect`.
     *
     * Always sorted by score.
     **/
    queuedSolution(): Promise<PalletElectionProviderMultiPhaseReadySolution | undefined>;

    /**
     * Snapshot data of the round.
     *
     * This is created at the beginning of the signed phase and cleared upon calling `elect`.
     **/
    snapshot(): Promise<PalletElectionProviderMultiPhaseRoundSnapshot | undefined>;

    /**
     * Desired number of targets to elect for this round.
     *
     * Only exists when [`Snapshot`] is present.
     **/
    desiredTargets(): Promise<number | undefined>;

    /**
     * The metadata of the [`RoundSnapshot`]
     *
     * Only exists when [`Snapshot`] is present.
     **/
    snapshotMetadata(): Promise<PalletElectionProviderMultiPhaseSolutionOrSnapshotSize | undefined>;

    /**
     * The next index to be assigned to an incoming signed submission.
     *
     * Every accepted submission is assigned a unique index; that index is bound to that particular
     * submission for the duration of the election. On election finalization, the next index is
     * reset to 0.
     *
     * We can't just use `SignedSubmissionIndices.len()`, because that's a bounded set; past its
     * capacity, it will simply saturate. We can't just iterate over `SignedSubmissionsMap`,
     * because iteration is slow. Instead, we store the value here.
     **/
    signedSubmissionNextIndex(): Promise<number>;

    /**
     * A sorted, bounded vector of `(score, block_number, index)`, where each `index` points to a
     * value in `SignedSubmissions`.
     *
     * We never need to process more than a single signed submission at a time. Signed submissions
     * can be quite large, so we're willing to pay the cost of multiple database accesses to access
     * them one at a time instead of reading and decoding all of them at once.
     **/
    signedSubmissionIndices(): Promise<Array<[SpNposElectionsElectionScore, number, number]>>;

    /**
     * Unchecked, signed solutions.
     *
     * Together with `SubmissionIndices`, this stores a bounded set of `SignedSubmissions` while
     * allowing us to keep only a single one in memory at a time.
     *
     * Twox note: the key of the map is an auto-incrementing index which users cannot inspect or
     * affect; we shouldn't need a cryptographically secure hasher.
     **/
    signedSubmissionsMap(arg: number): Promise<PalletElectionProviderMultiPhaseSignedSignedSubmission | undefined>;

    /**
     * The minimum score that each 'untrusted' solution must attain in order to be considered
     * feasible.
     *
     * Can be set via `set_minimum_untrusted_score`.
     **/
    minimumUntrustedScore(): Promise<SpNposElectionsElectionScore | undefined>;
  };
  staking: {
    /**
     * The ideal number of active validators.
     **/
    validatorCount(): Promise<number>;

    /**
     * Minimum number of staking participants before emergency conditions are imposed.
     **/
    minimumValidatorCount(): Promise<number>;

    /**
     * Any validators that may never be slashed or forcibly kicked. It's a Vec since they're
     * easy to initialize and the performance hit is minimal (we expect no more than four
     * invulnerables) and restricted to testnets.
     **/
    invulnerables(): Promise<Array<AccountId32>>;

    /**
     * Map from all locked "stash" accounts to the controller account.
     *
     * TWOX-NOTE: SAFE since `AccountId` is a secure hash.
     **/
    bonded(arg: AccountId32Like): Promise<AccountId32 | undefined>;

    /**
     * The minimum active bond to become and maintain the role of a nominator.
     **/
    minNominatorBond(): Promise<bigint>;

    /**
     * The minimum active bond to become and maintain the role of a validator.
     **/
    minValidatorBond(): Promise<bigint>;

    /**
     * The minimum active nominator stake of the last successful election.
     **/
    minimumActiveStake(): Promise<bigint>;

    /**
     * The minimum amount of commission that validators can set.
     *
     * If set to `0`, no limit exists.
     **/
    minCommission(): Promise<Perbill>;

    /**
     * Map from all (unlocked) "controller" accounts to the info regarding the staking.
     **/
    ledger(arg: AccountId32Like): Promise<PalletStakingStakingLedger | undefined>;

    /**
     * Where the reward payment should be made. Keyed by stash.
     *
     * TWOX-NOTE: SAFE since `AccountId` is a secure hash.
     **/
    payee(arg: AccountId32Like): Promise<PalletStakingRewardDestination>;

    /**
     * The map from (wannabe) validator stash key to the preferences of that validator.
     *
     * TWOX-NOTE: SAFE since `AccountId` is a secure hash.
     **/
    validators(arg: AccountId32Like): Promise<PalletStakingValidatorPrefs>;

    /**
     * Counter for the related counted storage map
     **/
    counterForValidators(): Promise<number>;

    /**
     * The maximum validator count before we stop allowing new validators to join.
     *
     * When this value is not set, no limits are enforced.
     **/
    maxValidatorsCount(): Promise<number | undefined>;

    /**
     * The map from nominator stash key to their nomination preferences, namely the validators that
     * they wish to support.
     *
     * Note that the keys of this storage map might become non-decodable in case the
     * account's [`NominationsQuota::MaxNominations`] configuration is decreased.
     * In this rare case, these nominators
     * are still existent in storage, their key is correct and retrievable (i.e. `contains_key`
     * indicates that they exist), but their value cannot be decoded. Therefore, the non-decodable
     * nominators will effectively not-exist, until they re-submit their preferences such that it
     * is within the bounds of the newly set `Config::MaxNominations`.
     *
     * This implies that `::iter_keys().count()` and `::iter().count()` might return different
     * values for this map. Moreover, the main `::count()` is aligned with the former, namely the
     * number of keys that exist.
     *
     * Lastly, if any of the nominators become non-decodable, they can be chilled immediately via
     * [`Call::chill_other`] dispatchable by anyone.
     *
     * TWOX-NOTE: SAFE since `AccountId` is a secure hash.
     **/
    nominators(arg: AccountId32Like): Promise<PalletStakingNominations | undefined>;

    /**
     * Counter for the related counted storage map
     **/
    counterForNominators(): Promise<number>;

    /**
     * The maximum nominator count before we stop allowing new validators to join.
     *
     * When this value is not set, no limits are enforced.
     **/
    maxNominatorsCount(): Promise<number | undefined>;

    /**
     * The current era index.
     *
     * This is the latest planned era, depending on how the Session pallet queues the validator
     * set, it might be active or not.
     **/
    currentEra(): Promise<number | undefined>;

    /**
     * The active era information, it holds index and start.
     *
     * The active era is the era being currently rewarded. Validator set of this era must be
     * equal to [`SessionInterface::validators`].
     **/
    activeEra(): Promise<PalletStakingActiveEraInfo | undefined>;

    /**
     * The session index at which the era start for the last `HISTORY_DEPTH` eras.
     *
     * Note: This tracks the starting session (i.e. session index when era start being active)
     * for the eras in `[CurrentEra - HISTORY_DEPTH, CurrentEra]`.
     **/
    erasStartSessionIndex(arg: number): Promise<number | undefined>;

    /**
     * Exposure of validator at era.
     *
     * This is keyed first by the era index to allow bulk deletion and then the stash account.
     *
     * Is it removed after `HISTORY_DEPTH` eras.
     * If stakers hasn't been set or has been removed then empty exposure is returned.
     **/
    erasStakers(arg: [number, AccountId32Like]): Promise<PalletStakingExposure>;

    /**
     * Clipped Exposure of validator at era.
     *
     * This is similar to [`ErasStakers`] but number of nominators exposed is reduced to the
     * `T::MaxNominatorRewardedPerValidator` biggest stakers.
     * (Note: the field `total` and `own` of the exposure remains unchanged).
     * This is used to limit the i/o cost for the nominator payout.
     *
     * This is keyed fist by the era index to allow bulk deletion and then the stash account.
     *
     * Is it removed after `HISTORY_DEPTH` eras.
     * If stakers hasn't been set or has been removed then empty exposure is returned.
     **/
    erasStakersClipped(arg: [number, AccountId32Like]): Promise<PalletStakingExposure>;

    /**
     * Similar to `ErasStakers`, this holds the preferences of validators.
     *
     * This is keyed first by the era index to allow bulk deletion and then the stash account.
     *
     * Is it removed after `HISTORY_DEPTH` eras.
     **/
    erasValidatorPrefs(arg: [number, AccountId32Like]): Promise<PalletStakingValidatorPrefs>;

    /**
     * The total validator era payout for the last `HISTORY_DEPTH` eras.
     *
     * Eras that haven't finished yet or has been removed doesn't have reward.
     **/
    erasValidatorReward(arg: number): Promise<bigint | undefined>;

    /**
     * Rewards for the last `HISTORY_DEPTH` eras.
     * If reward hasn't been set or has been removed then 0 reward is returned.
     **/
    erasRewardPoints(arg: number): Promise<PalletStakingEraRewardPoints>;

    /**
     * The total amount staked for the last `HISTORY_DEPTH` eras.
     * If total hasn't been set or has been removed then 0 stake is returned.
     **/
    erasTotalStake(arg: number): Promise<bigint>;

    /**
     * Mode of era forcing.
     **/
    forceEra(): Promise<PalletStakingForcing>;

    /**
     * The percentage of the slash that is distributed to reporters.
     *
     * The rest of the slashed value is handled by the `Slash`.
     **/
    slashRewardFraction(): Promise<Perbill>;

    /**
     * The amount of currency given to reporters of a slash event which was
     * canceled by extraordinary circumstances (e.g. governance).
     **/
    canceledSlashPayout(): Promise<bigint>;

    /**
     * All unapplied slashes that are queued for later.
     **/
    unappliedSlashes(arg: number): Promise<Array<PalletStakingUnappliedSlash>>;

    /**
     * A mapping from still-bonded eras to the first session index of that era.
     *
     * Must contains information for eras for the range:
     * `[active_era - bounding_duration; active_era]`
     **/
    bondedEras(): Promise<Array<[number, number]>>;

    /**
     * All slashing events on validators, mapped by era to the highest slash proportion
     * and slash value of the era.
     **/
    validatorSlashInEra(arg: [number, AccountId32Like]): Promise<[Perbill, bigint] | undefined>;

    /**
     * All slashing events on nominators, mapped by era to the highest slash value of the era.
     **/
    nominatorSlashInEra(arg: [number, AccountId32Like]): Promise<bigint | undefined>;

    /**
     * Slashing spans for stash accounts.
     **/
    slashingSpans(arg: AccountId32Like): Promise<PalletStakingSlashingSlashingSpans | undefined>;

    /**
     * Records information about the maximum slash of a stash within a slashing span,
     * as well as how much reward has been paid out.
     **/
    spanSlash(arg: [AccountId32Like, number]): Promise<PalletStakingSlashingSpanRecord>;

    /**
     * The last planned session scheduled by the session pallet.
     *
     * This is basically in sync with the call to [`pallet_session::SessionManager::new_session`].
     **/
    currentPlannedSession(): Promise<number>;

    /**
     * Indices of validators that have offended in the active era and whether they are currently
     * disabled.
     *
     * This value should be a superset of disabled validators since not all offences lead to the
     * validator being disabled (if there was no slash). This is needed to track the percentage of
     * validators that have offended in the current era, ensuring a new era is forced if
     * `OffendingValidatorsThreshold` is reached. The vec is always kept sorted so that we can find
     * whether a given validator has previously offended using binary search. It gets cleared when
     * the era ends.
     **/
    offendingValidators(): Promise<Array<[number, boolean]>>;

    /**
     * The threshold for when users can start calling `chill_other` for other validators /
     * nominators. The threshold is compared to the actual number of validators / nominators
     * (`CountFor*`) in the system compared to the configured max (`Max*Count`).
     **/
    chillThreshold(): Promise<Percent | undefined>;
  };
  session: {
    /**
     * The current set of validators.
     **/
    validators(): Promise<Array<AccountId32>>;

    /**
     * Current index of the session.
     **/
    currentIndex(): Promise<number>;

    /**
     * True if the underlying economic identities or weighting behind the validators
     * has changed in the queued validator set.
     **/
    queuedChanged(): Promise<boolean>;

    /**
     * The queued keys for the next session. When the next session begins, these keys
     * will be used to determine the validator's session keys.
     **/
    queuedKeys(): Promise<Array<[AccountId32, KitchensinkRuntimeSessionKeys]>>;

    /**
     * Indices of disabled validators.
     *
     * The vec is always kept sorted so that we can find whether a given validator is
     * disabled using binary search. It gets cleared when `on_session_ending` returns
     * a new set of identities.
     **/
    disabledValidators(): Promise<Array<number>>;

    /**
     * The next session keys for a validator.
     **/
    nextKeys(arg: AccountId32Like): Promise<KitchensinkRuntimeSessionKeys | undefined>;

    /**
     * The owner of a key. The key is the `KeyTypeId` + the encoded key.
     **/
    keyOwner(arg: [SpCoreCryptoKeyTypeId, Bytes]): Promise<AccountId32 | undefined>;
  };
  democracy: {
    /**
     * The number of (public) proposals that have been made so far.
     **/
    publicPropCount(): Promise<number>;

    /**
     * The public proposals. Unsorted. The second item is the proposal.
     **/
    publicProps(): Promise<Array<[number, FrameSupportPreimagesBounded, AccountId32]>>;

    /**
     * Those who have locked a deposit.
     *
     * TWOX-NOTE: Safe, as increasing integer keys are safe.
     **/
    depositOf(arg: number): Promise<[Array<AccountId32>, bigint] | undefined>;

    /**
     * The next free referendum index, aka the number of referenda started so far.
     **/
    referendumCount(): Promise<number>;

    /**
     * The lowest referendum index representing an unbaked referendum. Equal to
     * `ReferendumCount` if there isn't a unbaked referendum.
     **/
    lowestUnbaked(): Promise<number>;

    /**
     * Information concerning any given referendum.
     *
     * TWOX-NOTE: SAFE as indexes are not under an attacker’s control.
     **/
    referendumInfoOf(arg: number): Promise<PalletDemocracyReferendumInfo | undefined>;

    /**
     * All votes for a particular voter. We store the balance for the number of votes that we
     * have recorded. The second item is the total amount of delegations, that will be added.
     *
     * TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway.
     **/
    votingOf(arg: AccountId32Like): Promise<PalletDemocracyVoteVoting>;

    /**
     * True if the last referendum tabled was submitted externally. False if it was a public
     * proposal.
     **/
    lastTabledWasExternal(): Promise<boolean>;

    /**
     * The referendum to be tabled whenever it would be valid to table an external proposal.
     * This happens when a referendum needs to be tabled and one of two conditions are met:
     * - `LastTabledWasExternal` is `false`; or
     * - `PublicProps` is empty.
     **/
    nextExternal(): Promise<[FrameSupportPreimagesBounded, PalletDemocracyVoteThreshold] | undefined>;

    /**
     * A record of who vetoed what. Maps proposal hash to a possible existent block number
     * (until when it may not be resubmitted) and who vetoed it.
     **/
    blacklist(arg: H256): Promise<[number, Array<AccountId32>] | undefined>;

    /**
     * Record of all proposals that have been subject to emergency cancellation.
     **/
    cancellations(arg: H256): Promise<boolean>;

    /**
     * General information concerning any proposal or referendum.
     * The `PreimageHash` refers to the preimage of the `Preimages` provider which can be a JSON
     * dump or IPFS hash of a JSON file.
     *
     * Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)
     * large preimages.
     **/
    metadataOf(arg: PalletDemocracyMetadataOwner): Promise<H256 | undefined>;
  };
  council: {
    /**
     * The hashes of the active proposals.
     **/
    proposals(): Promise<Array<H256>>;

    /**
     * Actual proposal for a given hash, if it's current.
     **/
    proposalOf(arg: H256): Promise<KitchensinkRuntimeRuntimeCall | undefined>;

    /**
     * Votes on a given proposal, if it is ongoing.
     **/
    voting(arg: H256): Promise<PalletCollectiveVotes | undefined>;

    /**
     * Proposals so far.
     **/
    proposalCount(): Promise<number>;

    /**
     * The current members of the collective. This is stored sorted (just by value).
     **/
    members(): Promise<Array<AccountId32>>;

    /**
     * The prime member that helps determine the default vote behavior in case of absentations.
     **/
    prime(): Promise<AccountId32 | undefined>;
  };
  technicalCommittee: {
    /**
     * The hashes of the active proposals.
     **/
    proposals(): Promise<Array<H256>>;

    /**
     * Actual proposal for a given hash, if it's current.
     **/
    proposalOf(arg: H256): Promise<KitchensinkRuntimeRuntimeCall | undefined>;

    /**
     * Votes on a given proposal, if it is ongoing.
     **/
    voting(arg: H256): Promise<PalletCollectiveVotes | undefined>;

    /**
     * Proposals so far.
     **/
    proposalCount(): Promise<number>;

    /**
     * The current members of the collective. This is stored sorted (just by value).
     **/
    members(): Promise<Array<AccountId32>>;

    /**
     * The prime member that helps determine the default vote behavior in case of absentations.
     **/
    prime(): Promise<AccountId32 | undefined>;
  };
  elections: {
    /**
     * The current elected members.
     *
     * Invariant: Always sorted based on account id.
     **/
    members(): Promise<Array<PalletElectionsPhragmenSeatHolder>>;

    /**
     * The current reserved runners-up.
     *
     * Invariant: Always sorted based on rank (worse to best). Upon removal of a member, the
     * last (i.e. _best_) runner-up will be replaced.
     **/
    runnersUp(): Promise<Array<PalletElectionsPhragmenSeatHolder>>;

    /**
     * The present candidate list. A current member or runner-up can never enter this vector
     * and is always implicitly assumed to be a candidate.
     *
     * Second element is the deposit.
     *
     * Invariant: Always sorted based on account id.
     **/
    candidates(): Promise<Array<[AccountId32, bigint]>>;

    /**
     * The total number of vote rounds that have happened, excluding the upcoming one.
     **/
    electionRounds(): Promise<number>;

    /**
     * Votes and locked stake of a particular voter.
     *
     * TWOX-NOTE: SAFE as `AccountId` is a crypto hash.
     **/
    voting(arg: AccountId32Like): Promise<PalletElectionsPhragmenVoter>;
  };
  technicalMembership: {
    /**
     * The current membership, stored as an ordered Vec.
     **/
    members(): Promise<Array<AccountId32>>;

    /**
     * The current prime member, if one exists.
     **/
    prime(): Promise<AccountId32 | undefined>;
  };
  grandpa: {
    /**
     * State of the current authority set.
     **/
    state(): Promise<PalletGrandpaStoredState>;

    /**
     * Pending change: (signaled at, scheduled change).
     **/
    pendingChange(): Promise<PalletGrandpaStoredPendingChange | undefined>;

    /**
     * next block number where we can force a change.
     **/
    nextForced(): Promise<number | undefined>;

    /**
     * `true` if we are currently stalled.
     **/
    stalled(): Promise<[number, number] | undefined>;

    /**
     * The number of changes (both in terms of keys and underlying economic responsibilities)
     * in the "set" of Grandpa validators from genesis.
     **/
    currentSetId(): Promise<bigint>;

    /**
     * A mapping from grandpa set ID to the index of the *most recent* session for which its
     * members were responsible.
     *
     * This is only used for validating equivocation proofs. An equivocation proof must
     * contains a key-ownership proof for a given session, therefore we need a way to tie
     * together sessions and GRANDPA set ids, i.e. we need to validate that a validator
     * was the owner of a given key on a given session, and what the active set ID was
     * during that session.
     *
     * TWOX-NOTE: `SetId` is not under user control.
     **/
    setIdSession(arg: bigint): Promise<number | undefined>;
  };
  treasury: {
    /**
     * Number of proposals that have been made.
     **/
    proposalCount(): Promise<number>;

    /**
     * Proposals that have been made.
     **/
    proposals(arg: number): Promise<PalletTreasuryProposal | undefined>;

    /**
     * The amount which has been reported as inactive to Currency.
     **/
    deactivated(): Promise<bigint>;

    /**
     * Proposal indices that have been approved but not yet awarded.
     **/
    approvals(): Promise<Array<number>>;
  };
  assetRate: {
    /**
     * Maps an asset to its fixed point representation in the native balance.
     *
     * E.g. `native_amount = asset_amount * ConversionRateToNative::<T>::get(asset_kind)`
     **/
    conversionRateToNative(arg: number): Promise<FixedU128 | undefined>;
  };
  contracts: {
    /**
     * A mapping from a contract's code hash to its code.
     **/
    pristineCode(arg: H256): Promise<Bytes | undefined>;

    /**
     * A mapping from a contract's code hash to its code info.
     **/
    codeInfoOf(arg: H256): Promise<PalletContractsWasmCodeInfo | undefined>;

    /**
     * This is a **monotonic** counter incremented on contract instantiation.
     *
     * This is used in order to generate unique trie ids for contracts.
     * The trie id of a new contract is calculated from hash(account_id, nonce).
     * The nonce is required because otherwise the following sequence would lead to
     * a possible collision of storage:
     *
     * 1. Create a new contract.
     * 2. Terminate the contract.
     * 3. Immediately recreate the contract with the same account_id.
     *
     * This is bad because the contents of a trie are deleted lazily and there might be
     * storage of the old instantiation still in it when the new contract is created. Please
     * note that we can't replace the counter by the block number because the sequence above
     * can happen in the same block. We also can't keep the account counter in memory only
     * because storage is the only way to communicate across different extrinsics in the
     * same block.
     *
     * # Note
     *
     * Do not use it to determine the number of contracts. It won't be decremented if
     * a contract is destroyed.
     **/
    nonce(): Promise<bigint>;

    /**
     * The code associated with a given account.
     *
     * TWOX-NOTE: SAFE since `AccountId` is a secure hash.
     **/
    contractInfoOf(arg: AccountId32Like): Promise<PalletContractsStorageContractInfo | undefined>;

    /**
     * Evicted contracts that await child trie deletion.
     *
     * Child trie deletion is a heavy operation depending on the amount of storage items
     * stored in said trie. Therefore this operation is performed lazily in `on_idle`.
     **/
    deletionQueue(arg: number): Promise<Bytes | undefined>;

    /**
     * A pair of monotonic counters used to track the latest contract marked for deletion
     * and the latest deleted contract in queue.
     **/
    deletionQueueCounter(): Promise<PalletContractsStorageDeletionQueueManager>;

    /**
     * A migration can span across multiple blocks. This storage defines a cursor to track the
     * progress of the migration, enabling us to resume from the last completed position.
     **/
    migrationInProgress(): Promise<Bytes | undefined>;
  };
  sudo: {
    /**
     * The `AccountId` of the sudo key.
     **/
    key(): Promise<AccountId32 | undefined>;
  };
  imOnline: {
    /**
     * The block number after which it's ok to send heartbeats in the current
     * session.
     *
     * At the beginning of each session we set this to a value that should fall
     * roughly in the middle of the session duration. The idea is to first wait for
     * the validators to produce a block in the current session, so that the
     * heartbeat later on will not be necessary.
     *
     * This value will only be used as a fallback if we fail to get a proper session
     * progress estimate from `NextSessionRotation`, as those estimates should be
     * more accurate then the value we calculate for `HeartbeatAfter`.
     **/
    heartbeatAfter(): Promise<number>;

    /**
     * The current set of keys that may issue a heartbeat.
     **/
    keys(): Promise<Array<PalletImOnlineSr25519AppSr25519Public>>;

    /**
     * For each session index, we keep a mapping of `SessionIndex` and `AuthIndex`.
     **/
    receivedHeartbeats(arg: [number, number]): Promise<boolean | undefined>;

    /**
     * For each session index, we keep a mapping of `ValidatorId<T>` to the
     * number of blocks authored by the given authority.
     **/
    authoredBlocks(arg: [number, AccountId32Like]): Promise<number>;
  };
  authorityDiscovery: {
    /**
     * Keys of the current authority set.
     **/
    keys(): Promise<Array<SpAuthorityDiscoveryAppPublic>>;

    /**
     * Keys of the next authority set.
     **/
    nextKeys(): Promise<Array<SpAuthorityDiscoveryAppPublic>>;
  };
  offences: {
    /**
     * The primary structure that holds all offence records keyed by report identifiers.
     **/
    reports(arg: H256): Promise<SpStakingOffenceOffenceDetails | undefined>;

    /**
     * A vector of reports of the same kind that happened at the same time slot.
     **/
    concurrentReportsIndex(arg: [FixedBytes<16>, Bytes]): Promise<Array<H256>>;
  };
  randomnessCollectiveFlip: {
    /**
     * Series of block headers from the last 81 blocks that acts as random seed material. This
     * is arranged as a ring buffer with `block_number % 81` being the index into the `Vec` of
     * the oldest hash.
     **/
    randomMaterial(): Promise<Array<H256>>;
  };
  identity: {
    /**
     * Information that is pertinent to identify the entity behind an account.
     *
     * TWOX-NOTE: OK ― `AccountId` is a secure hash.
     **/
    identityOf(arg: AccountId32Like): Promise<PalletIdentityRegistration | undefined>;

    /**
     * The super-identity of an alternative "sub" identity together with its name, within that
     * context. If the account is not some other account's sub-identity, then just `None`.
     **/
    superOf(arg: AccountId32Like): Promise<[AccountId32, Data] | undefined>;

    /**
     * Alternative "sub" identities of this account.
     *
     * The first item is the deposit, the second is a vector of the accounts.
     *
     * TWOX-NOTE: OK ― `AccountId` is a secure hash.
     **/
    subsOf(arg: AccountId32Like): Promise<[bigint, Array<AccountId32>]>;

    /**
     * The set of registrars. Not expected to get very big as can only be added through a
     * special origin (likely a council motion).
     *
     * The index into this can be cast to `RegistrarIndex` to get a valid value.
     **/
    registrars(): Promise<Array<PalletIdentityRegistrarInfo | undefined>>;
  };
  society: {
    /**
     * The max number of members for the society at one time.
     **/
    parameters(): Promise<PalletSocietyGroupParams | undefined>;

    /**
     * Amount of our account balance that is specifically for the next round's bid(s).
     **/
    pot(): Promise<bigint>;

    /**
     * The first member.
     **/
    founder(): Promise<AccountId32 | undefined>;

    /**
     * The most primary from the most recently approved rank 0 members in the society.
     **/
    head(): Promise<AccountId32 | undefined>;

    /**
     * A hash of the rules of this society concerning membership. Can only be set once and
     * only by the founder.
     **/
    rules(): Promise<H256 | undefined>;

    /**
     * The current members and their rank. Doesn't include `SuspendedMembers`.
     **/
    members(arg: AccountId32Like): Promise<PalletSocietyMemberRecord | undefined>;

    /**
     * Information regarding rank-0 payouts, past and future.
     **/
    payouts(arg: AccountId32Like): Promise<PalletSocietyPayoutRecord>;

    /**
     * The number of items in `Members` currently. (Doesn't include `SuspendedMembers`.)
     **/
    memberCount(): Promise<number>;

    /**
     * The current items in `Members` keyed by their unique index. Keys are densely populated
     * `0..MemberCount` (does not include `MemberCount`).
     **/
    memberByIndex(arg: number): Promise<AccountId32 | undefined>;

    /**
     * The set of suspended members, with their old membership record.
     **/
    suspendedMembers(arg: AccountId32Like): Promise<PalletSocietyMemberRecord | undefined>;

    /**
     * The number of rounds which have passed.
     **/
    roundCount(): Promise<number>;

    /**
     * The current bids, stored ordered by the value of the bid.
     **/
    bids(): Promise<Array<PalletSocietyBid>>;
    candidates(arg: AccountId32Like): Promise<PalletSocietyCandidacy | undefined>;

    /**
     * The current skeptic.
     **/
    skeptic(): Promise<AccountId32 | undefined>;

    /**
     * Double map from Candidate -> Voter -> (Maybe) Vote.
     **/
    votes(arg: [AccountId32Like, AccountId32Like]): Promise<PalletSocietyVote | undefined>;

    /**
     * Clear-cursor for Vote, map from Candidate -> (Maybe) Cursor.
     **/
    voteClearCursor(arg: AccountId32Like): Promise<Bytes | undefined>;

    /**
     * At the end of the claim period, this contains the most recently approved members (along with
     * their bid and round ID) who is from the most recent round with the lowest bid. They will
     * become the new `Head`.
     **/
    nextHead(): Promise<PalletSocietyIntakeRecord | undefined>;

    /**
     * The number of challenge rounds there have been. Used to identify stale DefenderVotes.
     **/
    challengeRoundCount(): Promise<number>;

    /**
     * The defending member currently being challenged, along with a running tally of votes.
     **/
    defending(): Promise<[AccountId32, AccountId32, PalletSocietyTally] | undefined>;

    /**
     * Votes for the defender, keyed by challenge round.
     **/
    defenderVotes(arg: [number, AccountId32Like]): Promise<PalletSocietyVote | undefined>;
  };
  recovery: {
    /**
     * The set of recoverable accounts and their recovery configuration.
     **/
    recoverable(arg: AccountId32Like): Promise<PalletRecoveryRecoveryConfig | undefined>;

    /**
     * Active recovery attempts.
     *
     * First account is the account to be recovered, and the second account
     * is the user trying to recover the account.
     **/
    activeRecoveries(arg: [AccountId32Like, AccountId32Like]): Promise<PalletRecoveryActiveRecovery | undefined>;

    /**
     * The list of allowed proxy accounts.
     *
     * Map from the user who can access it to the recovered account.
     **/
    proxy(arg: AccountId32Like): Promise<AccountId32 | undefined>;
  };
  vesting: {
    /**
     * Information regarding the vesting of a given account.
     **/
    vesting(arg: AccountId32Like): Promise<Array<PalletVestingVestingInfo> | undefined>;

    /**
     * Storage version of the pallet.
     *
     * New networks start with latest version, as determined by the genesis build.
     **/
    storageVersion(): Promise<PalletVestingReleases>;
  };
  scheduler: {
    incompleteSince(): Promise<number | undefined>;

    /**
     * Items to be executed, indexed by the block number that they should be executed on.
     **/
    agenda(arg: number): Promise<Array<PalletSchedulerScheduled | undefined>>;

    /**
     * Lookup from a name to the block number and index of the task.
     *
     * For v3 -> v4 the previously unbounded identities are Blake2-256 hashed to form the v4
     * identities.
     **/
    lookup(arg: FixedBytes<32>): Promise<[number, number] | undefined>;
  };
  glutton: {
    /**
     * The proportion of the remaining `ref_time` to consume during `on_idle`.
     *
     * `1.0` is mapped to `100%`. Must be at most [`crate::RESOURCE_HARD_LIMIT`]. Setting this to
     * over `1.0` could stall the chain.
     **/
    compute(): Promise<FixedU64>;

    /**
     * The proportion of the remaining `proof_size` to consume during `on_idle`.
     *
     * `1.0` is mapped to `100%`. Must be at most [`crate::RESOURCE_HARD_LIMIT`]. Setting this to
     * over `1.0` could stall the chain.
     **/
    storage(): Promise<FixedU64>;

    /**
     * Storage map used for wasting proof size.
     *
     * It contains no meaningful data - hence the name "Trash". The maximal number of entries is
     * set to 65k, which is just below the next jump at 16^4. This is important to reduce the proof
     * size benchmarking overestimate. The assumption here is that we won't have more than 65k *
     * 1KiB = 65MiB of proof size wasting in practice. However, this limit is not enforced, so the
     * pallet would also work out of the box with more entries, but its benchmarked proof weight
     * would possibly be underestimated in that case.
     **/
    trashData(arg: number): Promise<FixedBytes<1024> | undefined>;

    /**
     * The current number of entries in `TrashData`.
     **/
    trashDataCount(): Promise<number>;
  };
  preimage: {
    /**
     * The request status of a given hash.
     **/
    statusFor(arg: H256): Promise<PalletPreimageRequestStatus | undefined>;
    preimageFor(arg: [H256, number]): Promise<Bytes | undefined>;
  };
  proxy: {
    /**
     * The set of account proxies. Maps the account which has delegated to the accounts
     * which are being delegated to, together with the amount held on deposit.
     **/
    proxies(arg: AccountId32Like): Promise<[Array<PalletProxyProxyDefinition>, bigint]>;

    /**
     * The announcements made by the proxy (key).
     **/
    announcements(arg: AccountId32Like): Promise<[Array<PalletProxyAnnouncement>, bigint]>;
  };
  multisig: {
    /**
     * The set of open multisig operations.
     **/
    multisigs(arg: [AccountId32Like, FixedBytes<32>]): Promise<PalletMultisigMultisig | undefined>;
  };
  bounties: {
    /**
     * Number of bounty proposals that have been made.
     **/
    bountyCount(): Promise<number>;

    /**
     * Bounties that have been made.
     **/
    bounties(arg: number): Promise<PalletBountiesBounty | undefined>;

    /**
     * The description of each bounty.
     **/
    bountyDescriptions(arg: number): Promise<Bytes | undefined>;

    /**
     * Bounty indices that have been approved but not yet funded.
     **/
    bountyApprovals(): Promise<Array<number>>;
  };
  tips: {
    /**
     * TipsMap that are not yet completed. Keyed by the hash of `(reason, who)` from the value.
     * This has the insecure enumerable hash function since the key itself is already
     * guaranteed to be a secure hash.
     **/
    tips(arg: H256): Promise<PalletTipsOpenTip | undefined>;

    /**
     * Simple preimage lookup from the reason's hash to the original data. Again, has an
     * insecure enumerable hash since the key is guaranteed to be the result of a secure hash.
     **/
    reasons(arg: H256): Promise<Bytes | undefined>;
  };
  assets: {
    /**
     * Details of an asset.
     **/
    asset(arg: number): Promise<PalletAssetsAssetDetails | undefined>;

    /**
     * The holdings of a specific account for a specific asset.
     **/
    account(arg: [number, AccountId32Like]): Promise<PalletAssetsAssetAccount | undefined>;

    /**
     * Approved balance transfers. First balance is the amount approved for transfer. Second
     * is the amount of `T::Currency` reserved for storing this.
     * First key is the asset ID, second key is the owner and third key is the delegate.
     **/
    approvals(arg: [number, AccountId32Like, AccountId32Like]): Promise<PalletAssetsApproval | undefined>;

    /**
     * Metadata of an asset.
     **/
    metadata(arg: number): Promise<PalletAssetsAssetMetadata>;
  };
  poolAssets: {
    /**
     * Details of an asset.
     **/
    asset(arg: number): Promise<PalletAssetsAssetDetails | undefined>;

    /**
     * The holdings of a specific account for a specific asset.
     **/
    account(arg: [number, AccountId32Like]): Promise<PalletAssetsAssetAccount | undefined>;

    /**
     * Approved balance transfers. First balance is the amount approved for transfer. Second
     * is the amount of `T::Currency` reserved for storing this.
     * First key is the asset ID, second key is the owner and third key is the delegate.
     **/
    approvals(arg: [number, AccountId32Like, AccountId32Like]): Promise<PalletAssetsApproval | undefined>;

    /**
     * Metadata of an asset.
     **/
    metadata(arg: number): Promise<PalletAssetsAssetMetadata>;
  };
  mmr: {
    /**
     * Latest MMR Root hash.
     **/
    rootHash(): Promise<H256>;

    /**
     * Current size of the MMR (number of leaves).
     **/
    numberOfLeaves(): Promise<bigint>;

    /**
     * Hashes of the nodes in the MMR.
     *
     * Note this collection only contains MMR peaks, the inner nodes (and leaves)
     * are pruned and only stored in the Offchain DB.
     **/
    nodes(arg: bigint): Promise<H256 | undefined>;
  };
  lottery: {
    lotteryIndex(): Promise<number>;

    /**
     * The configuration for the current lottery.
     **/
    lottery(): Promise<PalletLotteryLotteryConfig | undefined>;

    /**
     * Users who have purchased a ticket. (Lottery Index, Tickets Purchased)
     **/
    participants(arg: AccountId32Like): Promise<[number, Array<[number, number]>]>;

    /**
     * Total number of tickets sold.
     **/
    ticketsCount(): Promise<number>;

    /**
     * Each ticket's owner.
     *
     * May have residual storage from previous lotteries. Use `TicketsCount` to see which ones
     * are actually valid ticket mappings.
     **/
    tickets(arg: number): Promise<AccountId32 | undefined>;

    /**
     * The calls stored in this pallet to be used in an active lottery if configured
     * by `Config::ValidateCall`.
     **/
    callIndices(): Promise<Array<[number, number]>>;
  };
  nis: {
    /**
     * The totals of items and balances within each queue. Saves a lot of storage reads in the
     * case of sparsely packed queues.
     *
     * The vector is indexed by duration in `Period`s, offset by one, so information on the queue
     * whose duration is one `Period` would be storage `0`.
     **/
    queueTotals(): Promise<Array<[number, bigint]>>;

    /**
     * The queues of bids. Indexed by duration (in `Period`s).
     **/
    queues(arg: number): Promise<Array<PalletNisBid>>;

    /**
     * Summary information over the general state.
     **/
    summary(): Promise<PalletNisSummaryRecord>;

    /**
     * The currently outstanding receipts, indexed according to the order of creation.
     **/
    receipts(arg: number): Promise<PalletNisReceiptRecord | undefined>;
  };
  uniques: {
    /**
     * Details of a collection.
     **/
    class(arg: number): Promise<PalletUniquesCollectionDetails | undefined>;

    /**
     * The collection, if any, of which an account is willing to take ownership.
     **/
    ownershipAcceptance(arg: AccountId32Like): Promise<number | undefined>;

    /**
     * The items held by any given account; set out this way so that items owned by a single
     * account can be enumerated.
     **/
    account(arg: [AccountId32Like, number, number]): Promise<[] | undefined>;

    /**
     * The collections owned by any given account; set out this way so that collections owned by
     * a single account can be enumerated.
     **/
    classAccount(arg: [AccountId32Like, number]): Promise<[] | undefined>;

    /**
     * The items in existence and their ownership details.
     **/
    asset(arg: [number, number]): Promise<PalletUniquesItemDetails | undefined>;

    /**
     * Metadata of a collection.
     **/
    classMetadataOf(arg: number): Promise<PalletUniquesCollectionMetadata | undefined>;

    /**
     * Metadata of an item.
     **/
    instanceMetadataOf(arg: [number, number]): Promise<PalletUniquesItemMetadata | undefined>;

    /**
     * Attributes of a collection.
     **/
    attribute(arg: [number, number | undefined, Bytes]): Promise<[Bytes, bigint] | undefined>;

    /**
     * Price of an asset instance.
     **/
    itemPriceOf(arg: [number, number]): Promise<[bigint, AccountId32 | undefined] | undefined>;

    /**
     * Keeps track of the number of items a collection might have.
     **/
    collectionMaxSupply(arg: number): Promise<number | undefined>;
  };
  nfts: {
    /**
     * Details of a collection.
     **/
    collection(arg: number): Promise<PalletNftsCollectionDetails | undefined>;

    /**
     * The collection, if any, of which an account is willing to take ownership.
     **/
    ownershipAcceptance(arg: AccountId32Like): Promise<number | undefined>;

    /**
     * The items held by any given account; set out this way so that items owned by a single
     * account can be enumerated.
     **/
    account(arg: [AccountId32Like, number, number]): Promise<[] | undefined>;

    /**
     * The collections owned by any given account; set out this way so that collections owned by
     * a single account can be enumerated.
     **/
    collectionAccount(arg: [AccountId32Like, number]): Promise<[] | undefined>;

    /**
     * The items in existence and their ownership details.
     * Stores collection roles as per account.
     **/
    collectionRoleOf(arg: [number, AccountId32Like]): Promise<PalletNftsBitFlagsCollectionRole | undefined>;

    /**
     * The items in existence and their ownership details.
     **/
    item(arg: [number, number]): Promise<PalletNftsItemDetails | undefined>;

    /**
     * Metadata of a collection.
     **/
    collectionMetadataOf(arg: number): Promise<PalletNftsCollectionMetadata | undefined>;

    /**
     * Metadata of an item.
     **/
    itemMetadataOf(arg: [number, number]): Promise<PalletNftsItemMetadata | undefined>;

    /**
     * Attributes of a collection.
     **/
    attribute(
      arg: [number, number | undefined, PalletNftsAttributeNamespace, Bytes],
    ): Promise<[Bytes, PalletNftsAttributeDeposit] | undefined>;

    /**
     * A price of an item.
     **/
    itemPriceOf(arg: [number, number]): Promise<[bigint, AccountId32 | undefined] | undefined>;

    /**
     * Item attribute approvals.
     **/
    itemAttributesApprovalsOf(arg: [number, number]): Promise<Array<AccountId32>>;

    /**
     * Stores the `CollectionId` that is going to be used for the next collection.
     * This gets incremented whenever a new collection is created.
     **/
    nextCollectionId(): Promise<number | undefined>;

    /**
     * Handles all the pending swaps.
     **/
    pendingSwapOf(arg: [number, number]): Promise<PalletNftsPendingSwap | undefined>;

    /**
     * Config of a collection.
     **/
    collectionConfigOf(arg: number): Promise<PalletNftsCollectionConfig | undefined>;

    /**
     * Config of an item.
     **/
    itemConfigOf(arg: [number, number]): Promise<PalletNftsItemConfig | undefined>;
  };
  nftFractionalization: {
    /**
     * Keeps track of the corresponding NFT ID, asset ID and amount minted.
     **/
    nftToAsset(arg: [number, number]): Promise<PalletNftFractionalizationDetails | undefined>;
  };
  salary: {
    /**
     * The overall status of the system.
     **/
    status(): Promise<PalletSalaryStatusType | undefined>;

    /**
     * The status of a claimant.
     **/
    claimant(arg: AccountId32Like): Promise<PalletSalaryClaimantStatus | undefined>;
  };
  coreFellowship: {
    /**
     * The overall status of the system.
     **/
    params(): Promise<PalletCoreFellowshipParamsType>;

    /**
     * The status of a claimant.
     **/
    member(arg: AccountId32Like): Promise<PalletCoreFellowshipMemberStatus | undefined>;

    /**
     * Some evidence together with the desired outcome for which it was presented.
     **/
    memberEvidence(arg: AccountId32Like): Promise<[PalletCoreFellowshipWish, Bytes] | undefined>;
  };
  transactionStorage: {
    /**
     * Collection of transaction metadata by block number.
     **/
    transactions(arg: number): Promise<Array<PalletTransactionStorageTransactionInfo> | undefined>;

    /**
     * Count indexed chunks for each block.
     **/
    chunkCount(arg: number): Promise<number>;

    /**
     * Storage fee per byte.
     **/
    byteFee(): Promise<bigint | undefined>;

    /**
     * Storage fee per transaction.
     **/
    entryFee(): Promise<bigint | undefined>;

    /**
     * Storage period for data in blocks. Should match `sp_storage_proof::DEFAULT_STORAGE_PERIOD`
     * for block authoring.
     **/
    storagePeriod(): Promise<number>;
    blockTransactions(): Promise<Array<PalletTransactionStorageTransactionInfo>>;

    /**
     * Was the proof checked in this block?
     **/
    proofChecked(): Promise<boolean>;
  };
  voterList: {
    /**
     * A single node, within some bag.
     *
     * Nodes store links forward and back within their respective bags.
     **/
    listNodes(arg: AccountId32Like): Promise<PalletBagsListListNode | undefined>;

    /**
     * Counter for the related counted storage map
     **/
    counterForListNodes(): Promise<number>;

    /**
     * A bag stored in storage.
     *
     * Stores a `Bag` struct, which stores head and tail pointers to itself.
     **/
    listBags(arg: bigint): Promise<PalletBagsListListBag | undefined>;
  };
  stateTrieMigration: {
    /**
     * Migration progress.
     *
     * This stores the snapshot of the last migrated keys. It can be set into motion and move
     * forward by any of the means provided by this pallet.
     **/
    migrationProcess(): Promise<PalletStateTrieMigrationMigrationTask>;

    /**
     * The limits that are imposed on automatic migrations.
     *
     * If set to None, then no automatic migration happens.
     **/
    autoLimits(): Promise<PalletStateTrieMigrationMigrationLimits | undefined>;

    /**
     * The maximum limits that the signed migration could use.
     *
     * If not set, no signed submission is allowed.
     **/
    signedMigrationMaxLimits(): Promise<PalletStateTrieMigrationMigrationLimits | undefined>;
  };
  childBounties: {
    /**
     * Number of total child bounties.
     **/
    childBountyCount(): Promise<number>;

    /**
     * Number of child bounties per parent bounty.
     * Map of parent bounty index to number of child bounties.
     **/
    parentChildBounties(arg: number): Promise<number>;

    /**
     * Child bounties that have been added.
     **/
    childBounties(arg: [number, number]): Promise<PalletChildBountiesChildBounty | undefined>;

    /**
     * The description of each child-bounty.
     **/
    childBountyDescriptions(arg: number): Promise<Bytes | undefined>;

    /**
     * The cumulative child-bounty curator fee for each parent bounty.
     **/
    childrenCuratorFees(arg: number): Promise<bigint>;
  };
  referenda: {
    /**
     * The next free referendum index, aka the number of referenda started so far.
     **/
    referendumCount(): Promise<number>;

    /**
     * Information concerning any given referendum.
     **/
    referendumInfoFor(arg: number): Promise<PalletReferendaReferendumInfo | undefined>;

    /**
     * The sorted list of referenda ready to be decided but not yet being decided, ordered by
     * conviction-weighted approvals.
     *
     * This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`.
     **/
    trackQueue(arg: number): Promise<Array<[number, bigint]>>;

    /**
     * The number of referenda being decided currently.
     **/
    decidingCount(arg: number): Promise<number>;

    /**
     * The metadata is a general information concerning the referendum.
     * The `PreimageHash` refers to the preimage of the `Preimages` provider which can be a JSON
     * dump or IPFS hash of a JSON file.
     *
     * Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)
     * large preimages.
     **/
    metadataOf(arg: number): Promise<H256 | undefined>;
  };
  convictionVoting: {
    /**
     * All voting for a particular voter in a particular voting class. We store the balance for the
     * number of votes that we have recorded.
     **/
    votingFor(arg: [AccountId32Like, number]): Promise<PalletConvictionVotingVoteVoting>;

    /**
     * The voting classes which have a non-zero lock requirement and the lock amounts which they
     * require. The actual amount locked on behalf of this pallet should always be the maximum of
     * this list.
     **/
    classLocksFor(arg: AccountId32Like): Promise<Array<[number, bigint]>>;
  };
  whitelist: { whitelistedCall(arg: H256): Promise<[] | undefined> };
  allianceMotion: {
    /**
     * The hashes of the active proposals.
     **/
    proposals(): Promise<Array<H256>>;

    /**
     * Actual proposal for a given hash, if it's current.
     **/
    proposalOf(arg: H256): Promise<KitchensinkRuntimeRuntimeCall | undefined>;

    /**
     * Votes on a given proposal, if it is ongoing.
     **/
    voting(arg: H256): Promise<PalletCollectiveVotes | undefined>;

    /**
     * Proposals so far.
     **/
    proposalCount(): Promise<number>;

    /**
     * The current members of the collective. This is stored sorted (just by value).
     **/
    members(): Promise<Array<AccountId32>>;

    /**
     * The prime member that helps determine the default vote behavior in case of absentations.
     **/
    prime(): Promise<AccountId32 | undefined>;
  };
  alliance: {
    /**
     * The IPFS CID of the alliance rule.
     * Fellows can propose a new rule with a super-majority.
     **/
    rule(): Promise<PalletAllianceCid | undefined>;

    /**
     * The current IPFS CIDs of any announcements.
     **/
    announcements(): Promise<Array<PalletAllianceCid>>;

    /**
     * Maps members to their candidacy deposit.
     **/
    depositOf(arg: AccountId32Like): Promise<bigint | undefined>;

    /**
     * Maps member type to members of each type.
     **/
    members(arg: PalletAllianceMemberRole): Promise<Array<AccountId32>>;

    /**
     * A set of members who gave a retirement notice. They can retire after the end of retirement
     * period stored as a future block number.
     **/
    retiringMembers(arg: AccountId32Like): Promise<number | undefined>;

    /**
     * The current list of accounts deemed unscrupulous. These accounts non grata cannot submit
     * candidacy.
     **/
    unscrupulousAccounts(): Promise<Array<AccountId32>>;

    /**
     * The current list of websites deemed unscrupulous.
     **/
    unscrupulousWebsites(): Promise<Array<Bytes>>;
  };
  nominationPools: {
    /**
     * Minimum amount to bond to join a pool.
     **/
    minJoinBond(): Promise<bigint>;

    /**
     * Minimum bond required to create a pool.
     *
     * This is the amount that the depositor must put as their initial stake in the pool, as an
     * indication of "skin in the game".
     *
     * This is the value that will always exist in the staking ledger of the pool bonded account
     * while all other accounts leave.
     **/
    minCreateBond(): Promise<bigint>;

    /**
     * Maximum number of nomination pools that can exist. If `None`, then an unbounded number of
     * pools can exist.
     **/
    maxPools(): Promise<number | undefined>;

    /**
     * Maximum number of members that can exist in the system. If `None`, then the count
     * members are not bound on a system wide basis.
     **/
    maxPoolMembers(): Promise<number | undefined>;

    /**
     * Maximum number of members that may belong to pool. If `None`, then the count of
     * members is not bound on a per pool basis.
     **/
    maxPoolMembersPerPool(): Promise<number | undefined>;

    /**
     * The maximum commission that can be charged by a pool. Used on commission payouts to bound
     * pool commissions that are > `GlobalMaxCommission`, necessary if a future
     * `GlobalMaxCommission` is lower than some current pool commissions.
     **/
    globalMaxCommission(): Promise<Perbill | undefined>;

    /**
     * Active members.
     *
     * TWOX-NOTE: SAFE since `AccountId` is a secure hash.
     **/
    poolMembers(arg: AccountId32Like): Promise<PalletNominationPoolsPoolMember | undefined>;

    /**
     * Counter for the related counted storage map
     **/
    counterForPoolMembers(): Promise<number>;

    /**
     * Storage for bonded pools.
     **/
    bondedPools(arg: number): Promise<PalletNominationPoolsBondedPoolInner | undefined>;

    /**
     * Counter for the related counted storage map
     **/
    counterForBondedPools(): Promise<number>;

    /**
     * Reward pools. This is where there rewards for each pool accumulate. When a members payout is
     * claimed, the balance comes out fo the reward pool. Keyed by the bonded pools account.
     **/
    rewardPools(arg: number): Promise<PalletNominationPoolsRewardPool | undefined>;

    /**
     * Counter for the related counted storage map
     **/
    counterForRewardPools(): Promise<number>;

    /**
     * Groups of unbonding pools. Each group of unbonding pools belongs to a
     * bonded pool, hence the name sub-pools. Keyed by the bonded pools account.
     **/
    subPoolsStorage(arg: number): Promise<PalletNominationPoolsSubPools | undefined>;

    /**
     * Counter for the related counted storage map
     **/
    counterForSubPoolsStorage(): Promise<number>;

    /**
     * Metadata for the pool.
     **/
    metadata(arg: number): Promise<Bytes>;

    /**
     * Counter for the related counted storage map
     **/
    counterForMetadata(): Promise<number>;

    /**
     * Ever increasing number of all pools created so far.
     **/
    lastPoolId(): Promise<number>;

    /**
     * A reverse lookup from the pool's account id to its id.
     *
     * This is only used for slashing. In all other instances, the pool id is used, and the
     * accounts are deterministically derived from it.
     **/
    reversePoolIdLookup(arg: AccountId32Like): Promise<number | undefined>;

    /**
     * Counter for the related counted storage map
     **/
    counterForReversePoolIdLookup(): Promise<number>;

    /**
     * Map from a pool member account to their opted claim permission.
     **/
    claimPermissions(arg: AccountId32Like): Promise<PalletNominationPoolsClaimPermission>;
  };
  rankedPolls: {
    /**
     * The next free referendum index, aka the number of referenda started so far.
     **/
    referendumCount(): Promise<number>;

    /**
     * Information concerning any given referendum.
     **/
    referendumInfoFor(arg: number): Promise<PalletReferendaReferendumInfoTally | undefined>;

    /**
     * The sorted list of referenda ready to be decided but not yet being decided, ordered by
     * conviction-weighted approvals.
     *
     * This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`.
     **/
    trackQueue(arg: number): Promise<Array<[number, number]>>;

    /**
     * The number of referenda being decided currently.
     **/
    decidingCount(arg: number): Promise<number>;

    /**
     * The metadata is a general information concerning the referendum.
     * The `PreimageHash` refers to the preimage of the `Preimages` provider which can be a JSON
     * dump or IPFS hash of a JSON file.
     *
     * Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)
     * large preimages.
     **/
    metadataOf(arg: number): Promise<H256 | undefined>;
  };
  rankedCollective: {
    /**
     * The number of members in the collective who have at least the rank according to the index
     * of the vec.
     **/
    memberCount(arg: number): Promise<number>;

    /**
     * The current members of the collective.
     **/
    members(arg: AccountId32Like): Promise<PalletRankedCollectiveMemberRecord | undefined>;

    /**
     * The index of each ranks's member into the group of members who have at least that rank.
     **/
    idToIndex(arg: [number, AccountId32Like]): Promise<number | undefined>;

    /**
     * The members in the collective by index. All indices in the range `0..MemberCount` will
     * return `Some`, however a member's index is not guaranteed to remain unchanged over time.
     **/
    indexToId(arg: [number, number]): Promise<AccountId32 | undefined>;

    /**
     * Votes on a given proposal, if it is ongoing.
     **/
    voting(arg: [number, AccountId32Like]): Promise<PalletRankedCollectiveVoteRecord | undefined>;
    votingCleanup(arg: number): Promise<Bytes | undefined>;
  };
  assetConversion: {
    /**
     * Map from `PoolAssetId` to `PoolInfo`. This establishes whether a pool has been officially
     * created rather than people sending tokens directly to a pool's public account.
     **/
    pools(
      arg: [PalletAssetConversionNativeOrAssetId, PalletAssetConversionNativeOrAssetId],
    ): Promise<PalletAssetConversionPoolInfo | undefined>;

    /**
     * Stores the `PoolAssetId` that is going to be used for the next lp token.
     * This gets incremented whenever a new lp pool is created.
     **/
    nextPoolAssetId(): Promise<number | undefined>;
  };
  fastUnstake: {
    /**
     * The current "head of the queue" being unstaked.
     *
     * The head in itself can be a batch of up to [`Config::BatchSize`] stakers.
     **/
    head(): Promise<PalletFastUnstakeUnstakeRequest | undefined>;

    /**
     * The map of all accounts wishing to be unstaked.
     *
     * Keeps track of `AccountId` wishing to unstake and it's corresponding deposit.
     **/
    queue(arg: AccountId32Like): Promise<bigint | undefined>;

    /**
     * Counter for the related counted storage map
     **/
    counterForQueue(): Promise<number>;

    /**
     * Number of eras to check per block.
     *
     * If set to 0, this pallet does absolutely nothing. Cannot be set to more than
     * [`Config::MaxErasToCheckPerBlock`].
     *
     * Based on the amount of weight available at [`Pallet::on_idle`], up to this many eras are
     * checked. The checking is represented by updating [`UnstakeRequest::checked`], which is
     * stored in [`Head`].
     **/
    erasToCheckPerBlock(): Promise<number>;
  };
  messageQueue: {
    /**
     * The index of the first and last (non-empty) pages.
     **/
    bookStateFor(arg: number): Promise<PalletMessageQueueBookState>;

    /**
     * The origin at which we should begin servicing.
     **/
    serviceHead(): Promise<number | undefined>;

    /**
     * The map of page indices to pages.
     **/
    pages(arg: [number, number]): Promise<PalletMessageQueuePage | undefined>;
  };
  pov: {
    value(): Promise<number | undefined>;
    value2(): Promise<number | undefined>;

    /**
     * A value without a MEL bound.
     **/
    unboundedValue(): Promise<Bytes | undefined>;

    /**
     * A value with a MEL bound of 32 byte.
     **/
    boundedValue(): Promise<Bytes | undefined>;

    /**
     * 4MiB value.
     **/
    largeValue(): Promise<Bytes | undefined>;
    largeValue2(): Promise<Bytes | undefined>;

    /**
     * A map with a maximum of 1M entries.
     **/
    map1M(arg: number): Promise<number | undefined>;

    /**
     * A map with a maximum of 16M entries.
     **/
    map16M(arg: number): Promise<number | undefined>;
    doubleMap1M(arg: [number, number]): Promise<number | undefined>;
    unboundedMap(arg: number): Promise<Array<number> | undefined>;
    unboundedMap2(arg: number): Promise<Array<number> | undefined>;
    unboundedMapTwox(arg: number): Promise<Array<number> | undefined>;
  };
  txPause: {
    /**
     * The set of calls that are explicitly paused.
     **/
    pausedCalls(arg: [Bytes, Bytes]): Promise<[] | undefined>;
  };
  safeMode: {
    /**
     * Contains the last block number that the safe-mode will remain entered in.
     *
     * Set to `None` when safe-mode is exited.
     *
     * Safe-mode is automatically exited when the current block number exceeds this value.
     **/
    enteredUntil(): Promise<number | undefined>;

    /**
     * Holds the reserve that was taken from an account at a specific block number.
     *
     * This helps governance to have an overview of outstanding deposits that should be returned or
     * slashed.
     **/
    deposits(arg: [AccountId32Like, number]): Promise<bigint | undefined>;
  };
  broker: {
    /**
     * The current configuration of this pallet.
     **/
    configuration(): Promise<PalletBrokerConfigRecord | undefined>;

    /**
     * The Polkadot Core reservations (generally tasked with the maintenance of System Chains).
     **/
    reservations(): Promise<Array<Array<PalletBrokerScheduleItem>>>;

    /**
     * The Polkadot Core legacy leases.
     **/
    leases(): Promise<Array<PalletBrokerLeaseRecordItem>>;

    /**
     * The current status of miscellaneous subsystems of this pallet.
     **/
    status(): Promise<PalletBrokerStatusRecord | undefined>;

    /**
     * The details of the current sale, including its properties and status.
     **/
    saleInfo(): Promise<PalletBrokerSaleInfoRecord | undefined>;

    /**
     * Records of allowed renewals.
     **/
    allowedRenewals(arg: PalletBrokerAllowedRenewalId): Promise<PalletBrokerAllowedRenewalRecord | undefined>;

    /**
     * The current (unassigned) Regions.
     **/
    regions(arg: PalletBrokerRegionId): Promise<PalletBrokerRegionRecord | undefined>;

    /**
     * The work we plan on having each core do at a particular time in the future.
     **/
    workplan(arg: [number, number]): Promise<Array<PalletBrokerScheduleItem> | undefined>;

    /**
     * The current workload of each core. This gets updated with workplan as timeslices pass.
     **/
    workload(arg: number): Promise<Array<PalletBrokerScheduleItem>>;

    /**
     * Record of a single contribution to the Instantaneous Coretime Pool.
     **/
    instaPoolContribution(arg: PalletBrokerRegionId): Promise<PalletBrokerContributionRecord | undefined>;

    /**
     * Record of Coretime entering or leaving the Instantaneous Coretime Pool.
     **/
    instaPoolIo(arg: number): Promise<PalletBrokerPoolIoRecord>;

    /**
     * Total InstaPool rewards for each Timeslice and the number of core parts which contributed.
     **/
    instaPoolHistory(arg: number): Promise<PalletBrokerInstaPoolHistoryRecord | undefined>;
  };
}
