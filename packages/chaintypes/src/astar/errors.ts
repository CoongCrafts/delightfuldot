// Generated by @delightfuldot/codegen

import type { GenericChainErrors, GenericModuleError } from '@delightfuldot/types';

export interface ChainErrors extends GenericChainErrors {
  system: {
    /**
     * The name of specification does not match between the current runtime
     * and the new runtime.
     **/
    invalidSpecName: GenericModuleError;

    /**
     * The specification version is not allowed to decrease between the current runtime
     * and the new runtime.
     **/
    specVersionNeedsToIncrease: GenericModuleError;

    /**
     * Failed to extract the runtime version from the new runtime.
     *
     * Either calling `Core_version` or decoding `RuntimeVersion` failed.
     **/
    failedToExtractRuntimeVersion: GenericModuleError;

    /**
     * Suicide called when the account has non-default composite data.
     **/
    nonDefaultComposite: GenericModuleError;

    /**
     * There is a non-zero reference count preventing the account from being purged.
     **/
    nonZeroRefCount: GenericModuleError;

    /**
     * The origin filter prevent the call to be dispatched.
     **/
    callFiltered: GenericModuleError;
  };
  utility: {
    /**
     * Too many calls batched.
     **/
    tooManyCalls: GenericModuleError;
  };
  identity: {
    /**
     * Too many subs-accounts.
     **/
    tooManySubAccounts: GenericModuleError;

    /**
     * Account isn't found.
     **/
    notFound: GenericModuleError;

    /**
     * Account isn't named.
     **/
    notNamed: GenericModuleError;

    /**
     * Empty index.
     **/
    emptyIndex: GenericModuleError;

    /**
     * Fee is changed.
     **/
    feeChanged: GenericModuleError;

    /**
     * No identity found.
     **/
    noIdentity: GenericModuleError;

    /**
     * Sticky judgement.
     **/
    stickyJudgement: GenericModuleError;

    /**
     * Judgement given.
     **/
    judgementGiven: GenericModuleError;

    /**
     * Invalid judgement.
     **/
    invalidJudgement: GenericModuleError;

    /**
     * The index is invalid.
     **/
    invalidIndex: GenericModuleError;

    /**
     * The target is invalid.
     **/
    invalidTarget: GenericModuleError;

    /**
     * Too many additional fields.
     **/
    tooManyFields: GenericModuleError;

    /**
     * Maximum amount of registrars reached. Cannot add any more.
     **/
    tooManyRegistrars: GenericModuleError;

    /**
     * Account ID is already named.
     **/
    alreadyClaimed: GenericModuleError;

    /**
     * Sender is not a sub-account.
     **/
    notSub: GenericModuleError;

    /**
     * Sub-account isn't owned by sender.
     **/
    notOwned: GenericModuleError;

    /**
     * The provided judgement was for a different identity.
     **/
    judgementForDifferentIdentity: GenericModuleError;

    /**
     * Error that occurs when there is an issue paying for judgement.
     **/
    judgementPaymentFailed: GenericModuleError;
  };
  multisig: {
    /**
     * Threshold must be 2 or greater.
     **/
    minimumThreshold: GenericModuleError;

    /**
     * Call is already approved by this signatory.
     **/
    alreadyApproved: GenericModuleError;

    /**
     * Call doesn't need any (more) approvals.
     **/
    noApprovalsNeeded: GenericModuleError;

    /**
     * There are too few signatories in the list.
     **/
    tooFewSignatories: GenericModuleError;

    /**
     * There are too many signatories in the list.
     **/
    tooManySignatories: GenericModuleError;

    /**
     * The signatories were provided out of order; they should be ordered.
     **/
    signatoriesOutOfOrder: GenericModuleError;

    /**
     * The sender was contained in the other signatories; it shouldn't be.
     **/
    senderInSignatories: GenericModuleError;

    /**
     * Multisig operation not found when attempting to cancel.
     **/
    notFound: GenericModuleError;

    /**
     * Only the account that originally created the multisig is able to cancel it.
     **/
    notOwner: GenericModuleError;

    /**
     * No timepoint was given, yet the multisig operation is already underway.
     **/
    noTimepoint: GenericModuleError;

    /**
     * A different timepoint was given to the multisig operation that is underway.
     **/
    wrongTimepoint: GenericModuleError;

    /**
     * A timepoint was given, yet no multisig operation is underway.
     **/
    unexpectedTimepoint: GenericModuleError;

    /**
     * The maximum weight information provided was too low.
     **/
    maxWeightTooLow: GenericModuleError;

    /**
     * The data to be stored is already stored.
     **/
    alreadyStored: GenericModuleError;
  };
  proxy: {
    /**
     * There are too many proxies registered or too many announcements pending.
     **/
    tooMany: GenericModuleError;

    /**
     * Proxy registration not found.
     **/
    notFound: GenericModuleError;

    /**
     * Sender is not a proxy of the account to be proxied.
     **/
    notProxy: GenericModuleError;

    /**
     * A call which is incompatible with the proxy type's filter was attempted.
     **/
    unproxyable: GenericModuleError;

    /**
     * Account is already a proxy.
     **/
    duplicate: GenericModuleError;

    /**
     * Call may not be made by proxy because it may escalate its privileges.
     **/
    noPermission: GenericModuleError;

    /**
     * Announcement, if made at all, was made too recently.
     **/
    unannounced: GenericModuleError;

    /**
     * Cannot add self as proxy.
     **/
    noSelfProxy: GenericModuleError;
  };
  parachainSystem: {
    /**
     * Attempt to upgrade validation function while existing upgrade pending.
     **/
    overlappingUpgrades: GenericModuleError;

    /**
     * Polkadot currently prohibits this parachain from upgrading its validation function.
     **/
    prohibitedByPolkadot: GenericModuleError;

    /**
     * The supplied validation function has compiled into a blob larger than Polkadot is
     * willing to run.
     **/
    tooBig: GenericModuleError;

    /**
     * The inherent which supplies the validation data did not run this block.
     **/
    validationDataNotAvailable: GenericModuleError;

    /**
     * The inherent which supplies the host configuration did not run this block.
     **/
    hostConfigurationNotAvailable: GenericModuleError;

    /**
     * No validation function upgrade is currently scheduled.
     **/
    notScheduled: GenericModuleError;

    /**
     * No code upgrade has been authorized.
     **/
    nothingAuthorized: GenericModuleError;

    /**
     * The given code upgrade has not been authorized.
     **/
    unauthorized: GenericModuleError;
  };
  balances: {
    /**
     * Vesting balance too high to send value.
     **/
    vestingBalance: GenericModuleError;

    /**
     * Account liquidity restrictions prevent withdrawal.
     **/
    liquidityRestrictions: GenericModuleError;

    /**
     * Balance too low to send value.
     **/
    insufficientBalance: GenericModuleError;

    /**
     * Value too low to create account due to existential deposit.
     **/
    existentialDeposit: GenericModuleError;

    /**
     * Transfer/payment would kill account.
     **/
    expendability: GenericModuleError;

    /**
     * A vesting schedule already exists for this account.
     **/
    existingVestingSchedule: GenericModuleError;

    /**
     * Beneficiary account must pre-exist.
     **/
    deadAccount: GenericModuleError;

    /**
     * Number of named reserves exceed `MaxReserves`.
     **/
    tooManyReserves: GenericModuleError;

    /**
     * Number of holds exceed `MaxHolds`.
     **/
    tooManyHolds: GenericModuleError;

    /**
     * Number of freezes exceed `MaxFreezes`.
     **/
    tooManyFreezes: GenericModuleError;
  };
  vesting: {
    /**
     * The account given is not vesting.
     **/
    notVesting: GenericModuleError;

    /**
     * The account already has `MaxVestingSchedules` count of schedules and thus
     * cannot add another one. Consider merging existing schedules in order to add another.
     **/
    atMaxVestingSchedules: GenericModuleError;

    /**
     * Amount being transferred is too low to create a vesting schedule.
     **/
    amountLow: GenericModuleError;

    /**
     * An index was out of bounds of the vesting schedules.
     **/
    scheduleIndexOutOfBounds: GenericModuleError;

    /**
     * Failed to create a new schedule because some parameter was invalid.
     **/
    invalidScheduleParams: GenericModuleError;
  };
  dappsStaking: {
    /**
     * Disabled
     **/
    disabled: GenericModuleError;

    /**
     * No change in maintenance mode
     **/
    noMaintenanceModeChange: GenericModuleError;

    /**
     * Upgrade is too heavy, reduce the weight parameter.
     **/
    upgradeTooHeavy: GenericModuleError;

    /**
     * Can not stake with zero value.
     **/
    stakingWithNoValue: GenericModuleError;

    /**
     * Can not stake with value less than minimum staking value
     **/
    insufficientValue: GenericModuleError;

    /**
     * Number of stakers per contract exceeded.
     **/
    maxNumberOfStakersExceeded: GenericModuleError;

    /**
     * Targets must be operated contracts
     **/
    notOperatedContract: GenericModuleError;

    /**
     * Contract isn't staked.
     **/
    notStakedContract: GenericModuleError;

    /**
     * Contract isn't unregistered.
     **/
    notUnregisteredContract: GenericModuleError;

    /**
     * Unclaimed rewards should be claimed before withdrawing stake.
     **/
    unclaimedRewardsRemaining: GenericModuleError;

    /**
     * Unstaking a contract with zero value
     **/
    unstakingWithNoValue: GenericModuleError;

    /**
     * There are no previously unbonded funds that can be unstaked and withdrawn.
     **/
    nothingToWithdraw: GenericModuleError;

    /**
     * The contract is already registered by other account
     **/
    alreadyRegisteredContract: GenericModuleError;

    /**
     * This account was already used to register contract
     **/
    alreadyUsedDeveloperAccount: GenericModuleError;

    /**
     * Smart contract not owned by the account id.
     **/
    notOwnedContract: GenericModuleError;

    /**
     * Report issue on github if this is ever emitted
     **/
    unknownEraReward: GenericModuleError;

    /**
     * Report issue on github if this is ever emitted
     **/
    unexpectedStakeInfoEra: GenericModuleError;

    /**
     * Contract has too many unlocking chunks. Withdraw the existing chunks if possible
     * or wait for current chunks to complete unlocking process to withdraw them.
     **/
    tooManyUnlockingChunks: GenericModuleError;

    /**
     * Contract already claimed in this era and reward is distributed
     **/
    alreadyClaimedInThisEra: GenericModuleError;

    /**
     * Era parameter is out of bounds
     **/
    eraOutOfBounds: GenericModuleError;

    /**
     * Too many active `EraStake` values for (staker, contract) pairing.
     * Claim existing rewards to fix this problem.
     **/
    tooManyEraStakeValues: GenericModuleError;

    /**
     * Account is not actively staking
     **/
    notActiveStaker: GenericModuleError;

    /**
     * Transfering nomination to the same contract
     **/
    nominationTransferToSameContract: GenericModuleError;
  };
  blockReward: {
    /**
     * Sum of all rations must be one whole (100%)
     **/
    invalidDistributionConfiguration: GenericModuleError;
  };
  assets: {
    /**
     * Account balance must be greater than or equal to the transfer amount.
     **/
    balanceLow: GenericModuleError;

    /**
     * The account to alter does not exist.
     **/
    noAccount: GenericModuleError;

    /**
     * The signing account has no permission to do the operation.
     **/
    noPermission: GenericModuleError;

    /**
     * The given asset ID is unknown.
     **/
    unknown: GenericModuleError;

    /**
     * The origin account is frozen.
     **/
    frozen: GenericModuleError;

    /**
     * The asset ID is already taken.
     **/
    inUse: GenericModuleError;

    /**
     * Invalid witness data given.
     **/
    badWitness: GenericModuleError;

    /**
     * Minimum balance should be non-zero.
     **/
    minBalanceZero: GenericModuleError;

    /**
     * Unable to increment the consumer reference counters on the account. Either no provider
     * reference exists to allow a non-zero balance of a non-self-sufficient asset, or one
     * fewer then the maximum number of consumers has been reached.
     **/
    unavailableConsumer: GenericModuleError;

    /**
     * Invalid metadata given.
     **/
    badMetadata: GenericModuleError;

    /**
     * No approval exists that would allow the transfer.
     **/
    unapproved: GenericModuleError;

    /**
     * The source account would not survive the transfer and it needs to stay alive.
     **/
    wouldDie: GenericModuleError;

    /**
     * The asset-account already exists.
     **/
    alreadyExists: GenericModuleError;

    /**
     * The asset-account doesn't have an associated deposit.
     **/
    noDeposit: GenericModuleError;

    /**
     * The operation would result in funds being burned.
     **/
    wouldBurn: GenericModuleError;

    /**
     * The asset is a live asset and is actively being used. Usually emit for operations such
     * as `start_destroy` which require the asset to be in a destroying state.
     **/
    liveAsset: GenericModuleError;

    /**
     * The asset is not live, and likely being destroyed.
     **/
    assetNotLive: GenericModuleError;

    /**
     * The asset status is not the expected status.
     **/
    incorrectStatus: GenericModuleError;

    /**
     * The asset should be frozen before the given operation.
     **/
    notFrozen: GenericModuleError;

    /**
     * Callback action resulted in error
     **/
    callbackFailed: GenericModuleError;
  };
  collatorSelection: {
    /**
     * Too many candidates
     **/
    tooManyCandidates: GenericModuleError;

    /**
     * Too few candidates
     **/
    tooFewCandidates: GenericModuleError;

    /**
     * Unknown error
     **/
    unknown: GenericModuleError;

    /**
     * Permission issue
     **/
    permission: GenericModuleError;

    /**
     * User is already a candidate
     **/
    alreadyCandidate: GenericModuleError;

    /**
     * User is not a candidate
     **/
    notCandidate: GenericModuleError;

    /**
     * User is already an Invulnerable
     **/
    alreadyInvulnerable: GenericModuleError;

    /**
     * Account has no associated validator ID
     **/
    noAssociatedValidatorId: GenericModuleError;

    /**
     * Validator ID is not yet registered
     **/
    validatorNotRegistered: GenericModuleError;
  };
  session: {
    /**
     * Invalid ownership proof.
     **/
    invalidProof: GenericModuleError;

    /**
     * No associated validator ID for account.
     **/
    noAssociatedValidatorId: GenericModuleError;

    /**
     * Registered duplicate key.
     **/
    duplicatedKey: GenericModuleError;

    /**
     * No keys are associated with this account.
     **/
    noKeys: GenericModuleError;

    /**
     * Key setting account is not live, so it's impossible to associate keys.
     **/
    noAccount: GenericModuleError;
  };
  xcmpQueue: {
    /**
     * Failed to send XCM message.
     **/
    failedToSend: GenericModuleError;

    /**
     * Bad XCM origin.
     **/
    badXcmOrigin: GenericModuleError;

    /**
     * Bad XCM data.
     **/
    badXcm: GenericModuleError;

    /**
     * Bad overweight index.
     **/
    badOverweightIndex: GenericModuleError;

    /**
     * Provided weight is possibly not enough to execute the message.
     **/
    weightOverLimit: GenericModuleError;
  };
  polkadotXcm: {
    /**
     * The desired destination was unreachable, generally because there is a no way of routing
     * to it.
     **/
    unreachable: GenericModuleError;

    /**
     * There was some other issue (i.e. not to do with routing) in sending the message. Perhaps
     * a lack of space for buffering the message.
     **/
    sendFailure: GenericModuleError;

    /**
     * The message execution fails the filter.
     **/
    filtered: GenericModuleError;

    /**
     * The message's weight could not be determined.
     **/
    unweighableMessage: GenericModuleError;

    /**
     * The destination `MultiLocation` provided cannot be inverted.
     **/
    destinationNotInvertible: GenericModuleError;

    /**
     * The assets to be sent are empty.
     **/
    empty: GenericModuleError;

    /**
     * Could not re-anchor the assets to declare the fees for the destination chain.
     **/
    cannotReanchor: GenericModuleError;

    /**
     * Too many assets have been attempted for transfer.
     **/
    tooManyAssets: GenericModuleError;

    /**
     * Origin is invalid for sending.
     **/
    invalidOrigin: GenericModuleError;

    /**
     * The version of the `Versioned` value used is not able to be interpreted.
     **/
    badVersion: GenericModuleError;

    /**
     * The given location could not be used (e.g. because it cannot be expressed in the
     * desired version of XCM).
     **/
    badLocation: GenericModuleError;

    /**
     * The referenced subscription could not be found.
     **/
    noSubscription: GenericModuleError;

    /**
     * The location is invalid since it already has a subscription from us.
     **/
    alreadySubscribed: GenericModuleError;

    /**
     * Invalid asset for the operation.
     **/
    invalidAsset: GenericModuleError;

    /**
     * The owner does not own (all) of the asset that they wish to do the operation on.
     **/
    lowBalance: GenericModuleError;

    /**
     * The asset owner has too many locks on the asset.
     **/
    tooManyLocks: GenericModuleError;

    /**
     * The given account is not an identifiable sovereign account for any location.
     **/
    accountNotSovereign: GenericModuleError;

    /**
     * The operation required fees to be paid which the initiator could not meet.
     **/
    feesNotMet: GenericModuleError;

    /**
     * A remote lock with the corresponding data could not be found.
     **/
    lockNotFound: GenericModuleError;

    /**
     * The unlock operation cannot succeed because there are still consumers of the lock.
     **/
    inUse: GenericModuleError;
  };
  cumulusXcm: {};
  dmpQueue: {
    /**
     * The message index given is unknown.
     **/
    unknown: GenericModuleError;

    /**
     * The amount of weight given is possibly not enough for executing the message.
     **/
    overLimit: GenericModuleError;
  };
  xcAssetConfig: {
    /**
     * Asset is already registered.
     **/
    assetAlreadyRegistered: GenericModuleError;

    /**
     * Asset does not exist (hasn't been registered).
     **/
    assetDoesNotExist: GenericModuleError;

    /**
     * Failed to convert to latest versioned MultiLocation
     **/
    multiLocationNotSupported: GenericModuleError;
  };
  xTokens: {
    /**
     * Asset has no reserve location.
     **/
    assetHasNoReserve: GenericModuleError;

    /**
     * Not cross-chain transfer.
     **/
    notCrossChainTransfer: GenericModuleError;

    /**
     * Invalid transfer destination.
     **/
    invalidDest: GenericModuleError;

    /**
     * Currency is not cross-chain transferable.
     **/
    notCrossChainTransferableCurrency: GenericModuleError;

    /**
     * The message's weight could not be determined.
     **/
    unweighableMessage: GenericModuleError;

    /**
     * XCM execution failed.
     **/
    xcmExecutionFailed: GenericModuleError;

    /**
     * Could not re-anchor the assets to declare the fees for the
     * destination chain.
     **/
    cannotReanchor: GenericModuleError;

    /**
     * Could not get ancestry of asset reserve location.
     **/
    invalidAncestry: GenericModuleError;

    /**
     * The MultiAsset is invalid.
     **/
    invalidAsset: GenericModuleError;

    /**
     * The destination `MultiLocation` provided cannot be inverted.
     **/
    destinationNotInvertible: GenericModuleError;

    /**
     * The version of the `Versioned` value used is not able to be
     * interpreted.
     **/
    badVersion: GenericModuleError;

    /**
     * We tried sending distinct asset and fee but they have different
     * reserve chains.
     **/
    distinctReserveForAssetAndFee: GenericModuleError;

    /**
     * The fee is zero.
     **/
    zeroFee: GenericModuleError;

    /**
     * The transfering asset amount is zero.
     **/
    zeroAmount: GenericModuleError;

    /**
     * The number of assets to be sent is over the maximum.
     **/
    tooManyAssetsBeingSent: GenericModuleError;

    /**
     * The specified index does not exist in a MultiAssets struct.
     **/
    assetIndexNonExistent: GenericModuleError;

    /**
     * Fee is not enough.
     **/
    feeNotEnough: GenericModuleError;

    /**
     * Not supported MultiLocation
     **/
    notSupportedMultiLocation: GenericModuleError;

    /**
     * MinXcmFee not registered for certain reserve location
     **/
    minXcmFeeNotDefined: GenericModuleError;
  };
  evm: {
    /**
     * Not enough balance to perform action
     **/
    balanceLow: GenericModuleError;

    /**
     * Calculating total fee overflowed
     **/
    feeOverflow: GenericModuleError;

    /**
     * Calculating total payment overflowed
     **/
    paymentOverflow: GenericModuleError;

    /**
     * Withdraw fee failed
     **/
    withdrawFailed: GenericModuleError;

    /**
     * Gas price is too low.
     **/
    gasPriceTooLow: GenericModuleError;

    /**
     * Nonce is invalid
     **/
    invalidNonce: GenericModuleError;

    /**
     * Gas limit is too low.
     **/
    gasLimitTooLow: GenericModuleError;

    /**
     * Gas limit is too high.
     **/
    gasLimitTooHigh: GenericModuleError;

    /**
     * Undefined error.
     **/
    undefined: GenericModuleError;

    /**
     * EVM reentrancy
     **/
    reentrancy: GenericModuleError;

    /**
     * EIP-3607,
     **/
    transactionMustComeFromEOA: GenericModuleError;
  };
  ethereum: {
    /**
     * Signature is invalid.
     **/
    invalidSignature: GenericModuleError;

    /**
     * Pre-log is present, therefore transact is not allowed.
     **/
    preLogExists: GenericModuleError;
  };
  dynamicEvmBaseFee: {
    /**
     * Specified value is outside of the allowed range.
     **/
    valueOutOfBounds: GenericModuleError;
  };
  contracts: {
    /**
     * A new schedule must have a greater version than the current one.
     **/
    invalidScheduleVersion: GenericModuleError;

    /**
     * Invalid combination of flags supplied to `seal_call` or `seal_delegate_call`.
     **/
    invalidCallFlags: GenericModuleError;

    /**
     * The executed contract exhausted its gas limit.
     **/
    outOfGas: GenericModuleError;

    /**
     * The output buffer supplied to a contract API call was too small.
     **/
    outputBufferTooSmall: GenericModuleError;

    /**
     * Performing the requested transfer failed. Probably because there isn't enough
     * free balance in the sender's account.
     **/
    transferFailed: GenericModuleError;

    /**
     * Performing a call was denied because the calling depth reached the limit
     * of what is specified in the schedule.
     **/
    maxCallDepthReached: GenericModuleError;

    /**
     * No contract was found at the specified address.
     **/
    contractNotFound: GenericModuleError;

    /**
     * The code supplied to `instantiate_with_code` exceeds the limit specified in the
     * current schedule.
     **/
    codeTooLarge: GenericModuleError;

    /**
     * No code could be found at the supplied code hash.
     **/
    codeNotFound: GenericModuleError;

    /**
     * A buffer outside of sandbox memory was passed to a contract API function.
     **/
    outOfBounds: GenericModuleError;

    /**
     * Input passed to a contract API function failed to decode as expected type.
     **/
    decodingFailed: GenericModuleError;

    /**
     * Contract trapped during execution.
     **/
    contractTrapped: GenericModuleError;

    /**
     * The size defined in `T::MaxValueSize` was exceeded.
     **/
    valueTooLarge: GenericModuleError;

    /**
     * Termination of a contract is not allowed while the contract is already
     * on the call stack. Can be triggered by `seal_terminate`.
     **/
    terminatedWhileReentrant: GenericModuleError;

    /**
     * `seal_call` forwarded this contracts input. It therefore is no longer available.
     **/
    inputForwarded: GenericModuleError;

    /**
     * The subject passed to `seal_random` exceeds the limit.
     **/
    randomSubjectTooLong: GenericModuleError;

    /**
     * The amount of topics passed to `seal_deposit_events` exceeds the limit.
     **/
    tooManyTopics: GenericModuleError;

    /**
     * The chain does not provide a chain extension. Calling the chain extension results
     * in this error. Note that this usually shouldn't happen as deploying such contracts
     * is rejected.
     **/
    noChainExtension: GenericModuleError;

    /**
     * A contract with the same AccountId already exists.
     **/
    duplicateContract: GenericModuleError;

    /**
     * A contract self destructed in its constructor.
     *
     * This can be triggered by a call to `seal_terminate`.
     **/
    terminatedInConstructor: GenericModuleError;

    /**
     * A call tried to invoke a contract that is flagged as non-reentrant.
     * The only other cause is that a call from a contract into the runtime tried to call back
     * into `pallet-contracts`. This would make the whole pallet reentrant with regard to
     * contract code execution which is not supported.
     **/
    reentranceDenied: GenericModuleError;

    /**
     * Origin doesn't have enough balance to pay the required storage deposits.
     **/
    storageDepositNotEnoughFunds: GenericModuleError;

    /**
     * More storage was created than allowed by the storage deposit limit.
     **/
    storageDepositLimitExhausted: GenericModuleError;

    /**
     * Code removal was denied because the code is still in use by at least one contract.
     **/
    codeInUse: GenericModuleError;

    /**
     * The contract ran to completion but decided to revert its storage changes.
     * Please note that this error is only returned from extrinsics. When called directly
     * or via RPC an `Ok` will be returned. In this case the caller needs to inspect the flags
     * to determine whether a reversion has taken place.
     **/
    contractReverted: GenericModuleError;

    /**
     * The contract's code was found to be invalid during validation or instrumentation.
     *
     * The most likely cause of this is that an API was used which is not supported by the
     * node. This happens if an older node is used with a new version of ink!. Try updating
     * your node to the newest available version.
     *
     * A more detailed error can be found on the node console if debug messages are enabled
     * by supplying `-lruntime::contracts=debug`.
     **/
    codeRejected: GenericModuleError;

    /**
     * An indetermistic code was used in a context where this is not permitted.
     **/
    indeterministic: GenericModuleError;

    /**
     * A pending migration needs to complete before the extrinsic can be called.
     **/
    migrationInProgress: GenericModuleError;

    /**
     * Migrate dispatch call was attempted but no migration was performed.
     **/
    noMigrationPerformed: GenericModuleError;
  };
  sudo: {
    /**
     * Sender must be the Sudo account
     **/
    requireSudo: GenericModuleError;
  };
}
