// Generated by @delightfuldot/codegen

import type {
  Bytes,
  FixedBytes,
  AccountId32Like,
  H256,
  Digest,
  DigestItem,
  H160,
  Perbill,
  U256,
  Permill,
  MultiAddress,
  Data,
  FixedU128,
} from '@delightfuldot/codecs';
export type {
  Bytes,
  FixedBytes,
  AccountId32Like,
  H256,
  Digest,
  DigestItem,
  H160,
  Perbill,
  U256,
  Permill,
  MultiAddress,
  Data,
  FixedU128,
} from '@delightfuldot/codecs';

export type AccountId = AccountId32Like;

export type FrameSystemAccountInfo = {
  nonce: number;
  consumers: number;
  providers: number;
  sufficients: number;
  data: PalletBalancesAccountData;
};

export type PalletBalancesAccountData = {
  free: bigint;
  reserved: bigint;
  frozen: bigint;
  flags: PalletBalancesExtraFlags;
};

export type PalletBalancesExtraFlags = bigint;

export type FrameSupportDispatchPerDispatchClass = {
  normal: SpWeightsWeightV2Weight;
  operational: SpWeightsWeightV2Weight;
  mandatory: SpWeightsWeightV2Weight;
};

export type SpWeightsWeightV2Weight = { refTime: bigint; proofSize: bigint };

export type FrameSystemEventRecord = { phase: FrameSystemPhase; event: AstarRuntimeRuntimeEvent; topics: Array<H256> };

export type AstarRuntimeRuntimeEvent =
  | { tag: 'System'; value: FrameSystemEvent }
  | { tag: 'Utility'; value: PalletUtilityEvent }
  | { tag: 'Identity'; value: PalletIdentityEvent }
  | { tag: 'Multisig'; value: PalletMultisigEvent }
  | { tag: 'Proxy'; value: PalletProxyEvent }
  | { tag: 'ParachainSystem'; value: CumulusPalletParachainSystemEvent }
  | { tag: 'TransactionPayment'; value: PalletTransactionPaymentEvent }
  | { tag: 'Balances'; value: PalletBalancesEvent }
  | { tag: 'Vesting'; value: PalletVestingEvent }
  | { tag: 'DappsStaking'; value: PalletDappsStakingPalletEvent }
  | { tag: 'BlockReward'; value: PalletBlockRewardEvent }
  | { tag: 'Assets'; value: PalletAssetsEvent }
  | { tag: 'CollatorSelection'; value: PalletCollatorSelectionEvent }
  | { tag: 'Session'; value: PalletSessionEvent }
  | { tag: 'XcmpQueue'; value: CumulusPalletXcmpQueueEvent }
  | { tag: 'PolkadotXcm'; value: PalletXcmEvent }
  | { tag: 'CumulusXcm'; value: CumulusPalletXcmEvent }
  | { tag: 'DmpQueue'; value: CumulusPalletDmpQueueEvent }
  | { tag: 'XcAssetConfig'; value: PalletXcAssetConfigEvent }
  | { tag: 'Xtokens'; value: OrmlXtokensModuleEvent }
  | { tag: 'EVM'; value: PalletEvmEvent }
  | { tag: 'Ethereum'; value: PalletEthereumEvent }
  | { tag: 'EthCall'; value: PalletCustomSignaturesEvent }
  | { tag: 'BaseFee'; value: PalletBaseFeeEvent }
  | { tag: 'Contracts'; value: PalletContractsEvent }
  | { tag: 'Sudo'; value: PalletSudoEvent };

/**
 * Event for the System pallet.
 **/
export type FrameSystemEvent =
  | { tag: 'ExtrinsicSuccess'; value: { dispatchInfo: FrameSupportDispatchDispatchInfo } }
  | {
      tag: 'ExtrinsicFailed';
      value: { dispatchError: SpRuntimeDispatchError; dispatchInfo: FrameSupportDispatchDispatchInfo };
    }
  | { tag: 'CodeUpdated' }
  | { tag: 'NewAccount'; value: { account: AccountId32Like } }
  | { tag: 'KilledAccount'; value: { account: AccountId32Like } }
  | { tag: 'Remarked'; value: { sender: AccountId32Like; hash: H256 } };

export type FrameSupportDispatchDispatchInfo = {
  weight: SpWeightsWeightV2Weight;
  class: FrameSupportDispatchDispatchClass;
  paysFee: FrameSupportDispatchPays;
};

export type FrameSupportDispatchDispatchClass = 'Normal' | 'Operational' | 'Mandatory';

export type FrameSupportDispatchPays = 'Yes' | 'No';

export type SpRuntimeDispatchError =
  | { tag: 'Other' }
  | { tag: 'CannotLookup' }
  | { tag: 'BadOrigin' }
  | { tag: 'Module'; value: SpRuntimeModuleError }
  | { tag: 'ConsumerRemaining' }
  | { tag: 'NoProviders' }
  | { tag: 'TooManyConsumers' }
  | { tag: 'Token'; value: SpRuntimeTokenError }
  | { tag: 'Arithmetic'; value: SpArithmeticArithmeticError }
  | { tag: 'Transactional'; value: SpRuntimeTransactionalError }
  | { tag: 'Exhausted' }
  | { tag: 'Corruption' }
  | { tag: 'Unavailable' }
  | { tag: 'RootNotAllowed' };

export type SpRuntimeModuleError = { index: number; error: FixedBytes<4> };

export type SpRuntimeTokenError =
  | 'FundsUnavailable'
  | 'OnlyProvider'
  | 'BelowMinimum'
  | 'CannotCreate'
  | 'UnknownAsset'
  | 'Frozen'
  | 'Unsupported'
  | 'CannotCreateHold'
  | 'NotExpendable'
  | 'Blocked';

export type SpArithmeticArithmeticError = 'Underflow' | 'Overflow' | 'DivisionByZero';

export type SpRuntimeTransactionalError = 'LimitReached' | 'NoLayer';

/**
 * The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted by this pallet.
 **/
export type PalletUtilityEvent =
  | { tag: 'BatchInterrupted'; value: { index: number; error: SpRuntimeDispatchError } }
  | { tag: 'BatchCompleted' }
  | { tag: 'BatchCompletedWithErrors' }
  | { tag: 'ItemCompleted' }
  | { tag: 'ItemFailed'; value: { error: SpRuntimeDispatchError } }
  | { tag: 'DispatchedAs'; value: { result: [] | SpRuntimeDispatchError } };

/**
 * The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted by this pallet.
 **/
export type PalletIdentityEvent =
  | { tag: 'IdentitySet'; value: { who: AccountId32Like } }
  | { tag: 'IdentityCleared'; value: { who: AccountId32Like; deposit: bigint } }
  | { tag: 'IdentityKilled'; value: { who: AccountId32Like; deposit: bigint } }
  | { tag: 'JudgementRequested'; value: { who: AccountId32Like; registrarIndex: number } }
  | { tag: 'JudgementUnrequested'; value: { who: AccountId32Like; registrarIndex: number } }
  | { tag: 'JudgementGiven'; value: { target: AccountId32Like; registrarIndex: number } }
  | { tag: 'RegistrarAdded'; value: { registrarIndex: number } }
  | { tag: 'SubIdentityAdded'; value: { sub: AccountId32Like; main: AccountId32Like; deposit: bigint } }
  | { tag: 'SubIdentityRemoved'; value: { sub: AccountId32Like; main: AccountId32Like; deposit: bigint } }
  | { tag: 'SubIdentityRevoked'; value: { sub: AccountId32Like; main: AccountId32Like; deposit: bigint } };

/**
 * The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted by this pallet.
 **/
export type PalletMultisigEvent =
  | { tag: 'NewMultisig'; value: { approving: AccountId32Like; multisig: AccountId32Like; callHash: FixedBytes<32> } }
  | {
      tag: 'MultisigApproval';
      value: {
        approving: AccountId32Like;
        timepoint: PalletMultisigTimepoint;
        multisig: AccountId32Like;
        callHash: FixedBytes<32>;
      };
    }
  | {
      tag: 'MultisigExecuted';
      value: {
        approving: AccountId32Like;
        timepoint: PalletMultisigTimepoint;
        multisig: AccountId32Like;
        callHash: FixedBytes<32>;
        result: [] | SpRuntimeDispatchError;
      };
    }
  | {
      tag: 'MultisigCancelled';
      value: {
        cancelling: AccountId32Like;
        timepoint: PalletMultisigTimepoint;
        multisig: AccountId32Like;
        callHash: FixedBytes<32>;
      };
    };

export type PalletMultisigTimepoint = { height: number; index: number };

/**
 * The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted by this pallet.
 **/
export type PalletProxyEvent =
  | { tag: 'ProxyExecuted'; value: { result: [] | SpRuntimeDispatchError } }
  | {
      tag: 'PureCreated';
      value: {
        pure: AccountId32Like;
        who: AccountId32Like;
        proxyType: AstarRuntimeProxyType;
        disambiguationIndex: number;
      };
    }
  | { tag: 'Announced'; value: { real: AccountId32Like; proxy: AccountId32Like; callHash: H256 } }
  | {
      tag: 'ProxyAdded';
      value: {
        delegator: AccountId32Like;
        delegatee: AccountId32Like;
        proxyType: AstarRuntimeProxyType;
        delay: number;
      };
    }
  | {
      tag: 'ProxyRemoved';
      value: {
        delegator: AccountId32Like;
        delegatee: AccountId32Like;
        proxyType: AstarRuntimeProxyType;
        delay: number;
      };
    };

export type AstarRuntimeProxyType =
  | 'Any'
  | 'NonTransfer'
  | 'Balances'
  | 'Assets'
  | 'IdentityJudgement'
  | 'CancelProxy'
  | 'DappsStaking'
  | 'StakerRewardClaim';

/**
 * The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted by this pallet.
 **/
export type CumulusPalletParachainSystemEvent =
  | { tag: 'ValidationFunctionStored' }
  | { tag: 'ValidationFunctionApplied'; value: { relayChainBlockNum: number } }
  | { tag: 'ValidationFunctionDiscarded' }
  | { tag: 'UpgradeAuthorized'; value: { codeHash: H256 } }
  | { tag: 'DownwardMessagesReceived'; value: { count: number } }
  | { tag: 'DownwardMessagesProcessed'; value: { weightUsed: SpWeightsWeightV2Weight; dmqHead: H256 } }
  | { tag: 'UpwardMessageSent'; value: { messageHash?: FixedBytes<32> | undefined } };

/**
 * The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted by this pallet.
 **/
export type PalletTransactionPaymentEvent = {
  tag: 'TransactionFeePaid';
  value: { who: AccountId32Like; actualFee: bigint; tip: bigint };
};

/**
 * The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted by this pallet.
 **/
export type PalletBalancesEvent =
  | { tag: 'Endowed'; value: { account: AccountId32Like; freeBalance: bigint } }
  | { tag: 'DustLost'; value: { account: AccountId32Like; amount: bigint } }
  | { tag: 'Transfer'; value: { from: AccountId32Like; to: AccountId32Like; amount: bigint } }
  | { tag: 'BalanceSet'; value: { who: AccountId32Like; free: bigint } }
  | { tag: 'Reserved'; value: { who: AccountId32Like; amount: bigint } }
  | { tag: 'Unreserved'; value: { who: AccountId32Like; amount: bigint } }
  | {
      tag: 'ReserveRepatriated';
      value: {
        from: AccountId32Like;
        to: AccountId32Like;
        amount: bigint;
        destinationStatus: FrameSupportTokensMiscBalanceStatus;
      };
    }
  | { tag: 'Deposit'; value: { who: AccountId32Like; amount: bigint } }
  | { tag: 'Withdraw'; value: { who: AccountId32Like; amount: bigint } }
  | { tag: 'Slashed'; value: { who: AccountId32Like; amount: bigint } }
  | { tag: 'Minted'; value: { who: AccountId32Like; amount: bigint } }
  | { tag: 'Burned'; value: { who: AccountId32Like; amount: bigint } }
  | { tag: 'Suspended'; value: { who: AccountId32Like; amount: bigint } }
  | { tag: 'Restored'; value: { who: AccountId32Like; amount: bigint } }
  | { tag: 'Upgraded'; value: { who: AccountId32Like } }
  | { tag: 'Issued'; value: { amount: bigint } }
  | { tag: 'Rescinded'; value: { amount: bigint } }
  | { tag: 'Locked'; value: { who: AccountId32Like; amount: bigint } }
  | { tag: 'Unlocked'; value: { who: AccountId32Like; amount: bigint } }
  | { tag: 'Frozen'; value: { who: AccountId32Like; amount: bigint } }
  | { tag: 'Thawed'; value: { who: AccountId32Like; amount: bigint } };

export type FrameSupportTokensMiscBalanceStatus = 'Free' | 'Reserved';

/**
 * The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted by this pallet.
 **/
export type PalletVestingEvent =
  | { tag: 'VestingUpdated'; value: { account: AccountId32Like; unvested: bigint } }
  | { tag: 'VestingCompleted'; value: { account: AccountId32Like } };

/**
 * The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted by this pallet.
 **/
export type PalletDappsStakingPalletEvent =
  | { tag: 'BondAndStake'; value: [AccountId32Like, AstarRuntimeSmartContract, bigint] }
  | { tag: 'UnbondAndUnstake'; value: [AccountId32Like, AstarRuntimeSmartContract, bigint] }
  | { tag: 'WithdrawFromUnregistered'; value: [AccountId32Like, AstarRuntimeSmartContract, bigint] }
  | { tag: 'Withdrawn'; value: [AccountId32Like, bigint] }
  | { tag: 'NewContract'; value: [AccountId32Like, AstarRuntimeSmartContract] }
  | { tag: 'ContractRemoved'; value: [AccountId32Like, AstarRuntimeSmartContract] }
  | { tag: 'NewDappStakingEra'; value: number }
  | { tag: 'Reward'; value: [AccountId32Like, AstarRuntimeSmartContract, number, bigint] }
  | { tag: 'MaintenanceMode'; value: boolean }
  | { tag: 'RewardDestination'; value: [AccountId32Like, PalletDappsStakingRewardDestination] }
  | {
      tag: 'NominationTransfer';
      value: [AccountId32Like, AstarRuntimeSmartContract, bigint, AstarRuntimeSmartContract];
    }
  | { tag: 'StaleRewardBurned'; value: [AccountId32Like, AstarRuntimeSmartContract, number, bigint] };

export type AstarRuntimeSmartContract = { tag: 'Evm'; value: H160 } | { tag: 'Wasm'; value: AccountId32Like };

export type PalletDappsStakingRewardDestination = 'FreeBalance' | 'StakeBalance';

/**
 * The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted by this pallet.
 **/
export type PalletBlockRewardEvent = {
  tag: 'DistributionConfigurationChanged';
  value: PalletBlockRewardRewardDistributionConfig;
};

export type PalletBlockRewardRewardDistributionConfig = {
  baseTreasuryPercent: Perbill;
  baseStakerPercent: Perbill;
  dappsPercent: Perbill;
  collatorsPercent: Perbill;
  adjustablePercent: Perbill;
  idealDappsStakingTvl: Perbill;
};

/**
 * The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted by this pallet.
 **/
export type PalletAssetsEvent =
  | { tag: 'Created'; value: { assetId: bigint; creator: AccountId32Like; owner: AccountId32Like } }
  | { tag: 'Issued'; value: { assetId: bigint; owner: AccountId32Like; amount: bigint } }
  | { tag: 'Transferred'; value: { assetId: bigint; from: AccountId32Like; to: AccountId32Like; amount: bigint } }
  | { tag: 'Burned'; value: { assetId: bigint; owner: AccountId32Like; balance: bigint } }
  | {
      tag: 'TeamChanged';
      value: { assetId: bigint; issuer: AccountId32Like; admin: AccountId32Like; freezer: AccountId32Like };
    }
  | { tag: 'OwnerChanged'; value: { assetId: bigint; owner: AccountId32Like } }
  | { tag: 'Frozen'; value: { assetId: bigint; who: AccountId32Like } }
  | { tag: 'Thawed'; value: { assetId: bigint; who: AccountId32Like } }
  | { tag: 'AssetFrozen'; value: { assetId: bigint } }
  | { tag: 'AssetThawed'; value: { assetId: bigint } }
  | { tag: 'AccountsDestroyed'; value: { assetId: bigint; accountsDestroyed: number; accountsRemaining: number } }
  | { tag: 'ApprovalsDestroyed'; value: { assetId: bigint; approvalsDestroyed: number; approvalsRemaining: number } }
  | { tag: 'DestructionStarted'; value: { assetId: bigint } }
  | { tag: 'Destroyed'; value: { assetId: bigint } }
  | { tag: 'ForceCreated'; value: { assetId: bigint; owner: AccountId32Like } }
  | { tag: 'MetadataSet'; value: { assetId: bigint; name: Bytes; symbol: Bytes; decimals: number; isFrozen: boolean } }
  | { tag: 'MetadataCleared'; value: { assetId: bigint } }
  | {
      tag: 'ApprovedTransfer';
      value: { assetId: bigint; source: AccountId32Like; delegate: AccountId32Like; amount: bigint };
    }
  | { tag: 'ApprovalCancelled'; value: { assetId: bigint; owner: AccountId32Like; delegate: AccountId32Like } }
  | {
      tag: 'TransferredApproved';
      value: {
        assetId: bigint;
        owner: AccountId32Like;
        delegate: AccountId32Like;
        destination: AccountId32Like;
        amount: bigint;
      };
    }
  | { tag: 'AssetStatusChanged'; value: { assetId: bigint } }
  | { tag: 'AssetMinBalanceChanged'; value: { assetId: bigint; newMinBalance: bigint } }
  | { tag: 'Touched'; value: { assetId: bigint; who: AccountId32Like; depositor: AccountId32Like } }
  | { tag: 'Blocked'; value: { assetId: bigint; who: AccountId32Like } };

/**
 * The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted by this pallet.
 **/
export type PalletCollatorSelectionEvent =
  | { tag: 'NewInvulnerables'; value: Array<AccountId32Like> }
  | { tag: 'NewDesiredCandidates'; value: number }
  | { tag: 'NewCandidacyBond'; value: bigint }
  | { tag: 'CandidateAdded'; value: [AccountId32Like, bigint] }
  | { tag: 'CandidateRemoved'; value: AccountId32Like }
  | { tag: 'CandidateSlashed'; value: AccountId32Like };

/**
 * The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted by this pallet.
 **/
export type PalletSessionEvent = { tag: 'NewSession'; value: { sessionIndex: number } };

/**
 * The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted by this pallet.
 **/
export type CumulusPalletXcmpQueueEvent =
  | { tag: 'Success'; value: { messageHash?: FixedBytes<32> | undefined; weight: SpWeightsWeightV2Weight } }
  | {
      tag: 'Fail';
      value: { messageHash?: FixedBytes<32> | undefined; error: XcmV3TraitsError; weight: SpWeightsWeightV2Weight };
    }
  | { tag: 'BadVersion'; value: { messageHash?: FixedBytes<32> | undefined } }
  | { tag: 'BadFormat'; value: { messageHash?: FixedBytes<32> | undefined } }
  | { tag: 'XcmpMessageSent'; value: { messageHash?: FixedBytes<32> | undefined } }
  | {
      tag: 'OverweightEnqueued';
      value: {
        sender: PolkadotParachainPrimitivesId;
        sentAt: number;
        index: bigint;
        required: SpWeightsWeightV2Weight;
      };
    }
  | { tag: 'OverweightServiced'; value: { index: bigint; used: SpWeightsWeightV2Weight } };

export type XcmV3TraitsError =
  | { tag: 'Overflow' }
  | { tag: 'Unimplemented' }
  | { tag: 'UntrustedReserveLocation' }
  | { tag: 'UntrustedTeleportLocation' }
  | { tag: 'LocationFull' }
  | { tag: 'LocationNotInvertible' }
  | { tag: 'BadOrigin' }
  | { tag: 'InvalidLocation' }
  | { tag: 'AssetNotFound' }
  | { tag: 'FailedToTransactAsset' }
  | { tag: 'NotWithdrawable' }
  | { tag: 'LocationCannotHold' }
  | { tag: 'ExceedsMaxMessageSize' }
  | { tag: 'DestinationUnsupported' }
  | { tag: 'Transport' }
  | { tag: 'Unroutable' }
  | { tag: 'UnknownClaim' }
  | { tag: 'FailedToDecode' }
  | { tag: 'MaxWeightInvalid' }
  | { tag: 'NotHoldingFees' }
  | { tag: 'TooExpensive' }
  | { tag: 'Trap'; value: bigint }
  | { tag: 'ExpectationFalse' }
  | { tag: 'PalletNotFound' }
  | { tag: 'NameMismatch' }
  | { tag: 'VersionIncompatible' }
  | { tag: 'HoldingWouldOverflow' }
  | { tag: 'ExportError' }
  | { tag: 'ReanchorFailed' }
  | { tag: 'NoDeal' }
  | { tag: 'FeesNotMet' }
  | { tag: 'LockError' }
  | { tag: 'NoPermission' }
  | { tag: 'Unanchored' }
  | { tag: 'NotDepositable' }
  | { tag: 'UnhandledXcmVersion' }
  | { tag: 'WeightLimitReached'; value: SpWeightsWeightV2Weight }
  | { tag: 'Barrier' }
  | { tag: 'WeightNotComputable' }
  | { tag: 'ExceedsStackLimit' };

export type PolkadotParachainPrimitivesId = number;

/**
 * The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted by this pallet.
 **/
export type PalletXcmEvent =
  | { tag: 'Attempted'; value: XcmV3TraitsOutcome }
  | { tag: 'Sent'; value: [XcmV3MultilocationMultiLocation, XcmV3MultilocationMultiLocation, XcmV3Xcm] }
  | { tag: 'UnexpectedResponse'; value: [XcmV3MultilocationMultiLocation, bigint] }
  | { tag: 'ResponseReady'; value: [bigint, XcmV3Response] }
  | { tag: 'Notified'; value: [bigint, number, number] }
  | { tag: 'NotifyOverweight'; value: [bigint, number, number, SpWeightsWeightV2Weight, SpWeightsWeightV2Weight] }
  | { tag: 'NotifyDispatchError'; value: [bigint, number, number] }
  | { tag: 'NotifyDecodeFailed'; value: [bigint, number, number] }
  | {
      tag: 'InvalidResponder';
      value: [XcmV3MultilocationMultiLocation, bigint, XcmV3MultilocationMultiLocation | undefined];
    }
  | { tag: 'InvalidResponderVersion'; value: [XcmV3MultilocationMultiLocation, bigint] }
  | { tag: 'ResponseTaken'; value: bigint }
  | { tag: 'AssetsTrapped'; value: [H256, XcmV3MultilocationMultiLocation, XcmVersionedMultiAssets] }
  | { tag: 'VersionChangeNotified'; value: [XcmV3MultilocationMultiLocation, number, XcmV3MultiassetMultiAssets] }
  | { tag: 'SupportedVersionChanged'; value: [XcmV3MultilocationMultiLocation, number] }
  | { tag: 'NotifyTargetSendFail'; value: [XcmV3MultilocationMultiLocation, bigint, XcmV3TraitsError] }
  | { tag: 'NotifyTargetMigrationFail'; value: [XcmVersionedMultiLocation, bigint] }
  | { tag: 'InvalidQuerierVersion'; value: [XcmV3MultilocationMultiLocation, bigint] }
  | {
      tag: 'InvalidQuerier';
      value: [
        XcmV3MultilocationMultiLocation,
        bigint,
        XcmV3MultilocationMultiLocation,
        XcmV3MultilocationMultiLocation | undefined,
      ];
    }
  | { tag: 'VersionNotifyStarted'; value: [XcmV3MultilocationMultiLocation, XcmV3MultiassetMultiAssets] }
  | { tag: 'VersionNotifyRequested'; value: [XcmV3MultilocationMultiLocation, XcmV3MultiassetMultiAssets] }
  | { tag: 'VersionNotifyUnrequested'; value: [XcmV3MultilocationMultiLocation, XcmV3MultiassetMultiAssets] }
  | { tag: 'FeesPaid'; value: [XcmV3MultilocationMultiLocation, XcmV3MultiassetMultiAssets] }
  | { tag: 'AssetsClaimed'; value: [H256, XcmV3MultilocationMultiLocation, XcmVersionedMultiAssets] };

export type XcmV3TraitsOutcome =
  | { tag: 'Complete'; value: SpWeightsWeightV2Weight }
  | { tag: 'Incomplete'; value: [SpWeightsWeightV2Weight, XcmV3TraitsError] }
  | { tag: 'Error'; value: XcmV3TraitsError };

export type XcmV3MultilocationMultiLocation = { parents: number; interior: XcmV3Junctions };

export type XcmV3Junctions =
  | { tag: 'Here' }
  | { tag: 'X1'; value: XcmV3Junction }
  | { tag: 'X2'; value: [XcmV3Junction, XcmV3Junction] }
  | { tag: 'X3'; value: [XcmV3Junction, XcmV3Junction, XcmV3Junction] }
  | { tag: 'X4'; value: [XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction] }
  | { tag: 'X5'; value: [XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction] }
  | { tag: 'X6'; value: [XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction] }
  | {
      tag: 'X7';
      value: [XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction];
    }
  | {
      tag: 'X8';
      value: [
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
      ];
    };

export type XcmV3Junction =
  | { tag: 'Parachain'; value: number }
  | { tag: 'AccountId32'; value: { network?: XcmV3JunctionNetworkId | undefined; id: FixedBytes<32> } }
  | { tag: 'AccountIndex64'; value: { network?: XcmV3JunctionNetworkId | undefined; index: bigint } }
  | { tag: 'AccountKey20'; value: { network?: XcmV3JunctionNetworkId | undefined; key: FixedBytes<20> } }
  | { tag: 'PalletInstance'; value: number }
  | { tag: 'GeneralIndex'; value: bigint }
  | { tag: 'GeneralKey'; value: { length: number; data: FixedBytes<32> } }
  | { tag: 'OnlyChild' }
  | { tag: 'Plurality'; value: { id: XcmV3JunctionBodyId; part: XcmV3JunctionBodyPart } }
  | { tag: 'GlobalConsensus'; value: XcmV3JunctionNetworkId };

export type XcmV3JunctionNetworkId =
  | { tag: 'ByGenesis'; value: FixedBytes<32> }
  | { tag: 'ByFork'; value: { blockNumber: bigint; blockHash: FixedBytes<32> } }
  | { tag: 'Polkadot' }
  | { tag: 'Kusama' }
  | { tag: 'Westend' }
  | { tag: 'Rococo' }
  | { tag: 'Wococo' }
  | { tag: 'Ethereum'; value: { chainId: bigint } }
  | { tag: 'BitcoinCore' }
  | { tag: 'BitcoinCash' };

export type XcmV3JunctionBodyId =
  | { tag: 'Unit' }
  | { tag: 'Moniker'; value: FixedBytes<4> }
  | { tag: 'Index'; value: number }
  | { tag: 'Executive' }
  | { tag: 'Technical' }
  | { tag: 'Legislative' }
  | { tag: 'Judicial' }
  | { tag: 'Defense' }
  | { tag: 'Administration' }
  | { tag: 'Treasury' };

export type XcmV3JunctionBodyPart =
  | { tag: 'Voice' }
  | { tag: 'Members'; value: { count: number } }
  | { tag: 'Fraction'; value: { nom: number; denom: number } }
  | { tag: 'AtLeastProportion'; value: { nom: number; denom: number } }
  | { tag: 'MoreThanProportion'; value: { nom: number; denom: number } };

export type XcmV3Xcm = Array<XcmV3Instruction>;

export type XcmV3Instruction =
  | { tag: 'WithdrawAsset'; value: XcmV3MultiassetMultiAssets }
  | { tag: 'ReserveAssetDeposited'; value: XcmV3MultiassetMultiAssets }
  | { tag: 'ReceiveTeleportedAsset'; value: XcmV3MultiassetMultiAssets }
  | {
      tag: 'QueryResponse';
      value: {
        queryId: bigint;
        response: XcmV3Response;
        maxWeight: SpWeightsWeightV2Weight;
        querier?: XcmV3MultilocationMultiLocation | undefined;
      };
    }
  | {
      tag: 'TransferAsset';
      value: { assets: XcmV3MultiassetMultiAssets; beneficiary: XcmV3MultilocationMultiLocation };
    }
  | {
      tag: 'TransferReserveAsset';
      value: { assets: XcmV3MultiassetMultiAssets; dest: XcmV3MultilocationMultiLocation; xcm: XcmV3Xcm };
    }
  | {
      tag: 'Transact';
      value: { originKind: XcmV2OriginKind; requireWeightAtMost: SpWeightsWeightV2Weight; call: XcmDoubleEncoded };
    }
  | { tag: 'HrmpNewChannelOpenRequest'; value: { sender: number; maxMessageSize: number; maxCapacity: number } }
  | { tag: 'HrmpChannelAccepted'; value: { recipient: number } }
  | { tag: 'HrmpChannelClosing'; value: { initiator: number; sender: number; recipient: number } }
  | { tag: 'ClearOrigin' }
  | { tag: 'DescendOrigin'; value: XcmV3Junctions }
  | { tag: 'ReportError'; value: XcmV3QueryResponseInfo }
  | {
      tag: 'DepositAsset';
      value: { assets: XcmV3MultiassetMultiAssetFilter; beneficiary: XcmV3MultilocationMultiLocation };
    }
  | {
      tag: 'DepositReserveAsset';
      value: { assets: XcmV3MultiassetMultiAssetFilter; dest: XcmV3MultilocationMultiLocation; xcm: XcmV3Xcm };
    }
  | {
      tag: 'ExchangeAsset';
      value: { give: XcmV3MultiassetMultiAssetFilter; want: XcmV3MultiassetMultiAssets; maximal: boolean };
    }
  | {
      tag: 'InitiateReserveWithdraw';
      value: { assets: XcmV3MultiassetMultiAssetFilter; reserve: XcmV3MultilocationMultiLocation; xcm: XcmV3Xcm };
    }
  | {
      tag: 'InitiateTeleport';
      value: { assets: XcmV3MultiassetMultiAssetFilter; dest: XcmV3MultilocationMultiLocation; xcm: XcmV3Xcm };
    }
  | { tag: 'ReportHolding'; value: { responseInfo: XcmV3QueryResponseInfo; assets: XcmV3MultiassetMultiAssetFilter } }
  | { tag: 'BuyExecution'; value: { fees: XcmV3MultiassetMultiAsset; weightLimit: XcmV3WeightLimit } }
  | { tag: 'RefundSurplus' }
  | { tag: 'SetErrorHandler'; value: XcmV3Xcm }
  | { tag: 'SetAppendix'; value: XcmV3Xcm }
  | { tag: 'ClearError' }
  | { tag: 'ClaimAsset'; value: { assets: XcmV3MultiassetMultiAssets; ticket: XcmV3MultilocationMultiLocation } }
  | { tag: 'Trap'; value: bigint }
  | { tag: 'SubscribeVersion'; value: { queryId: bigint; maxResponseWeight: SpWeightsWeightV2Weight } }
  | { tag: 'UnsubscribeVersion' }
  | { tag: 'BurnAsset'; value: XcmV3MultiassetMultiAssets }
  | { tag: 'ExpectAsset'; value: XcmV3MultiassetMultiAssets }
  | { tag: 'ExpectOrigin'; value?: XcmV3MultilocationMultiLocation | undefined }
  | { tag: 'ExpectError'; value?: [number, XcmV3TraitsError] | undefined }
  | { tag: 'ExpectTransactStatus'; value: XcmV3MaybeErrorCode }
  | { tag: 'QueryPallet'; value: { moduleName: Bytes; responseInfo: XcmV3QueryResponseInfo } }
  | {
      tag: 'ExpectPallet';
      value: { index: number; name: Bytes; moduleName: Bytes; crateMajor: number; minCrateMinor: number };
    }
  | { tag: 'ReportTransactStatus'; value: XcmV3QueryResponseInfo }
  | { tag: 'ClearTransactStatus' }
  | { tag: 'UniversalOrigin'; value: XcmV3Junction }
  | { tag: 'ExportMessage'; value: { network: XcmV3JunctionNetworkId; destination: XcmV3Junctions; xcm: XcmV3Xcm } }
  | { tag: 'LockAsset'; value: { asset: XcmV3MultiassetMultiAsset; unlocker: XcmV3MultilocationMultiLocation } }
  | { tag: 'UnlockAsset'; value: { asset: XcmV3MultiassetMultiAsset; target: XcmV3MultilocationMultiLocation } }
  | { tag: 'NoteUnlockable'; value: { asset: XcmV3MultiassetMultiAsset; owner: XcmV3MultilocationMultiLocation } }
  | { tag: 'RequestUnlock'; value: { asset: XcmV3MultiassetMultiAsset; locker: XcmV3MultilocationMultiLocation } }
  | { tag: 'SetFeesMode'; value: { jitWithdraw: boolean } }
  | { tag: 'SetTopic'; value: FixedBytes<32> }
  | { tag: 'ClearTopic' }
  | { tag: 'AliasOrigin'; value: XcmV3MultilocationMultiLocation }
  | {
      tag: 'UnpaidExecution';
      value: { weightLimit: XcmV3WeightLimit; checkOrigin?: XcmV3MultilocationMultiLocation | undefined };
    };

export type XcmV3MultiassetMultiAssets = Array<XcmV3MultiassetMultiAsset>;

export type XcmV3MultiassetMultiAsset = { id: XcmV3MultiassetAssetId; fun: XcmV3MultiassetFungibility };

export type XcmV3MultiassetAssetId =
  | { tag: 'Concrete'; value: XcmV3MultilocationMultiLocation }
  | { tag: 'Abstract'; value: FixedBytes<32> };

export type XcmV3MultiassetFungibility =
  | { tag: 'Fungible'; value: bigint }
  | { tag: 'NonFungible'; value: XcmV3MultiassetAssetInstance };

export type XcmV3MultiassetAssetInstance =
  | { tag: 'Undefined' }
  | { tag: 'Index'; value: bigint }
  | { tag: 'Array4'; value: FixedBytes<4> }
  | { tag: 'Array8'; value: FixedBytes<8> }
  | { tag: 'Array16'; value: FixedBytes<16> }
  | { tag: 'Array32'; value: FixedBytes<32> };

export type XcmV3Response =
  | { tag: 'Null' }
  | { tag: 'Assets'; value: XcmV3MultiassetMultiAssets }
  | { tag: 'ExecutionResult'; value?: [number, XcmV3TraitsError] | undefined }
  | { tag: 'Version'; value: number }
  | { tag: 'PalletsInfo'; value: Array<XcmV3PalletInfo> }
  | { tag: 'DispatchResult'; value: XcmV3MaybeErrorCode };

export type XcmV3PalletInfo = {
  index: number;
  name: Bytes;
  moduleName: Bytes;
  major: number;
  minor: number;
  patch: number;
};

export type XcmV3MaybeErrorCode =
  | { tag: 'Success' }
  | { tag: 'Error'; value: Bytes }
  | { tag: 'TruncatedError'; value: Bytes };

export type XcmV2OriginKind = 'Native' | 'SovereignAccount' | 'Superuser' | 'Xcm';

export type XcmDoubleEncoded = { encoded: Bytes };

export type XcmV3QueryResponseInfo = {
  destination: XcmV3MultilocationMultiLocation;
  queryId: bigint;
  maxWeight: SpWeightsWeightV2Weight;
};

export type XcmV3MultiassetMultiAssetFilter =
  | { tag: 'Definite'; value: XcmV3MultiassetMultiAssets }
  | { tag: 'Wild'; value: XcmV3MultiassetWildMultiAsset };

export type XcmV3MultiassetWildMultiAsset =
  | { tag: 'All' }
  | { tag: 'AllOf'; value: { id: XcmV3MultiassetAssetId; fun: XcmV3MultiassetWildFungibility } }
  | { tag: 'AllCounted'; value: number }
  | { tag: 'AllOfCounted'; value: { id: XcmV3MultiassetAssetId; fun: XcmV3MultiassetWildFungibility; count: number } };

export type XcmV3MultiassetWildFungibility = 'Fungible' | 'NonFungible';

export type XcmV3WeightLimit = { tag: 'Unlimited' } | { tag: 'Limited'; value: SpWeightsWeightV2Weight };

export type XcmVersionedMultiAssets =
  | { tag: 'V2'; value: XcmV2MultiassetMultiAssets }
  | { tag: 'V3'; value: XcmV3MultiassetMultiAssets };

export type XcmV2MultiassetMultiAssets = Array<XcmV2MultiassetMultiAsset>;

export type XcmV2MultiassetMultiAsset = { id: XcmV2MultiassetAssetId; fun: XcmV2MultiassetFungibility };

export type XcmV2MultiassetAssetId =
  | { tag: 'Concrete'; value: XcmV2MultilocationMultiLocation }
  | { tag: 'Abstract'; value: Bytes };

export type XcmV2MultilocationMultiLocation = { parents: number; interior: XcmV2MultilocationJunctions };

export type XcmV2MultilocationJunctions =
  | { tag: 'Here' }
  | { tag: 'X1'; value: XcmV2Junction }
  | { tag: 'X2'; value: [XcmV2Junction, XcmV2Junction] }
  | { tag: 'X3'; value: [XcmV2Junction, XcmV2Junction, XcmV2Junction] }
  | { tag: 'X4'; value: [XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction] }
  | { tag: 'X5'; value: [XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction] }
  | { tag: 'X6'; value: [XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction] }
  | {
      tag: 'X7';
      value: [XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction];
    }
  | {
      tag: 'X8';
      value: [
        XcmV2Junction,
        XcmV2Junction,
        XcmV2Junction,
        XcmV2Junction,
        XcmV2Junction,
        XcmV2Junction,
        XcmV2Junction,
        XcmV2Junction,
      ];
    };

export type XcmV2Junction =
  | { tag: 'Parachain'; value: number }
  | { tag: 'AccountId32'; value: { network: XcmV2NetworkId; id: FixedBytes<32> } }
  | { tag: 'AccountIndex64'; value: { network: XcmV2NetworkId; index: bigint } }
  | { tag: 'AccountKey20'; value: { network: XcmV2NetworkId; key: FixedBytes<20> } }
  | { tag: 'PalletInstance'; value: number }
  | { tag: 'GeneralIndex'; value: bigint }
  | { tag: 'GeneralKey'; value: Bytes }
  | { tag: 'OnlyChild' }
  | { tag: 'Plurality'; value: { id: XcmV2BodyId; part: XcmV2BodyPart } };

export type XcmV2NetworkId = { tag: 'Any' } | { tag: 'Named'; value: Bytes } | { tag: 'Polkadot' } | { tag: 'Kusama' };

export type XcmV2BodyId =
  | { tag: 'Unit' }
  | { tag: 'Named'; value: Bytes }
  | { tag: 'Index'; value: number }
  | { tag: 'Executive' }
  | { tag: 'Technical' }
  | { tag: 'Legislative' }
  | { tag: 'Judicial' }
  | { tag: 'Defense' }
  | { tag: 'Administration' }
  | { tag: 'Treasury' };

export type XcmV2BodyPart =
  | { tag: 'Voice' }
  | { tag: 'Members'; value: { count: number } }
  | { tag: 'Fraction'; value: { nom: number; denom: number } }
  | { tag: 'AtLeastProportion'; value: { nom: number; denom: number } }
  | { tag: 'MoreThanProportion'; value: { nom: number; denom: number } };

export type XcmV2MultiassetFungibility =
  | { tag: 'Fungible'; value: bigint }
  | { tag: 'NonFungible'; value: XcmV2MultiassetAssetInstance };

export type XcmV2MultiassetAssetInstance =
  | { tag: 'Undefined' }
  | { tag: 'Index'; value: bigint }
  | { tag: 'Array4'; value: FixedBytes<4> }
  | { tag: 'Array8'; value: FixedBytes<8> }
  | { tag: 'Array16'; value: FixedBytes<16> }
  | { tag: 'Array32'; value: FixedBytes<32> }
  | { tag: 'Blob'; value: Bytes };

export type XcmVersionedMultiLocation =
  | { tag: 'V2'; value: XcmV2MultilocationMultiLocation }
  | { tag: 'V3'; value: XcmV3MultilocationMultiLocation };

/**
 * The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted by this pallet.
 **/
export type CumulusPalletXcmEvent =
  | { tag: 'InvalidFormat'; value: FixedBytes<32> }
  | { tag: 'UnsupportedVersion'; value: FixedBytes<32> }
  | { tag: 'ExecutedDownward'; value: [FixedBytes<32>, XcmV3TraitsOutcome] };

/**
 * The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted by this pallet.
 **/
export type CumulusPalletDmpQueueEvent =
  | { tag: 'InvalidFormat'; value: { messageId: FixedBytes<32> } }
  | { tag: 'UnsupportedVersion'; value: { messageId: FixedBytes<32> } }
  | { tag: 'ExecutedDownward'; value: { messageId: FixedBytes<32>; outcome: XcmV3TraitsOutcome } }
  | {
      tag: 'WeightExhausted';
      value: {
        messageId: FixedBytes<32>;
        remainingWeight: SpWeightsWeightV2Weight;
        requiredWeight: SpWeightsWeightV2Weight;
      };
    }
  | {
      tag: 'OverweightEnqueued';
      value: { messageId: FixedBytes<32>; overweightIndex: bigint; requiredWeight: SpWeightsWeightV2Weight };
    }
  | { tag: 'OverweightServiced'; value: { overweightIndex: bigint; weightUsed: SpWeightsWeightV2Weight } }
  | { tag: 'MaxMessagesExhausted'; value: { messageId: FixedBytes<32> } };

/**
 * The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted by this pallet.
 **/
export type PalletXcAssetConfigEvent =
  | { tag: 'AssetRegistered'; value: { assetLocation: XcmVersionedMultiLocation; assetId: bigint } }
  | { tag: 'UnitsPerSecondChanged'; value: { assetLocation: XcmVersionedMultiLocation; unitsPerSecond: bigint } }
  | {
      tag: 'AssetLocationChanged';
      value: {
        previousAssetLocation: XcmVersionedMultiLocation;
        assetId: bigint;
        newAssetLocation: XcmVersionedMultiLocation;
      };
    }
  | { tag: 'SupportedAssetRemoved'; value: { assetLocation: XcmVersionedMultiLocation } }
  | { tag: 'AssetRemoved'; value: { assetLocation: XcmVersionedMultiLocation; assetId: bigint } };

/**
 * The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted by this pallet.
 **/
export type OrmlXtokensModuleEvent = {
  tag: 'TransferredMultiAssets';
  value: {
    sender: AccountId32Like;
    assets: XcmV3MultiassetMultiAssets;
    fee: XcmV3MultiassetMultiAsset;
    dest: XcmV3MultilocationMultiLocation;
  };
};

/**
 * The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted by this pallet.
 **/
export type PalletEvmEvent =
  | { tag: 'Log'; value: { log: EthereumLog } }
  | { tag: 'Created'; value: { address: H160 } }
  | { tag: 'CreatedFailed'; value: { address: H160 } }
  | { tag: 'Executed'; value: { address: H160 } }
  | { tag: 'ExecutedFailed'; value: { address: H160 } };

export type EthereumLog = { address: H160; topics: Array<H256>; data: Bytes };

/**
 * The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted by this pallet.
 **/
export type PalletEthereumEvent = {
  tag: 'Executed';
  value: { from: H160; to: H160; transactionHash: H256; exitReason: EvmCoreErrorExitReason; extraData: Bytes };
};

export type EvmCoreErrorExitReason =
  | { tag: 'Succeed'; value: EvmCoreErrorExitSucceed }
  | { tag: 'Error'; value: EvmCoreErrorExitError }
  | { tag: 'Revert'; value: EvmCoreErrorExitRevert }
  | { tag: 'Fatal'; value: EvmCoreErrorExitFatal };

export type EvmCoreErrorExitSucceed = 'Stopped' | 'Returned' | 'Suicided';

export type EvmCoreErrorExitError =
  | { tag: 'StackUnderflow' }
  | { tag: 'StackOverflow' }
  | { tag: 'InvalidJump' }
  | { tag: 'InvalidRange' }
  | { tag: 'DesignatedInvalid' }
  | { tag: 'CallTooDeep' }
  | { tag: 'CreateCollision' }
  | { tag: 'CreateContractLimit' }
  | { tag: 'InvalidCode'; value: EvmCoreOpcode }
  | { tag: 'OutOfOffset' }
  | { tag: 'OutOfGas' }
  | { tag: 'OutOfFund' }
  | { tag: 'PCUnderflow' }
  | { tag: 'CreateEmpty' }
  | { tag: 'Other'; value: string }
  | { tag: 'MaxNonce' };

export type EvmCoreOpcode = number;

export type EvmCoreErrorExitRevert = 'Reverted';

export type EvmCoreErrorExitFatal =
  | { tag: 'NotSupported' }
  | { tag: 'UnhandledInterrupt' }
  | { tag: 'CallErrorAsFatal'; value: EvmCoreErrorExitError }
  | { tag: 'Other'; value: string };

/**
 * The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted by this pallet.
 **/
export type PalletCustomSignaturesEvent = { tag: 'Executed'; value: [AccountId32Like, [] | SpRuntimeDispatchError] };

/**
 * The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted by this pallet.
 **/
export type PalletBaseFeeEvent =
  | { tag: 'NewBaseFeePerGas'; value: { fee: U256 } }
  | { tag: 'BaseFeeOverflow' }
  | { tag: 'NewElasticity'; value: { elasticity: Permill } };

/**
 * The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted by this pallet.
 **/
export type PalletContractsEvent =
  | { tag: 'Instantiated'; value: { deployer: AccountId32Like; contract: AccountId32Like } }
  | {
      tag: 'Terminated';
      value: {
        /**
         * The contract that was terminated.
         **/
        contract: AccountId32Like;

        /**
         * The account that received the contracts remaining balance
         **/
        beneficiary: AccountId32Like;
      };
    }
  | { tag: 'CodeStored'; value: { codeHash: H256 } }
  | {
      tag: 'ContractEmitted';
      value: {
        /**
         * The contract that emitted the event.
         **/
        contract: AccountId32Like;

        /**
         * Data supplied by the contract. Metadata generated during contract compilation
         * is needed to decode it.
         **/
        data: Bytes;
      };
    }
  | { tag: 'CodeRemoved'; value: { codeHash: H256 } }
  | {
      tag: 'ContractCodeUpdated';
      value: {
        /**
         * The contract that has been updated.
         **/
        contract: AccountId32Like;

        /**
         * New code hash that was set for the contract.
         **/
        newCodeHash: H256;

        /**
         * Previous code hash of the contract.
         **/
        oldCodeHash: H256;
      };
    }
  | {
      tag: 'Called';
      value: {
        /**
         * The caller of the `contract`.
         **/
        caller: PalletContractsOrigin;

        /**
         * The contract that was called.
         **/
        contract: AccountId32Like;
      };
    }
  | {
      tag: 'DelegateCalled';
      value: {
        /**
         * The contract that performed the delegate call and hence in whose context
         * the `code_hash` is executed.
         **/
        contract: AccountId32Like;

        /**
         * The code hash that was delegate called.
         **/
        codeHash: H256;
      };
    };

export type PalletContractsOrigin = { tag: 'Root' } | { tag: 'Signed'; value: AccountId32Like };

export type AstarRuntimeRuntime = {};

/**
 * The [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted by this pallet.
 **/
export type PalletSudoEvent =
  | { tag: 'Sudid'; value: { sudoResult: [] | SpRuntimeDispatchError } }
  | { tag: 'KeyChanged'; value: { oldSudoer?: AccountId32Like | undefined } }
  | { tag: 'SudoAsDone'; value: { sudoResult: [] | SpRuntimeDispatchError } };

export type FrameSystemPhase =
  | { tag: 'ApplyExtrinsic'; value: number }
  | { tag: 'Finalization' }
  | { tag: 'Initialization' };

export type FrameSystemLastRuntimeUpgradeInfo = { specVersion: number; specName: string };

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type FrameSystemCall =
  | { tag: 'remark'; value: { remark: Bytes } }
  | { tag: 'set_heap_pages'; value: { pages: bigint } }
  | { tag: 'set_code'; value: { code: Bytes } }
  | { tag: 'set_code_without_checks'; value: { code: Bytes } }
  | { tag: 'set_storage'; value: { items: Array<[Bytes, Bytes]> } }
  | { tag: 'kill_storage'; value: { keys: Array<Bytes> } }
  | { tag: 'kill_prefix'; value: { prefix: Bytes; subkeys: number } }
  | { tag: 'remark_with_event'; value: { remark: Bytes } };

export type FrameSystemLimitsBlockWeights = {
  baseBlock: SpWeightsWeightV2Weight;
  maxBlock: SpWeightsWeightV2Weight;
  perClass: FrameSupportDispatchPerDispatchClassWeightsPerClass;
};

export type FrameSupportDispatchPerDispatchClassWeightsPerClass = {
  normal: FrameSystemLimitsWeightsPerClass;
  operational: FrameSystemLimitsWeightsPerClass;
  mandatory: FrameSystemLimitsWeightsPerClass;
};

export type FrameSystemLimitsWeightsPerClass = {
  baseExtrinsic: SpWeightsWeightV2Weight;
  maxExtrinsic?: SpWeightsWeightV2Weight | undefined;
  maxTotal?: SpWeightsWeightV2Weight | undefined;
  reserved?: SpWeightsWeightV2Weight | undefined;
};

export type FrameSystemLimitsBlockLength = { max: FrameSupportDispatchPerDispatchClassU32 };

export type FrameSupportDispatchPerDispatchClassU32 = { normal: number; operational: number; mandatory: number };

export type SpWeightsRuntimeDbWeight = { read: bigint; write: bigint };

export type SpVersionRuntimeVersion = {
  specName: string;
  implName: string;
  authoringVersion: number;
  specVersion: number;
  implVersion: number;
  apis: Array<[FixedBytes<8>, number]>;
  transactionVersion: number;
  stateVersion: number;
};

/**
 * Error for the System pallet
 **/
export type FrameSystemError =
  /**
   * The name of specification does not match between the current runtime
   * and the new runtime.
   **/
  | 'InvalidSpecName'
  /**
   * The specification version is not allowed to decrease between the current runtime
   * and the new runtime.
   **/
  | 'SpecVersionNeedsToIncrease'
  /**
   * Failed to extract the runtime version from the new runtime.
   *
   * Either calling `Core_version` or decoding `RuntimeVersion` failed.
   **/
  | 'FailedToExtractRuntimeVersion'
  /**
   * Suicide called when the account has non-default composite data.
   **/
  | 'NonDefaultComposite'
  /**
   * There is a non-zero reference count preventing the account from being purged.
   **/
  | 'NonZeroRefCount'
  /**
   * The origin filter prevent the call to be dispatched.
   **/
  | 'CallFiltered';

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type PalletUtilityCall =
  | { tag: 'batch'; value: { calls: Array<AstarRuntimeRuntimeCall> } }
  | { tag: 'as_derivative'; value: { index: number; call: AstarRuntimeRuntimeCall } }
  | { tag: 'batch_all'; value: { calls: Array<AstarRuntimeRuntimeCall> } }
  | { tag: 'dispatch_as'; value: { asOrigin: AstarRuntimeOriginCaller; call: AstarRuntimeRuntimeCall } }
  | { tag: 'force_batch'; value: { calls: Array<AstarRuntimeRuntimeCall> } }
  | { tag: 'with_weight'; value: { call: AstarRuntimeRuntimeCall; weight: SpWeightsWeightV2Weight } };

export type AstarRuntimeRuntimeCall =
  | { tag: 'System'; value: FrameSystemCall }
  | { tag: 'Utility'; value: PalletUtilityCall }
  | { tag: 'Identity'; value: PalletIdentityCall }
  | { tag: 'Timestamp'; value: PalletTimestampCall }
  | { tag: 'Multisig'; value: PalletMultisigCall }
  | { tag: 'Proxy'; value: PalletProxyCall }
  | { tag: 'ParachainSystem'; value: CumulusPalletParachainSystemCall }
  | { tag: 'ParachainInfo'; value: ParachainInfoCall }
  | { tag: 'Balances'; value: PalletBalancesCall }
  | { tag: 'Vesting'; value: PalletVestingCall }
  | { tag: 'DappsStaking'; value: PalletDappsStakingPalletCall }
  | { tag: 'BlockReward'; value: PalletBlockRewardCall }
  | { tag: 'Assets'; value: PalletAssetsCall }
  | { tag: 'CollatorSelection'; value: PalletCollatorSelectionCall }
  | { tag: 'Session'; value: PalletSessionCall }
  | { tag: 'XcmpQueue'; value: CumulusPalletXcmpQueueCall }
  | { tag: 'PolkadotXcm'; value: PalletXcmCall }
  | { tag: 'CumulusXcm'; value: CumulusPalletXcmCall }
  | { tag: 'DmpQueue'; value: CumulusPalletDmpQueueCall }
  | { tag: 'XcAssetConfig'; value: PalletXcAssetConfigCall }
  | { tag: 'Xtokens'; value: OrmlXtokensModuleCall }
  | { tag: 'EVM'; value: PalletEvmCall }
  | { tag: 'Ethereum'; value: PalletEthereumCall }
  | { tag: 'EthCall'; value: PalletCustomSignaturesCall }
  | { tag: 'BaseFee'; value: PalletBaseFeeCall }
  | { tag: 'Contracts'; value: PalletContractsCall }
  | { tag: 'Sudo'; value: PalletSudoCall };

/**
 * Identity pallet declaration.
 **/
export type PalletIdentityCall =
  | { tag: 'add_registrar'; value: { account: MultiAddress } }
  | { tag: 'set_identity'; value: { info: PalletIdentityIdentityInfo } }
  | { tag: 'set_subs'; value: { subs: Array<[AccountId32Like, Data]> } }
  | { tag: 'clear_identity' }
  | { tag: 'request_judgement'; value: { regIndex: number; maxFee: bigint } }
  | { tag: 'cancel_request'; value: { regIndex: number } }
  | { tag: 'set_fee'; value: { index: number; fee: bigint } }
  | { tag: 'set_account_id'; value: { index: number; new: MultiAddress } }
  | { tag: 'set_fields'; value: { index: number; fields: PalletIdentityBitFlags } }
  | {
      tag: 'provide_judgement';
      value: { regIndex: number; target: MultiAddress; judgement: PalletIdentityJudgement; identity: H256 };
    }
  | { tag: 'kill_identity'; value: { target: MultiAddress } }
  | { tag: 'add_sub'; value: { sub: MultiAddress; data: Data } }
  | { tag: 'rename_sub'; value: { sub: MultiAddress; data: Data } }
  | { tag: 'remove_sub'; value: { sub: MultiAddress } }
  | { tag: 'quit_sub' };

export type PalletIdentityIdentityInfo = {
  additional: Array<[Data, Data]>;
  display: Data;
  legal: Data;
  web: Data;
  riot: Data;
  email: Data;
  pgpFingerprint?: FixedBytes<20> | undefined;
  image: Data;
  twitter: Data;
};

export type PalletIdentityBitFlags = bigint;

export type PalletIdentityIdentityField =
  | 'Display'
  | 'Legal'
  | 'Web'
  | 'Riot'
  | 'Email'
  | 'PgpFingerprint'
  | 'Image'
  | 'Twitter';

export type PalletIdentityJudgement =
  | { tag: 'Unknown' }
  | { tag: 'FeePaid'; value: bigint }
  | { tag: 'Reasonable' }
  | { tag: 'KnownGood' }
  | { tag: 'OutOfDate' }
  | { tag: 'LowQuality' }
  | { tag: 'Erroneous' };

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type PalletTimestampCall = { tag: 'set'; value: { now: bigint } };

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type PalletMultisigCall =
  | { tag: 'as_multi_threshold_1'; value: { otherSignatories: Array<AccountId32Like>; call: AstarRuntimeRuntimeCall } }
  | {
      tag: 'as_multi';
      value: {
        threshold: number;
        otherSignatories: Array<AccountId32Like>;
        maybeTimepoint?: PalletMultisigTimepoint | undefined;
        call: AstarRuntimeRuntimeCall;
        maxWeight: SpWeightsWeightV2Weight;
      };
    }
  | {
      tag: 'approve_as_multi';
      value: {
        threshold: number;
        otherSignatories: Array<AccountId32Like>;
        maybeTimepoint?: PalletMultisigTimepoint | undefined;
        callHash: FixedBytes<32>;
        maxWeight: SpWeightsWeightV2Weight;
      };
    }
  | {
      tag: 'cancel_as_multi';
      value: {
        threshold: number;
        otherSignatories: Array<AccountId32Like>;
        timepoint: PalletMultisigTimepoint;
        callHash: FixedBytes<32>;
      };
    };

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type PalletProxyCall =
  | {
      tag: 'proxy';
      value: { real: MultiAddress; forceProxyType?: AstarRuntimeProxyType | undefined; call: AstarRuntimeRuntimeCall };
    }
  | { tag: 'add_proxy'; value: { delegate: MultiAddress; proxyType: AstarRuntimeProxyType; delay: number } }
  | { tag: 'remove_proxy'; value: { delegate: MultiAddress; proxyType: AstarRuntimeProxyType; delay: number } }
  | { tag: 'remove_proxies' }
  | { tag: 'create_pure'; value: { proxyType: AstarRuntimeProxyType; delay: number; index: number } }
  | {
      tag: 'kill_pure';
      value: {
        spawner: MultiAddress;
        proxyType: AstarRuntimeProxyType;
        index: number;
        height: number;
        extIndex: number;
      };
    }
  | { tag: 'announce'; value: { real: MultiAddress; callHash: H256 } }
  | { tag: 'remove_announcement'; value: { real: MultiAddress; callHash: H256 } }
  | { tag: 'reject_announcement'; value: { delegate: MultiAddress; callHash: H256 } }
  | {
      tag: 'proxy_announced';
      value: {
        delegate: MultiAddress;
        real: MultiAddress;
        forceProxyType?: AstarRuntimeProxyType | undefined;
        call: AstarRuntimeRuntimeCall;
      };
    };

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type CumulusPalletParachainSystemCall =
  | { tag: 'set_validation_data'; value: { data: CumulusPrimitivesParachainInherentParachainInherentData } }
  | { tag: 'sudo_send_upward_message'; value: { message: Bytes } }
  | { tag: 'authorize_upgrade'; value: { codeHash: H256; checkVersion: boolean } }
  | { tag: 'enact_authorized_upgrade'; value: { code: Bytes } };

export type CumulusPrimitivesParachainInherentParachainInherentData = {
  validationData: PolkadotPrimitivesV4PersistedValidationData;
  relayChainState: SpTrieStorageProof;
  downwardMessages: Array<PolkadotCorePrimitivesInboundDownwardMessage>;
  horizontalMessages: Array<[PolkadotParachainPrimitivesId, Array<PolkadotCorePrimitivesInboundHrmpMessage>]>;
};

export type PolkadotPrimitivesV4PersistedValidationData = {
  parentHead: PolkadotParachainPrimitivesHeadData;
  relayParentNumber: number;
  relayParentStorageRoot: H256;
  maxPovSize: number;
};

export type PolkadotParachainPrimitivesHeadData = Bytes;

export type SpTrieStorageProof = { trieNodes: Array<Bytes> };

export type PolkadotCorePrimitivesInboundDownwardMessage = { sentAt: number; msg: Bytes };

export type PolkadotCorePrimitivesInboundHrmpMessage = { sentAt: number; data: Bytes };

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type ParachainInfoCall = null;

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type PalletBalancesCall =
  | { tag: 'transfer_allow_death'; value: { dest: MultiAddress; value: bigint } }
  | { tag: 'set_balance_deprecated'; value: { who: MultiAddress; newFree: bigint; oldReserved: bigint } }
  | { tag: 'force_transfer'; value: { source: MultiAddress; dest: MultiAddress; value: bigint } }
  | { tag: 'transfer_keep_alive'; value: { dest: MultiAddress; value: bigint } }
  | { tag: 'transfer_all'; value: { dest: MultiAddress; keepAlive: boolean } }
  | { tag: 'force_unreserve'; value: { who: MultiAddress; amount: bigint } }
  | { tag: 'upgrade_accounts'; value: { who: Array<AccountId32Like> } }
  | { tag: 'transfer'; value: { dest: MultiAddress; value: bigint } }
  | { tag: 'force_set_balance'; value: { who: MultiAddress; newFree: bigint } };

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type PalletVestingCall =
  | { tag: 'vest' }
  | { tag: 'vest_other'; value: { target: MultiAddress } }
  | { tag: 'vested_transfer'; value: { target: MultiAddress; schedule: PalletVestingVestingInfo } }
  | {
      tag: 'force_vested_transfer';
      value: { source: MultiAddress; target: MultiAddress; schedule: PalletVestingVestingInfo };
    }
  | { tag: 'merge_schedules'; value: { schedule1Index: number; schedule2Index: number } };

export type PalletVestingVestingInfo = { locked: bigint; perBlock: bigint; startingBlock: number };

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type PalletDappsStakingPalletCall =
  | { tag: 'register'; value: { developer: AccountId32Like; contractId: AstarRuntimeSmartContract } }
  | { tag: 'unregister'; value: { contractId: AstarRuntimeSmartContract } }
  | { tag: 'withdraw_from_unregistered'; value: { contractId: AstarRuntimeSmartContract } }
  | { tag: 'bond_and_stake'; value: { contractId: AstarRuntimeSmartContract; value: bigint } }
  | { tag: 'unbond_and_unstake'; value: { contractId: AstarRuntimeSmartContract; value: bigint } }
  | { tag: 'withdraw_unbonded' }
  | {
      tag: 'nomination_transfer';
      value: {
        originContractId: AstarRuntimeSmartContract;
        value: bigint;
        targetContractId: AstarRuntimeSmartContract;
      };
    }
  | { tag: 'claim_staker'; value: { contractId: AstarRuntimeSmartContract } }
  | { tag: 'claim_dapp'; value: { contractId: AstarRuntimeSmartContract; era: number } }
  | { tag: 'force_new_era' }
  | { tag: 'maintenance_mode'; value: { enableMaintenance: boolean } }
  | { tag: 'set_reward_destination'; value: { rewardDestination: PalletDappsStakingRewardDestination } }
  | {
      tag: 'set_contract_stake_info';
      value: {
        contract: AstarRuntimeSmartContract;
        era: number;
        contractStakeInfo: PalletDappsStakingContractStakeInfo;
      };
    }
  | { tag: 'burn_stale_reward'; value: { contractId: AstarRuntimeSmartContract; era: number } };

export type PalletDappsStakingContractStakeInfo = {
  total: bigint;
  numberOfStakers: number;
  contractRewardClaimed: boolean;
};

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type PalletBlockRewardCall = {
  tag: 'set_configuration';
  value: { rewardDistroParams: PalletBlockRewardRewardDistributionConfig };
};

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type PalletAssetsCall =
  | { tag: 'create'; value: { id: bigint; admin: MultiAddress; minBalance: bigint } }
  | { tag: 'force_create'; value: { id: bigint; owner: MultiAddress; isSufficient: boolean; minBalance: bigint } }
  | { tag: 'start_destroy'; value: { id: bigint } }
  | { tag: 'destroy_accounts'; value: { id: bigint } }
  | { tag: 'destroy_approvals'; value: { id: bigint } }
  | { tag: 'finish_destroy'; value: { id: bigint } }
  | { tag: 'mint'; value: { id: bigint; beneficiary: MultiAddress; amount: bigint } }
  | { tag: 'burn'; value: { id: bigint; who: MultiAddress; amount: bigint } }
  | { tag: 'transfer'; value: { id: bigint; target: MultiAddress; amount: bigint } }
  | { tag: 'transfer_keep_alive'; value: { id: bigint; target: MultiAddress; amount: bigint } }
  | { tag: 'force_transfer'; value: { id: bigint; source: MultiAddress; dest: MultiAddress; amount: bigint } }
  | { tag: 'freeze'; value: { id: bigint; who: MultiAddress } }
  | { tag: 'thaw'; value: { id: bigint; who: MultiAddress } }
  | { tag: 'freeze_asset'; value: { id: bigint } }
  | { tag: 'thaw_asset'; value: { id: bigint } }
  | { tag: 'transfer_ownership'; value: { id: bigint; owner: MultiAddress } }
  | { tag: 'set_team'; value: { id: bigint; issuer: MultiAddress; admin: MultiAddress; freezer: MultiAddress } }
  | { tag: 'set_metadata'; value: { id: bigint; name: Bytes; symbol: Bytes; decimals: number } }
  | { tag: 'clear_metadata'; value: { id: bigint } }
  | {
      tag: 'force_set_metadata';
      value: { id: bigint; name: Bytes; symbol: Bytes; decimals: number; isFrozen: boolean };
    }
  | { tag: 'force_clear_metadata'; value: { id: bigint } }
  | {
      tag: 'force_asset_status';
      value: {
        id: bigint;
        owner: MultiAddress;
        issuer: MultiAddress;
        admin: MultiAddress;
        freezer: MultiAddress;
        minBalance: bigint;
        isSufficient: boolean;
        isFrozen: boolean;
      };
    }
  | { tag: 'approve_transfer'; value: { id: bigint; delegate: MultiAddress; amount: bigint } }
  | { tag: 'cancel_approval'; value: { id: bigint; delegate: MultiAddress } }
  | { tag: 'force_cancel_approval'; value: { id: bigint; owner: MultiAddress; delegate: MultiAddress } }
  | { tag: 'transfer_approved'; value: { id: bigint; owner: MultiAddress; destination: MultiAddress; amount: bigint } }
  | { tag: 'touch'; value: { id: bigint } }
  | { tag: 'refund'; value: { id: bigint; allowBurn: boolean } }
  | { tag: 'set_min_balance'; value: { id: bigint; minBalance: bigint } }
  | { tag: 'touch_other'; value: { id: bigint; who: MultiAddress } }
  | { tag: 'refund_other'; value: { id: bigint; who: MultiAddress } }
  | { tag: 'block'; value: { id: bigint; who: MultiAddress } };

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type PalletCollatorSelectionCall =
  | { tag: 'set_invulnerables'; value: { new: Array<AccountId32Like> } }
  | { tag: 'set_desired_candidates'; value: { max: number } }
  | { tag: 'set_candidacy_bond'; value: { bond: bigint } }
  | { tag: 'register_as_candidate' }
  | { tag: 'leave_intent' };

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type PalletSessionCall =
  | { tag: 'set_keys'; value: { keys: AstarRuntimeSessionKeys; proof: Bytes } }
  | { tag: 'purge_keys' };

export type AstarRuntimeSessionKeys = { aura: SpConsensusAuraSr25519AppSr25519Public };

export type SpConsensusAuraSr25519AppSr25519Public = SpCoreSr25519Public;

export type SpCoreSr25519Public = FixedBytes<32>;

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type CumulusPalletXcmpQueueCall =
  | { tag: 'service_overweight'; value: { index: bigint; weightLimit: SpWeightsWeightV2Weight } }
  | { tag: 'suspend_xcm_execution' }
  | { tag: 'resume_xcm_execution' }
  | { tag: 'update_suspend_threshold'; value: { new: number } }
  | { tag: 'update_drop_threshold'; value: { new: number } }
  | { tag: 'update_resume_threshold'; value: { new: number } }
  | { tag: 'update_threshold_weight'; value: { new: SpWeightsWeightV2Weight } }
  | { tag: 'update_weight_restrict_decay'; value: { new: SpWeightsWeightV2Weight } }
  | { tag: 'update_xcmp_max_individual_weight'; value: { new: SpWeightsWeightV2Weight } };

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type PalletXcmCall =
  | { tag: 'send'; value: { dest: XcmVersionedMultiLocation; message: XcmVersionedXcm } }
  | {
      tag: 'teleport_assets';
      value: {
        dest: XcmVersionedMultiLocation;
        beneficiary: XcmVersionedMultiLocation;
        assets: XcmVersionedMultiAssets;
        feeAssetItem: number;
      };
    }
  | {
      tag: 'reserve_transfer_assets';
      value: {
        dest: XcmVersionedMultiLocation;
        beneficiary: XcmVersionedMultiLocation;
        assets: XcmVersionedMultiAssets;
        feeAssetItem: number;
      };
    }
  | { tag: 'execute'; value: { message: XcmVersionedXcm; maxWeight: SpWeightsWeightV2Weight } }
  | { tag: 'force_xcm_version'; value: { location: XcmV3MultilocationMultiLocation; xcmVersion: number } }
  | { tag: 'force_default_xcm_version'; value: { maybeXcmVersion?: number | undefined } }
  | { tag: 'force_subscribe_version_notify'; value: { location: XcmVersionedMultiLocation } }
  | { tag: 'force_unsubscribe_version_notify'; value: { location: XcmVersionedMultiLocation } }
  | {
      tag: 'limited_reserve_transfer_assets';
      value: {
        dest: XcmVersionedMultiLocation;
        beneficiary: XcmVersionedMultiLocation;
        assets: XcmVersionedMultiAssets;
        feeAssetItem: number;
        weightLimit: XcmV3WeightLimit;
      };
    }
  | {
      tag: 'limited_teleport_assets';
      value: {
        dest: XcmVersionedMultiLocation;
        beneficiary: XcmVersionedMultiLocation;
        assets: XcmVersionedMultiAssets;
        feeAssetItem: number;
        weightLimit: XcmV3WeightLimit;
      };
    }
  | { tag: 'force_suspension'; value: { suspended: boolean } }
  | {
      tag: 'reserve_withdraw_assets';
      value: {
        dest: XcmVersionedMultiLocation;
        beneficiary: XcmVersionedMultiLocation;
        assets: XcmVersionedMultiAssets;
        feeAssetItem: number;
      };
    }
  | {
      tag: 'limited_reserve_withdraw_assets';
      value: {
        dest: XcmVersionedMultiLocation;
        beneficiary: XcmVersionedMultiLocation;
        assets: XcmVersionedMultiAssets;
        feeAssetItem: number;
        weightLimit: XcmV3WeightLimit;
      };
    };

export type XcmVersionedXcm = { tag: 'V2'; value: XcmV2Xcm } | { tag: 'V3'; value: XcmV3Xcm };

export type XcmV2Xcm = Array<XcmV2Instruction>;

export type XcmV2Instruction =
  | { tag: 'WithdrawAsset'; value: XcmV2MultiassetMultiAssets }
  | { tag: 'ReserveAssetDeposited'; value: XcmV2MultiassetMultiAssets }
  | { tag: 'ReceiveTeleportedAsset'; value: XcmV2MultiassetMultiAssets }
  | { tag: 'QueryResponse'; value: { queryId: bigint; response: XcmV2Response; maxWeight: bigint } }
  | {
      tag: 'TransferAsset';
      value: { assets: XcmV2MultiassetMultiAssets; beneficiary: XcmV2MultilocationMultiLocation };
    }
  | {
      tag: 'TransferReserveAsset';
      value: { assets: XcmV2MultiassetMultiAssets; dest: XcmV2MultilocationMultiLocation; xcm: XcmV2Xcm };
    }
  | { tag: 'Transact'; value: { originType: XcmV2OriginKind; requireWeightAtMost: bigint; call: XcmDoubleEncoded } }
  | { tag: 'HrmpNewChannelOpenRequest'; value: { sender: number; maxMessageSize: number; maxCapacity: number } }
  | { tag: 'HrmpChannelAccepted'; value: { recipient: number } }
  | { tag: 'HrmpChannelClosing'; value: { initiator: number; sender: number; recipient: number } }
  | { tag: 'ClearOrigin' }
  | { tag: 'DescendOrigin'; value: XcmV2MultilocationJunctions }
  | { tag: 'ReportError'; value: { queryId: bigint; dest: XcmV2MultilocationMultiLocation; maxResponseWeight: bigint } }
  | {
      tag: 'DepositAsset';
      value: {
        assets: XcmV2MultiassetMultiAssetFilter;
        maxAssets: number;
        beneficiary: XcmV2MultilocationMultiLocation;
      };
    }
  | {
      tag: 'DepositReserveAsset';
      value: {
        assets: XcmV2MultiassetMultiAssetFilter;
        maxAssets: number;
        dest: XcmV2MultilocationMultiLocation;
        xcm: XcmV2Xcm;
      };
    }
  | { tag: 'ExchangeAsset'; value: { give: XcmV2MultiassetMultiAssetFilter; receive: XcmV2MultiassetMultiAssets } }
  | {
      tag: 'InitiateReserveWithdraw';
      value: { assets: XcmV2MultiassetMultiAssetFilter; reserve: XcmV2MultilocationMultiLocation; xcm: XcmV2Xcm };
    }
  | {
      tag: 'InitiateTeleport';
      value: { assets: XcmV2MultiassetMultiAssetFilter; dest: XcmV2MultilocationMultiLocation; xcm: XcmV2Xcm };
    }
  | {
      tag: 'QueryHolding';
      value: {
        queryId: bigint;
        dest: XcmV2MultilocationMultiLocation;
        assets: XcmV2MultiassetMultiAssetFilter;
        maxResponseWeight: bigint;
      };
    }
  | { tag: 'BuyExecution'; value: { fees: XcmV2MultiassetMultiAsset; weightLimit: XcmV2WeightLimit } }
  | { tag: 'RefundSurplus' }
  | { tag: 'SetErrorHandler'; value: XcmV2Xcm }
  | { tag: 'SetAppendix'; value: XcmV2Xcm }
  | { tag: 'ClearError' }
  | { tag: 'ClaimAsset'; value: { assets: XcmV2MultiassetMultiAssets; ticket: XcmV2MultilocationMultiLocation } }
  | { tag: 'Trap'; value: bigint }
  | { tag: 'SubscribeVersion'; value: { queryId: bigint; maxResponseWeight: bigint } }
  | { tag: 'UnsubscribeVersion' };

export type XcmV2Response =
  | { tag: 'Null' }
  | { tag: 'Assets'; value: XcmV2MultiassetMultiAssets }
  | { tag: 'ExecutionResult'; value?: [number, XcmV2TraitsError] | undefined }
  | { tag: 'Version'; value: number };

export type XcmV2TraitsError =
  | { tag: 'Overflow' }
  | { tag: 'Unimplemented' }
  | { tag: 'UntrustedReserveLocation' }
  | { tag: 'UntrustedTeleportLocation' }
  | { tag: 'MultiLocationFull' }
  | { tag: 'MultiLocationNotInvertible' }
  | { tag: 'BadOrigin' }
  | { tag: 'InvalidLocation' }
  | { tag: 'AssetNotFound' }
  | { tag: 'FailedToTransactAsset' }
  | { tag: 'NotWithdrawable' }
  | { tag: 'LocationCannotHold' }
  | { tag: 'ExceedsMaxMessageSize' }
  | { tag: 'DestinationUnsupported' }
  | { tag: 'Transport' }
  | { tag: 'Unroutable' }
  | { tag: 'UnknownClaim' }
  | { tag: 'FailedToDecode' }
  | { tag: 'MaxWeightInvalid' }
  | { tag: 'NotHoldingFees' }
  | { tag: 'TooExpensive' }
  | { tag: 'Trap'; value: bigint }
  | { tag: 'UnhandledXcmVersion' }
  | { tag: 'WeightLimitReached'; value: bigint }
  | { tag: 'Barrier' }
  | { tag: 'WeightNotComputable' };

export type XcmV2MultiassetMultiAssetFilter =
  | { tag: 'Definite'; value: XcmV2MultiassetMultiAssets }
  | { tag: 'Wild'; value: XcmV2MultiassetWildMultiAsset };

export type XcmV2MultiassetWildMultiAsset =
  | { tag: 'All' }
  | { tag: 'AllOf'; value: { id: XcmV2MultiassetAssetId; fun: XcmV2MultiassetWildFungibility } };

export type XcmV2MultiassetWildFungibility = 'Fungible' | 'NonFungible';

export type XcmV2WeightLimit = { tag: 'Unlimited' } | { tag: 'Limited'; value: bigint };

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type CumulusPalletXcmCall = null;

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type CumulusPalletDmpQueueCall = {
  tag: 'service_overweight';
  value: { index: bigint; weightLimit: SpWeightsWeightV2Weight };
};

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type PalletXcAssetConfigCall =
  | { tag: 'register_asset_location'; value: { assetLocation: XcmVersionedMultiLocation; assetId: bigint } }
  | { tag: 'set_asset_units_per_second'; value: { assetLocation: XcmVersionedMultiLocation; unitsPerSecond: bigint } }
  | { tag: 'change_existing_asset_location'; value: { newAssetLocation: XcmVersionedMultiLocation; assetId: bigint } }
  | { tag: 'remove_payment_asset'; value: { assetLocation: XcmVersionedMultiLocation } }
  | { tag: 'remove_asset'; value: { assetId: bigint } };

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type OrmlXtokensModuleCall =
  | {
      tag: 'transfer';
      value: { currencyId: bigint; amount: bigint; dest: XcmVersionedMultiLocation; destWeightLimit: XcmV3WeightLimit };
    }
  | {
      tag: 'transfer_multiasset';
      value: { asset: XcmVersionedMultiAsset; dest: XcmVersionedMultiLocation; destWeightLimit: XcmV3WeightLimit };
    }
  | {
      tag: 'transfer_with_fee';
      value: {
        currencyId: bigint;
        amount: bigint;
        fee: bigint;
        dest: XcmVersionedMultiLocation;
        destWeightLimit: XcmV3WeightLimit;
      };
    }
  | {
      tag: 'transfer_multiasset_with_fee';
      value: {
        asset: XcmVersionedMultiAsset;
        fee: XcmVersionedMultiAsset;
        dest: XcmVersionedMultiLocation;
        destWeightLimit: XcmV3WeightLimit;
      };
    }
  | {
      tag: 'transfer_multicurrencies';
      value: {
        currencies: Array<[bigint, bigint]>;
        feeItem: number;
        dest: XcmVersionedMultiLocation;
        destWeightLimit: XcmV3WeightLimit;
      };
    }
  | {
      tag: 'transfer_multiassets';
      value: {
        assets: XcmVersionedMultiAssets;
        feeItem: number;
        dest: XcmVersionedMultiLocation;
        destWeightLimit: XcmV3WeightLimit;
      };
    };

export type XcmVersionedMultiAsset =
  | { tag: 'V2'; value: XcmV2MultiassetMultiAsset }
  | { tag: 'V3'; value: XcmV3MultiassetMultiAsset };

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type PalletEvmCall =
  | { tag: 'withdraw'; value: { address: H160; value: bigint } }
  | {
      tag: 'call';
      value: {
        source: H160;
        target: H160;
        input: Bytes;
        value: U256;
        gasLimit: bigint;
        maxFeePerGas: U256;
        maxPriorityFeePerGas?: U256 | undefined;
        nonce?: U256 | undefined;
        accessList: Array<[H160, Array<H256>]>;
      };
    }
  | {
      tag: 'create';
      value: {
        source: H160;
        init: Bytes;
        value: U256;
        gasLimit: bigint;
        maxFeePerGas: U256;
        maxPriorityFeePerGas?: U256 | undefined;
        nonce?: U256 | undefined;
        accessList: Array<[H160, Array<H256>]>;
      };
    }
  | {
      tag: 'create2';
      value: {
        source: H160;
        init: Bytes;
        salt: H256;
        value: U256;
        gasLimit: bigint;
        maxFeePerGas: U256;
        maxPriorityFeePerGas?: U256 | undefined;
        nonce?: U256 | undefined;
        accessList: Array<[H160, Array<H256>]>;
      };
    };

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type PalletEthereumCall = { tag: 'transact'; value: { transaction: EthereumTransactionTransactionV2 } };

export type EthereumTransactionTransactionV2 =
  | { tag: 'Legacy'; value: EthereumTransactionLegacyTransaction }
  | { tag: 'EIP2930'; value: EthereumTransactionEip2930Transaction }
  | { tag: 'EIP1559'; value: EthereumTransactionEip1559Transaction };

export type EthereumTransactionLegacyTransaction = {
  nonce: U256;
  gasPrice: U256;
  gasLimit: U256;
  action: EthereumTransactionTransactionAction;
  value: U256;
  input: Bytes;
  signature: EthereumTransactionTransactionSignature;
};

export type EthereumTransactionTransactionAction = { tag: 'Call'; value: H160 } | { tag: 'Create' };

export type EthereumTransactionTransactionSignature = { v: EthereumTransactionTransactionRecoveryId; r: H256; s: H256 };

export type EthereumTransactionTransactionRecoveryId = bigint;

export type EthereumTransactionEip2930Transaction = {
  chainId: bigint;
  nonce: U256;
  gasPrice: U256;
  gasLimit: U256;
  action: EthereumTransactionTransactionAction;
  value: U256;
  input: Bytes;
  accessList: Array<EthereumTransactionAccessListItem>;
  oddYParity: boolean;
  r: H256;
  s: H256;
};

export type EthereumTransactionAccessListItem = { address: H160; storageKeys: Array<H256> };

export type EthereumTransactionEip1559Transaction = {
  chainId: bigint;
  nonce: U256;
  maxPriorityFeePerGas: U256;
  maxFeePerGas: U256;
  gasLimit: U256;
  action: EthereumTransactionTransactionAction;
  value: U256;
  input: Bytes;
  accessList: Array<EthereumTransactionAccessListItem>;
  oddYParity: boolean;
  r: H256;
  s: H256;
};

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type PalletCustomSignaturesCall = {
  tag: 'call';
  value: { call: AstarRuntimeRuntimeCall; signer: AccountId32Like; signature: Bytes; nonce: number };
};

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type PalletBaseFeeCall =
  | { tag: 'set_base_fee_per_gas'; value: { fee: U256 } }
  | { tag: 'set_elasticity'; value: { elasticity: Permill } };

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type PalletContractsCall =
  | {
      tag: 'call_old_weight';
      value: {
        dest: MultiAddress;
        value: bigint;
        gasLimit: bigint;
        storageDepositLimit?: bigint | undefined;
        data: Bytes;
      };
    }
  | {
      tag: 'instantiate_with_code_old_weight';
      value: {
        value: bigint;
        gasLimit: bigint;
        storageDepositLimit?: bigint | undefined;
        code: Bytes;
        data: Bytes;
        salt: Bytes;
      };
    }
  | {
      tag: 'instantiate_old_weight';
      value: {
        value: bigint;
        gasLimit: bigint;
        storageDepositLimit?: bigint | undefined;
        codeHash: H256;
        data: Bytes;
        salt: Bytes;
      };
    }
  | {
      tag: 'upload_code';
      value: { code: Bytes; storageDepositLimit?: bigint | undefined; determinism: PalletContractsWasmDeterminism };
    }
  | { tag: 'remove_code'; value: { codeHash: H256 } }
  | { tag: 'set_code'; value: { dest: MultiAddress; codeHash: H256 } }
  | {
      tag: 'call';
      value: {
        dest: MultiAddress;
        value: bigint;
        gasLimit: SpWeightsWeightV2Weight;
        storageDepositLimit?: bigint | undefined;
        data: Bytes;
      };
    }
  | {
      tag: 'instantiate_with_code';
      value: {
        value: bigint;
        gasLimit: SpWeightsWeightV2Weight;
        storageDepositLimit?: bigint | undefined;
        code: Bytes;
        data: Bytes;
        salt: Bytes;
      };
    }
  | {
      tag: 'instantiate';
      value: {
        value: bigint;
        gasLimit: SpWeightsWeightV2Weight;
        storageDepositLimit?: bigint | undefined;
        codeHash: H256;
        data: Bytes;
        salt: Bytes;
      };
    }
  | { tag: 'migrate'; value: { weightLimit: SpWeightsWeightV2Weight } };

export type PalletContractsWasmDeterminism = 'Enforced' | 'Relaxed';

/**
 * Contains one variant per dispatchable that can be called by an extrinsic.
 **/
export type PalletSudoCall =
  | { tag: 'sudo'; value: { call: AstarRuntimeRuntimeCall } }
  | { tag: 'sudo_unchecked_weight'; value: { call: AstarRuntimeRuntimeCall; weight: SpWeightsWeightV2Weight } }
  | { tag: 'set_key'; value: { new: MultiAddress } }
  | { tag: 'sudo_as'; value: { who: MultiAddress; call: AstarRuntimeRuntimeCall } };

export type AstarRuntimeOriginCaller =
  | { tag: 'system'; value: FrameSupportDispatchRawOrigin }
  | { tag: 'PolkadotXcm'; value: PalletXcmOrigin }
  | { tag: 'CumulusXcm'; value: CumulusPalletXcmOrigin }
  | { tag: 'Ethereum'; value: PalletEthereumRawOrigin }
  | { tag: 'Void'; value: SpCoreVoid };

export type FrameSupportDispatchRawOrigin =
  | { tag: 'Root' }
  | { tag: 'Signed'; value: AccountId32Like }
  | { tag: 'None' };

export type PalletXcmOrigin =
  | { tag: 'Xcm'; value: XcmV3MultilocationMultiLocation }
  | { tag: 'Response'; value: XcmV3MultilocationMultiLocation };

export type CumulusPalletXcmOrigin =
  | { tag: 'Relay' }
  | { tag: 'SiblingParachain'; value: PolkadotParachainPrimitivesId };

export type PalletEthereumRawOrigin = { tag: 'EthereumTransaction'; value: H160 };

export type SpCoreVoid = null;

/**
 * Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/) of this pallet.
 **/
export type PalletUtilityError =
  /**
   * Too many calls batched.
   **/
  'TooManyCalls';

export type PalletIdentityRegistration = {
  judgements: Array<[number, PalletIdentityJudgement]>;
  deposit: bigint;
  info: PalletIdentityIdentityInfo;
};

export type PalletIdentityRegistrarInfo = { account: AccountId32Like; fee: bigint; fields: PalletIdentityBitFlags };

/**
 * Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/) of this pallet.
 **/
export type PalletIdentityError =
  /**
   * Too many subs-accounts.
   **/
  | 'TooManySubAccounts'
  /**
   * Account isn't found.
   **/
  | 'NotFound'
  /**
   * Account isn't named.
   **/
  | 'NotNamed'
  /**
   * Empty index.
   **/
  | 'EmptyIndex'
  /**
   * Fee is changed.
   **/
  | 'FeeChanged'
  /**
   * No identity found.
   **/
  | 'NoIdentity'
  /**
   * Sticky judgement.
   **/
  | 'StickyJudgement'
  /**
   * Judgement given.
   **/
  | 'JudgementGiven'
  /**
   * Invalid judgement.
   **/
  | 'InvalidJudgement'
  /**
   * The index is invalid.
   **/
  | 'InvalidIndex'
  /**
   * The target is invalid.
   **/
  | 'InvalidTarget'
  /**
   * Too many additional fields.
   **/
  | 'TooManyFields'
  /**
   * Maximum amount of registrars reached. Cannot add any more.
   **/
  | 'TooManyRegistrars'
  /**
   * Account ID is already named.
   **/
  | 'AlreadyClaimed'
  /**
   * Sender is not a sub-account.
   **/
  | 'NotSub'
  /**
   * Sub-account isn't owned by sender.
   **/
  | 'NotOwned'
  /**
   * The provided judgement was for a different identity.
   **/
  | 'JudgementForDifferentIdentity'
  /**
   * Error that occurs when there is an issue paying for judgement.
   **/
  | 'JudgementPaymentFailed';

export type PalletMultisigMultisig = {
  when: PalletMultisigTimepoint;
  deposit: bigint;
  depositor: AccountId32Like;
  approvals: Array<AccountId32Like>;
};

/**
 * Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/) of this pallet.
 **/
export type PalletMultisigError =
  /**
   * Threshold must be 2 or greater.
   **/
  | 'MinimumThreshold'
  /**
   * Call is already approved by this signatory.
   **/
  | 'AlreadyApproved'
  /**
   * Call doesn't need any (more) approvals.
   **/
  | 'NoApprovalsNeeded'
  /**
   * There are too few signatories in the list.
   **/
  | 'TooFewSignatories'
  /**
   * There are too many signatories in the list.
   **/
  | 'TooManySignatories'
  /**
   * The signatories were provided out of order; they should be ordered.
   **/
  | 'SignatoriesOutOfOrder'
  /**
   * The sender was contained in the other signatories; it shouldn't be.
   **/
  | 'SenderInSignatories'
  /**
   * Multisig operation not found when attempting to cancel.
   **/
  | 'NotFound'
  /**
   * Only the account that originally created the multisig is able to cancel it.
   **/
  | 'NotOwner'
  /**
   * No timepoint was given, yet the multisig operation is already underway.
   **/
  | 'NoTimepoint'
  /**
   * A different timepoint was given to the multisig operation that is underway.
   **/
  | 'WrongTimepoint'
  /**
   * A timepoint was given, yet no multisig operation is underway.
   **/
  | 'UnexpectedTimepoint'
  /**
   * The maximum weight information provided was too low.
   **/
  | 'MaxWeightTooLow'
  /**
   * The data to be stored is already stored.
   **/
  | 'AlreadyStored';

export type PalletProxyProxyDefinition = { delegate: AccountId32Like; proxyType: AstarRuntimeProxyType; delay: number };

export type PalletProxyAnnouncement = { real: AccountId32Like; callHash: H256; height: number };

/**
 * Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/) of this pallet.
 **/
export type PalletProxyError =
  /**
   * There are too many proxies registered or too many announcements pending.
   **/
  | 'TooMany'
  /**
   * Proxy registration not found.
   **/
  | 'NotFound'
  /**
   * Sender is not a proxy of the account to be proxied.
   **/
  | 'NotProxy'
  /**
   * A call which is incompatible with the proxy type's filter was attempted.
   **/
  | 'Unproxyable'
  /**
   * Account is already a proxy.
   **/
  | 'Duplicate'
  /**
   * Call may not be made by proxy because it may escalate its privileges.
   **/
  | 'NoPermission'
  /**
   * Announcement, if made at all, was made too recently.
   **/
  | 'Unannounced'
  /**
   * Cannot add self as proxy.
   **/
  | 'NoSelfProxy';

export type PolkadotPrimitivesV4UpgradeRestriction = 'Present';

export type CumulusPalletParachainSystemRelayStateSnapshotMessagingStateSnapshot = {
  dmqMqcHead: H256;
  relayDispatchQueueSize: CumulusPalletParachainSystemRelayStateSnapshotRelayDispachQueueSize;
  ingressChannels: Array<[PolkadotParachainPrimitivesId, PolkadotPrimitivesV4AbridgedHrmpChannel]>;
  egressChannels: Array<[PolkadotParachainPrimitivesId, PolkadotPrimitivesV4AbridgedHrmpChannel]>;
};

export type CumulusPalletParachainSystemRelayStateSnapshotRelayDispachQueueSize = {
  remainingCount: number;
  remainingSize: number;
};

export type PolkadotPrimitivesV4AbridgedHrmpChannel = {
  maxCapacity: number;
  maxTotalSize: number;
  maxMessageSize: number;
  msgCount: number;
  totalSize: number;
  mqcHead?: H256 | undefined;
};

export type PolkadotPrimitivesV4AbridgedHostConfiguration = {
  maxCodeSize: number;
  maxHeadDataSize: number;
  maxUpwardQueueCount: number;
  maxUpwardQueueSize: number;
  maxUpwardMessageSize: number;
  maxUpwardMessageNumPerCandidate: number;
  hrmpMaxMessageNumPerCandidate: number;
  validationUpgradeCooldown: number;
  validationUpgradeDelay: number;
};

export type CumulusPrimitivesParachainInherentMessageQueueChain = H256;

export type PolkadotCorePrimitivesOutboundHrmpMessage = { recipient: PolkadotParachainPrimitivesId; data: Bytes };

export type CumulusPalletParachainSystemCodeUpgradeAuthorization = { codeHash: H256; checkVersion: boolean };

/**
 * Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/) of this pallet.
 **/
export type CumulusPalletParachainSystemError =
  /**
   * Attempt to upgrade validation function while existing upgrade pending.
   **/
  | 'OverlappingUpgrades'
  /**
   * Polkadot currently prohibits this parachain from upgrading its validation function.
   **/
  | 'ProhibitedByPolkadot'
  /**
   * The supplied validation function has compiled into a blob larger than Polkadot is
   * willing to run.
   **/
  | 'TooBig'
  /**
   * The inherent which supplies the validation data did not run this block.
   **/
  | 'ValidationDataNotAvailable'
  /**
   * The inherent which supplies the host configuration did not run this block.
   **/
  | 'HostConfigurationNotAvailable'
  /**
   * No validation function upgrade is currently scheduled.
   **/
  | 'NotScheduled'
  /**
   * No code upgrade has been authorized.
   **/
  | 'NothingAuthorized'
  /**
   * The given code upgrade has not been authorized.
   **/
  | 'Unauthorized';

export type PalletTransactionPaymentReleases = 'V1Ancient' | 'V2';

export type PalletBalancesBalanceLock = { id: FixedBytes<8>; amount: bigint; reasons: PalletBalancesReasons };

export type PalletBalancesReasons = 'Fee' | 'Misc' | 'All';

export type PalletBalancesReserveData = { id: FixedBytes<8>; amount: bigint };

export type PalletBalancesIdAmount = { id: []; amount: bigint };

/**
 * Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/) of this pallet.
 **/
export type PalletBalancesError =
  /**
   * Vesting balance too high to send value.
   **/
  | 'VestingBalance'
  /**
   * Account liquidity restrictions prevent withdrawal.
   **/
  | 'LiquidityRestrictions'
  /**
   * Balance too low to send value.
   **/
  | 'InsufficientBalance'
  /**
   * Value too low to create account due to existential deposit.
   **/
  | 'ExistentialDeposit'
  /**
   * Transfer/payment would kill account.
   **/
  | 'Expendability'
  /**
   * A vesting schedule already exists for this account.
   **/
  | 'ExistingVestingSchedule'
  /**
   * Beneficiary account must pre-exist.
   **/
  | 'DeadAccount'
  /**
   * Number of named reserves exceed `MaxReserves`.
   **/
  | 'TooManyReserves'
  /**
   * Number of holds exceed `MaxHolds`.
   **/
  | 'TooManyHolds'
  /**
   * Number of freezes exceed `MaxFreezes`.
   **/
  | 'TooManyFreezes';

export type PalletVestingReleases = 'V0' | 'V1';

/**
 * Error for the vesting pallet.
 **/
export type PalletVestingError =
  /**
   * The account given is not vesting.
   **/
  | 'NotVesting'
  /**
   * The account already has `MaxVestingSchedules` count of schedules and thus
   * cannot add another one. Consider merging existing schedules in order to add another.
   **/
  | 'AtMaxVestingSchedules'
  /**
   * Amount being transferred is too low to create a vesting schedule.
   **/
  | 'AmountLow'
  /**
   * An index was out of bounds of the vesting schedules.
   **/
  | 'ScheduleIndexOutOfBounds'
  /**
   * Failed to create a new schedule because some parameter was invalid.
   **/
  | 'InvalidScheduleParams';

export type PalletDappsStakingAccountLedger = {
  locked: bigint;
  unbondingInfo: PalletDappsStakingUnbondingInfo;
  rewardDestination: PalletDappsStakingRewardDestination;
};

export type PalletDappsStakingUnbondingInfo = { unlockingChunks: Array<PalletDappsStakingUnlockingChunk> };

export type PalletDappsStakingUnlockingChunk = { amount: bigint; unlockEra: number };

export type PalletDappsStakingRewardInfo = { stakers: bigint; dapps: bigint };

export type PalletDappsStakingForcing = 'NotForcing' | 'ForceNew';

export type PalletDappsStakingDAppInfo = { developer: AccountId32Like; state: PalletDappsStakingDAppState };

export type PalletDappsStakingDAppState = { tag: 'Registered' } | { tag: 'Unregistered'; value: number };

export type PalletDappsStakingEraInfo = { rewards: PalletDappsStakingRewardInfo; staked: bigint; locked: bigint };

export type PalletDappsStakingStakerInfo = { stakes: Array<PalletDappsStakingEraStake> };

export type PalletDappsStakingEraStake = { staked: bigint; era: number };

export type PalletDappsStakingVersion = 'V1_0_0' | 'V2_0_0' | 'V3_0_0' | 'V4_0_0';

export type FrameSupportPalletId = FixedBytes<8>;

/**
 * Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/) of this pallet.
 **/
export type PalletDappsStakingPalletError =
  /**
   * Disabled
   **/
  | 'Disabled'
  /**
   * No change in maintenance mode
   **/
  | 'NoMaintenanceModeChange'
  /**
   * Upgrade is too heavy, reduce the weight parameter.
   **/
  | 'UpgradeTooHeavy'
  /**
   * Can not stake with zero value.
   **/
  | 'StakingWithNoValue'
  /**
   * Can not stake with value less than minimum staking value
   **/
  | 'InsufficientValue'
  /**
   * Number of stakers per contract exceeded.
   **/
  | 'MaxNumberOfStakersExceeded'
  /**
   * Targets must be operated contracts
   **/
  | 'NotOperatedContract'
  /**
   * Contract isn't staked.
   **/
  | 'NotStakedContract'
  /**
   * Contract isn't unregistered.
   **/
  | 'NotUnregisteredContract'
  /**
   * Unclaimed rewards should be claimed before withdrawing stake.
   **/
  | 'UnclaimedRewardsRemaining'
  /**
   * Unstaking a contract with zero value
   **/
  | 'UnstakingWithNoValue'
  /**
   * There are no previously unbonded funds that can be unstaked and withdrawn.
   **/
  | 'NothingToWithdraw'
  /**
   * The contract is already registered by other account
   **/
  | 'AlreadyRegisteredContract'
  /**
   * This account was already used to register contract
   **/
  | 'AlreadyUsedDeveloperAccount'
  /**
   * Smart contract not owned by the account id.
   **/
  | 'NotOwnedContract'
  /**
   * Report issue on github if this is ever emitted
   **/
  | 'UnknownEraReward'
  /**
   * Report issue on github if this is ever emitted
   **/
  | 'UnexpectedStakeInfoEra'
  /**
   * Contract has too many unlocking chunks. Withdraw the existing chunks if possible
   * or wait for current chunks to complete unlocking process to withdraw them.
   **/
  | 'TooManyUnlockingChunks'
  /**
   * Contract already claimed in this era and reward is distributed
   **/
  | 'AlreadyClaimedInThisEra'
  /**
   * Era parameter is out of bounds
   **/
  | 'EraOutOfBounds'
  /**
   * Too many active `EraStake` values for (staker, contract) pairing.
   * Claim existing rewards to fix this problem.
   **/
  | 'TooManyEraStakeValues'
  /**
   * Account is not actively staking
   **/
  | 'NotActiveStaker'
  /**
   * Transfering nomination to the same contract
   **/
  | 'NominationTransferToSameContract';

/**
 * Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/) of this pallet.
 **/
export type PalletBlockRewardError =
  /**
   * Sum of all rations must be one whole (100%)
   **/
  'InvalidDistributionConfiguration';

export type PalletAssetsAssetDetails = {
  owner: AccountId32Like;
  issuer: AccountId32Like;
  admin: AccountId32Like;
  freezer: AccountId32Like;
  supply: bigint;
  deposit: bigint;
  minBalance: bigint;
  isSufficient: boolean;
  accounts: number;
  sufficients: number;
  approvals: number;
  status: PalletAssetsAssetStatus;
};

export type PalletAssetsAssetStatus = 'Live' | 'Frozen' | 'Destroying';

export type PalletAssetsAssetAccount = {
  balance: bigint;
  status: PalletAssetsAccountStatus;
  reason: PalletAssetsExistenceReason;
  extra: [];
};

export type PalletAssetsAccountStatus = 'Liquid' | 'Frozen' | 'Blocked';

export type PalletAssetsExistenceReason =
  | { tag: 'Consumer' }
  | { tag: 'Sufficient' }
  | { tag: 'DepositHeld'; value: bigint }
  | { tag: 'DepositRefunded' }
  | { tag: 'DepositFrom'; value: [AccountId32Like, bigint] };

export type PalletAssetsApproval = { amount: bigint; deposit: bigint };

export type PalletAssetsAssetMetadata = {
  deposit: bigint;
  name: Bytes;
  symbol: Bytes;
  decimals: number;
  isFrozen: boolean;
};

/**
 * Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/) of this pallet.
 **/
export type PalletAssetsError =
  /**
   * Account balance must be greater than or equal to the transfer amount.
   **/
  | 'BalanceLow'
  /**
   * The account to alter does not exist.
   **/
  | 'NoAccount'
  /**
   * The signing account has no permission to do the operation.
   **/
  | 'NoPermission'
  /**
   * The given asset ID is unknown.
   **/
  | 'Unknown'
  /**
   * The origin account is frozen.
   **/
  | 'Frozen'
  /**
   * The asset ID is already taken.
   **/
  | 'InUse'
  /**
   * Invalid witness data given.
   **/
  | 'BadWitness'
  /**
   * Minimum balance should be non-zero.
   **/
  | 'MinBalanceZero'
  /**
   * Unable to increment the consumer reference counters on the account. Either no provider
   * reference exists to allow a non-zero balance of a non-self-sufficient asset, or one
   * fewer then the maximum number of consumers has been reached.
   **/
  | 'UnavailableConsumer'
  /**
   * Invalid metadata given.
   **/
  | 'BadMetadata'
  /**
   * No approval exists that would allow the transfer.
   **/
  | 'Unapproved'
  /**
   * The source account would not survive the transfer and it needs to stay alive.
   **/
  | 'WouldDie'
  /**
   * The asset-account already exists.
   **/
  | 'AlreadyExists'
  /**
   * The asset-account doesn't have an associated deposit.
   **/
  | 'NoDeposit'
  /**
   * The operation would result in funds being burned.
   **/
  | 'WouldBurn'
  /**
   * The asset is a live asset and is actively being used. Usually emit for operations such
   * as `start_destroy` which require the asset to be in a destroying state.
   **/
  | 'LiveAsset'
  /**
   * The asset is not live, and likely being destroyed.
   **/
  | 'AssetNotLive'
  /**
   * The asset status is not the expected status.
   **/
  | 'IncorrectStatus'
  /**
   * The asset should be frozen before the given operation.
   **/
  | 'NotFrozen'
  /**
   * Callback action resulted in error
   **/
  | 'CallbackFailed';

export type PalletCollatorSelectionCandidateInfo = { who: AccountId32Like; deposit: bigint };

/**
 * Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/) of this pallet.
 **/
export type PalletCollatorSelectionError =
  /**
   * Too many candidates
   **/
  | 'TooManyCandidates'
  /**
   * Too few candidates
   **/
  | 'TooFewCandidates'
  /**
   * Unknown error
   **/
  | 'Unknown'
  /**
   * Permission issue
   **/
  | 'Permission'
  /**
   * User is already a candidate
   **/
  | 'AlreadyCandidate'
  /**
   * User is not a candidate
   **/
  | 'NotCandidate'
  /**
   * User is already an Invulnerable
   **/
  | 'AlreadyInvulnerable'
  /**
   * Account has no associated validator ID
   **/
  | 'NoAssociatedValidatorId'
  /**
   * Validator ID is not yet registered
   **/
  | 'ValidatorNotRegistered';

export type SpCoreCryptoKeyTypeId = FixedBytes<4>;

/**
 * Error for the session pallet.
 **/
export type PalletSessionError =
  /**
   * Invalid ownership proof.
   **/
  | 'InvalidProof'
  /**
   * No associated validator ID for account.
   **/
  | 'NoAssociatedValidatorId'
  /**
   * Registered duplicate key.
   **/
  | 'DuplicatedKey'
  /**
   * No keys are associated with this account.
   **/
  | 'NoKeys'
  /**
   * Key setting account is not live, so it's impossible to associate keys.
   **/
  | 'NoAccount';

export type SpConsensusSlotsSlot = bigint;

export type CumulusPalletXcmpQueueInboundChannelDetails = {
  sender: PolkadotParachainPrimitivesId;
  state: CumulusPalletXcmpQueueInboundState;
  messageMetadata: Array<[number, PolkadotParachainPrimitivesXcmpMessageFormat]>;
};

export type CumulusPalletXcmpQueueInboundState = 'Ok' | 'Suspended';

export type PolkadotParachainPrimitivesXcmpMessageFormat =
  | 'ConcatenatedVersionedXcm'
  | 'ConcatenatedEncodedBlob'
  | 'Signals';

export type CumulusPalletXcmpQueueOutboundChannelDetails = {
  recipient: PolkadotParachainPrimitivesId;
  state: CumulusPalletXcmpQueueOutboundState;
  signalsExist: boolean;
  firstIndex: number;
  lastIndex: number;
};

export type CumulusPalletXcmpQueueOutboundState = 'Ok' | 'Suspended';

export type CumulusPalletXcmpQueueQueueConfigData = {
  suspendThreshold: number;
  dropThreshold: number;
  resumeThreshold: number;
  thresholdWeight: SpWeightsWeightV2Weight;
  weightRestrictDecay: SpWeightsWeightV2Weight;
  xcmpMaxIndividualWeight: SpWeightsWeightV2Weight;
};

/**
 * Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/) of this pallet.
 **/
export type CumulusPalletXcmpQueueError =
  /**
   * Failed to send XCM message.
   **/
  | 'FailedToSend'
  /**
   * Bad XCM origin.
   **/
  | 'BadXcmOrigin'
  /**
   * Bad XCM data.
   **/
  | 'BadXcm'
  /**
   * Bad overweight index.
   **/
  | 'BadOverweightIndex'
  /**
   * Provided weight is possibly not enough to execute the message.
   **/
  | 'WeightOverLimit';

export type PalletXcmQueryStatus =
  | {
      tag: 'Pending';
      value: {
        responder: XcmVersionedMultiLocation;
        maybeMatchQuerier?: XcmVersionedMultiLocation | undefined;
        maybeNotify?: [number, number] | undefined;
        timeout: number;
      };
    }
  | { tag: 'VersionNotifier'; value: { origin: XcmVersionedMultiLocation; isActive: boolean } }
  | { tag: 'Ready'; value: { response: XcmVersionedResponse; at: number } };

export type XcmVersionedResponse = { tag: 'V2'; value: XcmV2Response } | { tag: 'V3'; value: XcmV3Response };

export type PalletXcmVersionMigrationStage =
  | { tag: 'MigrateSupportedVersion' }
  | { tag: 'MigrateVersionNotifiers' }
  | { tag: 'NotifyCurrentTargets'; value?: Bytes | undefined }
  | { tag: 'MigrateAndNotifyOldTargets' };

export type XcmVersionedAssetId = { tag: 'V3'; value: XcmV3MultiassetAssetId };

export type PalletXcmRemoteLockedFungibleRecord = {
  amount: bigint;
  owner: XcmVersionedMultiLocation;
  locker: XcmVersionedMultiLocation;
  users: number;
};

/**
 * Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/) of this pallet.
 **/
export type PalletXcmError =
  /**
   * The desired destination was unreachable, generally because there is a no way of routing
   * to it.
   **/
  | 'Unreachable'
  /**
   * There was some other issue (i.e. not to do with routing) in sending the message. Perhaps
   * a lack of space for buffering the message.
   **/
  | 'SendFailure'
  /**
   * The message execution fails the filter.
   **/
  | 'Filtered'
  /**
   * The message's weight could not be determined.
   **/
  | 'UnweighableMessage'
  /**
   * The destination `MultiLocation` provided cannot be inverted.
   **/
  | 'DestinationNotInvertible'
  /**
   * The assets to be sent are empty.
   **/
  | 'Empty'
  /**
   * Could not re-anchor the assets to declare the fees for the destination chain.
   **/
  | 'CannotReanchor'
  /**
   * Too many assets have been attempted for transfer.
   **/
  | 'TooManyAssets'
  /**
   * Origin is invalid for sending.
   **/
  | 'InvalidOrigin'
  /**
   * The version of the `Versioned` value used is not able to be interpreted.
   **/
  | 'BadVersion'
  /**
   * The given location could not be used (e.g. because it cannot be expressed in the
   * desired version of XCM).
   **/
  | 'BadLocation'
  /**
   * The referenced subscription could not be found.
   **/
  | 'NoSubscription'
  /**
   * The location is invalid since it already has a subscription from us.
   **/
  | 'AlreadySubscribed'
  /**
   * Invalid asset for the operation.
   **/
  | 'InvalidAsset'
  /**
   * The owner does not own (all) of the asset that they wish to do the operation on.
   **/
  | 'LowBalance'
  /**
   * The asset owner has too many locks on the asset.
   **/
  | 'TooManyLocks'
  /**
   * The given account is not an identifiable sovereign account for any location.
   **/
  | 'AccountNotSovereign'
  /**
   * The operation required fees to be paid which the initiator could not meet.
   **/
  | 'FeesNotMet'
  /**
   * A remote lock with the corresponding data could not be found.
   **/
  | 'LockNotFound'
  /**
   * The unlock operation cannot succeed because there are still users of the lock.
   **/
  | 'InUse';

/**
 * Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/) of this pallet.
 **/
export type CumulusPalletXcmError = null;

export type CumulusPalletDmpQueueConfigData = { maxIndividual: SpWeightsWeightV2Weight };

export type CumulusPalletDmpQueuePageIndexData = { beginUsed: number; endUsed: number; overweightCount: bigint };

/**
 * Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/) of this pallet.
 **/
export type CumulusPalletDmpQueueError =
  /**
   * The message index given is unknown.
   **/
  | 'Unknown'
  /**
   * The amount of weight given is possibly not enough for executing the message.
   **/
  | 'OverLimit';

/**
 * Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/) of this pallet.
 **/
export type PalletXcAssetConfigError =
  /**
   * Asset is already registered.
   **/
  | 'AssetAlreadyRegistered'
  /**
   * Asset does not exist (hasn't been registered).
   **/
  | 'AssetDoesNotExist'
  /**
   * Failed to convert to latest versioned MultiLocation
   **/
  | 'MultiLocationNotSupported';

/**
 * Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/) of this pallet.
 **/
export type OrmlXtokensModuleError =
  /**
   * Asset has no reserve location.
   **/
  | 'AssetHasNoReserve'
  /**
   * Not cross-chain transfer.
   **/
  | 'NotCrossChainTransfer'
  /**
   * Invalid transfer destination.
   **/
  | 'InvalidDest'
  /**
   * Currency is not cross-chain transferable.
   **/
  | 'NotCrossChainTransferableCurrency'
  /**
   * The message's weight could not be determined.
   **/
  | 'UnweighableMessage'
  /**
   * XCM execution failed.
   **/
  | 'XcmExecutionFailed'
  /**
   * Could not re-anchor the assets to declare the fees for the
   * destination chain.
   **/
  | 'CannotReanchor'
  /**
   * Could not get ancestry of asset reserve location.
   **/
  | 'InvalidAncestry'
  /**
   * The MultiAsset is invalid.
   **/
  | 'InvalidAsset'
  /**
   * The destination `MultiLocation` provided cannot be inverted.
   **/
  | 'DestinationNotInvertible'
  /**
   * The version of the `Versioned` value used is not able to be
   * interpreted.
   **/
  | 'BadVersion'
  /**
   * We tried sending distinct asset and fee but they have different
   * reserve chains.
   **/
  | 'DistinctReserveForAssetAndFee'
  /**
   * The fee is zero.
   **/
  | 'ZeroFee'
  /**
   * The transfering asset amount is zero.
   **/
  | 'ZeroAmount'
  /**
   * The number of assets to be sent is over the maximum.
   **/
  | 'TooManyAssetsBeingSent'
  /**
   * The specified index does not exist in a MultiAssets struct.
   **/
  | 'AssetIndexNonExistent'
  /**
   * Fee is not enough.
   **/
  | 'FeeNotEnough'
  /**
   * Not supported MultiLocation
   **/
  | 'NotSupportedMultiLocation'
  /**
   * MinXcmFee not registered for certain reserve location
   **/
  | 'MinXcmFeeNotDefined';

export type PalletEvmCodeMetadata = { size: bigint; hash: H256 };

/**
 * Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/) of this pallet.
 **/
export type PalletEvmError =
  /**
   * Not enough balance to perform action
   **/
  | 'BalanceLow'
  /**
   * Calculating total fee overflowed
   **/
  | 'FeeOverflow'
  /**
   * Calculating total payment overflowed
   **/
  | 'PaymentOverflow'
  /**
   * Withdraw fee failed
   **/
  | 'WithdrawFailed'
  /**
   * Gas price is too low.
   **/
  | 'GasPriceTooLow'
  /**
   * Nonce is invalid
   **/
  | 'InvalidNonce'
  /**
   * Gas limit is too low.
   **/
  | 'GasLimitTooLow'
  /**
   * Gas limit is too high.
   **/
  | 'GasLimitTooHigh'
  /**
   * Undefined error.
   **/
  | 'Undefined'
  /**
   * EVM reentrancy
   **/
  | 'Reentrancy'
  /**
   * EIP-3607,
   **/
  | 'TransactionMustComeFromEOA';

export type FpRpcTransactionStatus = {
  transactionHash: H256;
  transactionIndex: number;
  from: H160;
  to?: H160 | undefined;
  contractAddress?: H160 | undefined;
  logs: Array<EthereumLog>;
  logsBloom: EthbloomBloom;
};

export type EthbloomBloom = FixedBytes<256>;

export type EthereumReceiptReceiptV3 =
  | { tag: 'Legacy'; value: EthereumReceiptEip658ReceiptData }
  | { tag: 'EIP2930'; value: EthereumReceiptEip658ReceiptData }
  | { tag: 'EIP1559'; value: EthereumReceiptEip658ReceiptData };

export type EthereumReceiptEip658ReceiptData = {
  statusCode: number;
  usedGas: U256;
  logsBloom: EthbloomBloom;
  logs: Array<EthereumLog>;
};

export type EthereumBlock = {
  header: EthereumHeader;
  transactions: Array<EthereumTransactionTransactionV2>;
  ommers: Array<EthereumHeader>;
};

export type EthereumHeader = {
  parentHash: H256;
  ommersHash: H256;
  beneficiary: H160;
  stateRoot: H256;
  transactionsRoot: H256;
  receiptsRoot: H256;
  logsBloom: EthbloomBloom;
  difficulty: U256;
  number: U256;
  gasLimit: U256;
  gasUsed: U256;
  timestamp: bigint;
  extraData: Bytes;
  mixHash: H256;
  nonce: EthereumTypesHashH64;
};

export type EthereumTypesHashH64 = FixedBytes<8>;

/**
 * Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/) of this pallet.
 **/
export type PalletEthereumError =
  /**
   * Signature is invalid.
   **/
  | 'InvalidSignature'
  /**
   * Pre-log is present, therefore transact is not allowed.
   **/
  | 'PreLogExists';

/**
 * Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/) of this pallet.
 **/
export type PalletCustomSignaturesError =
  /**
   * Signature decode fails.
   **/
  | 'DecodeFailure'
  /**
   * Signature and account mismatched.
   **/
  | 'InvalidSignature'
  /**
   * Bad nonce parameter.
   **/
  | 'BadNonce';

export type PalletContractsWasmPrefabWasmModule = {
  instructionWeightsVersion: number;
  initial: number;
  maximum: number;
  code: Bytes;
  determinism: PalletContractsWasmDeterminism;
};

export type PalletContractsWasmOwnerInfo = { owner: AccountId32Like; deposit: bigint; refcount: bigint };

export type PalletContractsStorageContractInfo = {
  trieId: Bytes;
  depositAccount: PalletContractsStorageDepositAccount;
  codeHash: H256;
  storageBytes: number;
  storageItems: number;
  storageByteDeposit: bigint;
  storageItemDeposit: bigint;
  storageBaseDeposit: bigint;
};

export type PalletContractsStorageDepositAccount = AccountId32Like;

export type PalletContractsStorageDeletionQueueManager = { insertCounter: number; deleteCounter: number };

export type PalletContractsSchedule = {
  limits: PalletContractsScheduleLimits;
  instructionWeights: PalletContractsScheduleInstructionWeights;
  hostFnWeights: PalletContractsScheduleHostFnWeights;
};

export type PalletContractsScheduleLimits = {
  eventTopics: number;
  globals: number;
  locals: number;
  parameters: number;
  memoryPages: number;
  tableSize: number;
  brTableSize: number;
  subjectLen: number;
  payloadLen: number;
  runtimeMemory: number;
};

export type PalletContractsScheduleInstructionWeights = {
  version: number;
  fallback: number;
  i64const: number;
  i64load: number;
  i64store: number;
  select: number;
  rIf: number;
  br: number;
  brIf: number;
  brTable: number;
  brTablePerEntry: number;
  call: number;
  callIndirect: number;
  callPerLocal: number;
  localGet: number;
  localSet: number;
  localTee: number;
  globalGet: number;
  globalSet: number;
  memoryCurrent: number;
  memoryGrow: number;
  i64clz: number;
  i64ctz: number;
  i64popcnt: number;
  i64eqz: number;
  i64extendsi32: number;
  i64extendui32: number;
  i32wrapi64: number;
  i64eq: number;
  i64ne: number;
  i64lts: number;
  i64ltu: number;
  i64gts: number;
  i64gtu: number;
  i64les: number;
  i64leu: number;
  i64ges: number;
  i64geu: number;
  i64add: number;
  i64sub: number;
  i64mul: number;
  i64divs: number;
  i64divu: number;
  i64rems: number;
  i64remu: number;
  i64and: number;
  i64or: number;
  i64xor: number;
  i64shl: number;
  i64shrs: number;
  i64shru: number;
  i64rotl: number;
  i64rotr: number;
};

export type PalletContractsScheduleHostFnWeights = {
  caller: SpWeightsWeightV2Weight;
  isContract: SpWeightsWeightV2Weight;
  codeHash: SpWeightsWeightV2Weight;
  ownCodeHash: SpWeightsWeightV2Weight;
  callerIsOrigin: SpWeightsWeightV2Weight;
  callerIsRoot: SpWeightsWeightV2Weight;
  address: SpWeightsWeightV2Weight;
  gasLeft: SpWeightsWeightV2Weight;
  balance: SpWeightsWeightV2Weight;
  valueTransferred: SpWeightsWeightV2Weight;
  minimumBalance: SpWeightsWeightV2Weight;
  blockNumber: SpWeightsWeightV2Weight;
  now: SpWeightsWeightV2Weight;
  weightToFee: SpWeightsWeightV2Weight;
  gas: SpWeightsWeightV2Weight;
  input: SpWeightsWeightV2Weight;
  inputPerByte: SpWeightsWeightV2Weight;
  rReturn: SpWeightsWeightV2Weight;
  returnPerByte: SpWeightsWeightV2Weight;
  terminate: SpWeightsWeightV2Weight;
  random: SpWeightsWeightV2Weight;
  depositEvent: SpWeightsWeightV2Weight;
  depositEventPerTopic: SpWeightsWeightV2Weight;
  depositEventPerByte: SpWeightsWeightV2Weight;
  debugMessage: SpWeightsWeightV2Weight;
  debugMessagePerByte: SpWeightsWeightV2Weight;
  setStorage: SpWeightsWeightV2Weight;
  setStoragePerNewByte: SpWeightsWeightV2Weight;
  setStoragePerOldByte: SpWeightsWeightV2Weight;
  setCodeHash: SpWeightsWeightV2Weight;
  clearStorage: SpWeightsWeightV2Weight;
  clearStoragePerByte: SpWeightsWeightV2Weight;
  containsStorage: SpWeightsWeightV2Weight;
  containsStoragePerByte: SpWeightsWeightV2Weight;
  getStorage: SpWeightsWeightV2Weight;
  getStoragePerByte: SpWeightsWeightV2Weight;
  takeStorage: SpWeightsWeightV2Weight;
  takeStoragePerByte: SpWeightsWeightV2Weight;
  transfer: SpWeightsWeightV2Weight;
  call: SpWeightsWeightV2Weight;
  delegateCall: SpWeightsWeightV2Weight;
  callTransferSurcharge: SpWeightsWeightV2Weight;
  callPerClonedByte: SpWeightsWeightV2Weight;
  instantiate: SpWeightsWeightV2Weight;
  instantiateTransferSurcharge: SpWeightsWeightV2Weight;
  instantiatePerInputByte: SpWeightsWeightV2Weight;
  instantiatePerSaltByte: SpWeightsWeightV2Weight;
  hashSha2256: SpWeightsWeightV2Weight;
  hashSha2256PerByte: SpWeightsWeightV2Weight;
  hashKeccak256: SpWeightsWeightV2Weight;
  hashKeccak256PerByte: SpWeightsWeightV2Weight;
  hashBlake2256: SpWeightsWeightV2Weight;
  hashBlake2256PerByte: SpWeightsWeightV2Weight;
  hashBlake2128: SpWeightsWeightV2Weight;
  hashBlake2128PerByte: SpWeightsWeightV2Weight;
  ecdsaRecover: SpWeightsWeightV2Weight;
  ecdsaToEthAddress: SpWeightsWeightV2Weight;
  sr25519Verify: SpWeightsWeightV2Weight;
  sr25519VerifyPerByte: SpWeightsWeightV2Weight;
  reentranceCount: SpWeightsWeightV2Weight;
  accountReentranceCount: SpWeightsWeightV2Weight;
  instantiationNonce: SpWeightsWeightV2Weight;
};

/**
 * Custom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/) of this pallet.
 **/
export type PalletContractsError =
  /**
   * A new schedule must have a greater version than the current one.
   **/
  | 'InvalidScheduleVersion'
  /**
   * Invalid combination of flags supplied to `seal_call` or `seal_delegate_call`.
   **/
  | 'InvalidCallFlags'
  /**
   * The executed contract exhausted its gas limit.
   **/
  | 'OutOfGas'
  /**
   * The output buffer supplied to a contract API call was too small.
   **/
  | 'OutputBufferTooSmall'
  /**
   * Performing the requested transfer failed. Probably because there isn't enough
   * free balance in the sender's account.
   **/
  | 'TransferFailed'
  /**
   * Performing a call was denied because the calling depth reached the limit
   * of what is specified in the schedule.
   **/
  | 'MaxCallDepthReached'
  /**
   * No contract was found at the specified address.
   **/
  | 'ContractNotFound'
  /**
   * The code supplied to `instantiate_with_code` exceeds the limit specified in the
   * current schedule.
   **/
  | 'CodeTooLarge'
  /**
   * No code could be found at the supplied code hash.
   **/
  | 'CodeNotFound'
  /**
   * A buffer outside of sandbox memory was passed to a contract API function.
   **/
  | 'OutOfBounds'
  /**
   * Input passed to a contract API function failed to decode as expected type.
   **/
  | 'DecodingFailed'
  /**
   * Contract trapped during execution.
   **/
  | 'ContractTrapped'
  /**
   * The size defined in `T::MaxValueSize` was exceeded.
   **/
  | 'ValueTooLarge'
  /**
   * Termination of a contract is not allowed while the contract is already
   * on the call stack. Can be triggered by `seal_terminate`.
   **/
  | 'TerminatedWhileReentrant'
  /**
   * `seal_call` forwarded this contracts input. It therefore is no longer available.
   **/
  | 'InputForwarded'
  /**
   * The subject passed to `seal_random` exceeds the limit.
   **/
  | 'RandomSubjectTooLong'
  /**
   * The amount of topics passed to `seal_deposit_events` exceeds the limit.
   **/
  | 'TooManyTopics'
  /**
   * The chain does not provide a chain extension. Calling the chain extension results
   * in this error. Note that this usually shouldn't happen as deploying such contracts
   * is rejected.
   **/
  | 'NoChainExtension'
  /**
   * A contract with the same AccountId already exists.
   **/
  | 'DuplicateContract'
  /**
   * A contract self destructed in its constructor.
   *
   * This can be triggered by a call to `seal_terminate`.
   **/
  | 'TerminatedInConstructor'
  /**
   * A call tried to invoke a contract that is flagged as non-reentrant.
   * The only other cause is that a call from a contract into the runtime tried to call back
   * into `pallet-contracts`. This would make the whole pallet reentrant with regard to
   * contract code execution which is not supported.
   **/
  | 'ReentranceDenied'
  /**
   * Origin doesn't have enough balance to pay the required storage deposits.
   **/
  | 'StorageDepositNotEnoughFunds'
  /**
   * More storage was created than allowed by the storage deposit limit.
   **/
  | 'StorageDepositLimitExhausted'
  /**
   * Code removal was denied because the code is still in use by at least one contract.
   **/
  | 'CodeInUse'
  /**
   * The contract ran to completion but decided to revert its storage changes.
   * Please note that this error is only returned from extrinsics. When called directly
   * or via RPC an `Ok` will be returned. In this case the caller needs to inspect the flags
   * to determine whether a reversion has taken place.
   **/
  | 'ContractReverted'
  /**
   * The contract's code was found to be invalid during validation or instrumentation.
   *
   * The most likely cause of this is that an API was used which is not supported by the
   * node. This happens if an older node is used with a new version of ink!. Try updating
   * your node to the newest available version.
   *
   * A more detailed error can be found on the node console if debug messages are enabled
   * by supplying `-lruntime::contracts=debug`.
   **/
  | 'CodeRejected'
  /**
   * An indetermistic code was used in a context where this is not permitted.
   **/
  | 'Indeterministic'
  /**
   * A pending migration needs to complete before the extrinsic can be called.
   **/
  | 'MigrationInProgress'
  /**
   * Migrate dispatch call was attempted but no migration was performed.
   **/
  | 'NoMigrationPerformed';

/**
 * Error for the Sudo pallet
 **/
export type PalletSudoError =
  /**
   * Sender must be the Sudo account
   **/
  'RequireSudo';

export type FpSelfContainedUncheckedExtrinsic = SpRuntimeUncheckedExtrinsic;

export type SpRuntimeMultiSignature =
  | { tag: 'Ed25519'; value: SpCoreEd25519Signature }
  | { tag: 'Sr25519'; value: SpCoreSr25519Signature }
  | { tag: 'Ecdsa'; value: SpCoreEcdsaSignature };

export type SpCoreEd25519Signature = FixedBytes<64>;

export type SpCoreSr25519Signature = FixedBytes<64>;

export type SpCoreEcdsaSignature = FixedBytes<65>;

export type FrameSystemExtensionsCheckSpecVersion = {};

export type FrameSystemExtensionsCheckTxVersion = {};

export type FrameSystemExtensionsCheckGenesis = {};

export type FrameSystemExtensionsCheckMortality = SpRuntimeEra;

export type SpRuntimeEra =
  | { tag: 'Immortal' }
  | { tag: 'Mortal1'; value: number }
  | { tag: 'Mortal2'; value: number }
  | { tag: 'Mortal3'; value: number }
  | { tag: 'Mortal4'; value: number }
  | { tag: 'Mortal5'; value: number }
  | { tag: 'Mortal6'; value: number }
  | { tag: 'Mortal7'; value: number }
  | { tag: 'Mortal8'; value: number }
  | { tag: 'Mortal9'; value: number }
  | { tag: 'Mortal10'; value: number }
  | { tag: 'Mortal11'; value: number }
  | { tag: 'Mortal12'; value: number }
  | { tag: 'Mortal13'; value: number }
  | { tag: 'Mortal14'; value: number }
  | { tag: 'Mortal15'; value: number }
  | { tag: 'Mortal16'; value: number }
  | { tag: 'Mortal17'; value: number }
  | { tag: 'Mortal18'; value: number }
  | { tag: 'Mortal19'; value: number }
  | { tag: 'Mortal20'; value: number }
  | { tag: 'Mortal21'; value: number }
  | { tag: 'Mortal22'; value: number }
  | { tag: 'Mortal23'; value: number }
  | { tag: 'Mortal24'; value: number }
  | { tag: 'Mortal25'; value: number }
  | { tag: 'Mortal26'; value: number }
  | { tag: 'Mortal27'; value: number }
  | { tag: 'Mortal28'; value: number }
  | { tag: 'Mortal29'; value: number }
  | { tag: 'Mortal30'; value: number }
  | { tag: 'Mortal31'; value: number }
  | { tag: 'Mortal32'; value: number }
  | { tag: 'Mortal33'; value: number }
  | { tag: 'Mortal34'; value: number }
  | { tag: 'Mortal35'; value: number }
  | { tag: 'Mortal36'; value: number }
  | { tag: 'Mortal37'; value: number }
  | { tag: 'Mortal38'; value: number }
  | { tag: 'Mortal39'; value: number }
  | { tag: 'Mortal40'; value: number }
  | { tag: 'Mortal41'; value: number }
  | { tag: 'Mortal42'; value: number }
  | { tag: 'Mortal43'; value: number }
  | { tag: 'Mortal44'; value: number }
  | { tag: 'Mortal45'; value: number }
  | { tag: 'Mortal46'; value: number }
  | { tag: 'Mortal47'; value: number }
  | { tag: 'Mortal48'; value: number }
  | { tag: 'Mortal49'; value: number }
  | { tag: 'Mortal50'; value: number }
  | { tag: 'Mortal51'; value: number }
  | { tag: 'Mortal52'; value: number }
  | { tag: 'Mortal53'; value: number }
  | { tag: 'Mortal54'; value: number }
  | { tag: 'Mortal55'; value: number }
  | { tag: 'Mortal56'; value: number }
  | { tag: 'Mortal57'; value: number }
  | { tag: 'Mortal58'; value: number }
  | { tag: 'Mortal59'; value: number }
  | { tag: 'Mortal60'; value: number }
  | { tag: 'Mortal61'; value: number }
  | { tag: 'Mortal62'; value: number }
  | { tag: 'Mortal63'; value: number }
  | { tag: 'Mortal64'; value: number }
  | { tag: 'Mortal65'; value: number }
  | { tag: 'Mortal66'; value: number }
  | { tag: 'Mortal67'; value: number }
  | { tag: 'Mortal68'; value: number }
  | { tag: 'Mortal69'; value: number }
  | { tag: 'Mortal70'; value: number }
  | { tag: 'Mortal71'; value: number }
  | { tag: 'Mortal72'; value: number }
  | { tag: 'Mortal73'; value: number }
  | { tag: 'Mortal74'; value: number }
  | { tag: 'Mortal75'; value: number }
  | { tag: 'Mortal76'; value: number }
  | { tag: 'Mortal77'; value: number }
  | { tag: 'Mortal78'; value: number }
  | { tag: 'Mortal79'; value: number }
  | { tag: 'Mortal80'; value: number }
  | { tag: 'Mortal81'; value: number }
  | { tag: 'Mortal82'; value: number }
  | { tag: 'Mortal83'; value: number }
  | { tag: 'Mortal84'; value: number }
  | { tag: 'Mortal85'; value: number }
  | { tag: 'Mortal86'; value: number }
  | { tag: 'Mortal87'; value: number }
  | { tag: 'Mortal88'; value: number }
  | { tag: 'Mortal89'; value: number }
  | { tag: 'Mortal90'; value: number }
  | { tag: 'Mortal91'; value: number }
  | { tag: 'Mortal92'; value: number }
  | { tag: 'Mortal93'; value: number }
  | { tag: 'Mortal94'; value: number }
  | { tag: 'Mortal95'; value: number }
  | { tag: 'Mortal96'; value: number }
  | { tag: 'Mortal97'; value: number }
  | { tag: 'Mortal98'; value: number }
  | { tag: 'Mortal99'; value: number }
  | { tag: 'Mortal100'; value: number }
  | { tag: 'Mortal101'; value: number }
  | { tag: 'Mortal102'; value: number }
  | { tag: 'Mortal103'; value: number }
  | { tag: 'Mortal104'; value: number }
  | { tag: 'Mortal105'; value: number }
  | { tag: 'Mortal106'; value: number }
  | { tag: 'Mortal107'; value: number }
  | { tag: 'Mortal108'; value: number }
  | { tag: 'Mortal109'; value: number }
  | { tag: 'Mortal110'; value: number }
  | { tag: 'Mortal111'; value: number }
  | { tag: 'Mortal112'; value: number }
  | { tag: 'Mortal113'; value: number }
  | { tag: 'Mortal114'; value: number }
  | { tag: 'Mortal115'; value: number }
  | { tag: 'Mortal116'; value: number }
  | { tag: 'Mortal117'; value: number }
  | { tag: 'Mortal118'; value: number }
  | { tag: 'Mortal119'; value: number }
  | { tag: 'Mortal120'; value: number }
  | { tag: 'Mortal121'; value: number }
  | { tag: 'Mortal122'; value: number }
  | { tag: 'Mortal123'; value: number }
  | { tag: 'Mortal124'; value: number }
  | { tag: 'Mortal125'; value: number }
  | { tag: 'Mortal126'; value: number }
  | { tag: 'Mortal127'; value: number }
  | { tag: 'Mortal128'; value: number }
  | { tag: 'Mortal129'; value: number }
  | { tag: 'Mortal130'; value: number }
  | { tag: 'Mortal131'; value: number }
  | { tag: 'Mortal132'; value: number }
  | { tag: 'Mortal133'; value: number }
  | { tag: 'Mortal134'; value: number }
  | { tag: 'Mortal135'; value: number }
  | { tag: 'Mortal136'; value: number }
  | { tag: 'Mortal137'; value: number }
  | { tag: 'Mortal138'; value: number }
  | { tag: 'Mortal139'; value: number }
  | { tag: 'Mortal140'; value: number }
  | { tag: 'Mortal141'; value: number }
  | { tag: 'Mortal142'; value: number }
  | { tag: 'Mortal143'; value: number }
  | { tag: 'Mortal144'; value: number }
  | { tag: 'Mortal145'; value: number }
  | { tag: 'Mortal146'; value: number }
  | { tag: 'Mortal147'; value: number }
  | { tag: 'Mortal148'; value: number }
  | { tag: 'Mortal149'; value: number }
  | { tag: 'Mortal150'; value: number }
  | { tag: 'Mortal151'; value: number }
  | { tag: 'Mortal152'; value: number }
  | { tag: 'Mortal153'; value: number }
  | { tag: 'Mortal154'; value: number }
  | { tag: 'Mortal155'; value: number }
  | { tag: 'Mortal156'; value: number }
  | { tag: 'Mortal157'; value: number }
  | { tag: 'Mortal158'; value: number }
  | { tag: 'Mortal159'; value: number }
  | { tag: 'Mortal160'; value: number }
  | { tag: 'Mortal161'; value: number }
  | { tag: 'Mortal162'; value: number }
  | { tag: 'Mortal163'; value: number }
  | { tag: 'Mortal164'; value: number }
  | { tag: 'Mortal165'; value: number }
  | { tag: 'Mortal166'; value: number }
  | { tag: 'Mortal167'; value: number }
  | { tag: 'Mortal168'; value: number }
  | { tag: 'Mortal169'; value: number }
  | { tag: 'Mortal170'; value: number }
  | { tag: 'Mortal171'; value: number }
  | { tag: 'Mortal172'; value: number }
  | { tag: 'Mortal173'; value: number }
  | { tag: 'Mortal174'; value: number }
  | { tag: 'Mortal175'; value: number }
  | { tag: 'Mortal176'; value: number }
  | { tag: 'Mortal177'; value: number }
  | { tag: 'Mortal178'; value: number }
  | { tag: 'Mortal179'; value: number }
  | { tag: 'Mortal180'; value: number }
  | { tag: 'Mortal181'; value: number }
  | { tag: 'Mortal182'; value: number }
  | { tag: 'Mortal183'; value: number }
  | { tag: 'Mortal184'; value: number }
  | { tag: 'Mortal185'; value: number }
  | { tag: 'Mortal186'; value: number }
  | { tag: 'Mortal187'; value: number }
  | { tag: 'Mortal188'; value: number }
  | { tag: 'Mortal189'; value: number }
  | { tag: 'Mortal190'; value: number }
  | { tag: 'Mortal191'; value: number }
  | { tag: 'Mortal192'; value: number }
  | { tag: 'Mortal193'; value: number }
  | { tag: 'Mortal194'; value: number }
  | { tag: 'Mortal195'; value: number }
  | { tag: 'Mortal196'; value: number }
  | { tag: 'Mortal197'; value: number }
  | { tag: 'Mortal198'; value: number }
  | { tag: 'Mortal199'; value: number }
  | { tag: 'Mortal200'; value: number }
  | { tag: 'Mortal201'; value: number }
  | { tag: 'Mortal202'; value: number }
  | { tag: 'Mortal203'; value: number }
  | { tag: 'Mortal204'; value: number }
  | { tag: 'Mortal205'; value: number }
  | { tag: 'Mortal206'; value: number }
  | { tag: 'Mortal207'; value: number }
  | { tag: 'Mortal208'; value: number }
  | { tag: 'Mortal209'; value: number }
  | { tag: 'Mortal210'; value: number }
  | { tag: 'Mortal211'; value: number }
  | { tag: 'Mortal212'; value: number }
  | { tag: 'Mortal213'; value: number }
  | { tag: 'Mortal214'; value: number }
  | { tag: 'Mortal215'; value: number }
  | { tag: 'Mortal216'; value: number }
  | { tag: 'Mortal217'; value: number }
  | { tag: 'Mortal218'; value: number }
  | { tag: 'Mortal219'; value: number }
  | { tag: 'Mortal220'; value: number }
  | { tag: 'Mortal221'; value: number }
  | { tag: 'Mortal222'; value: number }
  | { tag: 'Mortal223'; value: number }
  | { tag: 'Mortal224'; value: number }
  | { tag: 'Mortal225'; value: number }
  | { tag: 'Mortal226'; value: number }
  | { tag: 'Mortal227'; value: number }
  | { tag: 'Mortal228'; value: number }
  | { tag: 'Mortal229'; value: number }
  | { tag: 'Mortal230'; value: number }
  | { tag: 'Mortal231'; value: number }
  | { tag: 'Mortal232'; value: number }
  | { tag: 'Mortal233'; value: number }
  | { tag: 'Mortal234'; value: number }
  | { tag: 'Mortal235'; value: number }
  | { tag: 'Mortal236'; value: number }
  | { tag: 'Mortal237'; value: number }
  | { tag: 'Mortal238'; value: number }
  | { tag: 'Mortal239'; value: number }
  | { tag: 'Mortal240'; value: number }
  | { tag: 'Mortal241'; value: number }
  | { tag: 'Mortal242'; value: number }
  | { tag: 'Mortal243'; value: number }
  | { tag: 'Mortal244'; value: number }
  | { tag: 'Mortal245'; value: number }
  | { tag: 'Mortal246'; value: number }
  | { tag: 'Mortal247'; value: number }
  | { tag: 'Mortal248'; value: number }
  | { tag: 'Mortal249'; value: number }
  | { tag: 'Mortal250'; value: number }
  | { tag: 'Mortal251'; value: number }
  | { tag: 'Mortal252'; value: number }
  | { tag: 'Mortal253'; value: number }
  | { tag: 'Mortal254'; value: number }
  | { tag: 'Mortal255'; value: number };

export type FrameSystemExtensionsCheckNonce = number;

export type FrameSystemExtensionsCheckWeight = {};

export type PalletTransactionPaymentChargeTransactionPayment = bigint;

export type SpRuntimeUncheckedExtrinsic = Bytes;
