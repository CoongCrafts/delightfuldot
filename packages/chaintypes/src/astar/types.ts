// Generated by @delightfuldot/codegen
import type {
  AccountId32,
  Bytes,
  FixedBytes,
  FixedU128,
  H160,
  H256,
  MultiAddress,
  Perbill,
  Permill,
  U256,
} from '@delightfuldot/codecs';

export type {
  Bytes,
  FixedBytes,
  AccountId32,
  H256,
  H160,
  Perbill,
  U256,
  Permill,
  MultiAddress,
  FixedU128,
} from '@delightfuldot/codecs';

export type FrameSystemAccountInfo = {
  nonce: number;
  consumers: number;
  providers: number;
  sufficients: number;
  data: PalletBalancesAccountData;
};

export type PalletBalancesAccountData = {
  free: bigint;
  reserved: bigint;
  frozen: bigint;
  flags: PalletBalancesExtraFlags;
};

export type PalletBalancesExtraFlags = bigint;

export type SpWeightsWeightV2Weight = {
  refTime: bigint;
  proofSize: bigint;
};

export type SpRuntimeDigest = {
  logs: Array<SpRuntimeDigestDigestItem>;
};

export type SpRuntimeDigestDigestItem =
  | { tag: 'PreRuntime'; value: [FixedBytes<4>, Bytes] }
  | { tag: 'Consensus'; value: [FixedBytes<4>, Bytes] }
  | { tag: 'Seal'; value: [FixedBytes<4>, Bytes] }
  | { tag: 'Other'; value: Bytes }
  | { tag: 'RuntimeEnvironmentUpdated'; value: never };

export type FrameSystemEventRecord = {
  phase: FrameSystemPhase;
  event: AstarRuntimeRuntimeEvent;
  topics: Array<H256>;
};

export type AstarRuntimeRuntimeEvent =
  | { tag: 'System'; value: FrameSystemEvent }
  | { tag: 'Utility'; value: PalletUtilityEvent }
  | { tag: 'Identity'; value: PalletIdentityEvent }
  | { tag: 'Multisig'; value: PalletMultisigEvent }
  | { tag: 'Proxy'; value: PalletProxyEvent }
  | { tag: 'ParachainSystem'; value: CumulusPalletParachainSystemEvent }
  | { tag: 'TransactionPayment'; value: PalletTransactionPaymentEvent }
  | { tag: 'Balances'; value: PalletBalancesEvent }
  | { tag: 'Vesting'; value: PalletVestingEvent }
  | { tag: 'DappsStaking'; value: PalletDappsStakingPalletEvent }
  | { tag: 'BlockReward'; value: PalletBlockRewardEvent }
  | { tag: 'Assets'; value: PalletAssetsEvent }
  | { tag: 'CollatorSelection'; value: PalletCollatorSelectionEvent }
  | { tag: 'Session'; value: PalletSessionEvent }
  | { tag: 'XcmpQueue'; value: CumulusPalletXcmpQueueEvent }
  | { tag: 'PolkadotXcm'; value: PalletXcmEvent }
  | { tag: 'CumulusXcm'; value: CumulusPalletXcmEvent }
  | { tag: 'DmpQueue'; value: CumulusPalletDmpQueueEvent }
  | { tag: 'XcAssetConfig'; value: PalletXcAssetConfigEvent }
  | { tag: 'Xtokens'; value: OrmlXtokensModuleEvent }
  | { tag: 'EVM'; value: PalletEvmEvent }
  | { tag: 'Ethereum'; value: PalletEthereumEvent }
  | { tag: 'EthCall'; value: PalletCustomSignaturesEvent }
  | { tag: 'BaseFee'; value: PalletBaseFeeEvent }
  | { tag: 'Contracts'; value: PalletContractsEvent }
  | { tag: 'Sudo'; value: PalletSudoEvent };

export type FrameSystemEvent =
  | {
      tag: 'ExtrinsicSuccess';
      value: {
        dispatchInfo: FrameSupportDispatchDispatchInfo;
      };
    }
  | {
      tag: 'ExtrinsicFailed';
      value: {
        dispatchError: SpRuntimeDispatchError;
        dispatchInfo: FrameSupportDispatchDispatchInfo;
      };
    }
  | { tag: 'CodeUpdated'; value: never }
  | {
      tag: 'NewAccount';
      value: {
        account: AccountId32;
      };
    }
  | {
      tag: 'KilledAccount';
      value: {
        account: AccountId32;
      };
    }
  | {
      tag: 'Remarked';
      value: {
        sender: AccountId32;
        hash: H256;
      };
    };

export type FrameSupportDispatchDispatchInfo = {
  weight: SpWeightsWeightV2Weight;
  class: FrameSupportDispatchDispatchClass;
  paysFee: FrameSupportDispatchPays;
};

export type FrameSupportDispatchDispatchClass = 'normal' | 'operational' | 'mandatory';

export type FrameSupportDispatchPays = 'yes' | 'no';

export type SpRuntimeDispatchError =
  | { tag: 'Other'; value: never }
  | { tag: 'CannotLookup'; value: never }
  | { tag: 'BadOrigin'; value: never }
  | { tag: 'Module'; value: SpRuntimeModuleError }
  | { tag: 'ConsumerRemaining'; value: never }
  | { tag: 'NoProviders'; value: never }
  | { tag: 'TooManyConsumers'; value: never }
  | { tag: 'Token'; value: SpRuntimeTokenError }
  | { tag: 'Arithmetic'; value: SpArithmeticArithmeticError }
  | { tag: 'Transactional'; value: SpRuntimeTransactionalError }
  | { tag: 'Exhausted'; value: never }
  | { tag: 'Corruption'; value: never }
  | { tag: 'Unavailable'; value: never }
  | { tag: 'RootNotAllowed'; value: never };

export type SpRuntimeModuleError = {
  index: number;
  error: FixedBytes<4>;
};

export type SpRuntimeTokenError =
  | 'fundsUnavailable'
  | 'onlyProvider'
  | 'belowMinimum'
  | 'cannotCreate'
  | 'unknownAsset'
  | 'frozen'
  | 'unsupported'
  | 'cannotCreateHold'
  | 'notExpendable'
  | 'blocked';

export type SpArithmeticArithmeticError = 'underflow' | 'overflow' | 'divisionByZero';

export type SpRuntimeTransactionalError = 'limitReached' | 'noLayer';

export type PalletUtilityEvent =
  | {
      tag: 'BatchInterrupted';
      value: {
        index: number;
        error: SpRuntimeDispatchError;
      };
    }
  | { tag: 'BatchCompleted'; value: never }
  | { tag: 'BatchCompletedWithErrors'; value: never }
  | { tag: 'ItemCompleted'; value: never }
  | {
      tag: 'ItemFailed';
      value: {
        error: SpRuntimeDispatchError;
      };
    }
  | {
      tag: 'DispatchedAs';
      value: {
        result: never | SpRuntimeDispatchError;
      };
    };

export type PalletIdentityEvent =
  | {
      tag: 'IdentitySet';
      value: {
        who: AccountId32;
      };
    }
  | {
      tag: 'IdentityCleared';
      value: {
        who: AccountId32;
        deposit: bigint;
      };
    }
  | {
      tag: 'IdentityKilled';
      value: {
        who: AccountId32;
        deposit: bigint;
      };
    }
  | {
      tag: 'JudgementRequested';
      value: {
        who: AccountId32;
        registrarIndex: number;
      };
    }
  | {
      tag: 'JudgementUnrequested';
      value: {
        who: AccountId32;
        registrarIndex: number;
      };
    }
  | {
      tag: 'JudgementGiven';
      value: {
        target: AccountId32;
        registrarIndex: number;
      };
    }
  | {
      tag: 'RegistrarAdded';
      value: {
        registrarIndex: number;
      };
    }
  | {
      tag: 'SubIdentityAdded';
      value: {
        sub: AccountId32;
        main: AccountId32;
        deposit: bigint;
      };
    }
  | {
      tag: 'SubIdentityRemoved';
      value: {
        sub: AccountId32;
        main: AccountId32;
        deposit: bigint;
      };
    }
  | {
      tag: 'SubIdentityRevoked';
      value: {
        sub: AccountId32;
        main: AccountId32;
        deposit: bigint;
      };
    };

export type PalletMultisigEvent =
  | {
      tag: 'NewMultisig';
      value: {
        approving: AccountId32;
        multisig: AccountId32;
        callHash: FixedBytes<32>;
      };
    }
  | {
      tag: 'MultisigApproval';
      value: {
        approving: AccountId32;
        timepoint: PalletMultisigTimepoint;
        multisig: AccountId32;
        callHash: FixedBytes<32>;
      };
    }
  | {
      tag: 'MultisigExecuted';
      value: {
        approving: AccountId32;
        timepoint: PalletMultisigTimepoint;
        multisig: AccountId32;
        callHash: FixedBytes<32>;
        result: never | SpRuntimeDispatchError;
      };
    }
  | {
      tag: 'MultisigCancelled';
      value: {
        cancelling: AccountId32;
        timepoint: PalletMultisigTimepoint;
        multisig: AccountId32;
        callHash: FixedBytes<32>;
      };
    };

export type PalletMultisigTimepoint = {
  height: number;
  index: number;
};

export type PalletProxyEvent =
  | {
      tag: 'ProxyExecuted';
      value: {
        result: never | SpRuntimeDispatchError;
      };
    }
  | {
      tag: 'PureCreated';
      value: {
        pure: AccountId32;
        who: AccountId32;
        proxyType: AstarRuntimeProxyType;
        disambiguationIndex: number;
      };
    }
  | {
      tag: 'Announced';
      value: {
        real: AccountId32;
        proxy: AccountId32;
        callHash: H256;
      };
    }
  | {
      tag: 'ProxyAdded';
      value: {
        delegator: AccountId32;
        delegatee: AccountId32;
        proxyType: AstarRuntimeProxyType;
        delay: number;
      };
    }
  | {
      tag: 'ProxyRemoved';
      value: {
        delegator: AccountId32;
        delegatee: AccountId32;
        proxyType: AstarRuntimeProxyType;
        delay: number;
      };
    };

export type AstarRuntimeProxyType =
  | 'any'
  | 'nonTransfer'
  | 'balances'
  | 'assets'
  | 'identityJudgement'
  | 'cancelProxy'
  | 'dappsStaking'
  | 'stakerRewardClaim';

export type CumulusPalletParachainSystemEvent =
  | { tag: 'ValidationFunctionStored'; value: never }
  | {
      tag: 'ValidationFunctionApplied';
      value: {
        relayChainBlockNum: number;
      };
    }
  | { tag: 'ValidationFunctionDiscarded'; value: never }
  | {
      tag: 'UpgradeAuthorized';
      value: {
        codeHash: H256;
      };
    }
  | {
      tag: 'DownwardMessagesReceived';
      value: {
        count: number;
      };
    }
  | {
      tag: 'DownwardMessagesProcessed';
      value: {
        weightUsed: SpWeightsWeightV2Weight;
        dmqHead: H256;
      };
    }
  | {
      tag: 'UpwardMessageSent';
      value: {
        messageHash?: FixedBytes<32> | undefined;
      };
    };

export type PalletTransactionPaymentEvent = {
  tag: 'TransactionFeePaid';
  value: {
    who: AccountId32;
    actualFee: bigint;
    tip: bigint;
  };
};

export type PalletBalancesEvent =
  | {
      tag: 'Endowed';
      value: {
        account: AccountId32;
        freeBalance: bigint;
      };
    }
  | {
      tag: 'DustLost';
      value: {
        account: AccountId32;
        amount: bigint;
      };
    }
  | {
      tag: 'Transfer';
      value: {
        from: AccountId32;
        to: AccountId32;
        amount: bigint;
      };
    }
  | {
      tag: 'BalanceSet';
      value: {
        who: AccountId32;
        free: bigint;
      };
    }
  | {
      tag: 'Reserved';
      value: {
        who: AccountId32;
        amount: bigint;
      };
    }
  | {
      tag: 'Unreserved';
      value: {
        who: AccountId32;
        amount: bigint;
      };
    }
  | {
      tag: 'ReserveRepatriated';
      value: {
        from: AccountId32;
        to: AccountId32;
        amount: bigint;
        destinationStatus: FrameSupportTokensMiscBalanceStatus;
      };
    }
  | {
      tag: 'Deposit';
      value: {
        who: AccountId32;
        amount: bigint;
      };
    }
  | {
      tag: 'Withdraw';
      value: {
        who: AccountId32;
        amount: bigint;
      };
    }
  | {
      tag: 'Slashed';
      value: {
        who: AccountId32;
        amount: bigint;
      };
    }
  | {
      tag: 'Minted';
      value: {
        who: AccountId32;
        amount: bigint;
      };
    }
  | {
      tag: 'Burned';
      value: {
        who: AccountId32;
        amount: bigint;
      };
    }
  | {
      tag: 'Suspended';
      value: {
        who: AccountId32;
        amount: bigint;
      };
    }
  | {
      tag: 'Restored';
      value: {
        who: AccountId32;
        amount: bigint;
      };
    }
  | {
      tag: 'Upgraded';
      value: {
        who: AccountId32;
      };
    }
  | {
      tag: 'Issued';
      value: {
        amount: bigint;
      };
    }
  | {
      tag: 'Rescinded';
      value: {
        amount: bigint;
      };
    }
  | {
      tag: 'Locked';
      value: {
        who: AccountId32;
        amount: bigint;
      };
    }
  | {
      tag: 'Unlocked';
      value: {
        who: AccountId32;
        amount: bigint;
      };
    }
  | {
      tag: 'Frozen';
      value: {
        who: AccountId32;
        amount: bigint;
      };
    }
  | {
      tag: 'Thawed';
      value: {
        who: AccountId32;
        amount: bigint;
      };
    };

export type FrameSupportTokensMiscBalanceStatus = 'free' | 'reserved';

export type PalletVestingEvent =
  | {
      tag: 'VestingUpdated';
      value: {
        account: AccountId32;
        unvested: bigint;
      };
    }
  | {
      tag: 'VestingCompleted';
      value: {
        account: AccountId32;
      };
    };

export type PalletDappsStakingPalletEvent =
  | { tag: 'BondAndStake'; value: [AccountId32, AstarRuntimeSmartContract, bigint] }
  | { tag: 'UnbondAndUnstake'; value: [AccountId32, AstarRuntimeSmartContract, bigint] }
  | { tag: 'WithdrawFromUnregistered'; value: [AccountId32, AstarRuntimeSmartContract, bigint] }
  | { tag: 'Withdrawn'; value: [AccountId32, bigint] }
  | { tag: 'NewContract'; value: [AccountId32, AstarRuntimeSmartContract] }
  | { tag: 'ContractRemoved'; value: [AccountId32, AstarRuntimeSmartContract] }
  | { tag: 'NewDappStakingEra'; value: number }
  | { tag: 'Reward'; value: [AccountId32, AstarRuntimeSmartContract, number, bigint] }
  | { tag: 'MaintenanceMode'; value: boolean }
  | { tag: 'RewardDestination'; value: [AccountId32, PalletDappsStakingRewardDestination] }
  | { tag: 'NominationTransfer'; value: [AccountId32, AstarRuntimeSmartContract, bigint, AstarRuntimeSmartContract] }
  | { tag: 'StaleRewardBurned'; value: [AccountId32, AstarRuntimeSmartContract, number, bigint] };

export type AstarRuntimeSmartContract = { tag: 'Evm'; value: H160 } | { tag: 'Wasm'; value: AccountId32 };

export type PalletDappsStakingRewardDestination = 'freeBalance' | 'stakeBalance';

export type PalletBlockRewardEvent = {
  tag: 'DistributionConfigurationChanged';
  value: PalletBlockRewardRewardDistributionConfig;
};

export type PalletBlockRewardRewardDistributionConfig = {
  baseTreasuryPercent: Perbill;
  baseStakerPercent: Perbill;
  dappsPercent: Perbill;
  collatorsPercent: Perbill;
  adjustablePercent: Perbill;
  idealDappsStakingTvl: Perbill;
};

export type PalletAssetsEvent =
  | {
      tag: 'Created';
      value: {
        assetId: bigint;
        creator: AccountId32;
        owner: AccountId32;
      };
    }
  | {
      tag: 'Issued';
      value: {
        assetId: bigint;
        owner: AccountId32;
        amount: bigint;
      };
    }
  | {
      tag: 'Transferred';
      value: {
        assetId: bigint;
        from: AccountId32;
        to: AccountId32;
        amount: bigint;
      };
    }
  | {
      tag: 'Burned';
      value: {
        assetId: bigint;
        owner: AccountId32;
        balance: bigint;
      };
    }
  | {
      tag: 'TeamChanged';
      value: {
        assetId: bigint;
        issuer: AccountId32;
        admin: AccountId32;
        freezer: AccountId32;
      };
    }
  | {
      tag: 'OwnerChanged';
      value: {
        assetId: bigint;
        owner: AccountId32;
      };
    }
  | {
      tag: 'Frozen';
      value: {
        assetId: bigint;
        who: AccountId32;
      };
    }
  | {
      tag: 'Thawed';
      value: {
        assetId: bigint;
        who: AccountId32;
      };
    }
  | {
      tag: 'AssetFrozen';
      value: {
        assetId: bigint;
      };
    }
  | {
      tag: 'AssetThawed';
      value: {
        assetId: bigint;
      };
    }
  | {
      tag: 'AccountsDestroyed';
      value: {
        assetId: bigint;
        accountsDestroyed: number;
        accountsRemaining: number;
      };
    }
  | {
      tag: 'ApprovalsDestroyed';
      value: {
        assetId: bigint;
        approvalsDestroyed: number;
        approvalsRemaining: number;
      };
    }
  | {
      tag: 'DestructionStarted';
      value: {
        assetId: bigint;
      };
    }
  | {
      tag: 'Destroyed';
      value: {
        assetId: bigint;
      };
    }
  | {
      tag: 'ForceCreated';
      value: {
        assetId: bigint;
        owner: AccountId32;
      };
    }
  | {
      tag: 'MetadataSet';
      value: {
        assetId: bigint;
        name: Bytes;
        symbol: Bytes;
        decimals: number;
        isFrozen: boolean;
      };
    }
  | {
      tag: 'MetadataCleared';
      value: {
        assetId: bigint;
      };
    }
  | {
      tag: 'ApprovedTransfer';
      value: {
        assetId: bigint;
        source: AccountId32;
        delegate: AccountId32;
        amount: bigint;
      };
    }
  | {
      tag: 'ApprovalCancelled';
      value: {
        assetId: bigint;
        owner: AccountId32;
        delegate: AccountId32;
      };
    }
  | {
      tag: 'TransferredApproved';
      value: {
        assetId: bigint;
        owner: AccountId32;
        delegate: AccountId32;
        destination: AccountId32;
        amount: bigint;
      };
    }
  | {
      tag: 'AssetStatusChanged';
      value: {
        assetId: bigint;
      };
    }
  | {
      tag: 'AssetMinBalanceChanged';
      value: {
        assetId: bigint;
        newMinBalance: bigint;
      };
    }
  | {
      tag: 'Touched';
      value: {
        assetId: bigint;
        who: AccountId32;
        depositor: AccountId32;
      };
    }
  | {
      tag: 'Blocked';
      value: {
        assetId: bigint;
        who: AccountId32;
      };
    };

export type PalletCollatorSelectionEvent =
  | { tag: 'NewInvulnerables'; value: Array<AccountId32> }
  | { tag: 'NewDesiredCandidates'; value: number }
  | { tag: 'NewCandidacyBond'; value: bigint }
  | { tag: 'CandidateAdded'; value: [AccountId32, bigint] }
  | { tag: 'CandidateRemoved'; value: AccountId32 }
  | { tag: 'CandidateSlashed'; value: AccountId32 };

export type PalletSessionEvent = {
  tag: 'NewSession';
  value: {
    sessionIndex: number;
  };
};

export type CumulusPalletXcmpQueueEvent =
  | {
      tag: 'Success';
      value: {
        messageHash?: FixedBytes<32> | undefined;
        weight: SpWeightsWeightV2Weight;
      };
    }
  | {
      tag: 'Fail';
      value: {
        messageHash?: FixedBytes<32> | undefined;
        error: XcmV3TraitsError;
        weight: SpWeightsWeightV2Weight;
      };
    }
  | {
      tag: 'BadVersion';
      value: {
        messageHash?: FixedBytes<32> | undefined;
      };
    }
  | {
      tag: 'BadFormat';
      value: {
        messageHash?: FixedBytes<32> | undefined;
      };
    }
  | {
      tag: 'XcmpMessageSent';
      value: {
        messageHash?: FixedBytes<32> | undefined;
      };
    }
  | {
      tag: 'OverweightEnqueued';
      value: {
        sender: PolkadotParachainPrimitivesId;
        sentAt: number;
        index: bigint;
        required: SpWeightsWeightV2Weight;
      };
    }
  | {
      tag: 'OverweightServiced';
      value: {
        index: bigint;
        used: SpWeightsWeightV2Weight;
      };
    };

export type XcmV3TraitsError =
  | { tag: 'Overflow'; value: never }
  | { tag: 'Unimplemented'; value: never }
  | { tag: 'UntrustedReserveLocation'; value: never }
  | { tag: 'UntrustedTeleportLocation'; value: never }
  | { tag: 'LocationFull'; value: never }
  | { tag: 'LocationNotInvertible'; value: never }
  | { tag: 'BadOrigin'; value: never }
  | { tag: 'InvalidLocation'; value: never }
  | { tag: 'AssetNotFound'; value: never }
  | { tag: 'FailedToTransactAsset'; value: never }
  | { tag: 'NotWithdrawable'; value: never }
  | { tag: 'LocationCannotHold'; value: never }
  | { tag: 'ExceedsMaxMessageSize'; value: never }
  | { tag: 'DestinationUnsupported'; value: never }
  | { tag: 'Transport'; value: never }
  | { tag: 'Unroutable'; value: never }
  | { tag: 'UnknownClaim'; value: never }
  | { tag: 'FailedToDecode'; value: never }
  | { tag: 'MaxWeightInvalid'; value: never }
  | { tag: 'NotHoldingFees'; value: never }
  | { tag: 'TooExpensive'; value: never }
  | { tag: 'Trap'; value: bigint }
  | { tag: 'ExpectationFalse'; value: never }
  | { tag: 'PalletNotFound'; value: never }
  | { tag: 'NameMismatch'; value: never }
  | { tag: 'VersionIncompatible'; value: never }
  | { tag: 'HoldingWouldOverflow'; value: never }
  | { tag: 'ExportError'; value: never }
  | { tag: 'ReanchorFailed'; value: never }
  | { tag: 'NoDeal'; value: never }
  | { tag: 'FeesNotMet'; value: never }
  | { tag: 'LockError'; value: never }
  | { tag: 'NoPermission'; value: never }
  | { tag: 'Unanchored'; value: never }
  | { tag: 'NotDepositable'; value: never }
  | { tag: 'UnhandledXcmVersion'; value: never }
  | { tag: 'WeightLimitReached'; value: SpWeightsWeightV2Weight }
  | { tag: 'Barrier'; value: never }
  | { tag: 'WeightNotComputable'; value: never }
  | { tag: 'ExceedsStackLimit'; value: never };

export type PolkadotParachainPrimitivesId = number;

export type PalletXcmEvent =
  | { tag: 'Attempted'; value: XcmV3TraitsOutcome }
  | { tag: 'Sent'; value: [XcmV3MultilocationMultiLocation, XcmV3MultilocationMultiLocation, XcmV3Xcm] }
  | { tag: 'UnexpectedResponse'; value: [XcmV3MultilocationMultiLocation, bigint] }
  | { tag: 'ResponseReady'; value: [bigint, XcmV3Response] }
  | { tag: 'Notified'; value: [bigint, number, number] }
  | { tag: 'NotifyOverweight'; value: [bigint, number, number, SpWeightsWeightV2Weight, SpWeightsWeightV2Weight] }
  | { tag: 'NotifyDispatchError'; value: [bigint, number, number] }
  | { tag: 'NotifyDecodeFailed'; value: [bigint, number, number] }
  | {
      tag: 'InvalidResponder';
      value: [XcmV3MultilocationMultiLocation, bigint, XcmV3MultilocationMultiLocation | undefined];
    }
  | { tag: 'InvalidResponderVersion'; value: [XcmV3MultilocationMultiLocation, bigint] }
  | { tag: 'ResponseTaken'; value: bigint }
  | { tag: 'AssetsTrapped'; value: [H256, XcmV3MultilocationMultiLocation, XcmVersionedMultiAssets] }
  | { tag: 'VersionChangeNotified'; value: [XcmV3MultilocationMultiLocation, number, XcmV3MultiassetMultiAssets] }
  | { tag: 'SupportedVersionChanged'; value: [XcmV3MultilocationMultiLocation, number] }
  | { tag: 'NotifyTargetSendFail'; value: [XcmV3MultilocationMultiLocation, bigint, XcmV3TraitsError] }
  | { tag: 'NotifyTargetMigrationFail'; value: [XcmVersionedMultiLocation, bigint] }
  | { tag: 'InvalidQuerierVersion'; value: [XcmV3MultilocationMultiLocation, bigint] }
  | {
      tag: 'InvalidQuerier';
      value: [
        XcmV3MultilocationMultiLocation,
        bigint,
        XcmV3MultilocationMultiLocation,
        XcmV3MultilocationMultiLocation | undefined,
      ];
    }
  | { tag: 'VersionNotifyStarted'; value: [XcmV3MultilocationMultiLocation, XcmV3MultiassetMultiAssets] }
  | { tag: 'VersionNotifyRequested'; value: [XcmV3MultilocationMultiLocation, XcmV3MultiassetMultiAssets] }
  | { tag: 'VersionNotifyUnrequested'; value: [XcmV3MultilocationMultiLocation, XcmV3MultiassetMultiAssets] }
  | { tag: 'FeesPaid'; value: [XcmV3MultilocationMultiLocation, XcmV3MultiassetMultiAssets] }
  | { tag: 'AssetsClaimed'; value: [H256, XcmV3MultilocationMultiLocation, XcmVersionedMultiAssets] };

export type XcmV3TraitsOutcome =
  | { tag: 'Complete'; value: SpWeightsWeightV2Weight }
  | { tag: 'Incomplete'; value: [SpWeightsWeightV2Weight, XcmV3TraitsError] }
  | { tag: 'Error'; value: XcmV3TraitsError };

export type XcmV3MultilocationMultiLocation = {
  parents: number;
  interior: XcmV3Junctions;
};

export type XcmV3Junctions =
  | { tag: 'Here'; value: never }
  | { tag: 'X1'; value: XcmV3Junction }
  | { tag: 'X2'; value: [XcmV3Junction, XcmV3Junction] }
  | { tag: 'X3'; value: [XcmV3Junction, XcmV3Junction, XcmV3Junction] }
  | { tag: 'X4'; value: [XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction] }
  | { tag: 'X5'; value: [XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction] }
  | { tag: 'X6'; value: [XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction] }
  | {
      tag: 'X7';
      value: [XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction, XcmV3Junction];
    }
  | {
      tag: 'X8';
      value: [
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
        XcmV3Junction,
      ];
    };

export type XcmV3Junction =
  | { tag: 'Parachain'; value: number }
  | {
      tag: 'AccountId32';
      value: {
        network?: XcmV3JunctionNetworkId | undefined;
        id: FixedBytes<32>;
      };
    }
  | {
      tag: 'AccountIndex64';
      value: {
        network?: XcmV3JunctionNetworkId | undefined;
        index: bigint;
      };
    }
  | {
      tag: 'AccountKey20';
      value: {
        network?: XcmV3JunctionNetworkId | undefined;
        key: FixedBytes<20>;
      };
    }
  | { tag: 'PalletInstance'; value: number }
  | { tag: 'GeneralIndex'; value: bigint }
  | {
      tag: 'GeneralKey';
      value: {
        length: number;
        data: FixedBytes<32>;
      };
    }
  | { tag: 'OnlyChild'; value: never }
  | {
      tag: 'Plurality';
      value: {
        id: XcmV3JunctionBodyId;
        part: XcmV3JunctionBodyPart;
      };
    }
  | { tag: 'GlobalConsensus'; value: XcmV3JunctionNetworkId };

export type XcmV3JunctionNetworkId =
  | { tag: 'ByGenesis'; value: FixedBytes<32> }
  | {
      tag: 'ByFork';
      value: {
        blockNumber: bigint;
        blockHash: FixedBytes<32>;
      };
    }
  | { tag: 'Polkadot'; value: never }
  | { tag: 'Kusama'; value: never }
  | { tag: 'Westend'; value: never }
  | { tag: 'Rococo'; value: never }
  | { tag: 'Wococo'; value: never }
  | {
      tag: 'Ethereum';
      value: {
        chainId: bigint;
      };
    }
  | { tag: 'BitcoinCore'; value: never }
  | { tag: 'BitcoinCash'; value: never };

export type XcmV3JunctionBodyId =
  | { tag: 'Unit'; value: never }
  | { tag: 'Moniker'; value: FixedBytes<4> }
  | { tag: 'Index'; value: number }
  | { tag: 'Executive'; value: never }
  | { tag: 'Technical'; value: never }
  | { tag: 'Legislative'; value: never }
  | { tag: 'Judicial'; value: never }
  | { tag: 'Defense'; value: never }
  | { tag: 'Administration'; value: never }
  | { tag: 'Treasury'; value: never };

export type XcmV3JunctionBodyPart =
  | { tag: 'Voice'; value: never }
  | {
      tag: 'Members';
      value: {
        count: number;
      };
    }
  | {
      tag: 'Fraction';
      value: {
        nom: number;
        denom: number;
      };
    }
  | {
      tag: 'AtLeastProportion';
      value: {
        nom: number;
        denom: number;
      };
    }
  | {
      tag: 'MoreThanProportion';
      value: {
        nom: number;
        denom: number;
      };
    };

export type XcmV3Xcm = Array<XcmV3Instruction>;

export type XcmV3Instruction =
  | { tag: 'WithdrawAsset'; value: XcmV3MultiassetMultiAssets }
  | { tag: 'ReserveAssetDeposited'; value: XcmV3MultiassetMultiAssets }
  | { tag: 'ReceiveTeleportedAsset'; value: XcmV3MultiassetMultiAssets }
  | {
      tag: 'QueryResponse';
      value: {
        queryId: bigint;
        response: XcmV3Response;
        maxWeight: SpWeightsWeightV2Weight;
        querier?: XcmV3MultilocationMultiLocation | undefined;
      };
    }
  | {
      tag: 'TransferAsset';
      value: {
        assets: XcmV3MultiassetMultiAssets;
        beneficiary: XcmV3MultilocationMultiLocation;
      };
    }
  | {
      tag: 'TransferReserveAsset';
      value: {
        assets: XcmV3MultiassetMultiAssets;
        dest: XcmV3MultilocationMultiLocation;
        xcm: XcmV3Xcm;
      };
    }
  | {
      tag: 'Transact';
      value: {
        originKind: XcmV2OriginKind;
        requireWeightAtMost: SpWeightsWeightV2Weight;
        call: XcmDoubleEncoded;
      };
    }
  | {
      tag: 'HrmpNewChannelOpenRequest';
      value: {
        sender: number;
        maxMessageSize: number;
        maxCapacity: number;
      };
    }
  | {
      tag: 'HrmpChannelAccepted';
      value: {
        recipient: number;
      };
    }
  | {
      tag: 'HrmpChannelClosing';
      value: {
        initiator: number;
        sender: number;
        recipient: number;
      };
    }
  | { tag: 'ClearOrigin'; value: never }
  | { tag: 'DescendOrigin'; value: XcmV3Junctions }
  | { tag: 'ReportError'; value: XcmV3QueryResponseInfo }
  | {
      tag: 'DepositAsset';
      value: {
        assets: XcmV3MultiassetMultiAssetFilter;
        beneficiary: XcmV3MultilocationMultiLocation;
      };
    }
  | {
      tag: 'DepositReserveAsset';
      value: {
        assets: XcmV3MultiassetMultiAssetFilter;
        dest: XcmV3MultilocationMultiLocation;
        xcm: XcmV3Xcm;
      };
    }
  | {
      tag: 'ExchangeAsset';
      value: {
        give: XcmV3MultiassetMultiAssetFilter;
        want: XcmV3MultiassetMultiAssets;
        maximal: boolean;
      };
    }
  | {
      tag: 'InitiateReserveWithdraw';
      value: {
        assets: XcmV3MultiassetMultiAssetFilter;
        reserve: XcmV3MultilocationMultiLocation;
        xcm: XcmV3Xcm;
      };
    }
  | {
      tag: 'InitiateTeleport';
      value: {
        assets: XcmV3MultiassetMultiAssetFilter;
        dest: XcmV3MultilocationMultiLocation;
        xcm: XcmV3Xcm;
      };
    }
  | {
      tag: 'ReportHolding';
      value: {
        responseInfo: XcmV3QueryResponseInfo;
        assets: XcmV3MultiassetMultiAssetFilter;
      };
    }
  | {
      tag: 'BuyExecution';
      value: {
        fees: XcmV3MultiassetMultiAsset;
        weightLimit: XcmV3WeightLimit;
      };
    }
  | { tag: 'RefundSurplus'; value: never }
  | { tag: 'SetErrorHandler'; value: XcmV3Xcm }
  | { tag: 'SetAppendix'; value: XcmV3Xcm }
  | { tag: 'ClearError'; value: never }
  | {
      tag: 'ClaimAsset';
      value: {
        assets: XcmV3MultiassetMultiAssets;
        ticket: XcmV3MultilocationMultiLocation;
      };
    }
  | { tag: 'Trap'; value: bigint }
  | {
      tag: 'SubscribeVersion';
      value: {
        queryId: bigint;
        maxResponseWeight: SpWeightsWeightV2Weight;
      };
    }
  | { tag: 'UnsubscribeVersion'; value: never }
  | { tag: 'BurnAsset'; value: XcmV3MultiassetMultiAssets }
  | { tag: 'ExpectAsset'; value: XcmV3MultiassetMultiAssets }
  | { tag: 'ExpectOrigin'; value: XcmV3MultilocationMultiLocation | undefined }
  | { tag: 'ExpectError'; value: [number, XcmV3TraitsError] | undefined }
  | { tag: 'ExpectTransactStatus'; value: XcmV3MaybeErrorCode }
  | {
      tag: 'QueryPallet';
      value: {
        moduleName: Bytes;
        responseInfo: XcmV3QueryResponseInfo;
      };
    }
  | {
      tag: 'ExpectPallet';
      value: {
        index: number;
        name: Bytes;
        moduleName: Bytes;
        crateMajor: number;
        minCrateMinor: number;
      };
    }
  | { tag: 'ReportTransactStatus'; value: XcmV3QueryResponseInfo }
  | { tag: 'ClearTransactStatus'; value: never }
  | { tag: 'UniversalOrigin'; value: XcmV3Junction }
  | {
      tag: 'ExportMessage';
      value: {
        network: XcmV3JunctionNetworkId;
        destination: XcmV3Junctions;
        xcm: XcmV3Xcm;
      };
    }
  | {
      tag: 'LockAsset';
      value: {
        asset: XcmV3MultiassetMultiAsset;
        unlocker: XcmV3MultilocationMultiLocation;
      };
    }
  | {
      tag: 'UnlockAsset';
      value: {
        asset: XcmV3MultiassetMultiAsset;
        target: XcmV3MultilocationMultiLocation;
      };
    }
  | {
      tag: 'NoteUnlockable';
      value: {
        asset: XcmV3MultiassetMultiAsset;
        owner: XcmV3MultilocationMultiLocation;
      };
    }
  | {
      tag: 'RequestUnlock';
      value: {
        asset: XcmV3MultiassetMultiAsset;
        locker: XcmV3MultilocationMultiLocation;
      };
    }
  | {
      tag: 'SetFeesMode';
      value: {
        jitWithdraw: boolean;
      };
    }
  | { tag: 'SetTopic'; value: FixedBytes<32> }
  | { tag: 'ClearTopic'; value: never }
  | { tag: 'AliasOrigin'; value: XcmV3MultilocationMultiLocation }
  | {
      tag: 'UnpaidExecution';
      value: {
        weightLimit: XcmV3WeightLimit;
        checkOrigin?: XcmV3MultilocationMultiLocation | undefined;
      };
    };

export type XcmV3MultiassetMultiAssets = Array<XcmV3MultiassetMultiAsset>;

export type XcmV3MultiassetMultiAsset = {
  id: XcmV3MultiassetAssetId;
  fun: XcmV3MultiassetFungibility;
};

export type XcmV3MultiassetAssetId =
  | { tag: 'Concrete'; value: XcmV3MultilocationMultiLocation }
  | { tag: 'Abstract'; value: FixedBytes<32> };

export type XcmV3MultiassetFungibility =
  | { tag: 'Fungible'; value: bigint }
  | { tag: 'NonFungible'; value: XcmV3MultiassetAssetInstance };

export type XcmV3MultiassetAssetInstance =
  | { tag: 'Undefined'; value: never }
  | { tag: 'Index'; value: bigint }
  | { tag: 'Array4'; value: FixedBytes<4> }
  | { tag: 'Array8'; value: FixedBytes<8> }
  | { tag: 'Array16'; value: FixedBytes<16> }
  | { tag: 'Array32'; value: FixedBytes<32> };

export type XcmV3Response =
  | { tag: 'Null'; value: never }
  | { tag: 'Assets'; value: XcmV3MultiassetMultiAssets }
  | { tag: 'ExecutionResult'; value: [number, XcmV3TraitsError] | undefined }
  | { tag: 'Version'; value: number }
  | { tag: 'PalletsInfo'; value: Array<XcmV3PalletInfo> }
  | { tag: 'DispatchResult'; value: XcmV3MaybeErrorCode };

export type XcmV3PalletInfo = {
  index: number;
  name: Bytes;
  moduleName: Bytes;
  major: number;
  minor: number;
  patch: number;
};

export type XcmV3MaybeErrorCode =
  | { tag: 'Success'; value: never }
  | { tag: 'Error'; value: Bytes }
  | { tag: 'TruncatedError'; value: Bytes };

export type XcmV2OriginKind = 'native' | 'sovereignAccount' | 'superuser' | 'xcm';

export type XcmDoubleEncoded = {
  encoded: Bytes;
};

export type XcmV3QueryResponseInfo = {
  destination: XcmV3MultilocationMultiLocation;
  queryId: bigint;
  maxWeight: SpWeightsWeightV2Weight;
};

export type XcmV3MultiassetMultiAssetFilter =
  | { tag: 'Definite'; value: XcmV3MultiassetMultiAssets }
  | { tag: 'Wild'; value: XcmV3MultiassetWildMultiAsset };

export type XcmV3MultiassetWildMultiAsset =
  | { tag: 'All'; value: never }
  | {
      tag: 'AllOf';
      value: {
        id: XcmV3MultiassetAssetId;
        fun: XcmV3MultiassetWildFungibility;
      };
    }
  | { tag: 'AllCounted'; value: number }
  | {
      tag: 'AllOfCounted';
      value: {
        id: XcmV3MultiassetAssetId;
        fun: XcmV3MultiassetWildFungibility;
        count: number;
      };
    };

export type XcmV3MultiassetWildFungibility = 'fungible' | 'nonFungible';

export type XcmV3WeightLimit = { tag: 'Unlimited'; value: never } | { tag: 'Limited'; value: SpWeightsWeightV2Weight };

export type XcmVersionedMultiAssets =
  | { tag: 'V2'; value: XcmV2MultiassetMultiAssets }
  | { tag: 'V3'; value: XcmV3MultiassetMultiAssets };

export type XcmV2MultiassetMultiAssets = Array<XcmV2MultiassetMultiAsset>;

export type XcmV2MultiassetMultiAsset = {
  id: XcmV2MultiassetAssetId;
  fun: XcmV2MultiassetFungibility;
};

export type XcmV2MultiassetAssetId =
  | { tag: 'Concrete'; value: XcmV2MultilocationMultiLocation }
  | { tag: 'Abstract'; value: Bytes };

export type XcmV2MultilocationMultiLocation = {
  parents: number;
  interior: XcmV2MultilocationJunctions;
};

export type XcmV2MultilocationJunctions =
  | { tag: 'Here'; value: never }
  | { tag: 'X1'; value: XcmV2Junction }
  | { tag: 'X2'; value: [XcmV2Junction, XcmV2Junction] }
  | { tag: 'X3'; value: [XcmV2Junction, XcmV2Junction, XcmV2Junction] }
  | { tag: 'X4'; value: [XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction] }
  | { tag: 'X5'; value: [XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction] }
  | { tag: 'X6'; value: [XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction] }
  | {
      tag: 'X7';
      value: [XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction, XcmV2Junction];
    }
  | {
      tag: 'X8';
      value: [
        XcmV2Junction,
        XcmV2Junction,
        XcmV2Junction,
        XcmV2Junction,
        XcmV2Junction,
        XcmV2Junction,
        XcmV2Junction,
        XcmV2Junction,
      ];
    };

export type XcmV2Junction =
  | { tag: 'Parachain'; value: number }
  | {
      tag: 'AccountId32';
      value: {
        network: XcmV2NetworkId;
        id: FixedBytes<32>;
      };
    }
  | {
      tag: 'AccountIndex64';
      value: {
        network: XcmV2NetworkId;
        index: bigint;
      };
    }
  | {
      tag: 'AccountKey20';
      value: {
        network: XcmV2NetworkId;
        key: FixedBytes<20>;
      };
    }
  | { tag: 'PalletInstance'; value: number }
  | { tag: 'GeneralIndex'; value: bigint }
  | { tag: 'GeneralKey'; value: Bytes }
  | { tag: 'OnlyChild'; value: never }
  | {
      tag: 'Plurality';
      value: {
        id: XcmV2BodyId;
        part: XcmV2BodyPart;
      };
    };

export type XcmV2NetworkId =
  | { tag: 'Any'; value: never }
  | { tag: 'Named'; value: Bytes }
  | { tag: 'Polkadot'; value: never }
  | { tag: 'Kusama'; value: never };

export type XcmV2BodyId =
  | { tag: 'Unit'; value: never }
  | { tag: 'Named'; value: Bytes }
  | { tag: 'Index'; value: number }
  | { tag: 'Executive'; value: never }
  | { tag: 'Technical'; value: never }
  | { tag: 'Legislative'; value: never }
  | { tag: 'Judicial'; value: never }
  | { tag: 'Defense'; value: never }
  | { tag: 'Administration'; value: never }
  | { tag: 'Treasury'; value: never };

export type XcmV2BodyPart =
  | { tag: 'Voice'; value: never }
  | {
      tag: 'Members';
      value: {
        count: number;
      };
    }
  | {
      tag: 'Fraction';
      value: {
        nom: number;
        denom: number;
      };
    }
  | {
      tag: 'AtLeastProportion';
      value: {
        nom: number;
        denom: number;
      };
    }
  | {
      tag: 'MoreThanProportion';
      value: {
        nom: number;
        denom: number;
      };
    };

export type XcmV2MultiassetFungibility =
  | { tag: 'Fungible'; value: bigint }
  | { tag: 'NonFungible'; value: XcmV2MultiassetAssetInstance };

export type XcmV2MultiassetAssetInstance =
  | { tag: 'Undefined'; value: never }
  | { tag: 'Index'; value: bigint }
  | { tag: 'Array4'; value: FixedBytes<4> }
  | { tag: 'Array8'; value: FixedBytes<8> }
  | { tag: 'Array16'; value: FixedBytes<16> }
  | { tag: 'Array32'; value: FixedBytes<32> }
  | { tag: 'Blob'; value: Bytes };

export type XcmVersionedMultiLocation =
  | { tag: 'V2'; value: XcmV2MultilocationMultiLocation }
  | { tag: 'V3'; value: XcmV3MultilocationMultiLocation };

export type CumulusPalletXcmEvent =
  | { tag: 'InvalidFormat'; value: FixedBytes<32> }
  | { tag: 'UnsupportedVersion'; value: FixedBytes<32> }
  | { tag: 'ExecutedDownward'; value: [FixedBytes<32>, XcmV3TraitsOutcome] };

export type CumulusPalletDmpQueueEvent =
  | {
      tag: 'InvalidFormat';
      value: {
        messageId: FixedBytes<32>;
      };
    }
  | {
      tag: 'UnsupportedVersion';
      value: {
        messageId: FixedBytes<32>;
      };
    }
  | {
      tag: 'ExecutedDownward';
      value: {
        messageId: FixedBytes<32>;
        outcome: XcmV3TraitsOutcome;
      };
    }
  | {
      tag: 'WeightExhausted';
      value: {
        messageId: FixedBytes<32>;
        remainingWeight: SpWeightsWeightV2Weight;
        requiredWeight: SpWeightsWeightV2Weight;
      };
    }
  | {
      tag: 'OverweightEnqueued';
      value: {
        messageId: FixedBytes<32>;
        overweightIndex: bigint;
        requiredWeight: SpWeightsWeightV2Weight;
      };
    }
  | {
      tag: 'OverweightServiced';
      value: {
        overweightIndex: bigint;
        weightUsed: SpWeightsWeightV2Weight;
      };
    }
  | {
      tag: 'MaxMessagesExhausted';
      value: {
        messageId: FixedBytes<32>;
      };
    };

export type PalletXcAssetConfigEvent =
  | {
      tag: 'AssetRegistered';
      value: {
        assetLocation: XcmVersionedMultiLocation;
        assetId: bigint;
      };
    }
  | {
      tag: 'UnitsPerSecondChanged';
      value: {
        assetLocation: XcmVersionedMultiLocation;
        unitsPerSecond: bigint;
      };
    }
  | {
      tag: 'AssetLocationChanged';
      value: {
        previousAssetLocation: XcmVersionedMultiLocation;
        assetId: bigint;
        newAssetLocation: XcmVersionedMultiLocation;
      };
    }
  | {
      tag: 'SupportedAssetRemoved';
      value: {
        assetLocation: XcmVersionedMultiLocation;
      };
    }
  | {
      tag: 'AssetRemoved';
      value: {
        assetLocation: XcmVersionedMultiLocation;
        assetId: bigint;
      };
    };

export type OrmlXtokensModuleEvent = {
  tag: 'TransferredMultiAssets';
  value: {
    sender: AccountId32;
    assets: XcmV3MultiassetMultiAssets;
    fee: XcmV3MultiassetMultiAsset;
    dest: XcmV3MultilocationMultiLocation;
  };
};

export type PalletEvmEvent =
  | {
      tag: 'Log';
      value: {
        log: EthereumLog;
      };
    }
  | {
      tag: 'Created';
      value: {
        address: H160;
      };
    }
  | {
      tag: 'CreatedFailed';
      value: {
        address: H160;
      };
    }
  | {
      tag: 'Executed';
      value: {
        address: H160;
      };
    }
  | {
      tag: 'ExecutedFailed';
      value: {
        address: H160;
      };
    };

export type EthereumLog = {
  address: H160;
  topics: Array<H256>;
  data: Bytes;
};

export type PalletEthereumEvent = {
  tag: 'Executed';
  value: {
    from: H160;
    to: H160;
    transactionHash: H256;
    exitReason: EvmCoreErrorExitReason;
    extraData: Bytes;
  };
};

export type EvmCoreErrorExitReason =
  | { tag: 'Succeed'; value: EvmCoreErrorExitSucceed }
  | { tag: 'Error'; value: EvmCoreErrorExitError }
  | { tag: 'Revert'; value: EvmCoreErrorExitRevert }
  | { tag: 'Fatal'; value: EvmCoreErrorExitFatal };

export type EvmCoreErrorExitSucceed = 'stopped' | 'returned' | 'suicided';

export type EvmCoreErrorExitError =
  | { tag: 'StackUnderflow'; value: never }
  | { tag: 'StackOverflow'; value: never }
  | { tag: 'InvalidJump'; value: never }
  | { tag: 'InvalidRange'; value: never }
  | { tag: 'DesignatedInvalid'; value: never }
  | { tag: 'CallTooDeep'; value: never }
  | { tag: 'CreateCollision'; value: never }
  | { tag: 'CreateContractLimit'; value: never }
  | { tag: 'InvalidCode'; value: EvmCoreOpcode }
  | { tag: 'OutOfOffset'; value: never }
  | { tag: 'OutOfGas'; value: never }
  | { tag: 'OutOfFund'; value: never }
  | { tag: 'PCUnderflow'; value: never }
  | { tag: 'CreateEmpty'; value: never }
  | { tag: 'Other'; value: string }
  | { tag: 'MaxNonce'; value: never };

export type EvmCoreOpcode = number;

export type EvmCoreErrorExitRevert = 'reverted';

export type EvmCoreErrorExitFatal =
  | { tag: 'NotSupported'; value: never }
  | { tag: 'UnhandledInterrupt'; value: never }
  | { tag: 'CallErrorAsFatal'; value: EvmCoreErrorExitError }
  | { tag: 'Other'; value: string };

export type PalletCustomSignaturesEvent = { tag: 'Executed'; value: [AccountId32, never | SpRuntimeDispatchError] };

export type PalletBaseFeeEvent =
  | {
      tag: 'NewBaseFeePerGas';
      value: {
        fee: U256;
      };
    }
  | { tag: 'BaseFeeOverflow'; value: never }
  | {
      tag: 'NewElasticity';
      value: {
        elasticity: Permill;
      };
    };

export type PalletContractsEvent =
  | {
      tag: 'Instantiated';
      value: {
        deployer: AccountId32;
        contract: AccountId32;
      };
    }
  | {
      tag: 'Terminated';
      value: {
        contract: AccountId32;
        beneficiary: AccountId32;
      };
    }
  | {
      tag: 'CodeStored';
      value: {
        codeHash: H256;
      };
    }
  | {
      tag: 'ContractEmitted';
      value: {
        contract: AccountId32;
        data: Bytes;
      };
    }
  | {
      tag: 'CodeRemoved';
      value: {
        codeHash: H256;
      };
    }
  | {
      tag: 'ContractCodeUpdated';
      value: {
        contract: AccountId32;
        newCodeHash: H256;
        oldCodeHash: H256;
      };
    }
  | {
      tag: 'Called';
      value: {
        caller: PalletContractsOrigin;
        contract: AccountId32;
      };
    }
  | {
      tag: 'DelegateCalled';
      value: {
        contract: AccountId32;
        codeHash: H256;
      };
    };

export type PalletContractsOrigin = { tag: 'Root'; value: never } | { tag: 'Signed'; value: AccountId32 };

export type AstarRuntimeRuntime = never;

export type PalletSudoEvent =
  | {
      tag: 'Sudid';
      value: {
        sudoResult: never | SpRuntimeDispatchError;
      };
    }
  | {
      tag: 'KeyChanged';
      value: {
        oldSudoer?: AccountId32 | undefined;
      };
    }
  | {
      tag: 'SudoAsDone';
      value: {
        sudoResult: never | SpRuntimeDispatchError;
      };
    };

export type FrameSystemPhase =
  | { tag: 'ApplyExtrinsic'; value: number }
  | { tag: 'Finalization'; value: never }
  | { tag: 'Initialization'; value: never };

export type FrameSystemLastRuntimeUpgradeInfo = {
  specVersion: number;
  specName: string;
};

export type FrameSystemCall =
  | {
      tag: 'remark';
      value: {
        remark: Bytes;
      };
    }
  | {
      tag: 'set_heap_pages';
      value: {
        pages: bigint;
      };
    }
  | {
      tag: 'set_code';
      value: {
        code: Bytes;
      };
    }
  | {
      tag: 'set_code_without_checks';
      value: {
        code: Bytes;
      };
    }
  | {
      tag: 'set_storage';
      value: {
        items: Array<[Bytes, Bytes]>;
      };
    }
  | {
      tag: 'kill_storage';
      value: {
        keys: Array<Bytes>;
      };
    }
  | {
      tag: 'kill_prefix';
      value: {
        prefix: Bytes;
        subkeys: number;
      };
    }
  | {
      tag: 'remark_with_event';
      value: {
        remark: Bytes;
      };
    };

export type FrameSystemLimitsBlockWeights = {
  baseBlock: SpWeightsWeightV2Weight;
  maxBlock: SpWeightsWeightV2Weight;
  perClass: {
    normal: FrameSystemLimitsWeightsPerClass;
    operational: FrameSystemLimitsWeightsPerClass;
    mandatory: FrameSystemLimitsWeightsPerClass;
  };
};

export type FrameSystemLimitsWeightsPerClass = {
  baseExtrinsic: SpWeightsWeightV2Weight;
  maxExtrinsic?: SpWeightsWeightV2Weight | undefined;
  maxTotal?: SpWeightsWeightV2Weight | undefined;
  reserved?: SpWeightsWeightV2Weight | undefined;
};

export type FrameSystemLimitsBlockLength = {
  max: {
    normal: number;
    operational: number;
    mandatory: number;
  };
};

export type SpWeightsRuntimeDbWeight = {
  read: bigint;
  write: bigint;
};

export type SpVersionRuntimeVersion = {
  specName: string;
  implName: string;
  authoringVersion: number;
  specVersion: number;
  implVersion: number;
  apis: Array<[FixedBytes<8>, number]>;
  transactionVersion: number;
  stateVersion: number;
};

export type FrameSystemError =
  | 'invalidSpecName'
  | 'specVersionNeedsToIncrease'
  | 'failedToExtractRuntimeVersion'
  | 'nonDefaultComposite'
  | 'nonZeroRefCount'
  | 'callFiltered';

export type PalletUtilityCall =
  | {
      tag: 'batch';
      value: {
        calls: Array<AstarRuntimeRuntimeCall>;
      };
    }
  | {
      tag: 'as_derivative';
      value: {
        index: number;
        call: AstarRuntimeRuntimeCall;
      };
    }
  | {
      tag: 'batch_all';
      value: {
        calls: Array<AstarRuntimeRuntimeCall>;
      };
    }
  | {
      tag: 'dispatch_as';
      value: {
        asOrigin: AstarRuntimeOriginCaller;
        call: AstarRuntimeRuntimeCall;
      };
    }
  | {
      tag: 'force_batch';
      value: {
        calls: Array<AstarRuntimeRuntimeCall>;
      };
    }
  | {
      tag: 'with_weight';
      value: {
        call: AstarRuntimeRuntimeCall;
        weight: SpWeightsWeightV2Weight;
      };
    };

export type AstarRuntimeRuntimeCall =
  | { tag: 'System'; value: FrameSystemCall }
  | { tag: 'Utility'; value: PalletUtilityCall }
  | { tag: 'Identity'; value: PalletIdentityCall }
  | { tag: 'Timestamp'; value: PalletTimestampCall }
  | { tag: 'Multisig'; value: PalletMultisigCall }
  | { tag: 'Proxy'; value: PalletProxyCall }
  | { tag: 'ParachainSystem'; value: CumulusPalletParachainSystemCall }
  | { tag: 'ParachainInfo'; value: ParachainInfoCall }
  | { tag: 'Balances'; value: PalletBalancesCall }
  | { tag: 'Vesting'; value: PalletVestingCall }
  | { tag: 'DappsStaking'; value: PalletDappsStakingPalletCall }
  | { tag: 'BlockReward'; value: PalletBlockRewardCall }
  | { tag: 'Assets'; value: PalletAssetsCall }
  | { tag: 'CollatorSelection'; value: PalletCollatorSelectionCall }
  | { tag: 'Session'; value: PalletSessionCall }
  | { tag: 'XcmpQueue'; value: CumulusPalletXcmpQueueCall }
  | { tag: 'PolkadotXcm'; value: PalletXcmCall }
  | { tag: 'CumulusXcm'; value: CumulusPalletXcmCall }
  | { tag: 'DmpQueue'; value: CumulusPalletDmpQueueCall }
  | { tag: 'XcAssetConfig'; value: PalletXcAssetConfigCall }
  | { tag: 'Xtokens'; value: OrmlXtokensModuleCall }
  | { tag: 'EVM'; value: PalletEvmCall }
  | { tag: 'Ethereum'; value: PalletEthereumCall }
  | { tag: 'EthCall'; value: PalletCustomSignaturesCall }
  | { tag: 'BaseFee'; value: PalletBaseFeeCall }
  | { tag: 'Contracts'; value: PalletContractsCall }
  | { tag: 'Sudo'; value: PalletSudoCall };

export type PalletIdentityCall =
  | {
      tag: 'add_registrar';
      value: {
        account: MultiAddress;
      };
    }
  | {
      tag: 'set_identity';
      value: {
        info: PalletIdentityIdentityInfo;
      };
    }
  | {
      tag: 'set_subs';
      value: {
        subs: Array<[AccountId32, PalletIdentityData]>;
      };
    }
  | { tag: 'clear_identity'; value: never }
  | {
      tag: 'request_judgement';
      value: {
        regIndex: number;
        maxFee: bigint;
      };
    }
  | {
      tag: 'cancel_request';
      value: {
        regIndex: number;
      };
    }
  | {
      tag: 'set_fee';
      value: {
        index: number;
        fee: bigint;
      };
    }
  | {
      tag: 'set_account_id';
      value: {
        index: number;
        new: MultiAddress;
      };
    }
  | {
      tag: 'set_fields';
      value: {
        index: number;
        fields: PalletIdentityBitFlags;
      };
    }
  | {
      tag: 'provide_judgement';
      value: {
        regIndex: number;
        target: MultiAddress;
        judgement: PalletIdentityJudgement;
        identity: H256;
      };
    }
  | {
      tag: 'kill_identity';
      value: {
        target: MultiAddress;
      };
    }
  | {
      tag: 'add_sub';
      value: {
        sub: MultiAddress;
        data: PalletIdentityData;
      };
    }
  | {
      tag: 'rename_sub';
      value: {
        sub: MultiAddress;
        data: PalletIdentityData;
      };
    }
  | {
      tag: 'remove_sub';
      value: {
        sub: MultiAddress;
      };
    }
  | { tag: 'quit_sub'; value: never };

export type PalletIdentityIdentityInfo = {
  additional: Array<[PalletIdentityData, PalletIdentityData]>;
  display: PalletIdentityData;
  legal: PalletIdentityData;
  web: PalletIdentityData;
  riot: PalletIdentityData;
  email: PalletIdentityData;
  pgpFingerprint?: FixedBytes<20> | undefined;
  image: PalletIdentityData;
  twitter: PalletIdentityData;
};

export type PalletIdentityData =
  | { tag: 'None'; value: never }
  | { tag: 'Raw0'; value: FixedBytes<0> }
  | { tag: 'Raw1'; value: FixedBytes<1> }
  | { tag: 'Raw2'; value: FixedBytes<2> }
  | { tag: 'Raw3'; value: FixedBytes<3> }
  | { tag: 'Raw4'; value: FixedBytes<4> }
  | { tag: 'Raw5'; value: FixedBytes<5> }
  | { tag: 'Raw6'; value: FixedBytes<6> }
  | { tag: 'Raw7'; value: FixedBytes<7> }
  | { tag: 'Raw8'; value: FixedBytes<8> }
  | { tag: 'Raw9'; value: FixedBytes<9> }
  | { tag: 'Raw10'; value: FixedBytes<10> }
  | { tag: 'Raw11'; value: FixedBytes<11> }
  | { tag: 'Raw12'; value: FixedBytes<12> }
  | { tag: 'Raw13'; value: FixedBytes<13> }
  | { tag: 'Raw14'; value: FixedBytes<14> }
  | { tag: 'Raw15'; value: FixedBytes<15> }
  | { tag: 'Raw16'; value: FixedBytes<16> }
  | { tag: 'Raw17'; value: FixedBytes<17> }
  | { tag: 'Raw18'; value: FixedBytes<18> }
  | { tag: 'Raw19'; value: FixedBytes<19> }
  | { tag: 'Raw20'; value: FixedBytes<20> }
  | { tag: 'Raw21'; value: FixedBytes<21> }
  | { tag: 'Raw22'; value: FixedBytes<22> }
  | { tag: 'Raw23'; value: FixedBytes<23> }
  | { tag: 'Raw24'; value: FixedBytes<24> }
  | { tag: 'Raw25'; value: FixedBytes<25> }
  | { tag: 'Raw26'; value: FixedBytes<26> }
  | { tag: 'Raw27'; value: FixedBytes<27> }
  | { tag: 'Raw28'; value: FixedBytes<28> }
  | { tag: 'Raw29'; value: FixedBytes<29> }
  | { tag: 'Raw30'; value: FixedBytes<30> }
  | { tag: 'Raw31'; value: FixedBytes<31> }
  | { tag: 'Raw32'; value: FixedBytes<32> }
  | { tag: 'BlakeTwo256'; value: FixedBytes<32> }
  | { tag: 'Sha256'; value: FixedBytes<32> }
  | { tag: 'Keccak256'; value: FixedBytes<32> }
  | { tag: 'ShaThree256'; value: FixedBytes<32> };

export type PalletIdentityBitFlags = bigint;

export type PalletIdentityIdentityField =
  | 'display'
  | 'legal'
  | 'web'
  | 'riot'
  | 'email'
  | 'pgpFingerprint'
  | 'image'
  | 'twitter';

export type PalletIdentityJudgement =
  | { tag: 'Unknown'; value: never }
  | { tag: 'FeePaid'; value: bigint }
  | { tag: 'Reasonable'; value: never }
  | { tag: 'KnownGood'; value: never }
  | { tag: 'OutOfDate'; value: never }
  | { tag: 'LowQuality'; value: never }
  | { tag: 'Erroneous'; value: never };

export type PalletTimestampCall = {
  tag: 'set';
  value: {
    now: bigint;
  };
};

export type PalletMultisigCall =
  | {
      tag: 'as_multi_threshold_1';
      value: {
        otherSignatories: Array<AccountId32>;
        call: AstarRuntimeRuntimeCall;
      };
    }
  | {
      tag: 'as_multi';
      value: {
        threshold: number;
        otherSignatories: Array<AccountId32>;
        maybeTimepoint?: PalletMultisigTimepoint | undefined;
        call: AstarRuntimeRuntimeCall;
        maxWeight: SpWeightsWeightV2Weight;
      };
    }
  | {
      tag: 'approve_as_multi';
      value: {
        threshold: number;
        otherSignatories: Array<AccountId32>;
        maybeTimepoint?: PalletMultisigTimepoint | undefined;
        callHash: FixedBytes<32>;
        maxWeight: SpWeightsWeightV2Weight;
      };
    }
  | {
      tag: 'cancel_as_multi';
      value: {
        threshold: number;
        otherSignatories: Array<AccountId32>;
        timepoint: PalletMultisigTimepoint;
        callHash: FixedBytes<32>;
      };
    };

export type PalletProxyCall =
  | {
      tag: 'proxy';
      value: {
        real: MultiAddress;
        forceProxyType?: AstarRuntimeProxyType | undefined;
        call: AstarRuntimeRuntimeCall;
      };
    }
  | {
      tag: 'add_proxy';
      value: {
        delegate: MultiAddress;
        proxyType: AstarRuntimeProxyType;
        delay: number;
      };
    }
  | {
      tag: 'remove_proxy';
      value: {
        delegate: MultiAddress;
        proxyType: AstarRuntimeProxyType;
        delay: number;
      };
    }
  | { tag: 'remove_proxies'; value: never }
  | {
      tag: 'create_pure';
      value: {
        proxyType: AstarRuntimeProxyType;
        delay: number;
        index: number;
      };
    }
  | {
      tag: 'kill_pure';
      value: {
        spawner: MultiAddress;
        proxyType: AstarRuntimeProxyType;
        index: number;
        height: number;
        extIndex: number;
      };
    }
  | {
      tag: 'announce';
      value: {
        real: MultiAddress;
        callHash: H256;
      };
    }
  | {
      tag: 'remove_announcement';
      value: {
        real: MultiAddress;
        callHash: H256;
      };
    }
  | {
      tag: 'reject_announcement';
      value: {
        delegate: MultiAddress;
        callHash: H256;
      };
    }
  | {
      tag: 'proxy_announced';
      value: {
        delegate: MultiAddress;
        real: MultiAddress;
        forceProxyType?: AstarRuntimeProxyType | undefined;
        call: AstarRuntimeRuntimeCall;
      };
    };

export type CumulusPalletParachainSystemCall =
  | {
      tag: 'set_validation_data';
      value: {
        data: CumulusPrimitivesParachainInherentParachainInherentData;
      };
    }
  | {
      tag: 'sudo_send_upward_message';
      value: {
        message: Bytes;
      };
    }
  | {
      tag: 'authorize_upgrade';
      value: {
        codeHash: H256;
        checkVersion: boolean;
      };
    }
  | {
      tag: 'enact_authorized_upgrade';
      value: {
        code: Bytes;
      };
    };

export type CumulusPrimitivesParachainInherentParachainInherentData = {
  validationData: PolkadotPrimitivesV4PersistedValidationData;
  relayChainState: SpTrieStorageProof;
  downwardMessages: Array<PolkadotCorePrimitivesInboundDownwardMessage>;
  horizontalMessages: Array<[PolkadotParachainPrimitivesId, Array<PolkadotCorePrimitivesInboundHrmpMessage>]>;
};

export type PolkadotPrimitivesV4PersistedValidationData = {
  parentHead: PolkadotParachainPrimitivesHeadData;
  relayParentNumber: number;
  relayParentStorageRoot: H256;
  maxPovSize: number;
};

export type PolkadotParachainPrimitivesHeadData = Bytes;

export type SpTrieStorageProof = {
  trieNodes: BTreeSet;
};

export type BTreeSet = Array<Bytes>;

export type PolkadotCorePrimitivesInboundDownwardMessage = {
  sentAt: number;
  msg: Bytes;
};

export type PolkadotCorePrimitivesInboundHrmpMessage = {
  sentAt: number;
  data: Bytes;
};

export type ParachainInfoCall = never;

export type PalletBalancesCall =
  | {
      tag: 'transfer_allow_death';
      value: {
        dest: MultiAddress;
        value: bigint;
      };
    }
  | {
      tag: 'set_balance_deprecated';
      value: {
        who: MultiAddress;
        newFree: bigint;
        oldReserved: bigint;
      };
    }
  | {
      tag: 'force_transfer';
      value: {
        source: MultiAddress;
        dest: MultiAddress;
        value: bigint;
      };
    }
  | {
      tag: 'transfer_keep_alive';
      value: {
        dest: MultiAddress;
        value: bigint;
      };
    }
  | {
      tag: 'transfer_all';
      value: {
        dest: MultiAddress;
        keepAlive: boolean;
      };
    }
  | {
      tag: 'force_unreserve';
      value: {
        who: MultiAddress;
        amount: bigint;
      };
    }
  | {
      tag: 'upgrade_accounts';
      value: {
        who: Array<AccountId32>;
      };
    }
  | {
      tag: 'transfer';
      value: {
        dest: MultiAddress;
        value: bigint;
      };
    }
  | {
      tag: 'force_set_balance';
      value: {
        who: MultiAddress;
        newFree: bigint;
      };
    };

export type PalletVestingCall =
  | { tag: 'vest'; value: never }
  | {
      tag: 'vest_other';
      value: {
        target: MultiAddress;
      };
    }
  | {
      tag: 'vested_transfer';
      value: {
        target: MultiAddress;
        schedule: PalletVestingVestingInfo;
      };
    }
  | {
      tag: 'force_vested_transfer';
      value: {
        source: MultiAddress;
        target: MultiAddress;
        schedule: PalletVestingVestingInfo;
      };
    }
  | {
      tag: 'merge_schedules';
      value: {
        schedule1Index: number;
        schedule2Index: number;
      };
    };

export type PalletVestingVestingInfo = {
  locked: bigint;
  perBlock: bigint;
  startingBlock: number;
};

export type PalletDappsStakingPalletCall =
  | {
      tag: 'register';
      value: {
        developer: AccountId32;
        contractId: AstarRuntimeSmartContract;
      };
    }
  | {
      tag: 'unregister';
      value: {
        contractId: AstarRuntimeSmartContract;
      };
    }
  | {
      tag: 'withdraw_from_unregistered';
      value: {
        contractId: AstarRuntimeSmartContract;
      };
    }
  | {
      tag: 'bond_and_stake';
      value: {
        contractId: AstarRuntimeSmartContract;
        value: bigint;
      };
    }
  | {
      tag: 'unbond_and_unstake';
      value: {
        contractId: AstarRuntimeSmartContract;
        value: bigint;
      };
    }
  | { tag: 'withdraw_unbonded'; value: never }
  | {
      tag: 'nomination_transfer';
      value: {
        originContractId: AstarRuntimeSmartContract;
        value: bigint;
        targetContractId: AstarRuntimeSmartContract;
      };
    }
  | {
      tag: 'claim_staker';
      value: {
        contractId: AstarRuntimeSmartContract;
      };
    }
  | {
      tag: 'claim_dapp';
      value: {
        contractId: AstarRuntimeSmartContract;
        era: number;
      };
    }
  | { tag: 'force_new_era'; value: never }
  | {
      tag: 'maintenance_mode';
      value: {
        enableMaintenance: boolean;
      };
    }
  | {
      tag: 'set_reward_destination';
      value: {
        rewardDestination: PalletDappsStakingRewardDestination;
      };
    }
  | {
      tag: 'set_contract_stake_info';
      value: {
        contract: AstarRuntimeSmartContract;
        era: number;
        contractStakeInfo: PalletDappsStakingContractStakeInfo;
      };
    }
  | {
      tag: 'burn_stale_reward';
      value: {
        contractId: AstarRuntimeSmartContract;
        era: number;
      };
    };

export type PalletDappsStakingContractStakeInfo = {
  total: bigint;
  numberOfStakers: number;
  contractRewardClaimed: boolean;
};

export type PalletBlockRewardCall = {
  tag: 'set_configuration';
  value: {
    rewardDistroParams: PalletBlockRewardRewardDistributionConfig;
  };
};

export type PalletAssetsCall =
  | {
      tag: 'create';
      value: {
        id: bigint;
        admin: MultiAddress;
        minBalance: bigint;
      };
    }
  | {
      tag: 'force_create';
      value: {
        id: bigint;
        owner: MultiAddress;
        isSufficient: boolean;
        minBalance: bigint;
      };
    }
  | {
      tag: 'start_destroy';
      value: {
        id: bigint;
      };
    }
  | {
      tag: 'destroy_accounts';
      value: {
        id: bigint;
      };
    }
  | {
      tag: 'destroy_approvals';
      value: {
        id: bigint;
      };
    }
  | {
      tag: 'finish_destroy';
      value: {
        id: bigint;
      };
    }
  | {
      tag: 'mint';
      value: {
        id: bigint;
        beneficiary: MultiAddress;
        amount: bigint;
      };
    }
  | {
      tag: 'burn';
      value: {
        id: bigint;
        who: MultiAddress;
        amount: bigint;
      };
    }
  | {
      tag: 'transfer';
      value: {
        id: bigint;
        target: MultiAddress;
        amount: bigint;
      };
    }
  | {
      tag: 'transfer_keep_alive';
      value: {
        id: bigint;
        target: MultiAddress;
        amount: bigint;
      };
    }
  | {
      tag: 'force_transfer';
      value: {
        id: bigint;
        source: MultiAddress;
        dest: MultiAddress;
        amount: bigint;
      };
    }
  | {
      tag: 'freeze';
      value: {
        id: bigint;
        who: MultiAddress;
      };
    }
  | {
      tag: 'thaw';
      value: {
        id: bigint;
        who: MultiAddress;
      };
    }
  | {
      tag: 'freeze_asset';
      value: {
        id: bigint;
      };
    }
  | {
      tag: 'thaw_asset';
      value: {
        id: bigint;
      };
    }
  | {
      tag: 'transfer_ownership';
      value: {
        id: bigint;
        owner: MultiAddress;
      };
    }
  | {
      tag: 'set_team';
      value: {
        id: bigint;
        issuer: MultiAddress;
        admin: MultiAddress;
        freezer: MultiAddress;
      };
    }
  | {
      tag: 'set_metadata';
      value: {
        id: bigint;
        name: Bytes;
        symbol: Bytes;
        decimals: number;
      };
    }
  | {
      tag: 'clear_metadata';
      value: {
        id: bigint;
      };
    }
  | {
      tag: 'force_set_metadata';
      value: {
        id: bigint;
        name: Bytes;
        symbol: Bytes;
        decimals: number;
        isFrozen: boolean;
      };
    }
  | {
      tag: 'force_clear_metadata';
      value: {
        id: bigint;
      };
    }
  | {
      tag: 'force_asset_status';
      value: {
        id: bigint;
        owner: MultiAddress;
        issuer: MultiAddress;
        admin: MultiAddress;
        freezer: MultiAddress;
        minBalance: bigint;
        isSufficient: boolean;
        isFrozen: boolean;
      };
    }
  | {
      tag: 'approve_transfer';
      value: {
        id: bigint;
        delegate: MultiAddress;
        amount: bigint;
      };
    }
  | {
      tag: 'cancel_approval';
      value: {
        id: bigint;
        delegate: MultiAddress;
      };
    }
  | {
      tag: 'force_cancel_approval';
      value: {
        id: bigint;
        owner: MultiAddress;
        delegate: MultiAddress;
      };
    }
  | {
      tag: 'transfer_approved';
      value: {
        id: bigint;
        owner: MultiAddress;
        destination: MultiAddress;
        amount: bigint;
      };
    }
  | {
      tag: 'touch';
      value: {
        id: bigint;
      };
    }
  | {
      tag: 'refund';
      value: {
        id: bigint;
        allowBurn: boolean;
      };
    }
  | {
      tag: 'set_min_balance';
      value: {
        id: bigint;
        minBalance: bigint;
      };
    }
  | {
      tag: 'touch_other';
      value: {
        id: bigint;
        who: MultiAddress;
      };
    }
  | {
      tag: 'refund_other';
      value: {
        id: bigint;
        who: MultiAddress;
      };
    }
  | {
      tag: 'block';
      value: {
        id: bigint;
        who: MultiAddress;
      };
    };

export type PalletCollatorSelectionCall =
  | {
      tag: 'set_invulnerables';
      value: {
        new: Array<AccountId32>;
      };
    }
  | {
      tag: 'set_desired_candidates';
      value: {
        max: number;
      };
    }
  | {
      tag: 'set_candidacy_bond';
      value: {
        bond: bigint;
      };
    }
  | { tag: 'register_as_candidate'; value: never }
  | { tag: 'leave_intent'; value: never };

export type PalletSessionCall =
  | {
      tag: 'set_keys';
      value: {
        keys: AstarRuntimeSessionKeys;
        proof: Bytes;
      };
    }
  | { tag: 'purge_keys'; value: never };

export type AstarRuntimeSessionKeys = {
  aura: SpConsensusAuraSr25519AppSr25519Public;
};

export type SpConsensusAuraSr25519AppSr25519Public = SpCoreSr25519Public;

export type SpCoreSr25519Public = FixedBytes<32>;

export type CumulusPalletXcmpQueueCall =
  | {
      tag: 'service_overweight';
      value: {
        index: bigint;
        weightLimit: SpWeightsWeightV2Weight;
      };
    }
  | { tag: 'suspend_xcm_execution'; value: never }
  | { tag: 'resume_xcm_execution'; value: never }
  | {
      tag: 'update_suspend_threshold';
      value: {
        new: number;
      };
    }
  | {
      tag: 'update_drop_threshold';
      value: {
        new: number;
      };
    }
  | {
      tag: 'update_resume_threshold';
      value: {
        new: number;
      };
    }
  | {
      tag: 'update_threshold_weight';
      value: {
        new: SpWeightsWeightV2Weight;
      };
    }
  | {
      tag: 'update_weight_restrict_decay';
      value: {
        new: SpWeightsWeightV2Weight;
      };
    }
  | {
      tag: 'update_xcmp_max_individual_weight';
      value: {
        new: SpWeightsWeightV2Weight;
      };
    };

export type PalletXcmCall =
  | {
      tag: 'send';
      value: {
        dest: XcmVersionedMultiLocation;
        message: XcmVersionedXcm;
      };
    }
  | {
      tag: 'teleport_assets';
      value: {
        dest: XcmVersionedMultiLocation;
        beneficiary: XcmVersionedMultiLocation;
        assets: XcmVersionedMultiAssets;
        feeAssetItem: number;
      };
    }
  | {
      tag: 'reserve_transfer_assets';
      value: {
        dest: XcmVersionedMultiLocation;
        beneficiary: XcmVersionedMultiLocation;
        assets: XcmVersionedMultiAssets;
        feeAssetItem: number;
      };
    }
  | {
      tag: 'execute';
      value: {
        message: XcmVersionedXcm;
        maxWeight: SpWeightsWeightV2Weight;
      };
    }
  | {
      tag: 'force_xcm_version';
      value: {
        location: XcmV3MultilocationMultiLocation;
        xcmVersion: number;
      };
    }
  | {
      tag: 'force_default_xcm_version';
      value: {
        maybeXcmVersion?: number | undefined;
      };
    }
  | {
      tag: 'force_subscribe_version_notify';
      value: {
        location: XcmVersionedMultiLocation;
      };
    }
  | {
      tag: 'force_unsubscribe_version_notify';
      value: {
        location: XcmVersionedMultiLocation;
      };
    }
  | {
      tag: 'limited_reserve_transfer_assets';
      value: {
        dest: XcmVersionedMultiLocation;
        beneficiary: XcmVersionedMultiLocation;
        assets: XcmVersionedMultiAssets;
        feeAssetItem: number;
        weightLimit: XcmV3WeightLimit;
      };
    }
  | {
      tag: 'limited_teleport_assets';
      value: {
        dest: XcmVersionedMultiLocation;
        beneficiary: XcmVersionedMultiLocation;
        assets: XcmVersionedMultiAssets;
        feeAssetItem: number;
        weightLimit: XcmV3WeightLimit;
      };
    }
  | {
      tag: 'force_suspension';
      value: {
        suspended: boolean;
      };
    }
  | {
      tag: 'reserve_withdraw_assets';
      value: {
        dest: XcmVersionedMultiLocation;
        beneficiary: XcmVersionedMultiLocation;
        assets: XcmVersionedMultiAssets;
        feeAssetItem: number;
      };
    }
  | {
      tag: 'limited_reserve_withdraw_assets';
      value: {
        dest: XcmVersionedMultiLocation;
        beneficiary: XcmVersionedMultiLocation;
        assets: XcmVersionedMultiAssets;
        feeAssetItem: number;
        weightLimit: XcmV3WeightLimit;
      };
    };

export type XcmVersionedXcm = { tag: 'V2'; value: XcmV2Xcm } | { tag: 'V3'; value: XcmV3Xcm };

export type XcmV2Xcm = Array<XcmV2Instruction>;

export type XcmV2Instruction =
  | { tag: 'WithdrawAsset'; value: XcmV2MultiassetMultiAssets }
  | { tag: 'ReserveAssetDeposited'; value: XcmV2MultiassetMultiAssets }
  | { tag: 'ReceiveTeleportedAsset'; value: XcmV2MultiassetMultiAssets }
  | {
      tag: 'QueryResponse';
      value: {
        queryId: bigint;
        response: XcmV2Response;
        maxWeight: bigint;
      };
    }
  | {
      tag: 'TransferAsset';
      value: {
        assets: XcmV2MultiassetMultiAssets;
        beneficiary: XcmV2MultilocationMultiLocation;
      };
    }
  | {
      tag: 'TransferReserveAsset';
      value: {
        assets: XcmV2MultiassetMultiAssets;
        dest: XcmV2MultilocationMultiLocation;
        xcm: XcmV2Xcm;
      };
    }
  | {
      tag: 'Transact';
      value: {
        originType: XcmV2OriginKind;
        requireWeightAtMost: bigint;
        call: XcmDoubleEncoded;
      };
    }
  | {
      tag: 'HrmpNewChannelOpenRequest';
      value: {
        sender: number;
        maxMessageSize: number;
        maxCapacity: number;
      };
    }
  | {
      tag: 'HrmpChannelAccepted';
      value: {
        recipient: number;
      };
    }
  | {
      tag: 'HrmpChannelClosing';
      value: {
        initiator: number;
        sender: number;
        recipient: number;
      };
    }
  | { tag: 'ClearOrigin'; value: never }
  | { tag: 'DescendOrigin'; value: XcmV2MultilocationJunctions }
  | {
      tag: 'ReportError';
      value: {
        queryId: bigint;
        dest: XcmV2MultilocationMultiLocation;
        maxResponseWeight: bigint;
      };
    }
  | {
      tag: 'DepositAsset';
      value: {
        assets: XcmV2MultiassetMultiAssetFilter;
        maxAssets: number;
        beneficiary: XcmV2MultilocationMultiLocation;
      };
    }
  | {
      tag: 'DepositReserveAsset';
      value: {
        assets: XcmV2MultiassetMultiAssetFilter;
        maxAssets: number;
        dest: XcmV2MultilocationMultiLocation;
        xcm: XcmV2Xcm;
      };
    }
  | {
      tag: 'ExchangeAsset';
      value: {
        give: XcmV2MultiassetMultiAssetFilter;
        receive: XcmV2MultiassetMultiAssets;
      };
    }
  | {
      tag: 'InitiateReserveWithdraw';
      value: {
        assets: XcmV2MultiassetMultiAssetFilter;
        reserve: XcmV2MultilocationMultiLocation;
        xcm: XcmV2Xcm;
      };
    }
  | {
      tag: 'InitiateTeleport';
      value: {
        assets: XcmV2MultiassetMultiAssetFilter;
        dest: XcmV2MultilocationMultiLocation;
        xcm: XcmV2Xcm;
      };
    }
  | {
      tag: 'QueryHolding';
      value: {
        queryId: bigint;
        dest: XcmV2MultilocationMultiLocation;
        assets: XcmV2MultiassetMultiAssetFilter;
        maxResponseWeight: bigint;
      };
    }
  | {
      tag: 'BuyExecution';
      value: {
        fees: XcmV2MultiassetMultiAsset;
        weightLimit: XcmV2WeightLimit;
      };
    }
  | { tag: 'RefundSurplus'; value: never }
  | { tag: 'SetErrorHandler'; value: XcmV2Xcm }
  | { tag: 'SetAppendix'; value: XcmV2Xcm }
  | { tag: 'ClearError'; value: never }
  | {
      tag: 'ClaimAsset';
      value: {
        assets: XcmV2MultiassetMultiAssets;
        ticket: XcmV2MultilocationMultiLocation;
      };
    }
  | { tag: 'Trap'; value: bigint }
  | {
      tag: 'SubscribeVersion';
      value: {
        queryId: bigint;
        maxResponseWeight: bigint;
      };
    }
  | { tag: 'UnsubscribeVersion'; value: never };

export type XcmV2Response =
  | { tag: 'Null'; value: never }
  | { tag: 'Assets'; value: XcmV2MultiassetMultiAssets }
  | { tag: 'ExecutionResult'; value: [number, XcmV2TraitsError] | undefined }
  | { tag: 'Version'; value: number };

export type XcmV2TraitsError =
  | { tag: 'Overflow'; value: never }
  | { tag: 'Unimplemented'; value: never }
  | { tag: 'UntrustedReserveLocation'; value: never }
  | { tag: 'UntrustedTeleportLocation'; value: never }
  | { tag: 'MultiLocationFull'; value: never }
  | { tag: 'MultiLocationNotInvertible'; value: never }
  | { tag: 'BadOrigin'; value: never }
  | { tag: 'InvalidLocation'; value: never }
  | { tag: 'AssetNotFound'; value: never }
  | { tag: 'FailedToTransactAsset'; value: never }
  | { tag: 'NotWithdrawable'; value: never }
  | { tag: 'LocationCannotHold'; value: never }
  | { tag: 'ExceedsMaxMessageSize'; value: never }
  | { tag: 'DestinationUnsupported'; value: never }
  | { tag: 'Transport'; value: never }
  | { tag: 'Unroutable'; value: never }
  | { tag: 'UnknownClaim'; value: never }
  | { tag: 'FailedToDecode'; value: never }
  | { tag: 'MaxWeightInvalid'; value: never }
  | { tag: 'NotHoldingFees'; value: never }
  | { tag: 'TooExpensive'; value: never }
  | { tag: 'Trap'; value: bigint }
  | { tag: 'UnhandledXcmVersion'; value: never }
  | { tag: 'WeightLimitReached'; value: bigint }
  | { tag: 'Barrier'; value: never }
  | { tag: 'WeightNotComputable'; value: never };

export type XcmV2MultiassetMultiAssetFilter =
  | { tag: 'Definite'; value: XcmV2MultiassetMultiAssets }
  | { tag: 'Wild'; value: XcmV2MultiassetWildMultiAsset };

export type XcmV2MultiassetWildMultiAsset =
  | { tag: 'All'; value: never }
  | {
      tag: 'AllOf';
      value: {
        id: XcmV2MultiassetAssetId;
        fun: XcmV2MultiassetWildFungibility;
      };
    };

export type XcmV2MultiassetWildFungibility = 'fungible' | 'nonFungible';

export type XcmV2WeightLimit = { tag: 'Unlimited'; value: never } | { tag: 'Limited'; value: bigint };

export type CumulusPalletXcmCall = never;

export type CumulusPalletDmpQueueCall = {
  tag: 'service_overweight';
  value: {
    index: bigint;
    weightLimit: SpWeightsWeightV2Weight;
  };
};

export type PalletXcAssetConfigCall =
  | {
      tag: 'register_asset_location';
      value: {
        assetLocation: XcmVersionedMultiLocation;
        assetId: bigint;
      };
    }
  | {
      tag: 'set_asset_units_per_second';
      value: {
        assetLocation: XcmVersionedMultiLocation;
        unitsPerSecond: bigint;
      };
    }
  | {
      tag: 'change_existing_asset_location';
      value: {
        newAssetLocation: XcmVersionedMultiLocation;
        assetId: bigint;
      };
    }
  | {
      tag: 'remove_payment_asset';
      value: {
        assetLocation: XcmVersionedMultiLocation;
      };
    }
  | {
      tag: 'remove_asset';
      value: {
        assetId: bigint;
      };
    };

export type OrmlXtokensModuleCall =
  | {
      tag: 'transfer';
      value: {
        currencyId: bigint;
        amount: bigint;
        dest: XcmVersionedMultiLocation;
        destWeightLimit: XcmV3WeightLimit;
      };
    }
  | {
      tag: 'transfer_multiasset';
      value: {
        asset: XcmVersionedMultiAsset;
        dest: XcmVersionedMultiLocation;
        destWeightLimit: XcmV3WeightLimit;
      };
    }
  | {
      tag: 'transfer_with_fee';
      value: {
        currencyId: bigint;
        amount: bigint;
        fee: bigint;
        dest: XcmVersionedMultiLocation;
        destWeightLimit: XcmV3WeightLimit;
      };
    }
  | {
      tag: 'transfer_multiasset_with_fee';
      value: {
        asset: XcmVersionedMultiAsset;
        fee: XcmVersionedMultiAsset;
        dest: XcmVersionedMultiLocation;
        destWeightLimit: XcmV3WeightLimit;
      };
    }
  | {
      tag: 'transfer_multicurrencies';
      value: {
        currencies: Array<[bigint, bigint]>;
        feeItem: number;
        dest: XcmVersionedMultiLocation;
        destWeightLimit: XcmV3WeightLimit;
      };
    }
  | {
      tag: 'transfer_multiassets';
      value: {
        assets: XcmVersionedMultiAssets;
        feeItem: number;
        dest: XcmVersionedMultiLocation;
        destWeightLimit: XcmV3WeightLimit;
      };
    };

export type XcmVersionedMultiAsset =
  | { tag: 'V2'; value: XcmV2MultiassetMultiAsset }
  | { tag: 'V3'; value: XcmV3MultiassetMultiAsset };

export type PalletEvmCall =
  | {
      tag: 'withdraw';
      value: {
        address: H160;
        value: bigint;
      };
    }
  | {
      tag: 'call';
      value: {
        source: H160;
        target: H160;
        input: Bytes;
        value: U256;
        gasLimit: bigint;
        maxFeePerGas: U256;
        maxPriorityFeePerGas?: U256 | undefined;
        nonce?: U256 | undefined;
        accessList: Array<[H160, Array<H256>]>;
      };
    }
  | {
      tag: 'create';
      value: {
        source: H160;
        init: Bytes;
        value: U256;
        gasLimit: bigint;
        maxFeePerGas: U256;
        maxPriorityFeePerGas?: U256 | undefined;
        nonce?: U256 | undefined;
        accessList: Array<[H160, Array<H256>]>;
      };
    }
  | {
      tag: 'create2';
      value: {
        source: H160;
        init: Bytes;
        salt: H256;
        value: U256;
        gasLimit: bigint;
        maxFeePerGas: U256;
        maxPriorityFeePerGas?: U256 | undefined;
        nonce?: U256 | undefined;
        accessList: Array<[H160, Array<H256>]>;
      };
    };

export type PalletEthereumCall = {
  tag: 'transact';
  value: {
    transaction: EthereumTransactionTransactionV2;
  };
};

export type EthereumTransactionTransactionV2 =
  | { tag: 'Legacy'; value: EthereumTransactionLegacyTransaction }
  | { tag: 'EIP2930'; value: EthereumTransactionEip2930Transaction }
  | { tag: 'EIP1559'; value: EthereumTransactionEip1559Transaction };

export type EthereumTransactionLegacyTransaction = {
  nonce: U256;
  gasPrice: U256;
  gasLimit: U256;
  action: EthereumTransactionTransactionAction;
  value: U256;
  input: Bytes;
  signature: EthereumTransactionTransactionSignature;
};

export type EthereumTransactionTransactionAction = { tag: 'Call'; value: H160 } | { tag: 'Create'; value: never };

export type EthereumTransactionTransactionSignature = {
  v: EthereumTransactionTransactionRecoveryId;
  r: H256;
  s: H256;
};

export type EthereumTransactionTransactionRecoveryId = bigint;

export type EthereumTransactionEip2930Transaction = {
  chainId: bigint;
  nonce: U256;
  gasPrice: U256;
  gasLimit: U256;
  action: EthereumTransactionTransactionAction;
  value: U256;
  input: Bytes;
  accessList: Array<EthereumTransactionAccessListItem>;
  oddYParity: boolean;
  r: H256;
  s: H256;
};

export type EthereumTransactionAccessListItem = {
  address: H160;
  storageKeys: Array<H256>;
};

export type EthereumTransactionEip1559Transaction = {
  chainId: bigint;
  nonce: U256;
  maxPriorityFeePerGas: U256;
  maxFeePerGas: U256;
  gasLimit: U256;
  action: EthereumTransactionTransactionAction;
  value: U256;
  input: Bytes;
  accessList: Array<EthereumTransactionAccessListItem>;
  oddYParity: boolean;
  r: H256;
  s: H256;
};

export type PalletCustomSignaturesCall = {
  tag: 'call';
  value: {
    call: AstarRuntimeRuntimeCall;
    signer: AccountId32;
    signature: Bytes;
    nonce: number;
  };
};

export type PalletBaseFeeCall =
  | {
      tag: 'set_base_fee_per_gas';
      value: {
        fee: U256;
      };
    }
  | {
      tag: 'set_elasticity';
      value: {
        elasticity: Permill;
      };
    };

export type PalletContractsCall =
  | {
      tag: 'call_old_weight';
      value: {
        dest: MultiAddress;
        value: bigint;
        gasLimit: bigint;
        storageDepositLimit?: bigint | undefined;
        data: Bytes;
      };
    }
  | {
      tag: 'instantiate_with_code_old_weight';
      value: {
        value: bigint;
        gasLimit: bigint;
        storageDepositLimit?: bigint | undefined;
        code: Bytes;
        data: Bytes;
        salt: Bytes;
      };
    }
  | {
      tag: 'instantiate_old_weight';
      value: {
        value: bigint;
        gasLimit: bigint;
        storageDepositLimit?: bigint | undefined;
        codeHash: H256;
        data: Bytes;
        salt: Bytes;
      };
    }
  | {
      tag: 'upload_code';
      value: {
        code: Bytes;
        storageDepositLimit?: bigint | undefined;
        determinism: PalletContractsWasmDeterminism;
      };
    }
  | {
      tag: 'remove_code';
      value: {
        codeHash: H256;
      };
    }
  | {
      tag: 'set_code';
      value: {
        dest: MultiAddress;
        codeHash: H256;
      };
    }
  | {
      tag: 'call';
      value: {
        dest: MultiAddress;
        value: bigint;
        gasLimit: SpWeightsWeightV2Weight;
        storageDepositLimit?: bigint | undefined;
        data: Bytes;
      };
    }
  | {
      tag: 'instantiate_with_code';
      value: {
        value: bigint;
        gasLimit: SpWeightsWeightV2Weight;
        storageDepositLimit?: bigint | undefined;
        code: Bytes;
        data: Bytes;
        salt: Bytes;
      };
    }
  | {
      tag: 'instantiate';
      value: {
        value: bigint;
        gasLimit: SpWeightsWeightV2Weight;
        storageDepositLimit?: bigint | undefined;
        codeHash: H256;
        data: Bytes;
        salt: Bytes;
      };
    }
  | {
      tag: 'migrate';
      value: {
        weightLimit: SpWeightsWeightV2Weight;
      };
    };

export type PalletContractsWasmDeterminism = 'enforced' | 'relaxed';

export type PalletSudoCall =
  | {
      tag: 'sudo';
      value: {
        call: AstarRuntimeRuntimeCall;
      };
    }
  | {
      tag: 'sudo_unchecked_weight';
      value: {
        call: AstarRuntimeRuntimeCall;
        weight: SpWeightsWeightV2Weight;
      };
    }
  | {
      tag: 'set_key';
      value: {
        new: MultiAddress;
      };
    }
  | {
      tag: 'sudo_as';
      value: {
        who: MultiAddress;
        call: AstarRuntimeRuntimeCall;
      };
    };

export type AstarRuntimeOriginCaller =
  | { tag: 'system'; value: FrameSupportDispatchRawOrigin }
  | { tag: 'PolkadotXcm'; value: PalletXcmOrigin }
  | { tag: 'CumulusXcm'; value: CumulusPalletXcmOrigin }
  | { tag: 'Ethereum'; value: PalletEthereumRawOrigin }
  | { tag: 'Void'; value: SpCoreVoid };

export type FrameSupportDispatchRawOrigin =
  | { tag: 'Root'; value: never }
  | { tag: 'Signed'; value: AccountId32 }
  | { tag: 'None'; value: never };

export type PalletXcmOrigin =
  | { tag: 'Xcm'; value: XcmV3MultilocationMultiLocation }
  | { tag: 'Response'; value: XcmV3MultilocationMultiLocation };

export type CumulusPalletXcmOrigin =
  | { tag: 'Relay'; value: never }
  | { tag: 'SiblingParachain'; value: PolkadotParachainPrimitivesId };

export type PalletEthereumRawOrigin = { tag: 'EthereumTransaction'; value: H160 };

export type SpCoreVoid = never;

export type PalletUtilityError = 'tooManyCalls';

export type PalletIdentityRegistration = {
  judgements: Array<[number, PalletIdentityJudgement]>;
  deposit: bigint;
  info: PalletIdentityIdentityInfo;
};

export type PalletIdentityRegistrarInfo = {
  account: AccountId32;
  fee: bigint;
  fields: PalletIdentityBitFlags;
};

export type PalletIdentityError =
  | 'tooManySubAccounts'
  | 'notFound'
  | 'notNamed'
  | 'emptyIndex'
  | 'feeChanged'
  | 'noIdentity'
  | 'stickyJudgement'
  | 'judgementGiven'
  | 'invalidJudgement'
  | 'invalidIndex'
  | 'invalidTarget'
  | 'tooManyFields'
  | 'tooManyRegistrars'
  | 'alreadyClaimed'
  | 'notSub'
  | 'notOwned'
  | 'judgementForDifferentIdentity'
  | 'judgementPaymentFailed';

export type PalletMultisigMultisig = {
  when: PalletMultisigTimepoint;
  deposit: bigint;
  depositor: AccountId32;
  approvals: Array<AccountId32>;
};

export type PalletMultisigError =
  | 'minimumThreshold'
  | 'alreadyApproved'
  | 'noApprovalsNeeded'
  | 'tooFewSignatories'
  | 'tooManySignatories'
  | 'signatoriesOutOfOrder'
  | 'senderInSignatories'
  | 'notFound'
  | 'notOwner'
  | 'noTimepoint'
  | 'wrongTimepoint'
  | 'unexpectedTimepoint'
  | 'maxWeightTooLow'
  | 'alreadyStored';

export type PalletProxyProxyDefinition = {
  delegate: AccountId32;
  proxyType: AstarRuntimeProxyType;
  delay: number;
};

export type PalletProxyAnnouncement = {
  real: AccountId32;
  callHash: H256;
  height: number;
};

export type PalletProxyError =
  | 'tooMany'
  | 'notFound'
  | 'notProxy'
  | 'unproxyable'
  | 'duplicate'
  | 'noPermission'
  | 'unannounced'
  | 'noSelfProxy';

export type PolkadotPrimitivesV4UpgradeRestriction = 'present';

export type CumulusPalletParachainSystemRelayStateSnapshotMessagingStateSnapshot = {
  dmqMqcHead: H256;
  relayDispatchQueueSize: CumulusPalletParachainSystemRelayStateSnapshotRelayDispachQueueSize;
  ingressChannels: Array<[PolkadotParachainPrimitivesId, PolkadotPrimitivesV4AbridgedHrmpChannel]>;
  egressChannels: Array<[PolkadotParachainPrimitivesId, PolkadotPrimitivesV4AbridgedHrmpChannel]>;
};

export type CumulusPalletParachainSystemRelayStateSnapshotRelayDispachQueueSize = {
  remainingCount: number;
  remainingSize: number;
};

export type PolkadotPrimitivesV4AbridgedHrmpChannel = {
  maxCapacity: number;
  maxTotalSize: number;
  maxMessageSize: number;
  msgCount: number;
  totalSize: number;
  mqcHead?: H256 | undefined;
};

export type PolkadotPrimitivesV4AbridgedHostConfiguration = {
  maxCodeSize: number;
  maxHeadDataSize: number;
  maxUpwardQueueCount: number;
  maxUpwardQueueSize: number;
  maxUpwardMessageSize: number;
  maxUpwardMessageNumPerCandidate: number;
  hrmpMaxMessageNumPerCandidate: number;
  validationUpgradeCooldown: number;
  validationUpgradeDelay: number;
};

export type CumulusPrimitivesParachainInherentMessageQueueChain = H256;

export type PolkadotCorePrimitivesOutboundHrmpMessage = {
  recipient: PolkadotParachainPrimitivesId;
  data: Bytes;
};

export type CumulusPalletParachainSystemCodeUpgradeAuthorization = {
  codeHash: H256;
  checkVersion: boolean;
};

export type CumulusPalletParachainSystemError =
  | 'overlappingUpgrades'
  | 'prohibitedByPolkadot'
  | 'tooBig'
  | 'validationDataNotAvailable'
  | 'hostConfigurationNotAvailable'
  | 'notScheduled'
  | 'nothingAuthorized'
  | 'unauthorized';

export type PalletTransactionPaymentReleases = 'v1Ancient' | 'v2';

export type PalletBalancesBalanceLock = {
  id: FixedBytes<8>;
  amount: bigint;
  reasons: PalletBalancesReasons;
};

export type PalletBalancesReasons = 'fee' | 'misc' | 'all';

export type PalletBalancesReserveData = {
  id: FixedBytes<8>;
  amount: bigint;
};

export type PalletBalancesIdAmount = {
  id: never;
  amount: bigint;
};

export type PalletBalancesError =
  | 'vestingBalance'
  | 'liquidityRestrictions'
  | 'insufficientBalance'
  | 'existentialDeposit'
  | 'expendability'
  | 'existingVestingSchedule'
  | 'deadAccount'
  | 'tooManyReserves'
  | 'tooManyHolds'
  | 'tooManyFreezes';

export type PalletVestingReleases = 'v0' | 'v1';

export type PalletVestingError =
  | 'notVesting'
  | 'atMaxVestingSchedules'
  | 'amountLow'
  | 'scheduleIndexOutOfBounds'
  | 'invalidScheduleParams';

export type PalletDappsStakingAccountLedger = {
  locked: bigint;
  unbondingInfo: PalletDappsStakingUnbondingInfo;
  rewardDestination: PalletDappsStakingRewardDestination;
};

export type PalletDappsStakingUnbondingInfo = {
  unlockingChunks: Array<PalletDappsStakingUnlockingChunk>;
};

export type PalletDappsStakingUnlockingChunk = {
  amount: bigint;
  unlockEra: number;
};

export type PalletDappsStakingRewardInfo = {
  stakers: bigint;
  dapps: bigint;
};

export type PalletDappsStakingForcing = 'notForcing' | 'forceNew';

export type PalletDappsStakingDAppInfo = {
  developer: AccountId32;
  state: PalletDappsStakingDAppState;
};

export type PalletDappsStakingDAppState = { tag: 'Registered'; value: never } | { tag: 'Unregistered'; value: number };

export type PalletDappsStakingEraInfo = {
  rewards: PalletDappsStakingRewardInfo;
  staked: bigint;
  locked: bigint;
};

export type PalletDappsStakingStakerInfo = {
  stakes: Array<PalletDappsStakingEraStake>;
};

export type PalletDappsStakingEraStake = {
  staked: bigint;
  era: number;
};

export type PalletDappsStakingVersion = 'v100' | 'v200' | 'v300' | 'v400';

export type FrameSupportPalletId = FixedBytes<8>;

export type PalletDappsStakingPalletError =
  | 'disabled'
  | 'noMaintenanceModeChange'
  | 'upgradeTooHeavy'
  | 'stakingWithNoValue'
  | 'insufficientValue'
  | 'maxNumberOfStakersExceeded'
  | 'notOperatedContract'
  | 'notStakedContract'
  | 'notUnregisteredContract'
  | 'unclaimedRewardsRemaining'
  | 'unstakingWithNoValue'
  | 'nothingToWithdraw'
  | 'alreadyRegisteredContract'
  | 'alreadyUsedDeveloperAccount'
  | 'notOwnedContract'
  | 'unknownEraReward'
  | 'unexpectedStakeInfoEra'
  | 'tooManyUnlockingChunks'
  | 'alreadyClaimedInThisEra'
  | 'eraOutOfBounds'
  | 'tooManyEraStakeValues'
  | 'notActiveStaker'
  | 'nominationTransferToSameContract';

export type PalletBlockRewardError = 'invalidDistributionConfiguration';

export type PalletAssetsAssetDetails = {
  owner: AccountId32;
  issuer: AccountId32;
  admin: AccountId32;
  freezer: AccountId32;
  supply: bigint;
  deposit: bigint;
  minBalance: bigint;
  isSufficient: boolean;
  accounts: number;
  sufficients: number;
  approvals: number;
  status: PalletAssetsAssetStatus;
};

export type PalletAssetsAssetStatus = 'live' | 'frozen' | 'destroying';

export type PalletAssetsAssetAccount = {
  balance: bigint;
  status: PalletAssetsAccountStatus;
  reason: PalletAssetsExistenceReason;
  extra: never;
};

export type PalletAssetsAccountStatus = 'liquid' | 'frozen' | 'blocked';

export type PalletAssetsExistenceReason =
  | { tag: 'Consumer'; value: never }
  | { tag: 'Sufficient'; value: never }
  | { tag: 'DepositHeld'; value: bigint }
  | { tag: 'DepositRefunded'; value: never }
  | { tag: 'DepositFrom'; value: [AccountId32, bigint] };

export type PalletAssetsApproval = {
  amount: bigint;
  deposit: bigint;
};

export type PalletAssetsAssetMetadata = {
  deposit: bigint;
  name: Bytes;
  symbol: Bytes;
  decimals: number;
  isFrozen: boolean;
};

export type PalletAssetsError =
  | 'balanceLow'
  | 'noAccount'
  | 'noPermission'
  | 'unknown'
  | 'frozen'
  | 'inUse'
  | 'badWitness'
  | 'minBalanceZero'
  | 'unavailableConsumer'
  | 'badMetadata'
  | 'unapproved'
  | 'wouldDie'
  | 'alreadyExists'
  | 'noDeposit'
  | 'wouldBurn'
  | 'liveAsset'
  | 'assetNotLive'
  | 'incorrectStatus'
  | 'notFrozen'
  | 'callbackFailed';

export type PalletCollatorSelectionCandidateInfo = {
  who: AccountId32;
  deposit: bigint;
};

export type PalletCollatorSelectionError =
  | 'tooManyCandidates'
  | 'tooFewCandidates'
  | 'unknown'
  | 'permission'
  | 'alreadyCandidate'
  | 'notCandidate'
  | 'alreadyInvulnerable'
  | 'noAssociatedValidatorId'
  | 'validatorNotRegistered';

export type SpCoreCryptoKeyTypeId = FixedBytes<4>;

export type PalletSessionError = 'invalidProof' | 'noAssociatedValidatorId' | 'duplicatedKey' | 'noKeys' | 'noAccount';

export type SpConsensusSlotsSlot = bigint;

export type CumulusPalletXcmpQueueInboundChannelDetails = {
  sender: PolkadotParachainPrimitivesId;
  state: CumulusPalletXcmpQueueInboundState;
  messageMetadata: Array<[number, PolkadotParachainPrimitivesXcmpMessageFormat]>;
};

export type CumulusPalletXcmpQueueInboundState = 'ok' | 'suspended';

export type PolkadotParachainPrimitivesXcmpMessageFormat =
  | 'concatenatedVersionedXcm'
  | 'concatenatedEncodedBlob'
  | 'signals';

export type CumulusPalletXcmpQueueOutboundChannelDetails = {
  recipient: PolkadotParachainPrimitivesId;
  state: CumulusPalletXcmpQueueOutboundState;
  signalsExist: boolean;
  firstIndex: number;
  lastIndex: number;
};

export type CumulusPalletXcmpQueueOutboundState = 'ok' | 'suspended';

export type CumulusPalletXcmpQueueQueueConfigData = {
  suspendThreshold: number;
  dropThreshold: number;
  resumeThreshold: number;
  thresholdWeight: SpWeightsWeightV2Weight;
  weightRestrictDecay: SpWeightsWeightV2Weight;
  xcmpMaxIndividualWeight: SpWeightsWeightV2Weight;
};

export type CumulusPalletXcmpQueueError =
  | 'failedToSend'
  | 'badXcmOrigin'
  | 'badXcm'
  | 'badOverweightIndex'
  | 'weightOverLimit';

export type PalletXcmQueryStatus =
  | {
      tag: 'Pending';
      value: {
        responder: XcmVersionedMultiLocation;
        maybeMatchQuerier?: XcmVersionedMultiLocation | undefined;
        maybeNotify?: [number, number] | undefined;
        timeout: number;
      };
    }
  | {
      tag: 'VersionNotifier';
      value: {
        origin: XcmVersionedMultiLocation;
        isActive: boolean;
      };
    }
  | {
      tag: 'Ready';
      value: {
        response: XcmVersionedResponse;
        at: number;
      };
    };

export type XcmVersionedResponse = { tag: 'V2'; value: XcmV2Response } | { tag: 'V3'; value: XcmV3Response };

export type PalletXcmVersionMigrationStage =
  | { tag: 'MigrateSupportedVersion'; value: never }
  | { tag: 'MigrateVersionNotifiers'; value: never }
  | { tag: 'NotifyCurrentTargets'; value: Bytes | undefined }
  | { tag: 'MigrateAndNotifyOldTargets'; value: never };

export type XcmVersionedAssetId = { tag: 'V3'; value: XcmV3MultiassetAssetId };

export type PalletXcmRemoteLockedFungibleRecord = {
  amount: bigint;
  owner: XcmVersionedMultiLocation;
  locker: XcmVersionedMultiLocation;
  users: number;
};

export type PalletXcmError =
  | 'unreachable'
  | 'sendFailure'
  | 'filtered'
  | 'unweighableMessage'
  | 'destinationNotInvertible'
  | 'empty'
  | 'cannotReanchor'
  | 'tooManyAssets'
  | 'invalidOrigin'
  | 'badVersion'
  | 'badLocation'
  | 'noSubscription'
  | 'alreadySubscribed'
  | 'invalidAsset'
  | 'lowBalance'
  | 'tooManyLocks'
  | 'accountNotSovereign'
  | 'feesNotMet'
  | 'lockNotFound'
  | 'inUse';

export type CumulusPalletXcmError = never;

export type CumulusPalletDmpQueueConfigData = {
  maxIndividual: SpWeightsWeightV2Weight;
};

export type CumulusPalletDmpQueuePageIndexData = {
  beginUsed: number;
  endUsed: number;
  overweightCount: bigint;
};

export type CumulusPalletDmpQueueError = 'unknown' | 'overLimit';

export type PalletXcAssetConfigError = 'assetAlreadyRegistered' | 'assetDoesNotExist' | 'multiLocationNotSupported';

export type OrmlXtokensModuleError =
  | 'assetHasNoReserve'
  | 'notCrossChainTransfer'
  | 'invalidDest'
  | 'notCrossChainTransferableCurrency'
  | 'unweighableMessage'
  | 'xcmExecutionFailed'
  | 'cannotReanchor'
  | 'invalidAncestry'
  | 'invalidAsset'
  | 'destinationNotInvertible'
  | 'badVersion'
  | 'distinctReserveForAssetAndFee'
  | 'zeroFee'
  | 'zeroAmount'
  | 'tooManyAssetsBeingSent'
  | 'assetIndexNonExistent'
  | 'feeNotEnough'
  | 'notSupportedMultiLocation'
  | 'minXcmFeeNotDefined';

export type PalletEvmCodeMetadata = {
  size: bigint;
  hash: H256;
};

export type PalletEvmError =
  | 'balanceLow'
  | 'feeOverflow'
  | 'paymentOverflow'
  | 'withdrawFailed'
  | 'gasPriceTooLow'
  | 'invalidNonce'
  | 'gasLimitTooLow'
  | 'gasLimitTooHigh'
  | 'undefined'
  | 'reentrancy'
  | 'transactionMustComeFromEOA';

export type FpRpcTransactionStatus = {
  transactionHash: H256;
  transactionIndex: number;
  from: H160;
  to?: H160 | undefined;
  contractAddress?: H160 | undefined;
  logs: Array<EthereumLog>;
  logsBloom: EthbloomBloom;
};

export type EthbloomBloom = FixedBytes<256>;

export type EthereumReceiptReceiptV3 =
  | { tag: 'Legacy'; value: EthereumReceiptEip658ReceiptData }
  | { tag: 'EIP2930'; value: EthereumReceiptEip658ReceiptData }
  | { tag: 'EIP1559'; value: EthereumReceiptEip658ReceiptData };

export type EthereumReceiptEip658ReceiptData = {
  statusCode: number;
  usedGas: U256;
  logsBloom: EthbloomBloom;
  logs: Array<EthereumLog>;
};

export type EthereumBlock = {
  header: EthereumHeader;
  transactions: Array<EthereumTransactionTransactionV2>;
  ommers: Array<EthereumHeader>;
};

export type EthereumHeader = {
  parentHash: H256;
  ommersHash: H256;
  beneficiary: H160;
  stateRoot: H256;
  transactionsRoot: H256;
  receiptsRoot: H256;
  logsBloom: EthbloomBloom;
  difficulty: U256;
  number: U256;
  gasLimit: U256;
  gasUsed: U256;
  timestamp: bigint;
  extraData: Bytes;
  mixHash: H256;
  nonce: EthereumTypesHashH64;
};

export type EthereumTypesHashH64 = FixedBytes<8>;

export type PalletEthereumError = 'invalidSignature' | 'preLogExists';

export type PalletCustomSignaturesError = 'decodeFailure' | 'invalidSignature' | 'badNonce';

export type PalletContractsWasmPrefabWasmModule = {
  instructionWeightsVersion: number;
  initial: number;
  maximum: number;
  code: Bytes;
  determinism: PalletContractsWasmDeterminism;
};

export type PalletContractsWasmOwnerInfo = {
  owner: AccountId32;
  deposit: bigint;
  refcount: bigint;
};

export type PalletContractsStorageContractInfo = {
  trieId: Bytes;
  depositAccount: PalletContractsStorageDepositAccount;
  codeHash: H256;
  storageBytes: number;
  storageItems: number;
  storageByteDeposit: bigint;
  storageItemDeposit: bigint;
  storageBaseDeposit: bigint;
};

export type PalletContractsStorageDepositAccount = AccountId32;

export type PalletContractsStorageDeletionQueueManager = {
  insertCounter: number;
  deleteCounter: number;
};

export type PalletContractsSchedule = {
  limits: PalletContractsScheduleLimits;
  instructionWeights: PalletContractsScheduleInstructionWeights;
  hostFnWeights: PalletContractsScheduleHostFnWeights;
};

export type PalletContractsScheduleLimits = {
  eventTopics: number;
  globals: number;
  locals: number;
  parameters: number;
  memoryPages: number;
  tableSize: number;
  brTableSize: number;
  subjectLen: number;
  payloadLen: number;
  runtimeMemory: number;
};

export type PalletContractsScheduleInstructionWeights = {
  version: number;
  fallback: number;
  i64const: number;
  i64load: number;
  i64store: number;
  select: number;
  rIf: number;
  br: number;
  brIf: number;
  brTable: number;
  brTablePerEntry: number;
  call: number;
  callIndirect: number;
  callPerLocal: number;
  localGet: number;
  localSet: number;
  localTee: number;
  globalGet: number;
  globalSet: number;
  memoryCurrent: number;
  memoryGrow: number;
  i64clz: number;
  i64ctz: number;
  i64popcnt: number;
  i64eqz: number;
  i64extendsi32: number;
  i64extendui32: number;
  i32wrapi64: number;
  i64eq: number;
  i64ne: number;
  i64lts: number;
  i64ltu: number;
  i64gts: number;
  i64gtu: number;
  i64les: number;
  i64leu: number;
  i64ges: number;
  i64geu: number;
  i64add: number;
  i64sub: number;
  i64mul: number;
  i64divs: number;
  i64divu: number;
  i64rems: number;
  i64remu: number;
  i64and: number;
  i64or: number;
  i64xor: number;
  i64shl: number;
  i64shrs: number;
  i64shru: number;
  i64rotl: number;
  i64rotr: number;
};

export type PalletContractsScheduleHostFnWeights = {
  caller: SpWeightsWeightV2Weight;
  isContract: SpWeightsWeightV2Weight;
  codeHash: SpWeightsWeightV2Weight;
  ownCodeHash: SpWeightsWeightV2Weight;
  callerIsOrigin: SpWeightsWeightV2Weight;
  callerIsRoot: SpWeightsWeightV2Weight;
  address: SpWeightsWeightV2Weight;
  gasLeft: SpWeightsWeightV2Weight;
  balance: SpWeightsWeightV2Weight;
  valueTransferred: SpWeightsWeightV2Weight;
  minimumBalance: SpWeightsWeightV2Weight;
  blockNumber: SpWeightsWeightV2Weight;
  now: SpWeightsWeightV2Weight;
  weightToFee: SpWeightsWeightV2Weight;
  gas: SpWeightsWeightV2Weight;
  input: SpWeightsWeightV2Weight;
  inputPerByte: SpWeightsWeightV2Weight;
  rReturn: SpWeightsWeightV2Weight;
  returnPerByte: SpWeightsWeightV2Weight;
  terminate: SpWeightsWeightV2Weight;
  random: SpWeightsWeightV2Weight;
  depositEvent: SpWeightsWeightV2Weight;
  depositEventPerTopic: SpWeightsWeightV2Weight;
  depositEventPerByte: SpWeightsWeightV2Weight;
  debugMessage: SpWeightsWeightV2Weight;
  debugMessagePerByte: SpWeightsWeightV2Weight;
  setStorage: SpWeightsWeightV2Weight;
  setStoragePerNewByte: SpWeightsWeightV2Weight;
  setStoragePerOldByte: SpWeightsWeightV2Weight;
  setCodeHash: SpWeightsWeightV2Weight;
  clearStorage: SpWeightsWeightV2Weight;
  clearStoragePerByte: SpWeightsWeightV2Weight;
  containsStorage: SpWeightsWeightV2Weight;
  containsStoragePerByte: SpWeightsWeightV2Weight;
  getStorage: SpWeightsWeightV2Weight;
  getStoragePerByte: SpWeightsWeightV2Weight;
  takeStorage: SpWeightsWeightV2Weight;
  takeStoragePerByte: SpWeightsWeightV2Weight;
  transfer: SpWeightsWeightV2Weight;
  call: SpWeightsWeightV2Weight;
  delegateCall: SpWeightsWeightV2Weight;
  callTransferSurcharge: SpWeightsWeightV2Weight;
  callPerClonedByte: SpWeightsWeightV2Weight;
  instantiate: SpWeightsWeightV2Weight;
  instantiateTransferSurcharge: SpWeightsWeightV2Weight;
  instantiatePerInputByte: SpWeightsWeightV2Weight;
  instantiatePerSaltByte: SpWeightsWeightV2Weight;
  hashSha2256: SpWeightsWeightV2Weight;
  hashSha2256PerByte: SpWeightsWeightV2Weight;
  hashKeccak256: SpWeightsWeightV2Weight;
  hashKeccak256PerByte: SpWeightsWeightV2Weight;
  hashBlake2256: SpWeightsWeightV2Weight;
  hashBlake2256PerByte: SpWeightsWeightV2Weight;
  hashBlake2128: SpWeightsWeightV2Weight;
  hashBlake2128PerByte: SpWeightsWeightV2Weight;
  ecdsaRecover: SpWeightsWeightV2Weight;
  ecdsaToEthAddress: SpWeightsWeightV2Weight;
  sr25519Verify: SpWeightsWeightV2Weight;
  sr25519VerifyPerByte: SpWeightsWeightV2Weight;
  reentranceCount: SpWeightsWeightV2Weight;
  accountReentranceCount: SpWeightsWeightV2Weight;
  instantiationNonce: SpWeightsWeightV2Weight;
};

export type PalletContractsError =
  | 'invalidScheduleVersion'
  | 'invalidCallFlags'
  | 'outOfGas'
  | 'outputBufferTooSmall'
  | 'transferFailed'
  | 'maxCallDepthReached'
  | 'contractNotFound'
  | 'codeTooLarge'
  | 'codeNotFound'
  | 'outOfBounds'
  | 'decodingFailed'
  | 'contractTrapped'
  | 'valueTooLarge'
  | 'terminatedWhileReentrant'
  | 'inputForwarded'
  | 'randomSubjectTooLong'
  | 'tooManyTopics'
  | 'noChainExtension'
  | 'duplicateContract'
  | 'terminatedInConstructor'
  | 'reentranceDenied'
  | 'storageDepositNotEnoughFunds'
  | 'storageDepositLimitExhausted'
  | 'codeInUse'
  | 'contractReverted'
  | 'codeRejected'
  | 'indeterministic'
  | 'migrationInProgress'
  | 'noMigrationPerformed';

export type PalletSudoError = 'requireSudo';

export type FpSelfContainedUncheckedExtrinsic = SpRuntimeUncheckedExtrinsic;

export type SpRuntimeMultiSignature =
  | { tag: 'Ed25519'; value: SpCoreEd25519Signature }
  | { tag: 'Sr25519'; value: SpCoreSr25519Signature }
  | { tag: 'Ecdsa'; value: SpCoreEcdsaSignature };

export type SpCoreEd25519Signature = FixedBytes<64>;

export type SpCoreSr25519Signature = FixedBytes<64>;

export type SpCoreEcdsaSignature = FixedBytes<65>;

export type FrameSystemExtensionsCheckSpecVersion = never;

export type FrameSystemExtensionsCheckTxVersion = never;

export type FrameSystemExtensionsCheckGenesis = never;

export type FrameSystemExtensionsCheckMortality = SpRuntimeEra;

export type SpRuntimeEra =
  | { tag: 'Immortal'; value: never }
  | { tag: 'Mortal1'; value: number }
  | { tag: 'Mortal2'; value: number }
  | { tag: 'Mortal3'; value: number }
  | { tag: 'Mortal4'; value: number }
  | { tag: 'Mortal5'; value: number }
  | { tag: 'Mortal6'; value: number }
  | { tag: 'Mortal7'; value: number }
  | { tag: 'Mortal8'; value: number }
  | { tag: 'Mortal9'; value: number }
  | { tag: 'Mortal10'; value: number }
  | { tag: 'Mortal11'; value: number }
  | { tag: 'Mortal12'; value: number }
  | { tag: 'Mortal13'; value: number }
  | { tag: 'Mortal14'; value: number }
  | { tag: 'Mortal15'; value: number }
  | { tag: 'Mortal16'; value: number }
  | { tag: 'Mortal17'; value: number }
  | { tag: 'Mortal18'; value: number }
  | { tag: 'Mortal19'; value: number }
  | { tag: 'Mortal20'; value: number }
  | { tag: 'Mortal21'; value: number }
  | { tag: 'Mortal22'; value: number }
  | { tag: 'Mortal23'; value: number }
  | { tag: 'Mortal24'; value: number }
  | { tag: 'Mortal25'; value: number }
  | { tag: 'Mortal26'; value: number }
  | { tag: 'Mortal27'; value: number }
  | { tag: 'Mortal28'; value: number }
  | { tag: 'Mortal29'; value: number }
  | { tag: 'Mortal30'; value: number }
  | { tag: 'Mortal31'; value: number }
  | { tag: 'Mortal32'; value: number }
  | { tag: 'Mortal33'; value: number }
  | { tag: 'Mortal34'; value: number }
  | { tag: 'Mortal35'; value: number }
  | { tag: 'Mortal36'; value: number }
  | { tag: 'Mortal37'; value: number }
  | { tag: 'Mortal38'; value: number }
  | { tag: 'Mortal39'; value: number }
  | { tag: 'Mortal40'; value: number }
  | { tag: 'Mortal41'; value: number }
  | { tag: 'Mortal42'; value: number }
  | { tag: 'Mortal43'; value: number }
  | { tag: 'Mortal44'; value: number }
  | { tag: 'Mortal45'; value: number }
  | { tag: 'Mortal46'; value: number }
  | { tag: 'Mortal47'; value: number }
  | { tag: 'Mortal48'; value: number }
  | { tag: 'Mortal49'; value: number }
  | { tag: 'Mortal50'; value: number }
  | { tag: 'Mortal51'; value: number }
  | { tag: 'Mortal52'; value: number }
  | { tag: 'Mortal53'; value: number }
  | { tag: 'Mortal54'; value: number }
  | { tag: 'Mortal55'; value: number }
  | { tag: 'Mortal56'; value: number }
  | { tag: 'Mortal57'; value: number }
  | { tag: 'Mortal58'; value: number }
  | { tag: 'Mortal59'; value: number }
  | { tag: 'Mortal60'; value: number }
  | { tag: 'Mortal61'; value: number }
  | { tag: 'Mortal62'; value: number }
  | { tag: 'Mortal63'; value: number }
  | { tag: 'Mortal64'; value: number }
  | { tag: 'Mortal65'; value: number }
  | { tag: 'Mortal66'; value: number }
  | { tag: 'Mortal67'; value: number }
  | { tag: 'Mortal68'; value: number }
  | { tag: 'Mortal69'; value: number }
  | { tag: 'Mortal70'; value: number }
  | { tag: 'Mortal71'; value: number }
  | { tag: 'Mortal72'; value: number }
  | { tag: 'Mortal73'; value: number }
  | { tag: 'Mortal74'; value: number }
  | { tag: 'Mortal75'; value: number }
  | { tag: 'Mortal76'; value: number }
  | { tag: 'Mortal77'; value: number }
  | { tag: 'Mortal78'; value: number }
  | { tag: 'Mortal79'; value: number }
  | { tag: 'Mortal80'; value: number }
  | { tag: 'Mortal81'; value: number }
  | { tag: 'Mortal82'; value: number }
  | { tag: 'Mortal83'; value: number }
  | { tag: 'Mortal84'; value: number }
  | { tag: 'Mortal85'; value: number }
  | { tag: 'Mortal86'; value: number }
  | { tag: 'Mortal87'; value: number }
  | { tag: 'Mortal88'; value: number }
  | { tag: 'Mortal89'; value: number }
  | { tag: 'Mortal90'; value: number }
  | { tag: 'Mortal91'; value: number }
  | { tag: 'Mortal92'; value: number }
  | { tag: 'Mortal93'; value: number }
  | { tag: 'Mortal94'; value: number }
  | { tag: 'Mortal95'; value: number }
  | { tag: 'Mortal96'; value: number }
  | { tag: 'Mortal97'; value: number }
  | { tag: 'Mortal98'; value: number }
  | { tag: 'Mortal99'; value: number }
  | { tag: 'Mortal100'; value: number }
  | { tag: 'Mortal101'; value: number }
  | { tag: 'Mortal102'; value: number }
  | { tag: 'Mortal103'; value: number }
  | { tag: 'Mortal104'; value: number }
  | { tag: 'Mortal105'; value: number }
  | { tag: 'Mortal106'; value: number }
  | { tag: 'Mortal107'; value: number }
  | { tag: 'Mortal108'; value: number }
  | { tag: 'Mortal109'; value: number }
  | { tag: 'Mortal110'; value: number }
  | { tag: 'Mortal111'; value: number }
  | { tag: 'Mortal112'; value: number }
  | { tag: 'Mortal113'; value: number }
  | { tag: 'Mortal114'; value: number }
  | { tag: 'Mortal115'; value: number }
  | { tag: 'Mortal116'; value: number }
  | { tag: 'Mortal117'; value: number }
  | { tag: 'Mortal118'; value: number }
  | { tag: 'Mortal119'; value: number }
  | { tag: 'Mortal120'; value: number }
  | { tag: 'Mortal121'; value: number }
  | { tag: 'Mortal122'; value: number }
  | { tag: 'Mortal123'; value: number }
  | { tag: 'Mortal124'; value: number }
  | { tag: 'Mortal125'; value: number }
  | { tag: 'Mortal126'; value: number }
  | { tag: 'Mortal127'; value: number }
  | { tag: 'Mortal128'; value: number }
  | { tag: 'Mortal129'; value: number }
  | { tag: 'Mortal130'; value: number }
  | { tag: 'Mortal131'; value: number }
  | { tag: 'Mortal132'; value: number }
  | { tag: 'Mortal133'; value: number }
  | { tag: 'Mortal134'; value: number }
  | { tag: 'Mortal135'; value: number }
  | { tag: 'Mortal136'; value: number }
  | { tag: 'Mortal137'; value: number }
  | { tag: 'Mortal138'; value: number }
  | { tag: 'Mortal139'; value: number }
  | { tag: 'Mortal140'; value: number }
  | { tag: 'Mortal141'; value: number }
  | { tag: 'Mortal142'; value: number }
  | { tag: 'Mortal143'; value: number }
  | { tag: 'Mortal144'; value: number }
  | { tag: 'Mortal145'; value: number }
  | { tag: 'Mortal146'; value: number }
  | { tag: 'Mortal147'; value: number }
  | { tag: 'Mortal148'; value: number }
  | { tag: 'Mortal149'; value: number }
  | { tag: 'Mortal150'; value: number }
  | { tag: 'Mortal151'; value: number }
  | { tag: 'Mortal152'; value: number }
  | { tag: 'Mortal153'; value: number }
  | { tag: 'Mortal154'; value: number }
  | { tag: 'Mortal155'; value: number }
  | { tag: 'Mortal156'; value: number }
  | { tag: 'Mortal157'; value: number }
  | { tag: 'Mortal158'; value: number }
  | { tag: 'Mortal159'; value: number }
  | { tag: 'Mortal160'; value: number }
  | { tag: 'Mortal161'; value: number }
  | { tag: 'Mortal162'; value: number }
  | { tag: 'Mortal163'; value: number }
  | { tag: 'Mortal164'; value: number }
  | { tag: 'Mortal165'; value: number }
  | { tag: 'Mortal166'; value: number }
  | { tag: 'Mortal167'; value: number }
  | { tag: 'Mortal168'; value: number }
  | { tag: 'Mortal169'; value: number }
  | { tag: 'Mortal170'; value: number }
  | { tag: 'Mortal171'; value: number }
  | { tag: 'Mortal172'; value: number }
  | { tag: 'Mortal173'; value: number }
  | { tag: 'Mortal174'; value: number }
  | { tag: 'Mortal175'; value: number }
  | { tag: 'Mortal176'; value: number }
  | { tag: 'Mortal177'; value: number }
  | { tag: 'Mortal178'; value: number }
  | { tag: 'Mortal179'; value: number }
  | { tag: 'Mortal180'; value: number }
  | { tag: 'Mortal181'; value: number }
  | { tag: 'Mortal182'; value: number }
  | { tag: 'Mortal183'; value: number }
  | { tag: 'Mortal184'; value: number }
  | { tag: 'Mortal185'; value: number }
  | { tag: 'Mortal186'; value: number }
  | { tag: 'Mortal187'; value: number }
  | { tag: 'Mortal188'; value: number }
  | { tag: 'Mortal189'; value: number }
  | { tag: 'Mortal190'; value: number }
  | { tag: 'Mortal191'; value: number }
  | { tag: 'Mortal192'; value: number }
  | { tag: 'Mortal193'; value: number }
  | { tag: 'Mortal194'; value: number }
  | { tag: 'Mortal195'; value: number }
  | { tag: 'Mortal196'; value: number }
  | { tag: 'Mortal197'; value: number }
  | { tag: 'Mortal198'; value: number }
  | { tag: 'Mortal199'; value: number }
  | { tag: 'Mortal200'; value: number }
  | { tag: 'Mortal201'; value: number }
  | { tag: 'Mortal202'; value: number }
  | { tag: 'Mortal203'; value: number }
  | { tag: 'Mortal204'; value: number }
  | { tag: 'Mortal205'; value: number }
  | { tag: 'Mortal206'; value: number }
  | { tag: 'Mortal207'; value: number }
  | { tag: 'Mortal208'; value: number }
  | { tag: 'Mortal209'; value: number }
  | { tag: 'Mortal210'; value: number }
  | { tag: 'Mortal211'; value: number }
  | { tag: 'Mortal212'; value: number }
  | { tag: 'Mortal213'; value: number }
  | { tag: 'Mortal214'; value: number }
  | { tag: 'Mortal215'; value: number }
  | { tag: 'Mortal216'; value: number }
  | { tag: 'Mortal217'; value: number }
  | { tag: 'Mortal218'; value: number }
  | { tag: 'Mortal219'; value: number }
  | { tag: 'Mortal220'; value: number }
  | { tag: 'Mortal221'; value: number }
  | { tag: 'Mortal222'; value: number }
  | { tag: 'Mortal223'; value: number }
  | { tag: 'Mortal224'; value: number }
  | { tag: 'Mortal225'; value: number }
  | { tag: 'Mortal226'; value: number }
  | { tag: 'Mortal227'; value: number }
  | { tag: 'Mortal228'; value: number }
  | { tag: 'Mortal229'; value: number }
  | { tag: 'Mortal230'; value: number }
  | { tag: 'Mortal231'; value: number }
  | { tag: 'Mortal232'; value: number }
  | { tag: 'Mortal233'; value: number }
  | { tag: 'Mortal234'; value: number }
  | { tag: 'Mortal235'; value: number }
  | { tag: 'Mortal236'; value: number }
  | { tag: 'Mortal237'; value: number }
  | { tag: 'Mortal238'; value: number }
  | { tag: 'Mortal239'; value: number }
  | { tag: 'Mortal240'; value: number }
  | { tag: 'Mortal241'; value: number }
  | { tag: 'Mortal242'; value: number }
  | { tag: 'Mortal243'; value: number }
  | { tag: 'Mortal244'; value: number }
  | { tag: 'Mortal245'; value: number }
  | { tag: 'Mortal246'; value: number }
  | { tag: 'Mortal247'; value: number }
  | { tag: 'Mortal248'; value: number }
  | { tag: 'Mortal249'; value: number }
  | { tag: 'Mortal250'; value: number }
  | { tag: 'Mortal251'; value: number }
  | { tag: 'Mortal252'; value: number }
  | { tag: 'Mortal253'; value: number }
  | { tag: 'Mortal254'; value: number }
  | { tag: 'Mortal255'; value: number };

export type FrameSystemExtensionsCheckNonce = number;

export type FrameSystemExtensionsCheckWeight = never;

export type PalletTransactionPaymentChargeTransactionPayment = bigint;

export type SpRuntimeUncheckedExtrinsic = Bytes;
