// Generated by @delightfuldot/codegen
import { GenericChainConsts } from '@delightfuldot/types';
import {
  FrameSupportPalletId,
  FrameSystemLimitsBlockLength,
  FrameSystemLimitsBlockWeights,
  PalletContractsSchedule,
  SpVersionRuntimeVersion,
  SpWeightsRuntimeDbWeight,
  SpWeightsWeightV2Weight,
  XcmV3MultilocationMultiLocation,
} from './types';

export interface ChainConsts extends GenericChainConsts {
  system: {
    blockWeights: FrameSystemLimitsBlockWeights;
    blockLength: FrameSystemLimitsBlockLength;
    blockHashCount: number;
    dbWeight: SpWeightsRuntimeDbWeight;
    version: SpVersionRuntimeVersion;
    ss58Prefix: number;
  };
  utility: { batchedCallsLimit: number };
  identity: {
    basicDeposit: bigint;
    fieldDeposit: bigint;
    subAccountDeposit: bigint;
    maxSubAccounts: number;
    maxAdditionalFields: number;
    maxRegistrars: number;
  };
  timestamp: { minimumPeriod: bigint };
  multisig: {
    depositBase: bigint;
    depositFactor: bigint;
    maxSignatories: number;
  };
  proxy: {
    proxyDepositBase: bigint;
    proxyDepositFactor: bigint;
    maxProxies: number;
    maxPending: number;
    announcementDepositBase: bigint;
    announcementDepositFactor: bigint;
  };
  parachainSystem: {};
  parachainInfo: {};
  transactionPayment: { operationalFeeMultiplier: number };
  balances: {
    existentialDeposit: bigint;
    maxLocks: number;
    maxReserves: number;
    maxHolds: number;
    maxFreezes: number;
  };
  vesting: {
    minVestedTransfer: bigint;
    maxVestingSchedules: number;
  };
  dappsStaking: {
    blockPerEra: number;
    registerDeposit: bigint;
    maxNumberOfStakersPerContract: number;
    minimumStakingAmount: bigint;
    palletId: FrameSupportPalletId;
    minimumRemainingAmount: bigint;
    maxUnlockingChunks: number;
    unbondingPeriod: number;
    maxEraStakeValues: number;
    unregisteredDappRewardRetention: number;
  };
  blockReward: { rewardAmount: bigint };
  assets: {
    removeItemsLimit: number;
    assetDeposit: bigint;
    assetAccountDeposit: bigint;
    metadataDepositBase: bigint;
    metadataDepositPerByte: bigint;
    approvalDeposit: bigint;
    stringLimit: number;
  };
  authorship: {};
  collatorSelection: {};
  session: {};
  aura: {};
  auraExt: {};
  xcmpQueue: {};
  polkadotXcm: {};
  cumulusXcm: {};
  dmpQueue: {};
  xcAssetConfig: {};
  xtokens: {
    selfLocation: XcmV3MultilocationMultiLocation;
    baseXcmWeight: SpWeightsWeightV2Weight;
  };
  eVM: {};
  ethereum: {};
  ethCall: {
    callFee: bigint;
    callMagicNumber: number;
  };
  baseFee: {};
  contracts: {
    schedule: PalletContractsSchedule;
    depositPerByte: bigint;
    defaultDepositLimit: bigint;
    depositPerItem: bigint;
    maxCodeLen: number;
    maxStorageKeyLen: number;
    unsafeUnstableInterface: boolean;
    maxDebugBufferLen: number;
  };
  sudo: {};
}
