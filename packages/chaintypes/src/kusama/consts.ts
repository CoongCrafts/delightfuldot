// Generated by @delightfuldot/codegen
import { GenericChainConsts } from '@delightfuldot/types';
import {
  Bytes,
  FrameSupportPalletId,
  FrameSystemLimitsBlockLength,
  FrameSystemLimitsBlockWeights,
  KusamaRuntimeRuntimeHoldReason,
  PalletReferendaTrackInfo,
  Perbill,
  Permill,
  Perquintill,
  SpVersionRuntimeVersion,
  SpWeightsRuntimeDbWeight,
  SpWeightsWeightV2Weight,
} from './types';

export interface ChainConsts extends GenericChainConsts {
  system: {
    blockWeights: FrameSystemLimitsBlockWeights;
    blockLength: FrameSystemLimitsBlockLength;
    blockHashCount: number;
    dbWeight: SpWeightsRuntimeDbWeight;
    version: SpVersionRuntimeVersion;
    ss58Prefix: number;
  };
  babe: { epochDuration: bigint; expectedBlockTime: bigint; maxAuthorities: number };
  timestamp: { minimumPeriod: bigint };
  indices: { deposit: bigint };
  balances: { existentialDeposit: bigint; maxLocks: number; maxReserves: number; maxHolds: number; maxFreezes: number };
  transactionPayment: { operationalFeeMultiplier: number };
  authorship: {};
  staking: {
    maxNominations: number;
    historyDepth: number;
    sessionsPerEra: number;
    bondingDuration: number;
    slashDeferDuration: number;
    maxNominatorRewardedPerValidator: number;
    maxUnlockingChunks: number;
  };
  offences: {};
  historical: {};
  session: {};
  grandpa: { maxAuthorities: number; maxSetIdSessionEntries: bigint };
  imOnline: { unsignedPriority: bigint };
  authorityDiscovery: {};
  treasury: {
    proposalBond: Permill;
    proposalBondMinimum: bigint;
    proposalBondMaximum: bigint | undefined;
    spendPeriod: number;
    burn: Permill;
    palletId: FrameSupportPalletId;
    maxApprovals: number;
  };
  convictionVoting: { maxVotes: number; voteLockingPeriod: number };
  referenda: {
    submissionDeposit: bigint;
    maxQueued: number;
    undecidingTimeout: number;
    alarmInterval: number;
    tracks: Array<[number, PalletReferendaTrackInfo]>;
  };
  fellowshipCollective: {};
  fellowshipReferenda: {
    submissionDeposit: bigint;
    maxQueued: number;
    undecidingTimeout: number;
    alarmInterval: number;
    tracks: Array<[number, PalletReferendaTrackInfo]>;
  };
  whitelist: {};
  claims: { prefix: Bytes };
  utility: { batchedCallsLimit: number };
  identity: {
    basicDeposit: bigint;
    fieldDeposit: bigint;
    subAccountDeposit: bigint;
    maxSubAccounts: number;
    maxAdditionalFields: number;
    maxRegistrars: number;
  };
  society: {
    palletId: FrameSupportPalletId;
    candidateDeposit: bigint;
    wrongSideDeduction: bigint;
    maxStrikes: number;
    periodSpend: bigint;
    rotationPeriod: number;
    maxLockDuration: number;
    challengePeriod: number;
    maxCandidateIntake: number;
  };
  recovery: { configDepositBase: bigint; friendDepositFactor: bigint; maxFriends: number; recoveryDeposit: bigint };
  vesting: { minVestedTransfer: bigint; maxVestingSchedules: number };
  scheduler: { maximumWeight: SpWeightsWeightV2Weight; maxScheduledPerBlock: number };
  proxy: {
    proxyDepositBase: bigint;
    proxyDepositFactor: bigint;
    maxProxies: number;
    maxPending: number;
    announcementDepositBase: bigint;
    announcementDepositFactor: bigint;
  };
  multisig: { depositBase: bigint; depositFactor: bigint; maxSignatories: number };
  preimage: {};
  bounties: {
    bountyDepositBase: bigint;
    bountyDepositPayoutDelay: number;
    bountyUpdatePeriod: number;
    curatorDepositMultiplier: Permill;
    curatorDepositMax: bigint | undefined;
    curatorDepositMin: bigint | undefined;
    bountyValueMinimum: bigint;
    dataDepositPerByte: bigint;
    maximumReasonLength: number;
  };
  childBounties: { maxActiveChildBountyCount: number; childBountyValueMinimum: bigint };
  electionProviderMultiPhase: {
    unsignedPhase: number;
    signedPhase: number;
    betterSignedThreshold: Perbill;
    betterUnsignedThreshold: Perbill;
    offchainRepeat: number;
    minerTxPriority: bigint;
    signedMaxSubmissions: number;
    signedMaxWeight: SpWeightsWeightV2Weight;
    signedMaxRefunds: number;
    signedRewardBase: bigint;
    signedDepositBase: bigint;
    signedDepositByte: bigint;
    signedDepositWeight: bigint;
    maxElectingVoters: number;
    maxElectableTargets: number;
    maxWinners: number;
    minerMaxLength: number;
    minerMaxWeight: SpWeightsWeightV2Weight;
    minerMaxVotesPerVoter: number;
    minerMaxWinners: number;
  };
  nis: {
    palletId: FrameSupportPalletId;
    holdReason: KusamaRuntimeRuntimeHoldReason;
    queueCount: number;
    maxQueueLen: number;
    fifoQueueLen: number;
    basePeriod: number;
    minBid: bigint;
    minReceipt: Perquintill;
    intakePeriod: number;
    maxIntakeWeight: SpWeightsWeightV2Weight;
    thawThrottle: [Perquintill, number];
  };
  nisCounterpartBalances: {
    existentialDeposit: bigint;
    maxLocks: number;
    maxReserves: number;
    maxHolds: number;
    maxFreezes: number;
  };
  voterList: { bagThresholds: Array<bigint> };
  nominationPools: { palletId: FrameSupportPalletId; maxPointsToBalance: number };
  fastUnstake: { deposit: bigint };
  parachainsOrigin: {};
  configuration: {};
  parasShared: {};
  paraInclusion: {};
  paraInherent: {};
  paraScheduler: {};
  paras: { unsignedPriority: bigint };
  initializer: {};
  dmp: {};
  hrmp: {};
  paraSessionInfo: {};
  parasDisputes: {};
  parasSlashing: {};
  registrar: { paraDeposit: bigint; dataDepositPerByte: bigint };
  slots: { leasePeriod: number; leaseOffset: number };
  auctions: { endingPeriod: number; sampleLength: number; slotRangeCount: number; leasePeriodsPerSlot: number };
  crowdloan: { palletId: FrameSupportPalletId; minContribution: bigint; removeKeysLimit: number };
  xcmPallet: {};
  messageQueue: { heapSize: number; maxStale: number; serviceWeight: SpWeightsWeightV2Weight | undefined };
}
