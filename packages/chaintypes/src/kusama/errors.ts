// Generated by @delightfuldot/codegen

import type { GenericChainErrors, GenericModuleError } from '@delightfuldot/types';

export interface ChainErrors extends GenericChainErrors {
  system: {
    /**
     * The name of specification does not match between the current runtime
     * and the new runtime.
     **/
    InvalidSpecName: GenericModuleError;

    /**
     * The specification version is not allowed to decrease between the current runtime
     * and the new runtime.
     **/
    SpecVersionNeedsToIncrease: GenericModuleError;

    /**
     * Failed to extract the runtime version from the new runtime.
     *
     * Either calling `Core_version` or decoding `RuntimeVersion` failed.
     **/
    FailedToExtractRuntimeVersion: GenericModuleError;

    /**
     * Suicide called when the account has non-default composite data.
     **/
    NonDefaultComposite: GenericModuleError;

    /**
     * There is a non-zero reference count preventing the account from being purged.
     **/
    NonZeroRefCount: GenericModuleError;

    /**
     * The origin filter prevent the call to be dispatched.
     **/
    CallFiltered: GenericModuleError;
  };
  babe: {
    /**
     * An equivocation proof provided as part of an equivocation report is invalid.
     **/
    InvalidEquivocationProof: GenericModuleError;

    /**
     * A key ownership proof provided as part of an equivocation report is invalid.
     **/
    InvalidKeyOwnershipProof: GenericModuleError;

    /**
     * A given equivocation report is valid but already previously reported.
     **/
    DuplicateOffenceReport: GenericModuleError;

    /**
     * Submitted configuration is invalid.
     **/
    InvalidConfiguration: GenericModuleError;
  };
  indices: {
    /**
     * The index was not already assigned.
     **/
    NotAssigned: GenericModuleError;

    /**
     * The index is assigned to another account.
     **/
    NotOwner: GenericModuleError;

    /**
     * The index was not available.
     **/
    InUse: GenericModuleError;

    /**
     * The source and destination accounts are identical.
     **/
    NotTransfer: GenericModuleError;

    /**
     * The index is permanent and may not be freed/changed.
     **/
    Permanent: GenericModuleError;
  };
  balances: {
    /**
     * Vesting balance too high to send value.
     **/
    VestingBalance: GenericModuleError;

    /**
     * Account liquidity restrictions prevent withdrawal.
     **/
    LiquidityRestrictions: GenericModuleError;

    /**
     * Balance too low to send value.
     **/
    InsufficientBalance: GenericModuleError;

    /**
     * Value too low to create account due to existential deposit.
     **/
    ExistentialDeposit: GenericModuleError;

    /**
     * Transfer/payment would kill account.
     **/
    Expendability: GenericModuleError;

    /**
     * A vesting schedule already exists for this account.
     **/
    ExistingVestingSchedule: GenericModuleError;

    /**
     * Beneficiary account must pre-exist.
     **/
    DeadAccount: GenericModuleError;

    /**
     * Number of named reserves exceed `MaxReserves`.
     **/
    TooManyReserves: GenericModuleError;

    /**
     * Number of holds exceed `MaxHolds`.
     **/
    TooManyHolds: GenericModuleError;

    /**
     * Number of freezes exceed `MaxFreezes`.
     **/
    TooManyFreezes: GenericModuleError;
  };
  staking: {
    /**
     * Not a controller account.
     **/
    NotController: GenericModuleError;

    /**
     * Not a stash account.
     **/
    NotStash: GenericModuleError;

    /**
     * Stash is already bonded.
     **/
    AlreadyBonded: GenericModuleError;

    /**
     * Controller is already paired.
     **/
    AlreadyPaired: GenericModuleError;

    /**
     * Targets cannot be empty.
     **/
    EmptyTargets: GenericModuleError;

    /**
     * Duplicate index.
     **/
    DuplicateIndex: GenericModuleError;

    /**
     * Slash record index out of bounds.
     **/
    InvalidSlashIndex: GenericModuleError;

    /**
     * Cannot have a validator or nominator role, with value less than the minimum defined by
     * governance (see `MinValidatorBond` and `MinNominatorBond`). If unbonding is the
     * intention, `chill` first to remove one's role as validator/nominator.
     **/
    InsufficientBond: GenericModuleError;

    /**
     * Can not schedule more unlock chunks.
     **/
    NoMoreChunks: GenericModuleError;

    /**
     * Can not rebond without unlocking chunks.
     **/
    NoUnlockChunk: GenericModuleError;

    /**
     * Attempting to target a stash that still has funds.
     **/
    FundedTarget: GenericModuleError;

    /**
     * Invalid era to reward.
     **/
    InvalidEraToReward: GenericModuleError;

    /**
     * Invalid number of nominations.
     **/
    InvalidNumberOfNominations: GenericModuleError;

    /**
     * Items are not sorted and unique.
     **/
    NotSortedAndUnique: GenericModuleError;

    /**
     * Rewards for this era have already been claimed for this validator.
     **/
    AlreadyClaimed: GenericModuleError;

    /**
     * Incorrect previous history depth input provided.
     **/
    IncorrectHistoryDepth: GenericModuleError;

    /**
     * Incorrect number of slashing spans provided.
     **/
    IncorrectSlashingSpans: GenericModuleError;

    /**
     * Internal state has become somehow corrupted and the operation cannot continue.
     **/
    BadState: GenericModuleError;

    /**
     * Too many nomination targets supplied.
     **/
    TooManyTargets: GenericModuleError;

    /**
     * A nomination target was supplied that was blocked or otherwise not a validator.
     **/
    BadTarget: GenericModuleError;

    /**
     * The user has enough bond and thus cannot be chilled forcefully by an external person.
     **/
    CannotChillOther: GenericModuleError;

    /**
     * There are too many nominators in the system. Governance needs to adjust the staking
     * settings to keep things safe for the runtime.
     **/
    TooManyNominators: GenericModuleError;

    /**
     * There are too many validator candidates in the system. Governance needs to adjust the
     * staking settings to keep things safe for the runtime.
     **/
    TooManyValidators: GenericModuleError;

    /**
     * Commission is too low. Must be at least `MinCommission`.
     **/
    CommissionTooLow: GenericModuleError;

    /**
     * Some bound is not met.
     **/
    BoundNotMet: GenericModuleError;
  };
  beefy: {
    /**
     * A key ownership proof provided as part of an equivocation report is invalid.
     **/
    InvalidKeyOwnershipProof: GenericModuleError;

    /**
     * An equivocation proof provided as part of an equivocation report is invalid.
     **/
    InvalidEquivocationProof: GenericModuleError;

    /**
     * A given equivocation report is valid but already previously reported.
     **/
    DuplicateOffenceReport: GenericModuleError;
  };
  session: {
    /**
     * Invalid ownership proof.
     **/
    InvalidProof: GenericModuleError;

    /**
     * No associated validator ID for account.
     **/
    NoAssociatedValidatorId: GenericModuleError;

    /**
     * Registered duplicate key.
     **/
    DuplicatedKey: GenericModuleError;

    /**
     * No keys are associated with this account.
     **/
    NoKeys: GenericModuleError;

    /**
     * Key setting account is not live, so it's impossible to associate keys.
     **/
    NoAccount: GenericModuleError;
  };
  grandpa: {
    /**
     * Attempt to signal GRANDPA pause when the authority set isn't live
     * (either paused or already pending pause).
     **/
    PauseFailed: GenericModuleError;

    /**
     * Attempt to signal GRANDPA resume when the authority set isn't paused
     * (either live or already pending resume).
     **/
    ResumeFailed: GenericModuleError;

    /**
     * Attempt to signal GRANDPA change with one already pending.
     **/
    ChangePending: GenericModuleError;

    /**
     * Cannot signal forced change so soon after last.
     **/
    TooSoon: GenericModuleError;

    /**
     * A key ownership proof provided as part of an equivocation report is invalid.
     **/
    InvalidKeyOwnershipProof: GenericModuleError;

    /**
     * An equivocation proof provided as part of an equivocation report is invalid.
     **/
    InvalidEquivocationProof: GenericModuleError;

    /**
     * A given equivocation report is valid but already previously reported.
     **/
    DuplicateOffenceReport: GenericModuleError;
  };
  imOnline: {
    /**
     * Non existent public key.
     **/
    InvalidKey: GenericModuleError;

    /**
     * Duplicated heartbeat.
     **/
    DuplicatedHeartbeat: GenericModuleError;
  };
  treasury: {
    /**
     * Proposer's balance is too low.
     **/
    InsufficientProposersBalance: GenericModuleError;

    /**
     * No proposal or bounty at that index.
     **/
    InvalidIndex: GenericModuleError;

    /**
     * Too many approvals in the queue.
     **/
    TooManyApprovals: GenericModuleError;

    /**
     * The spend origin is valid but the amount it is allowed to spend is lower than the
     * amount to be spent.
     **/
    InsufficientPermission: GenericModuleError;

    /**
     * Proposal has not been approved.
     **/
    ProposalNotApproved: GenericModuleError;
  };
  convictionVoting: {
    /**
     * Poll is not ongoing.
     **/
    NotOngoing: GenericModuleError;

    /**
     * The given account did not vote on the poll.
     **/
    NotVoter: GenericModuleError;

    /**
     * The actor has no permission to conduct the action.
     **/
    NoPermission: GenericModuleError;

    /**
     * The actor has no permission to conduct the action right now but will do in the future.
     **/
    NoPermissionYet: GenericModuleError;

    /**
     * The account is already delegating.
     **/
    AlreadyDelegating: GenericModuleError;

    /**
     * The account currently has votes attached to it and the operation cannot succeed until
     * these are removed, either through `unvote` or `reap_vote`.
     **/
    AlreadyVoting: GenericModuleError;

    /**
     * Too high a balance was provided that the account cannot afford.
     **/
    InsufficientFunds: GenericModuleError;

    /**
     * The account is not currently delegating.
     **/
    NotDelegating: GenericModuleError;

    /**
     * Delegation to oneself makes no sense.
     **/
    Nonsense: GenericModuleError;

    /**
     * Maximum number of votes reached.
     **/
    MaxVotesReached: GenericModuleError;

    /**
     * The class must be supplied since it is not easily determinable from the state.
     **/
    ClassNeeded: GenericModuleError;

    /**
     * The class ID supplied is invalid.
     **/
    BadClass: GenericModuleError;
  };
  referenda: {
    /**
     * Referendum is not ongoing.
     **/
    NotOngoing: GenericModuleError;

    /**
     * Referendum's decision deposit is already paid.
     **/
    HasDeposit: GenericModuleError;

    /**
     * The track identifier given was invalid.
     **/
    BadTrack: GenericModuleError;

    /**
     * There are already a full complement of referenda in progress for this track.
     **/
    Full: GenericModuleError;

    /**
     * The queue of the track is empty.
     **/
    QueueEmpty: GenericModuleError;

    /**
     * The referendum index provided is invalid in this context.
     **/
    BadReferendum: GenericModuleError;

    /**
     * There was nothing to do in the advancement.
     **/
    NothingToDo: GenericModuleError;

    /**
     * No track exists for the proposal origin.
     **/
    NoTrack: GenericModuleError;

    /**
     * Any deposit cannot be refunded until after the decision is over.
     **/
    Unfinished: GenericModuleError;

    /**
     * The deposit refunder is not the depositor.
     **/
    NoPermission: GenericModuleError;

    /**
     * The deposit cannot be refunded since none was made.
     **/
    NoDeposit: GenericModuleError;

    /**
     * The referendum status is invalid for this operation.
     **/
    BadStatus: GenericModuleError;

    /**
     * The preimage does not exist.
     **/
    PreimageNotExist: GenericModuleError;
  };
  fellowshipCollective: {
    /**
     * Account is already a member.
     **/
    AlreadyMember: GenericModuleError;

    /**
     * Account is not a member.
     **/
    NotMember: GenericModuleError;

    /**
     * The given poll index is unknown or has closed.
     **/
    NotPolling: GenericModuleError;

    /**
     * The given poll is still ongoing.
     **/
    Ongoing: GenericModuleError;

    /**
     * There are no further records to be removed.
     **/
    NoneRemaining: GenericModuleError;

    /**
     * Unexpected error in state.
     **/
    Corruption: GenericModuleError;

    /**
     * The member's rank is too low to vote.
     **/
    RankTooLow: GenericModuleError;

    /**
     * The information provided is incorrect.
     **/
    InvalidWitness: GenericModuleError;

    /**
     * The origin is not sufficiently privileged to do the operation.
     **/
    NoPermission: GenericModuleError;
  };
  fellowshipReferenda: {
    /**
     * Referendum is not ongoing.
     **/
    NotOngoing: GenericModuleError;

    /**
     * Referendum's decision deposit is already paid.
     **/
    HasDeposit: GenericModuleError;

    /**
     * The track identifier given was invalid.
     **/
    BadTrack: GenericModuleError;

    /**
     * There are already a full complement of referenda in progress for this track.
     **/
    Full: GenericModuleError;

    /**
     * The queue of the track is empty.
     **/
    QueueEmpty: GenericModuleError;

    /**
     * The referendum index provided is invalid in this context.
     **/
    BadReferendum: GenericModuleError;

    /**
     * There was nothing to do in the advancement.
     **/
    NothingToDo: GenericModuleError;

    /**
     * No track exists for the proposal origin.
     **/
    NoTrack: GenericModuleError;

    /**
     * Any deposit cannot be refunded until after the decision is over.
     **/
    Unfinished: GenericModuleError;

    /**
     * The deposit refunder is not the depositor.
     **/
    NoPermission: GenericModuleError;

    /**
     * The deposit cannot be refunded since none was made.
     **/
    NoDeposit: GenericModuleError;

    /**
     * The referendum status is invalid for this operation.
     **/
    BadStatus: GenericModuleError;

    /**
     * The preimage does not exist.
     **/
    PreimageNotExist: GenericModuleError;
  };
  whitelist: {
    /**
     * The preimage of the call hash could not be loaded.
     **/
    UnavailablePreImage: GenericModuleError;

    /**
     * The call could not be decoded.
     **/
    UndecodableCall: GenericModuleError;

    /**
     * The weight of the decoded call was higher than the witness.
     **/
    InvalidCallWeightWitness: GenericModuleError;

    /**
     * The call was not whitelisted.
     **/
    CallIsNotWhitelisted: GenericModuleError;

    /**
     * The call was already whitelisted; No-Op.
     **/
    CallAlreadyWhitelisted: GenericModuleError;
  };
  claims: {
    /**
     * Invalid Ethereum signature.
     **/
    InvalidEthereumSignature: GenericModuleError;

    /**
     * Ethereum address has no claim.
     **/
    SignerHasNoClaim: GenericModuleError;

    /**
     * Account ID sending transaction has no claim.
     **/
    SenderHasNoClaim: GenericModuleError;

    /**
     * There's not enough in the pot to pay out some unvested amount. Generally implies a
     * logic error.
     **/
    PotUnderflow: GenericModuleError;

    /**
     * A needed statement was not included.
     **/
    InvalidStatement: GenericModuleError;

    /**
     * The account already has a vested balance.
     **/
    VestedBalanceExists: GenericModuleError;
  };
  utility: {
    /**
     * Too many calls batched.
     **/
    TooManyCalls: GenericModuleError;
  };
  identity: {
    /**
     * Too many subs-accounts.
     **/
    TooManySubAccounts: GenericModuleError;

    /**
     * Account isn't found.
     **/
    NotFound: GenericModuleError;

    /**
     * Account isn't named.
     **/
    NotNamed: GenericModuleError;

    /**
     * Empty index.
     **/
    EmptyIndex: GenericModuleError;

    /**
     * Fee is changed.
     **/
    FeeChanged: GenericModuleError;

    /**
     * No identity found.
     **/
    NoIdentity: GenericModuleError;

    /**
     * Sticky judgement.
     **/
    StickyJudgement: GenericModuleError;

    /**
     * Judgement given.
     **/
    JudgementGiven: GenericModuleError;

    /**
     * Invalid judgement.
     **/
    InvalidJudgement: GenericModuleError;

    /**
     * The index is invalid.
     **/
    InvalidIndex: GenericModuleError;

    /**
     * The target is invalid.
     **/
    InvalidTarget: GenericModuleError;

    /**
     * Too many additional fields.
     **/
    TooManyFields: GenericModuleError;

    /**
     * Maximum amount of registrars reached. Cannot add any more.
     **/
    TooManyRegistrars: GenericModuleError;

    /**
     * Account ID is already named.
     **/
    AlreadyClaimed: GenericModuleError;

    /**
     * Sender is not a sub-account.
     **/
    NotSub: GenericModuleError;

    /**
     * Sub-account isn't owned by sender.
     **/
    NotOwned: GenericModuleError;

    /**
     * The provided judgement was for a different identity.
     **/
    JudgementForDifferentIdentity: GenericModuleError;

    /**
     * Error that occurs when there is an issue paying for judgement.
     **/
    JudgementPaymentFailed: GenericModuleError;
  };
  society: {
    /**
     * User is not a member.
     **/
    NotMember: GenericModuleError;

    /**
     * User is already a member.
     **/
    AlreadyMember: GenericModuleError;

    /**
     * User is suspended.
     **/
    Suspended: GenericModuleError;

    /**
     * User is not suspended.
     **/
    NotSuspended: GenericModuleError;

    /**
     * Nothing to payout.
     **/
    NoPayout: GenericModuleError;

    /**
     * Society already founded.
     **/
    AlreadyFounded: GenericModuleError;

    /**
     * Not enough in pot to accept candidate.
     **/
    InsufficientPot: GenericModuleError;

    /**
     * Member is already vouching or banned from vouching again.
     **/
    AlreadyVouching: GenericModuleError;

    /**
     * Member is not vouching.
     **/
    NotVouchingOnBidder: GenericModuleError;

    /**
     * Cannot remove the head of the chain.
     **/
    Head: GenericModuleError;

    /**
     * Cannot remove the founder.
     **/
    Founder: GenericModuleError;

    /**
     * User has already made a bid.
     **/
    AlreadyBid: GenericModuleError;

    /**
     * User is already a candidate.
     **/
    AlreadyCandidate: GenericModuleError;

    /**
     * User is not a candidate.
     **/
    NotCandidate: GenericModuleError;

    /**
     * Too many members in the society.
     **/
    MaxMembers: GenericModuleError;

    /**
     * The caller is not the founder.
     **/
    NotFounder: GenericModuleError;

    /**
     * The caller is not the head.
     **/
    NotHead: GenericModuleError;

    /**
     * The membership cannot be claimed as the candidate was not clearly approved.
     **/
    NotApproved: GenericModuleError;

    /**
     * The candidate cannot be kicked as the candidate was not clearly rejected.
     **/
    NotRejected: GenericModuleError;

    /**
     * The candidacy cannot be dropped as the candidate was clearly approved.
     **/
    Approved: GenericModuleError;

    /**
     * The candidacy cannot be bestowed as the candidate was clearly rejected.
     **/
    Rejected: GenericModuleError;

    /**
     * The candidacy cannot be concluded as the voting is still in progress.
     **/
    InProgress: GenericModuleError;

    /**
     * The candidacy cannot be pruned until a full additional intake period has passed.
     **/
    TooEarly: GenericModuleError;

    /**
     * The skeptic already voted.
     **/
    Voted: GenericModuleError;

    /**
     * The skeptic need not vote on candidates from expired rounds.
     **/
    Expired: GenericModuleError;

    /**
     * User is not a bidder.
     **/
    NotBidder: GenericModuleError;

    /**
     * There is no defender currently.
     **/
    NoDefender: GenericModuleError;

    /**
     * Group doesn't exist.
     **/
    NotGroup: GenericModuleError;

    /**
     * The member is already elevated to this rank.
     **/
    AlreadyElevated: GenericModuleError;

    /**
     * The skeptic has already been punished for this offence.
     **/
    AlreadyPunished: GenericModuleError;

    /**
     * Funds are insufficient to pay off society debts.
     **/
    InsufficientFunds: GenericModuleError;

    /**
     * The candidate/defender has no stale votes to remove.
     **/
    NoVotes: GenericModuleError;
  };
  recovery: {
    /**
     * User is not allowed to make a call on behalf of this account
     **/
    NotAllowed: GenericModuleError;

    /**
     * Threshold must be greater than zero
     **/
    ZeroThreshold: GenericModuleError;

    /**
     * Friends list must be greater than zero and threshold
     **/
    NotEnoughFriends: GenericModuleError;

    /**
     * Friends list must be less than max friends
     **/
    MaxFriends: GenericModuleError;

    /**
     * Friends list must be sorted and free of duplicates
     **/
    NotSorted: GenericModuleError;

    /**
     * This account is not set up for recovery
     **/
    NotRecoverable: GenericModuleError;

    /**
     * This account is already set up for recovery
     **/
    AlreadyRecoverable: GenericModuleError;

    /**
     * A recovery process has already started for this account
     **/
    AlreadyStarted: GenericModuleError;

    /**
     * A recovery process has not started for this rescuer
     **/
    NotStarted: GenericModuleError;

    /**
     * This account is not a friend who can vouch
     **/
    NotFriend: GenericModuleError;

    /**
     * The friend must wait until the delay period to vouch for this recovery
     **/
    DelayPeriod: GenericModuleError;

    /**
     * This user has already vouched for this recovery
     **/
    AlreadyVouched: GenericModuleError;

    /**
     * The threshold for recovering this account has not been met
     **/
    Threshold: GenericModuleError;

    /**
     * There are still active recovery attempts that need to be closed
     **/
    StillActive: GenericModuleError;

    /**
     * This account is already set up for recovery
     **/
    AlreadyProxy: GenericModuleError;

    /**
     * Some internal state is broken.
     **/
    BadState: GenericModuleError;
  };
  vesting: {
    /**
     * The account given is not vesting.
     **/
    NotVesting: GenericModuleError;

    /**
     * The account already has `MaxVestingSchedules` count of schedules and thus
     * cannot add another one. Consider merging existing schedules in order to add another.
     **/
    AtMaxVestingSchedules: GenericModuleError;

    /**
     * Amount being transferred is too low to create a vesting schedule.
     **/
    AmountLow: GenericModuleError;

    /**
     * An index was out of bounds of the vesting schedules.
     **/
    ScheduleIndexOutOfBounds: GenericModuleError;

    /**
     * Failed to create a new schedule because some parameter was invalid.
     **/
    InvalidScheduleParams: GenericModuleError;
  };
  scheduler: {
    /**
     * Failed to schedule a call
     **/
    FailedToSchedule: GenericModuleError;

    /**
     * Cannot find the scheduled call.
     **/
    NotFound: GenericModuleError;

    /**
     * Given target block number is in the past.
     **/
    TargetBlockNumberInPast: GenericModuleError;

    /**
     * Reschedule failed because it does not change scheduled time.
     **/
    RescheduleNoChange: GenericModuleError;

    /**
     * Attempt to use a non-named function on a named task.
     **/
    Named: GenericModuleError;
  };
  proxy: {
    /**
     * There are too many proxies registered or too many announcements pending.
     **/
    TooMany: GenericModuleError;

    /**
     * Proxy registration not found.
     **/
    NotFound: GenericModuleError;

    /**
     * Sender is not a proxy of the account to be proxied.
     **/
    NotProxy: GenericModuleError;

    /**
     * A call which is incompatible with the proxy type's filter was attempted.
     **/
    Unproxyable: GenericModuleError;

    /**
     * Account is already a proxy.
     **/
    Duplicate: GenericModuleError;

    /**
     * Call may not be made by proxy because it may escalate its privileges.
     **/
    NoPermission: GenericModuleError;

    /**
     * Announcement, if made at all, was made too recently.
     **/
    Unannounced: GenericModuleError;

    /**
     * Cannot add self as proxy.
     **/
    NoSelfProxy: GenericModuleError;
  };
  multisig: {
    /**
     * Threshold must be 2 or greater.
     **/
    MinimumThreshold: GenericModuleError;

    /**
     * Call is already approved by this signatory.
     **/
    AlreadyApproved: GenericModuleError;

    /**
     * Call doesn't need any (more) approvals.
     **/
    NoApprovalsNeeded: GenericModuleError;

    /**
     * There are too few signatories in the list.
     **/
    TooFewSignatories: GenericModuleError;

    /**
     * There are too many signatories in the list.
     **/
    TooManySignatories: GenericModuleError;

    /**
     * The signatories were provided out of order; they should be ordered.
     **/
    SignatoriesOutOfOrder: GenericModuleError;

    /**
     * The sender was contained in the other signatories; it shouldn't be.
     **/
    SenderInSignatories: GenericModuleError;

    /**
     * Multisig operation not found when attempting to cancel.
     **/
    NotFound: GenericModuleError;

    /**
     * Only the account that originally created the multisig is able to cancel it.
     **/
    NotOwner: GenericModuleError;

    /**
     * No timepoint was given, yet the multisig operation is already underway.
     **/
    NoTimepoint: GenericModuleError;

    /**
     * A different timepoint was given to the multisig operation that is underway.
     **/
    WrongTimepoint: GenericModuleError;

    /**
     * A timepoint was given, yet no multisig operation is underway.
     **/
    UnexpectedTimepoint: GenericModuleError;

    /**
     * The maximum weight information provided was too low.
     **/
    MaxWeightTooLow: GenericModuleError;

    /**
     * The data to be stored is already stored.
     **/
    AlreadyStored: GenericModuleError;
  };
  preimage: {
    /**
     * Preimage is too large to store on-chain.
     **/
    TooBig: GenericModuleError;

    /**
     * Preimage has already been noted on-chain.
     **/
    AlreadyNoted: GenericModuleError;

    /**
     * The user is not authorized to perform this action.
     **/
    NotAuthorized: GenericModuleError;

    /**
     * The preimage cannot be removed since it has not yet been noted.
     **/
    NotNoted: GenericModuleError;

    /**
     * A preimage may not be removed when there are outstanding requests.
     **/
    Requested: GenericModuleError;

    /**
     * The preimage request cannot be removed since no outstanding requests exist.
     **/
    NotRequested: GenericModuleError;
  };
  bounties: {
    /**
     * Proposer's balance is too low.
     **/
    InsufficientProposersBalance: GenericModuleError;

    /**
     * No proposal or bounty at that index.
     **/
    InvalidIndex: GenericModuleError;

    /**
     * The reason given is just too big.
     **/
    ReasonTooBig: GenericModuleError;

    /**
     * The bounty status is unexpected.
     **/
    UnexpectedStatus: GenericModuleError;

    /**
     * Require bounty curator.
     **/
    RequireCurator: GenericModuleError;

    /**
     * Invalid bounty value.
     **/
    InvalidValue: GenericModuleError;

    /**
     * Invalid bounty fee.
     **/
    InvalidFee: GenericModuleError;

    /**
     * A bounty payout is pending.
     * To cancel the bounty, you must unassign and slash the curator.
     **/
    PendingPayout: GenericModuleError;

    /**
     * The bounties cannot be claimed/closed because it's still in the countdown period.
     **/
    Premature: GenericModuleError;

    /**
     * The bounty cannot be closed because it has active child bounties.
     **/
    HasActiveChildBounty: GenericModuleError;

    /**
     * Too many approvals are already queued.
     **/
    TooManyQueued: GenericModuleError;
  };
  childBounties: {
    /**
     * The parent bounty is not in active state.
     **/
    ParentBountyNotActive: GenericModuleError;

    /**
     * The bounty balance is not enough to add new child-bounty.
     **/
    InsufficientBountyBalance: GenericModuleError;

    /**
     * Number of child bounties exceeds limit `MaxActiveChildBountyCount`.
     **/
    TooManyChildBounties: GenericModuleError;
  };
  electionProviderMultiPhase: {
    /**
     * Submission was too early.
     **/
    PreDispatchEarlySubmission: GenericModuleError;

    /**
     * Wrong number of winners presented.
     **/
    PreDispatchWrongWinnerCount: GenericModuleError;

    /**
     * Submission was too weak, score-wise.
     **/
    PreDispatchWeakSubmission: GenericModuleError;

    /**
     * The queue was full, and the solution was not better than any of the existing ones.
     **/
    SignedQueueFull: GenericModuleError;

    /**
     * The origin failed to pay the deposit.
     **/
    SignedCannotPayDeposit: GenericModuleError;

    /**
     * Witness data to dispatchable is invalid.
     **/
    SignedInvalidWitness: GenericModuleError;

    /**
     * The signed submission consumes too much weight
     **/
    SignedTooMuchWeight: GenericModuleError;

    /**
     * OCW submitted solution for wrong round
     **/
    OcwCallWrongEra: GenericModuleError;

    /**
     * Snapshot metadata should exist but didn't.
     **/
    MissingSnapshotMetadata: GenericModuleError;

    /**
     * `Self::insert_submission` returned an invalid index.
     **/
    InvalidSubmissionIndex: GenericModuleError;

    /**
     * The call is not allowed at this point.
     **/
    CallNotAllowed: GenericModuleError;

    /**
     * The fallback failed
     **/
    FallbackFailed: GenericModuleError;

    /**
     * Some bound not met
     **/
    BoundNotMet: GenericModuleError;

    /**
     * Submitted solution has too many winners
     **/
    TooManyWinners: GenericModuleError;
  };
  nis: {
    /**
     * The duration of the bid is less than one.
     **/
    DurationTooSmall: GenericModuleError;

    /**
     * The duration is the bid is greater than the number of queues.
     **/
    DurationTooBig: GenericModuleError;

    /**
     * The amount of the bid is less than the minimum allowed.
     **/
    AmountTooSmall: GenericModuleError;

    /**
     * The queue for the bid's duration is full and the amount bid is too low to get in
     * through replacing an existing bid.
     **/
    BidTooLow: GenericModuleError;

    /**
     * Receipt index is unknown.
     **/
    UnknownReceipt: GenericModuleError;

    /**
     * Not the owner of the receipt.
     **/
    NotOwner: GenericModuleError;

    /**
     * Bond not yet at expiry date.
     **/
    NotExpired: GenericModuleError;

    /**
     * The given bid for retraction is not found.
     **/
    UnknownBid: GenericModuleError;

    /**
     * The portion supplied is beyond the value of the receipt.
     **/
    PortionTooBig: GenericModuleError;

    /**
     * Not enough funds are held to pay out.
     **/
    Unfunded: GenericModuleError;

    /**
     * There are enough funds for what is required.
     **/
    AlreadyFunded: GenericModuleError;

    /**
     * The thaw throttle has been reached for this period.
     **/
    Throttled: GenericModuleError;

    /**
     * The operation would result in a receipt worth an insignficant value.
     **/
    MakesDust: GenericModuleError;

    /**
     * The receipt is already communal.
     **/
    AlreadyCommunal: GenericModuleError;

    /**
     * The receipt is already private.
     **/
    AlreadyPrivate: GenericModuleError;
  };
  nisCounterpartBalances: {
    /**
     * Vesting balance too high to send value.
     **/
    VestingBalance: GenericModuleError;

    /**
     * Account liquidity restrictions prevent withdrawal.
     **/
    LiquidityRestrictions: GenericModuleError;

    /**
     * Balance too low to send value.
     **/
    InsufficientBalance: GenericModuleError;

    /**
     * Value too low to create account due to existential deposit.
     **/
    ExistentialDeposit: GenericModuleError;

    /**
     * Transfer/payment would kill account.
     **/
    Expendability: GenericModuleError;

    /**
     * A vesting schedule already exists for this account.
     **/
    ExistingVestingSchedule: GenericModuleError;

    /**
     * Beneficiary account must pre-exist.
     **/
    DeadAccount: GenericModuleError;

    /**
     * Number of named reserves exceed `MaxReserves`.
     **/
    TooManyReserves: GenericModuleError;

    /**
     * Number of holds exceed `MaxHolds`.
     **/
    TooManyHolds: GenericModuleError;

    /**
     * Number of freezes exceed `MaxFreezes`.
     **/
    TooManyFreezes: GenericModuleError;
  };
  voterList: {
    /**
     * A error in the list interface implementation.
     **/
    List: GenericModuleError;
  };
  nominationPools: {
    /**
     * A (bonded) pool id does not exist.
     **/
    PoolNotFound: GenericModuleError;

    /**
     * An account is not a member.
     **/
    PoolMemberNotFound: GenericModuleError;

    /**
     * A reward pool does not exist. In all cases this is a system logic error.
     **/
    RewardPoolNotFound: GenericModuleError;

    /**
     * A sub pool does not exist.
     **/
    SubPoolsNotFound: GenericModuleError;

    /**
     * An account is already delegating in another pool. An account may only belong to one
     * pool at a time.
     **/
    AccountBelongsToOtherPool: GenericModuleError;

    /**
     * The member is fully unbonded (and thus cannot access the bonded and reward pool
     * anymore to, for example, collect rewards).
     **/
    FullyUnbonding: GenericModuleError;

    /**
     * The member cannot unbond further chunks due to reaching the limit.
     **/
    MaxUnbondingLimit: GenericModuleError;

    /**
     * None of the funds can be withdrawn yet because the bonding duration has not passed.
     **/
    CannotWithdrawAny: GenericModuleError;

    /**
     * The amount does not meet the minimum bond to either join or create a pool.
     *
     * The depositor can never unbond to a value less than
     * `Pallet::depositor_min_bond`. The caller does not have nominating
     * permissions for the pool. Members can never unbond to a value below `MinJoinBond`.
     **/
    MinimumBondNotMet: GenericModuleError;

    /**
     * The transaction could not be executed due to overflow risk for the pool.
     **/
    OverflowRisk: GenericModuleError;

    /**
     * A pool must be in [`PoolState::Destroying`] in order for the depositor to unbond or for
     * other members to be permissionlessly unbonded.
     **/
    NotDestroying: GenericModuleError;

    /**
     * The caller does not have nominating permissions for the pool.
     **/
    NotNominator: GenericModuleError;

    /**
     * Either a) the caller cannot make a valid kick or b) the pool is not destroying.
     **/
    NotKickerOrDestroying: GenericModuleError;

    /**
     * The pool is not open to join
     **/
    NotOpen: GenericModuleError;

    /**
     * The system is maxed out on pools.
     **/
    MaxPools: GenericModuleError;

    /**
     * Too many members in the pool or system.
     **/
    MaxPoolMembers: GenericModuleError;

    /**
     * The pools state cannot be changed.
     **/
    CanNotChangeState: GenericModuleError;

    /**
     * The caller does not have adequate permissions.
     **/
    DoesNotHavePermission: GenericModuleError;

    /**
     * Metadata exceeds [`Config::MaxMetadataLen`]
     **/
    MetadataExceedsMaxLen: GenericModuleError;

    /**
     * Some error occurred that should never happen. This should be reported to the
     * maintainers.
     **/
    Defensive: GenericModuleError;

    /**
     * Partial unbonding now allowed permissionlessly.
     **/
    PartialUnbondNotAllowedPermissionlessly: GenericModuleError;

    /**
     * The pool's max commission cannot be set higher than the existing value.
     **/
    MaxCommissionRestricted: GenericModuleError;

    /**
     * The supplied commission exceeds the max allowed commission.
     **/
    CommissionExceedsMaximum: GenericModuleError;

    /**
     * The supplied commission exceeds global maximum commission.
     **/
    CommissionExceedsGlobalMaximum: GenericModuleError;

    /**
     * Not enough blocks have surpassed since the last commission update.
     **/
    CommissionChangeThrottled: GenericModuleError;

    /**
     * The submitted changes to commission change rate are not allowed.
     **/
    CommissionChangeRateNotAllowed: GenericModuleError;

    /**
     * There is no pending commission to claim.
     **/
    NoPendingCommission: GenericModuleError;

    /**
     * No commission current has been set.
     **/
    NoCommissionCurrentSet: GenericModuleError;

    /**
     * Pool id currently in use.
     **/
    PoolIdInUse: GenericModuleError;

    /**
     * Pool id provided is not correct/usable.
     **/
    InvalidPoolId: GenericModuleError;

    /**
     * Bonding extra is restricted to the exact pending reward amount.
     **/
    BondExtraRestricted: GenericModuleError;
  };
  fastUnstake: {
    /**
     * The provided Controller account was not found.
     *
     * This means that the given account is not bonded.
     **/
    NotController: GenericModuleError;

    /**
     * The bonded account has already been queued.
     **/
    AlreadyQueued: GenericModuleError;

    /**
     * The bonded account has active unlocking chunks.
     **/
    NotFullyBonded: GenericModuleError;

    /**
     * The provided un-staker is not in the `Queue`.
     **/
    NotQueued: GenericModuleError;

    /**
     * The provided un-staker is already in Head, and cannot deregister.
     **/
    AlreadyHead: GenericModuleError;

    /**
     * The call is not allowed at this point because the pallet is not active.
     **/
    CallNotAllowed: GenericModuleError;
  };
  configuration: {
    /**
     * The new value for a configuration parameter is invalid.
     **/
    InvalidNewValue: GenericModuleError;
  };
  paraInclusion: {
    /**
     * Validator indices are out of order or contains duplicates.
     **/
    UnsortedOrDuplicateValidatorIndices: GenericModuleError;

    /**
     * Dispute statement sets are out of order or contain duplicates.
     **/
    UnsortedOrDuplicateDisputeStatementSet: GenericModuleError;

    /**
     * Backed candidates are out of order (core index) or contain duplicates.
     **/
    UnsortedOrDuplicateBackedCandidates: GenericModuleError;

    /**
     * A different relay parent was provided compared to the on-chain stored one.
     **/
    UnexpectedRelayParent: GenericModuleError;

    /**
     * Availability bitfield has unexpected size.
     **/
    WrongBitfieldSize: GenericModuleError;

    /**
     * Bitfield consists of zeros only.
     **/
    BitfieldAllZeros: GenericModuleError;

    /**
     * Multiple bitfields submitted by same validator or validators out of order by index.
     **/
    BitfieldDuplicateOrUnordered: GenericModuleError;

    /**
     * Validator index out of bounds.
     **/
    ValidatorIndexOutOfBounds: GenericModuleError;

    /**
     * Invalid signature
     **/
    InvalidBitfieldSignature: GenericModuleError;

    /**
     * Candidate submitted but para not scheduled.
     **/
    UnscheduledCandidate: GenericModuleError;

    /**
     * Candidate scheduled despite pending candidate already existing for the para.
     **/
    CandidateScheduledBeforeParaFree: GenericModuleError;

    /**
     * Scheduled cores out of order.
     **/
    ScheduledOutOfOrder: GenericModuleError;

    /**
     * Head data exceeds the configured maximum.
     **/
    HeadDataTooLarge: GenericModuleError;

    /**
     * Code upgrade prematurely.
     **/
    PrematureCodeUpgrade: GenericModuleError;

    /**
     * Output code is too large
     **/
    NewCodeTooLarge: GenericModuleError;

    /**
     * The candidate's relay-parent was not allowed. Either it was
     * not recent enough or it didn't advance based on the last parachain block.
     **/
    DisallowedRelayParent: GenericModuleError;

    /**
     * Failed to compute group index for the core: either it's out of bounds
     * or the relay parent doesn't belong to the current session.
     **/
    InvalidAssignment: GenericModuleError;

    /**
     * Invalid group index in core assignment.
     **/
    InvalidGroupIndex: GenericModuleError;

    /**
     * Insufficient (non-majority) backing.
     **/
    InsufficientBacking: GenericModuleError;

    /**
     * Invalid (bad signature, unknown validator, etc.) backing.
     **/
    InvalidBacking: GenericModuleError;

    /**
     * Collator did not sign PoV.
     **/
    NotCollatorSigned: GenericModuleError;

    /**
     * The validation data hash does not match expected.
     **/
    ValidationDataHashMismatch: GenericModuleError;

    /**
     * The downward message queue is not processed correctly.
     **/
    IncorrectDownwardMessageHandling: GenericModuleError;

    /**
     * At least one upward message sent does not pass the acceptance criteria.
     **/
    InvalidUpwardMessages: GenericModuleError;

    /**
     * The candidate didn't follow the rules of HRMP watermark advancement.
     **/
    HrmpWatermarkMishandling: GenericModuleError;

    /**
     * The HRMP messages sent by the candidate is not valid.
     **/
    InvalidOutboundHrmp: GenericModuleError;

    /**
     * The validation code hash of the candidate is not valid.
     **/
    InvalidValidationCodeHash: GenericModuleError;

    /**
     * The `para_head` hash in the candidate descriptor doesn't match the hash of the actual
     * para head in the commitments.
     **/
    ParaHeadMismatch: GenericModuleError;

    /**
     * A bitfield that references a freed core,
     * either intentionally or as part of a concluded
     * invalid dispute.
     **/
    BitfieldReferencesFreedCore: GenericModuleError;
  };
  paraInherent: {
    /**
     * Inclusion inherent called more than once per block.
     **/
    TooManyInclusionInherents: GenericModuleError;

    /**
     * The hash of the submitted parent header doesn't correspond to the saved block hash of
     * the parent.
     **/
    InvalidParentHeader: GenericModuleError;

    /**
     * Disputed candidate that was concluded invalid.
     **/
    CandidateConcludedInvalid: GenericModuleError;

    /**
     * The data given to the inherent will result in an overweight block.
     **/
    InherentOverweight: GenericModuleError;

    /**
     * The ordering of dispute statements was invalid.
     **/
    DisputeStatementsUnsortedOrDuplicates: GenericModuleError;

    /**
     * A dispute statement was invalid.
     **/
    DisputeInvalid: GenericModuleError;
  };
  paras: {
    /**
     * Para is not registered in our system.
     **/
    NotRegistered: GenericModuleError;

    /**
     * Para cannot be onboarded because it is already tracked by our system.
     **/
    CannotOnboard: GenericModuleError;

    /**
     * Para cannot be offboarded at this time.
     **/
    CannotOffboard: GenericModuleError;

    /**
     * Para cannot be upgraded to a lease holding parachain.
     **/
    CannotUpgrade: GenericModuleError;

    /**
     * Para cannot be downgraded to an on-demand parachain.
     **/
    CannotDowngrade: GenericModuleError;

    /**
     * The statement for PVF pre-checking is stale.
     **/
    PvfCheckStatementStale: GenericModuleError;

    /**
     * The statement for PVF pre-checking is for a future session.
     **/
    PvfCheckStatementFuture: GenericModuleError;

    /**
     * Claimed validator index is out of bounds.
     **/
    PvfCheckValidatorIndexOutOfBounds: GenericModuleError;

    /**
     * The signature for the PVF pre-checking is invalid.
     **/
    PvfCheckInvalidSignature: GenericModuleError;

    /**
     * The given validator already has cast a vote.
     **/
    PvfCheckDoubleVote: GenericModuleError;

    /**
     * The given PVF does not exist at the moment of process a vote.
     **/
    PvfCheckSubjectInvalid: GenericModuleError;

    /**
     * Parachain cannot currently schedule a code upgrade.
     **/
    CannotUpgradeCode: GenericModuleError;
  };
  hrmp: {
    /**
     * The sender tried to open a channel to themselves.
     **/
    OpenHrmpChannelToSelf: GenericModuleError;

    /**
     * The recipient is not a valid para.
     **/
    OpenHrmpChannelInvalidRecipient: GenericModuleError;

    /**
     * The requested capacity is zero.
     **/
    OpenHrmpChannelZeroCapacity: GenericModuleError;

    /**
     * The requested capacity exceeds the global limit.
     **/
    OpenHrmpChannelCapacityExceedsLimit: GenericModuleError;

    /**
     * The requested maximum message size is 0.
     **/
    OpenHrmpChannelZeroMessageSize: GenericModuleError;

    /**
     * The open request requested the message size that exceeds the global limit.
     **/
    OpenHrmpChannelMessageSizeExceedsLimit: GenericModuleError;

    /**
     * The channel already exists
     **/
    OpenHrmpChannelAlreadyExists: GenericModuleError;

    /**
     * There is already a request to open the same channel.
     **/
    OpenHrmpChannelAlreadyRequested: GenericModuleError;

    /**
     * The sender already has the maximum number of allowed outbound channels.
     **/
    OpenHrmpChannelLimitExceeded: GenericModuleError;

    /**
     * The channel from the sender to the origin doesn't exist.
     **/
    AcceptHrmpChannelDoesntExist: GenericModuleError;

    /**
     * The channel is already confirmed.
     **/
    AcceptHrmpChannelAlreadyConfirmed: GenericModuleError;

    /**
     * The recipient already has the maximum number of allowed inbound channels.
     **/
    AcceptHrmpChannelLimitExceeded: GenericModuleError;

    /**
     * The origin tries to close a channel where it is neither the sender nor the recipient.
     **/
    CloseHrmpChannelUnauthorized: GenericModuleError;

    /**
     * The channel to be closed doesn't exist.
     **/
    CloseHrmpChannelDoesntExist: GenericModuleError;

    /**
     * The channel close request is already requested.
     **/
    CloseHrmpChannelAlreadyUnderway: GenericModuleError;

    /**
     * Canceling is requested by neither the sender nor recipient of the open channel request.
     **/
    CancelHrmpOpenChannelUnauthorized: GenericModuleError;

    /**
     * The open request doesn't exist.
     **/
    OpenHrmpChannelDoesntExist: GenericModuleError;

    /**
     * Cannot cancel an HRMP open channel request because it is already confirmed.
     **/
    OpenHrmpChannelAlreadyConfirmed: GenericModuleError;

    /**
     * The provided witness data is wrong.
     **/
    WrongWitness: GenericModuleError;
  };
  parasDisputes: {
    /**
     * Duplicate dispute statement sets provided.
     **/
    DuplicateDisputeStatementSets: GenericModuleError;

    /**
     * Ancient dispute statement provided.
     **/
    AncientDisputeStatement: GenericModuleError;

    /**
     * Validator index on statement is out of bounds for session.
     **/
    ValidatorIndexOutOfBounds: GenericModuleError;

    /**
     * Invalid signature on statement.
     **/
    InvalidSignature: GenericModuleError;

    /**
     * Validator vote submitted more than once to dispute.
     **/
    DuplicateStatement: GenericModuleError;

    /**
     * A dispute where there are only votes on one side.
     **/
    SingleSidedDispute: GenericModuleError;

    /**
     * A dispute vote from a malicious backer.
     **/
    MaliciousBacker: GenericModuleError;

    /**
     * No backing votes were provides along dispute statements.
     **/
    MissingBackingVotes: GenericModuleError;

    /**
     * Unconfirmed dispute statement sets provided.
     **/
    UnconfirmedDispute: GenericModuleError;
  };
  parasSlashing: {
    /**
     * The key ownership proof is invalid.
     **/
    InvalidKeyOwnershipProof: GenericModuleError;

    /**
     * The session index is too old or invalid.
     **/
    InvalidSessionIndex: GenericModuleError;

    /**
     * The candidate hash is invalid.
     **/
    InvalidCandidateHash: GenericModuleError;

    /**
     * There is no pending slash for the given validator index and time
     * slot.
     **/
    InvalidValidatorIndex: GenericModuleError;

    /**
     * The validator index does not match the validator id.
     **/
    ValidatorIndexIdMismatch: GenericModuleError;

    /**
     * The given slashing report is valid but already previously reported.
     **/
    DuplicateSlashingReport: GenericModuleError;
  };
  registrar: {
    /**
     * The ID is not registered.
     **/
    NotRegistered: GenericModuleError;

    /**
     * The ID is already registered.
     **/
    AlreadyRegistered: GenericModuleError;

    /**
     * The caller is not the owner of this Id.
     **/
    NotOwner: GenericModuleError;

    /**
     * Invalid para code size.
     **/
    CodeTooLarge: GenericModuleError;

    /**
     * Invalid para head data size.
     **/
    HeadDataTooLarge: GenericModuleError;

    /**
     * Para is not a Parachain.
     **/
    NotParachain: GenericModuleError;

    /**
     * Para is not a Parathread (on-demand parachain).
     **/
    NotParathread: GenericModuleError;

    /**
     * Cannot deregister para
     **/
    CannotDeregister: GenericModuleError;

    /**
     * Cannot schedule downgrade of lease holding parachain to on-demand parachain
     **/
    CannotDowngrade: GenericModuleError;

    /**
     * Cannot schedule upgrade of on-demand parachain to lease holding parachain
     **/
    CannotUpgrade: GenericModuleError;

    /**
     * Para is locked from manipulation by the manager. Must use parachain or relay chain
     * governance.
     **/
    ParaLocked: GenericModuleError;

    /**
     * The ID given for registration has not been reserved.
     **/
    NotReserved: GenericModuleError;

    /**
     * Registering parachain with empty code is not allowed.
     **/
    EmptyCode: GenericModuleError;

    /**
     * Cannot perform a parachain slot / lifecycle swap. Check that the state of both paras
     * are correct for the swap to work.
     **/
    CannotSwap: GenericModuleError;
  };
  slots: {
    /**
     * The parachain ID is not onboarding.
     **/
    ParaNotOnboarding: GenericModuleError;

    /**
     * There was an error with the lease.
     **/
    LeaseError: GenericModuleError;
  };
  auctions: {
    /**
     * This auction is already in progress.
     **/
    AuctionInProgress: GenericModuleError;

    /**
     * The lease period is in the past.
     **/
    LeasePeriodInPast: GenericModuleError;

    /**
     * Para is not registered
     **/
    ParaNotRegistered: GenericModuleError;

    /**
     * Not a current auction.
     **/
    NotCurrentAuction: GenericModuleError;

    /**
     * Not an auction.
     **/
    NotAuction: GenericModuleError;

    /**
     * Auction has already ended.
     **/
    AuctionEnded: GenericModuleError;

    /**
     * The para is already leased out for part of this range.
     **/
    AlreadyLeasedOut: GenericModuleError;
  };
  crowdloan: {
    /**
     * The current lease period is more than the first lease period.
     **/
    FirstPeriodInPast: GenericModuleError;

    /**
     * The first lease period needs to at least be less than 3 `max_value`.
     **/
    FirstPeriodTooFarInFuture: GenericModuleError;

    /**
     * Last lease period must be greater than first lease period.
     **/
    LastPeriodBeforeFirstPeriod: GenericModuleError;

    /**
     * The last lease period cannot be more than 3 periods after the first period.
     **/
    LastPeriodTooFarInFuture: GenericModuleError;

    /**
     * The campaign ends before the current block number. The end must be in the future.
     **/
    CannotEndInPast: GenericModuleError;

    /**
     * The end date for this crowdloan is not sensible.
     **/
    EndTooFarInFuture: GenericModuleError;

    /**
     * There was an overflow.
     **/
    Overflow: GenericModuleError;

    /**
     * The contribution was below the minimum, `MinContribution`.
     **/
    ContributionTooSmall: GenericModuleError;

    /**
     * Invalid fund index.
     **/
    InvalidParaId: GenericModuleError;

    /**
     * Contributions exceed maximum amount.
     **/
    CapExceeded: GenericModuleError;

    /**
     * The contribution period has already ended.
     **/
    ContributionPeriodOver: GenericModuleError;

    /**
     * The origin of this call is invalid.
     **/
    InvalidOrigin: GenericModuleError;

    /**
     * This crowdloan does not correspond to a parachain.
     **/
    NotParachain: GenericModuleError;

    /**
     * This parachain lease is still active and retirement cannot yet begin.
     **/
    LeaseActive: GenericModuleError;

    /**
     * This parachain's bid or lease is still active and withdraw cannot yet begin.
     **/
    BidOrLeaseActive: GenericModuleError;

    /**
     * The crowdloan has not yet ended.
     **/
    FundNotEnded: GenericModuleError;

    /**
     * There are no contributions stored in this crowdloan.
     **/
    NoContributions: GenericModuleError;

    /**
     * The crowdloan is not ready to dissolve. Potentially still has a slot or in retirement
     * period.
     **/
    NotReadyToDissolve: GenericModuleError;

    /**
     * Invalid signature.
     **/
    InvalidSignature: GenericModuleError;

    /**
     * The provided memo is too large.
     **/
    MemoTooLarge: GenericModuleError;

    /**
     * The fund is already in `NewRaise`
     **/
    AlreadyInNewRaise: GenericModuleError;

    /**
     * No contributions allowed during the VRF delay
     **/
    VrfDelayInProgress: GenericModuleError;

    /**
     * A lease period has not started yet, due to an offset in the starting block.
     **/
    NoLeasePeriod: GenericModuleError;
  };
  stateTrieMigration: {
    /**
     * Max signed limits not respected.
     **/
    MaxSignedLimits: GenericModuleError;

    /**
     * A key was longer than the configured maximum.
     *
     * This means that the migration halted at the current [`Progress`] and
     * can be resumed with a larger [`crate::Config::MaxKeyLen`] value.
     * Retrying with the same [`crate::Config::MaxKeyLen`] value will not work.
     * The value should only be increased to avoid a storage migration for the currently
     * stored [`crate::Progress::LastKey`].
     **/
    KeyTooLong: GenericModuleError;

    /**
     * submitter does not have enough funds.
     **/
    NotEnoughFunds: GenericModuleError;

    /**
     * Bad witness data provided.
     **/
    BadWitness: GenericModuleError;

    /**
     * Signed migration is not allowed because the maximum limit is not set yet.
     **/
    SignedMigrationNotAllowed: GenericModuleError;

    /**
     * Bad child root provided.
     **/
    BadChildRoot: GenericModuleError;
  };
  xcmPallet: {
    /**
     * The desired destination was unreachable, generally because there is a no way of routing
     * to it.
     **/
    Unreachable: GenericModuleError;

    /**
     * There was some other issue (i.e. not to do with routing) in sending the message.
     * Perhaps a lack of space for buffering the message.
     **/
    SendFailure: GenericModuleError;

    /**
     * The message execution fails the filter.
     **/
    Filtered: GenericModuleError;

    /**
     * The message's weight could not be determined.
     **/
    UnweighableMessage: GenericModuleError;

    /**
     * The destination `MultiLocation` provided cannot be inverted.
     **/
    DestinationNotInvertible: GenericModuleError;

    /**
     * The assets to be sent are empty.
     **/
    Empty: GenericModuleError;

    /**
     * Could not re-anchor the assets to declare the fees for the destination chain.
     **/
    CannotReanchor: GenericModuleError;

    /**
     * Too many assets have been attempted for transfer.
     **/
    TooManyAssets: GenericModuleError;

    /**
     * Origin is invalid for sending.
     **/
    InvalidOrigin: GenericModuleError;

    /**
     * The version of the `Versioned` value used is not able to be interpreted.
     **/
    BadVersion: GenericModuleError;

    /**
     * The given location could not be used (e.g. because it cannot be expressed in the
     * desired version of XCM).
     **/
    BadLocation: GenericModuleError;

    /**
     * The referenced subscription could not be found.
     **/
    NoSubscription: GenericModuleError;

    /**
     * The location is invalid since it already has a subscription from us.
     **/
    AlreadySubscribed: GenericModuleError;

    /**
     * Invalid asset for the operation.
     **/
    InvalidAsset: GenericModuleError;

    /**
     * The owner does not own (all) of the asset that they wish to do the operation on.
     **/
    LowBalance: GenericModuleError;

    /**
     * The asset owner has too many locks on the asset.
     **/
    TooManyLocks: GenericModuleError;

    /**
     * The given account is not an identifiable sovereign account for any location.
     **/
    AccountNotSovereign: GenericModuleError;

    /**
     * The operation required fees to be paid which the initiator could not meet.
     **/
    FeesNotMet: GenericModuleError;

    /**
     * A remote lock with the corresponding data could not be found.
     **/
    LockNotFound: GenericModuleError;

    /**
     * The unlock operation cannot succeed because there are still consumers of the lock.
     **/
    InUse: GenericModuleError;
  };
  messageQueue: {
    /**
     * Page is not reapable because it has items remaining to be processed and is not old
     * enough.
     **/
    NotReapable: GenericModuleError;

    /**
     * Page to be reaped does not exist.
     **/
    NoPage: GenericModuleError;

    /**
     * The referenced message could not be found.
     **/
    NoMessage: GenericModuleError;

    /**
     * The message was already processed and cannot be processed again.
     **/
    AlreadyProcessed: GenericModuleError;

    /**
     * The message is queued for future execution.
     **/
    Queued: GenericModuleError;

    /**
     * There is temporarily not enough weight to continue servicing messages.
     **/
    InsufficientWeight: GenericModuleError;

    /**
     * This message is temporarily unprocessable.
     *
     * Such errors are expected, but not guaranteed, to resolve themselves eventually through
     * retrying.
     **/
    TemporarilyUnprocessable: GenericModuleError;

    /**
     * The queue is paused and no message can be executed from it.
     *
     * This can change at any time and may resolve in the future by re-trying.
     **/
    QueuePaused: GenericModuleError;
  };
}
