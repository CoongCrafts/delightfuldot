import { stringLowerFirst } from '@polkadot/util';
import { StorageEntry } from '@delightfuldot/codecs';
import { normalizeName } from '@delightfuldot/utils';
import { ApiGen } from '../generator';
import { commentBlock } from './utils';

export class QueryGen extends ApiGen {
  generate() {
    const { pallets } = this.metadata;

    this.typesGen.clearCache();

    let defTypeOut = '';
    for (let pallet of pallets) {
      const storage = pallet.storage;
      if (!storage) {
        continue;
      }

      const queries = storage.entries.map((one) => this.#generateEntry(one));

      defTypeOut += `${stringLowerFirst(pallet.name)}: {${queries
        .map(({ name, valueType, keyType, docs }) => `${commentBlock(docs)}${name}(${keyType}): Promise<${valueType}>`)
        .join(',\n')}},`;
    }

    // TODO improve this!
    const toImportTypes = [...this.typesGen.usedNameTypes];

    return `
// Generated by @delightfuldot/codegen

import { GenericChainStorage } from "@delightfuldot/types";
import {${toImportTypes.join(', ')}} from './types';

export interface ChainStorage extends GenericChainStorage {
  ${defTypeOut}
}
  `;
  }

  #generateEntry(entry: StorageEntry) {
    const { name, type, docs } = entry;

    let valueType, keyType;
    if (type.tag === 'Plain') {
      valueType = this.typesGen.generateType(type.value.valueTypeId, 1);
    } else if (type.tag === 'Map') {
      valueType = this.typesGen.generateType(type.value.valueTypeId, 1);
      keyType = this.typesGen.generateType(type.value.keyTypeId, 1);
    } else {
      throw Error('Invalid entry type!');
    }

    return {
      name: normalizeName(name),
      valueType,
      keyType: keyType ? `arg: ${keyType}` : '',
      docs,
    };
  }
}
