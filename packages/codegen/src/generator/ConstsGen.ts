import { stringLowerFirst } from '@polkadot/util';
import { normalizeName } from '@delightfuldot/codecs';
import { BASE_KNOWN_TYPES, TypesGen } from './TypesGen';

export class ConstsGen {
  typesGen: TypesGen;

  constructor(typesGen: TypesGen) {
    this.typesGen = typesGen;
  }

  get metadata() {
    return this.typesGen.metadata;
  }

  generate() {
    const { pallets } = this.metadata;

    this.typesGen.clearCache();

    let defTypeOut = '';
    for (let pallet of pallets) {
      const typedConstants = pallet.constants.map((one) => [
        normalizeName(one.name),
        this.typesGen.generateType(one.typeId, 1),
      ]);

      defTypeOut += `${stringLowerFirst(pallet.name)}: {${typedConstants
        .map(([name, type]) => `${name}: ${type}`)
        .join(',\n')}},`;
    }

    // TODO improve this!
    const toImportTypes = [...this.typesGen.usedNameTypes];

    return `
// Generated by @delightfuldot/codegen

import { GenericChainConsts } from "@delightfuldot/types";
import {${toImportTypes.join(', ')}} from './types';

export interface ChainConsts extends GenericChainConsts {
  ${defTypeOut}
}
  `;
  }
}
