{
  "magicNumber": 1635018093,
  "version": 14,
  "types": [
    {
      "id": 0,
      "path": ["sp_core", "crypto", "AccountId32"],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 1,
              "typeName": "[u8; 32]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 1,
      "path": [],
      "params": [],
      "type": {
        "tag": "SizedVec",
        "value": {
          "len": 32,
          "typeParam": 2
        }
      },
      "docs": []
    },
    {
      "id": 2,
      "path": [],
      "params": [],
      "type": {
        "tag": "Primitive",
        "value": {
          "kind": "u8"
        }
      },
      "docs": []
    },
    {
      "id": 3,
      "path": ["frame_system", "AccountInfo"],
      "params": [
        {
          "name": "Index",
          "typeId": 4
        },
        {
          "name": "AccountData",
          "typeId": 5
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "nonce",
              "typeId": 4,
              "typeName": "Index",
              "docs": []
            },
            {
              "name": "consumers",
              "typeId": 4,
              "typeName": "RefCount",
              "docs": []
            },
            {
              "name": "providers",
              "typeId": 4,
              "typeName": "RefCount",
              "docs": []
            },
            {
              "name": "sufficients",
              "typeId": 4,
              "typeName": "RefCount",
              "docs": []
            },
            {
              "name": "data",
              "typeId": 5,
              "typeName": "AccountData",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 4,
      "path": [],
      "params": [],
      "type": {
        "tag": "Primitive",
        "value": {
          "kind": "u32"
        }
      },
      "docs": []
    },
    {
      "id": 5,
      "path": ["pallet_balances", "AccountData"],
      "params": [
        {
          "name": "Balance",
          "typeId": 6
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "free",
              "typeId": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "reserved",
              "typeId": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "misc_frozen",
              "typeId": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "fee_frozen",
              "typeId": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 6,
      "path": [],
      "params": [],
      "type": {
        "tag": "Primitive",
        "value": {
          "kind": "u128"
        }
      },
      "docs": []
    },
    {
      "id": 7,
      "path": ["frame_support", "dispatch", "PerDispatchClass"],
      "params": [
        {
          "name": "T",
          "typeId": 8
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "normal",
              "typeId": 8,
              "typeName": "T",
              "docs": []
            },
            {
              "name": "operational",
              "typeId": 8,
              "typeName": "T",
              "docs": []
            },
            {
              "name": "mandatory",
              "typeId": 8,
              "typeName": "T",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 8,
      "path": ["sp_weights", "weight_v2", "Weight"],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "ref_time",
              "typeId": 9,
              "typeName": "u64",
              "docs": []
            },
            {
              "name": "proof_size",
              "typeId": 9,
              "typeName": "u64",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 9,
      "path": [],
      "params": [],
      "type": {
        "tag": "Compact",
        "value": {
          "typeParam": 10
        }
      },
      "docs": []
    },
    {
      "id": 10,
      "path": [],
      "params": [],
      "type": {
        "tag": "Primitive",
        "value": {
          "kind": "u64"
        }
      },
      "docs": []
    },
    {
      "id": 11,
      "path": ["primitive_types", "H256"],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 1,
              "typeName": "[u8; 32]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 12,
      "path": [],
      "params": [],
      "type": {
        "tag": "Vec",
        "value": {
          "typeParam": 2
        }
      },
      "docs": []
    },
    {
      "id": 13,
      "path": ["sp_runtime", "generic", "digest", "Digest"],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "logs",
              "typeId": 14,
              "typeName": "Vec<DigestItem>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 14,
      "path": [],
      "params": [],
      "type": {
        "tag": "Vec",
        "value": {
          "typeParam": 15
        }
      },
      "docs": []
    },
    {
      "id": 15,
      "path": ["sp_runtime", "generic", "digest", "DigestItem"],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "PreRuntime",
              "fields": [
                {
                  "typeId": 16,
                  "typeName": "ConsensusEngineId",
                  "docs": []
                },
                {
                  "typeId": 12,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "Consensus",
              "fields": [
                {
                  "typeId": 16,
                  "typeName": "ConsensusEngineId",
                  "docs": []
                },
                {
                  "typeId": 12,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "Seal",
              "fields": [
                {
                  "typeId": 16,
                  "typeName": "ConsensusEngineId",
                  "docs": []
                },
                {
                  "typeId": 12,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "Other",
              "fields": [
                {
                  "typeId": 12,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "RuntimeEnvironmentUpdated",
              "fields": [],
              "index": 8,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 16,
      "path": [],
      "params": [],
      "type": {
        "tag": "SizedVec",
        "value": {
          "len": 4,
          "typeParam": 2
        }
      },
      "docs": []
    },
    {
      "id": 17,
      "path": [],
      "params": [],
      "type": {
        "tag": "Vec",
        "value": {
          "typeParam": 18
        }
      },
      "docs": []
    },
    {
      "id": 18,
      "path": ["frame_system", "EventRecord"],
      "params": [
        {
          "name": "E",
          "typeId": 19
        },
        {
          "name": "T",
          "typeId": 11
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "phase",
              "typeId": 42,
              "typeName": "Phase",
              "docs": []
            },
            {
              "name": "event",
              "typeId": 19,
              "typeName": "E",
              "docs": []
            },
            {
              "name": "topics",
              "typeId": 43,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 19,
      "path": ["node_template_runtime", "RuntimeEvent"],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "System",
              "fields": [
                {
                  "typeId": 20,
                  "typeName": "frame_system::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Grandpa",
              "fields": [
                {
                  "typeId": 29,
                  "typeName": "pallet_grandpa::Event",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "Balances",
              "fields": [
                {
                  "typeId": 34,
                  "typeName": "pallet_balances::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "TransactionPayment",
              "fields": [
                {
                  "typeId": 36,
                  "typeName": "pallet_transaction_payment::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "Sudo",
              "fields": [
                {
                  "typeId": 37,
                  "typeName": "pallet_sudo::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "TemplateModule",
              "fields": [
                {
                  "typeId": 41,
                  "typeName": "pallet_template::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 20,
      "path": ["frame_system", "pallet", "Event"],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "ExtrinsicSuccess",
              "fields": [
                {
                  "name": "dispatch_info",
                  "typeId": 21,
                  "typeName": "DispatchInfo",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": ["An extrinsic completed successfully."]
            },
            {
              "name": "ExtrinsicFailed",
              "fields": [
                {
                  "name": "dispatch_error",
                  "typeId": 24,
                  "typeName": "DispatchError",
                  "docs": []
                },
                {
                  "name": "dispatch_info",
                  "typeId": 21,
                  "typeName": "DispatchInfo",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": ["An extrinsic failed."]
            },
            {
              "name": "CodeUpdated",
              "fields": [],
              "index": 2,
              "docs": ["`:code` was updated."]
            },
            {
              "name": "NewAccount",
              "fields": [
                {
                  "name": "account",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": ["A new account was created."]
            },
            {
              "name": "KilledAccount",
              "fields": [
                {
                  "name": "account",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": ["An account was reaped."]
            },
            {
              "name": "Remarked",
              "fields": [
                {
                  "name": "sender",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "hash",
                  "typeId": 11,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": ["On on-chain remark happened."]
            }
          ]
        }
      },
      "docs": ["Event for the System pallet."]
    },
    {
      "id": 21,
      "path": ["frame_support", "dispatch", "DispatchInfo"],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "weight",
              "typeId": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "class",
              "typeId": 22,
              "typeName": "DispatchClass",
              "docs": []
            },
            {
              "name": "pays_fee",
              "typeId": 23,
              "typeName": "Pays",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 22,
      "path": ["frame_support", "dispatch", "DispatchClass"],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Normal",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Operational",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Mandatory",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 23,
      "path": ["frame_support", "dispatch", "Pays"],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Yes",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "No",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 24,
      "path": ["sp_runtime", "DispatchError"],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Other",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "CannotLookup",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "BadOrigin",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "Module",
              "fields": [
                {
                  "typeId": 25,
                  "typeName": "ModuleError",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "ConsumerRemaining",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "NoProviders",
              "fields": [],
              "index": 5,
              "docs": []
            },
            {
              "name": "TooManyConsumers",
              "fields": [],
              "index": 6,
              "docs": []
            },
            {
              "name": "Token",
              "fields": [
                {
                  "typeId": 26,
                  "typeName": "TokenError",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "Arithmetic",
              "fields": [
                {
                  "typeId": 27,
                  "typeName": "ArithmeticError",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            },
            {
              "name": "Transactional",
              "fields": [
                {
                  "typeId": 28,
                  "typeName": "TransactionalError",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": []
            },
            {
              "name": "Exhausted",
              "fields": [],
              "index": 10,
              "docs": []
            },
            {
              "name": "Corruption",
              "fields": [],
              "index": 11,
              "docs": []
            },
            {
              "name": "Unavailable",
              "fields": [],
              "index": 12,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 25,
      "path": ["sp_runtime", "ModuleError"],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "index",
              "typeId": 2,
              "typeName": "u8",
              "docs": []
            },
            {
              "name": "error",
              "typeId": 16,
              "typeName": "[u8; MAX_MODULE_ERROR_ENCODED_SIZE]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 26,
      "path": ["sp_runtime", "TokenError"],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "NoFunds",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "WouldDie",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "BelowMinimum",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "CannotCreate",
              "fields": [],
              "index": 3,
              "docs": []
            },
            {
              "name": "UnknownAsset",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "Frozen",
              "fields": [],
              "index": 5,
              "docs": []
            },
            {
              "name": "Unsupported",
              "fields": [],
              "index": 6,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 27,
      "path": ["sp_arithmetic", "ArithmeticError"],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Underflow",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Overflow",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "DivisionByZero",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 28,
      "path": ["sp_runtime", "TransactionalError"],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "LimitReached",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "NoLayer",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 29,
      "path": ["pallet_grandpa", "pallet", "Event"],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "NewAuthorities",
              "fields": [
                {
                  "name": "authority_set",
                  "typeId": 30,
                  "typeName": "AuthorityList",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": ["New authority set has been applied."]
            },
            {
              "name": "Paused",
              "fields": [],
              "index": 1,
              "docs": ["Current authority set has been paused."]
            },
            {
              "name": "Resumed",
              "fields": [],
              "index": 2,
              "docs": ["Current authority set has been resumed."]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 30,
      "path": [],
      "params": [],
      "type": {
        "tag": "Vec",
        "value": {
          "typeParam": 31
        }
      },
      "docs": []
    },
    {
      "id": 31,
      "path": [],
      "params": [],
      "type": {
        "tag": "Tuple",
        "value": {
          "fields": [32, 10]
        }
      },
      "docs": []
    },
    {
      "id": 32,
      "path": ["sp_finality_grandpa", "app", "Public"],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 33,
              "typeName": "ed25519::Public",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 33,
      "path": ["sp_core", "ed25519", "Public"],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 1,
              "typeName": "[u8; 32]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 34,
      "path": ["pallet_balances", "pallet", "Event"],
      "params": [
        {
          "name": "T"
        },
        {
          "name": "I"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Endowed",
              "fields": [
                {
                  "name": "account",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "free_balance",
                  "typeId": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": ["An account was created with some free balance."]
            },
            {
              "name": "DustLost",
              "fields": [
                {
                  "name": "account",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "An account was removed whose balance was non-zero but below ExistentialDeposit,",
                "resulting in an outright loss."
              ]
            },
            {
              "name": "Transfer",
              "fields": [
                {
                  "name": "from",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "to",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": ["Transfer succeeded."]
            },
            {
              "name": "BalanceSet",
              "fields": [
                {
                  "name": "who",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "free",
                  "typeId": 6,
                  "typeName": "T::Balance",
                  "docs": []
                },
                {
                  "name": "reserved",
                  "typeId": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": ["A balance was set by root."]
            },
            {
              "name": "Reserved",
              "fields": [
                {
                  "name": "who",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": ["Some balance was reserved (moved from free to reserved)."]
            },
            {
              "name": "Unreserved",
              "fields": [
                {
                  "name": "who",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": ["Some balance was unreserved (moved from reserved to free)."]
            },
            {
              "name": "ReserveRepatriated",
              "fields": [
                {
                  "name": "from",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "to",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "T::Balance",
                  "docs": []
                },
                {
                  "name": "destination_status",
                  "typeId": 35,
                  "typeName": "Status",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Some balance was moved from the reserve of the first account to the second account.",
                "Final argument indicates the destination balance type."
              ]
            },
            {
              "name": "Deposit",
              "fields": [
                {
                  "name": "who",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": ["Some amount was deposited (e.g. for transaction fees)."]
            },
            {
              "name": "Withdraw",
              "fields": [
                {
                  "name": "who",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": ["Some amount was withdrawn from the account (e.g. for transaction fees)."]
            },
            {
              "name": "Slashed",
              "fields": [
                {
                  "name": "who",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": ["Some amount was removed from the account (e.g. for misbehavior)."]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 35,
      "path": ["frame_support", "traits", "tokens", "misc", "BalanceStatus"],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Free",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Reserved",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 36,
      "path": ["pallet_transaction_payment", "pallet", "Event"],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "TransactionFeePaid",
              "fields": [
                {
                  "name": "who",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "actual_fee",
                  "typeId": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "tip",
                  "typeId": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
                "has been paid by `who`."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 37,
      "path": ["pallet_sudo", "pallet", "Event"],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Sudid",
              "fields": [
                {
                  "name": "sudo_result",
                  "typeId": 38,
                  "typeName": "DispatchResult",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": ["A sudo just took place. \\[result\\]"]
            },
            {
              "name": "KeyChanged",
              "fields": [
                {
                  "name": "old_sudoer",
                  "typeId": 40,
                  "typeName": "Option<T::AccountId>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": ["The \\[sudoer\\] just switched identity; the old key is supplied if one existed."]
            },
            {
              "name": "SudoAsDone",
              "fields": [
                {
                  "name": "sudo_result",
                  "typeId": 38,
                  "typeName": "DispatchResult",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": ["A sudo just took place. \\[result\\]"]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 38,
      "path": ["Result"],
      "params": [
        {
          "name": "T",
          "typeId": 39
        },
        {
          "name": "E",
          "typeId": 24
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Ok",
              "fields": [
                {
                  "typeId": 39,
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Err",
              "fields": [
                {
                  "typeId": 24,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 39,
      "path": [],
      "params": [],
      "type": {
        "tag": "Tuple",
        "value": {
          "fields": []
        }
      },
      "docs": []
    },
    {
      "id": 40,
      "path": ["Option"],
      "params": [
        {
          "name": "T",
          "typeId": 0
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "typeId": 0,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 41,
      "path": ["pallet_template", "pallet", "Event"],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "SomethingStored",
              "fields": [
                {
                  "name": "something",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "who",
                  "typeId": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Event documentation should end with an array that provides descriptive names for event",
                "parameters. [something, who]"
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 42,
      "path": ["frame_system", "Phase"],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "ApplyExtrinsic",
              "fields": [
                {
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Finalization",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Initialization",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 43,
      "path": [],
      "params": [],
      "type": {
        "tag": "Vec",
        "value": {
          "typeParam": 11
        }
      },
      "docs": []
    },
    {
      "id": 44,
      "path": [],
      "params": [],
      "type": {
        "tag": "Vec",
        "value": {
          "typeParam": 45
        }
      },
      "docs": []
    },
    {
      "id": 45,
      "path": [],
      "params": [],
      "type": {
        "tag": "Tuple",
        "value": {
          "fields": [4, 4]
        }
      },
      "docs": []
    },
    {
      "id": 46,
      "path": ["frame_system", "LastRuntimeUpgradeInfo"],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "spec_version",
              "typeId": 47,
              "typeName": "codec::Compact<u32>",
              "docs": []
            },
            {
              "name": "spec_name",
              "typeId": 48,
              "typeName": "sp_runtime::RuntimeString",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 47,
      "path": [],
      "params": [],
      "type": {
        "tag": "Compact",
        "value": {
          "typeParam": 4
        }
      },
      "docs": []
    },
    {
      "id": 48,
      "path": [],
      "params": [],
      "type": {
        "tag": "Primitive",
        "value": {
          "kind": "str"
        }
      },
      "docs": []
    },
    {
      "id": 49,
      "path": [],
      "params": [],
      "type": {
        "tag": "Primitive",
        "value": {
          "kind": "bool"
        }
      },
      "docs": []
    },
    {
      "id": 50,
      "path": ["frame_system", "pallet", "Call"],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "remark",
              "fields": [
                {
                  "name": "remark",
                  "typeId": 12,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": ["Make some on-chain remark.", "", "## Complexity", "- `O(1)`"]
            },
            {
              "name": "set_heap_pages",
              "fields": [
                {
                  "name": "pages",
                  "typeId": 10,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": ["Set the number of pages in the WebAssembly environment's heap."]
            },
            {
              "name": "set_code",
              "fields": [
                {
                  "name": "code",
                  "typeId": 12,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Set the new runtime code.",
                "",
                "## Complexity",
                "- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`"
              ]
            },
            {
              "name": "set_code_without_checks",
              "fields": [
                {
                  "name": "code",
                  "typeId": 12,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Set the new runtime code without doing any checks of the given `code`.",
                "",
                "## Complexity",
                "- `O(C)` where `C` length of `code`"
              ]
            },
            {
              "name": "set_storage",
              "fields": [
                {
                  "name": "items",
                  "typeId": 51,
                  "typeName": "Vec<KeyValue>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": ["Set some items of storage."]
            },
            {
              "name": "kill_storage",
              "fields": [
                {
                  "name": "keys",
                  "typeId": 53,
                  "typeName": "Vec<Key>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": ["Kill some items from storage."]
            },
            {
              "name": "kill_prefix",
              "fields": [
                {
                  "name": "prefix",
                  "typeId": 12,
                  "typeName": "Key",
                  "docs": []
                },
                {
                  "name": "subkeys",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Kill all storage items with a key that starts with the given prefix.",
                "",
                "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
                "the prefix we are removing to accurately calculate the weight of this function."
              ]
            },
            {
              "name": "remark_with_event",
              "fields": [
                {
                  "name": "remark",
                  "typeId": 12,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": ["Make some on-chain remark and emit event."]
            }
          ]
        }
      },
      "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
    },
    {
      "id": 51,
      "path": [],
      "params": [],
      "type": {
        "tag": "Vec",
        "value": {
          "typeParam": 52
        }
      },
      "docs": []
    },
    {
      "id": 52,
      "path": [],
      "params": [],
      "type": {
        "tag": "Tuple",
        "value": {
          "fields": [12, 12]
        }
      },
      "docs": []
    },
    {
      "id": 53,
      "path": [],
      "params": [],
      "type": {
        "tag": "Vec",
        "value": {
          "typeParam": 12
        }
      },
      "docs": []
    },
    {
      "id": 54,
      "path": ["frame_system", "limits", "BlockWeights"],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "base_block",
              "typeId": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "max_block",
              "typeId": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "per_class",
              "typeId": 55,
              "typeName": "PerDispatchClass<WeightsPerClass>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 55,
      "path": ["frame_support", "dispatch", "PerDispatchClass"],
      "params": [
        {
          "name": "T",
          "typeId": 56
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "normal",
              "typeId": 56,
              "typeName": "T",
              "docs": []
            },
            {
              "name": "operational",
              "typeId": 56,
              "typeName": "T",
              "docs": []
            },
            {
              "name": "mandatory",
              "typeId": 56,
              "typeName": "T",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 56,
      "path": ["frame_system", "limits", "WeightsPerClass"],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "base_extrinsic",
              "typeId": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "max_extrinsic",
              "typeId": 57,
              "typeName": "Option<Weight>",
              "docs": []
            },
            {
              "name": "max_total",
              "typeId": 57,
              "typeName": "Option<Weight>",
              "docs": []
            },
            {
              "name": "reserved",
              "typeId": 57,
              "typeName": "Option<Weight>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 57,
      "path": ["Option"],
      "params": [
        {
          "name": "T",
          "typeId": 8
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "typeId": 8,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 58,
      "path": ["frame_system", "limits", "BlockLength"],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "max",
              "typeId": 59,
              "typeName": "PerDispatchClass<u32>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 59,
      "path": ["frame_support", "dispatch", "PerDispatchClass"],
      "params": [
        {
          "name": "T",
          "typeId": 4
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "normal",
              "typeId": 4,
              "typeName": "T",
              "docs": []
            },
            {
              "name": "operational",
              "typeId": 4,
              "typeName": "T",
              "docs": []
            },
            {
              "name": "mandatory",
              "typeId": 4,
              "typeName": "T",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 60,
      "path": ["sp_weights", "RuntimeDbWeight"],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "read",
              "typeId": 10,
              "typeName": "u64",
              "docs": []
            },
            {
              "name": "write",
              "typeId": 10,
              "typeName": "u64",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 61,
      "path": ["sp_version", "RuntimeVersion"],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "spec_name",
              "typeId": 48,
              "typeName": "RuntimeString",
              "docs": []
            },
            {
              "name": "impl_name",
              "typeId": 48,
              "typeName": "RuntimeString",
              "docs": []
            },
            {
              "name": "authoring_version",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "spec_version",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "impl_version",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "apis",
              "typeId": 62,
              "typeName": "ApisVec",
              "docs": []
            },
            {
              "name": "transaction_version",
              "typeId": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "state_version",
              "typeId": 2,
              "typeName": "u8",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 62,
      "path": ["Cow"],
      "params": [
        {
          "name": "T",
          "typeId": 63
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 63,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 63,
      "path": [],
      "params": [],
      "type": {
        "tag": "Vec",
        "value": {
          "typeParam": 64
        }
      },
      "docs": []
    },
    {
      "id": 64,
      "path": [],
      "params": [],
      "type": {
        "tag": "Tuple",
        "value": {
          "fields": [65, 4]
        }
      },
      "docs": []
    },
    {
      "id": 65,
      "path": [],
      "params": [],
      "type": {
        "tag": "SizedVec",
        "value": {
          "len": 8,
          "typeParam": 2
        }
      },
      "docs": []
    },
    {
      "id": 66,
      "path": [],
      "params": [],
      "type": {
        "tag": "Primitive",
        "value": {
          "kind": "u16"
        }
      },
      "docs": []
    },
    {
      "id": 67,
      "path": ["frame_system", "pallet", "Error"],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "InvalidSpecName",
              "fields": [],
              "index": 0,
              "docs": ["The name of specification does not match between the current runtime", "and the new runtime."]
            },
            {
              "name": "SpecVersionNeedsToIncrease",
              "fields": [],
              "index": 1,
              "docs": [
                "The specification version is not allowed to decrease between the current runtime",
                "and the new runtime."
              ]
            },
            {
              "name": "FailedToExtractRuntimeVersion",
              "fields": [],
              "index": 2,
              "docs": [
                "Failed to extract the runtime version from the new runtime.",
                "",
                "Either calling `Core_version` or decoding `RuntimeVersion` failed."
              ]
            },
            {
              "name": "NonDefaultComposite",
              "fields": [],
              "index": 3,
              "docs": ["Suicide called when the account has non-default composite data."]
            },
            {
              "name": "NonZeroRefCount",
              "fields": [],
              "index": 4,
              "docs": ["There is a non-zero reference count preventing the account from being purged."]
            },
            {
              "name": "CallFiltered",
              "fields": [],
              "index": 5,
              "docs": ["The origin filter prevent the call to be dispatched."]
            }
          ]
        }
      },
      "docs": ["Error for the System pallet"]
    },
    {
      "id": 68,
      "path": ["bounded_collections", "bounded_vec", "BoundedVec"],
      "params": [
        {
          "name": "T",
          "typeId": 11
        },
        {
          "name": "S"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 43,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 69,
      "path": ["pallet_timestamp", "pallet", "Call"],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "set",
              "fields": [
                {
                  "name": "now",
                  "typeId": 9,
                  "typeName": "T::Moment",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Set the current time.",
                "",
                "This call should be invoked exactly once per block. It will panic at the finalization",
                "phase, if this call hasn't been invoked by that time.",
                "",
                "The timestamp should be greater than the previous one by the amount specified by",
                "`MinimumPeriod`.",
                "",
                "The dispatch origin for this call must be `Inherent`.",
                "",
                "## Complexity",
                "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
                "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in",
                "  `on_finalize`)",
                "- 1 event handler `on_timestamp_set`. Must be `O(1)`."
              ]
            }
          ]
        }
      },
      "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
    },
    {
      "id": 70,
      "path": ["bounded_collections", "bounded_vec", "BoundedVec"],
      "params": [
        {
          "name": "T",
          "typeId": 71
        },
        {
          "name": "S"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 73,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 71,
      "path": ["sp_consensus_aura", "sr25519", "app_sr25519", "Public"],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 72,
              "typeName": "sr25519::Public",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 72,
      "path": ["sp_core", "sr25519", "Public"],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 1,
              "typeName": "[u8; 32]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 73,
      "path": [],
      "params": [],
      "type": {
        "tag": "Vec",
        "value": {
          "typeParam": 71
        }
      },
      "docs": []
    },
    {
      "id": 74,
      "path": ["sp_consensus_slots", "Slot"],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 10,
              "typeName": "u64",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 75,
      "path": ["pallet_grandpa", "StoredState"],
      "params": [
        {
          "name": "N",
          "typeId": 4
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Live",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "PendingPause",
              "fields": [
                {
                  "name": "scheduled_at",
                  "typeId": 4,
                  "typeName": "N",
                  "docs": []
                },
                {
                  "name": "delay",
                  "typeId": 4,
                  "typeName": "N",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Paused",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "PendingResume",
              "fields": [
                {
                  "name": "scheduled_at",
                  "typeId": 4,
                  "typeName": "N",
                  "docs": []
                },
                {
                  "name": "delay",
                  "typeId": 4,
                  "typeName": "N",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 76,
      "path": ["pallet_grandpa", "StoredPendingChange"],
      "params": [
        {
          "name": "N",
          "typeId": 4
        },
        {
          "name": "Limit"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "scheduled_at",
              "typeId": 4,
              "typeName": "N",
              "docs": []
            },
            {
              "name": "delay",
              "typeId": 4,
              "typeName": "N",
              "docs": []
            },
            {
              "name": "next_authorities",
              "typeId": 77,
              "typeName": "BoundedAuthorityList<Limit>",
              "docs": []
            },
            {
              "name": "forced",
              "typeId": 78,
              "typeName": "Option<N>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 77,
      "path": ["bounded_collections", "weak_bounded_vec", "WeakBoundedVec"],
      "params": [
        {
          "name": "T",
          "typeId": 31
        },
        {
          "name": "S"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 30,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 78,
      "path": ["Option"],
      "params": [
        {
          "name": "T",
          "typeId": 4
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "typeId": 4,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 79,
      "path": ["pallet_grandpa", "pallet", "Call"],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "report_equivocation",
              "fields": [
                {
                  "name": "equivocation_proof",
                  "typeId": 80,
                  "typeName": "Box<EquivocationProof<T::Hash, T::BlockNumber>>",
                  "docs": []
                },
                {
                  "name": "key_owner_proof",
                  "typeId": 91,
                  "typeName": "T::KeyOwnerProof",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Report voter equivocation/misbehavior. This method will verify the",
                "equivocation proof and validate the given key ownership proof",
                "against the extracted offender. If both are valid, the offence",
                "will be reported."
              ]
            },
            {
              "name": "report_equivocation_unsigned",
              "fields": [
                {
                  "name": "equivocation_proof",
                  "typeId": 80,
                  "typeName": "Box<EquivocationProof<T::Hash, T::BlockNumber>>",
                  "docs": []
                },
                {
                  "name": "key_owner_proof",
                  "typeId": 91,
                  "typeName": "T::KeyOwnerProof",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Report voter equivocation/misbehavior. This method will verify the",
                "equivocation proof and validate the given key ownership proof",
                "against the extracted offender. If both are valid, the offence",
                "will be reported.",
                "",
                "This extrinsic must be called unsigned and it is expected that only",
                "block authors will call it (validated in `ValidateUnsigned`), as such",
                "if the block author is defined it will be defined as the equivocation",
                "reporter."
              ]
            },
            {
              "name": "note_stalled",
              "fields": [
                {
                  "name": "delay",
                  "typeId": 4,
                  "typeName": "T::BlockNumber",
                  "docs": []
                },
                {
                  "name": "best_finalized_block_number",
                  "typeId": 4,
                  "typeName": "T::BlockNumber",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Note that the current authority set of the GRANDPA finality gadget has stalled.",
                "",
                "This will trigger a forced authority set change at the beginning of the next session, to",
                "be enacted `delay` blocks after that. The `delay` should be high enough to safely assume",
                "that the block signalling the forced change will not be re-orged e.g. 1000 blocks.",
                "The block production rate (which may be slowed down because of finality lagging) should",
                "be taken into account when choosing the `delay`. The GRANDPA voters based on the new",
                "authority will start voting on top of `best_finalized_block_number` for new finalized",
                "blocks. `best_finalized_block_number` should be the highest of the latest finalized",
                "block of all validators of the new authority set.",
                "",
                "Only callable by root."
              ]
            }
          ]
        }
      },
      "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
    },
    {
      "id": 80,
      "path": ["sp_finality_grandpa", "EquivocationProof"],
      "params": [
        {
          "name": "H",
          "typeId": 11
        },
        {
          "name": "N",
          "typeId": 4
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "set_id",
              "typeId": 10,
              "typeName": "SetId",
              "docs": []
            },
            {
              "name": "equivocation",
              "typeId": 81,
              "typeName": "Equivocation<H, N>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 81,
      "path": ["sp_finality_grandpa", "Equivocation"],
      "params": [
        {
          "name": "H",
          "typeId": 11
        },
        {
          "name": "N",
          "typeId": 4
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Prevote",
              "fields": [
                {
                  "typeId": 82,
                  "typeName": "grandpa::Equivocation<AuthorityId, grandpa::Prevote<H, N>,\nAuthoritySignature>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Precommit",
              "fields": [
                {
                  "typeId": 88,
                  "typeName": "grandpa::Equivocation<AuthorityId, grandpa::Precommit<H, N>,\nAuthoritySignature>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 82,
      "path": ["finality_grandpa", "Equivocation"],
      "params": [
        {
          "name": "Id",
          "typeId": 32
        },
        {
          "name": "V",
          "typeId": 83
        },
        {
          "name": "S",
          "typeId": 84
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "round_number",
              "typeId": 10,
              "typeName": "u64",
              "docs": []
            },
            {
              "name": "identity",
              "typeId": 32,
              "typeName": "Id",
              "docs": []
            },
            {
              "name": "first",
              "typeId": 87,
              "typeName": "(V, S)",
              "docs": []
            },
            {
              "name": "second",
              "typeId": 87,
              "typeName": "(V, S)",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 83,
      "path": ["finality_grandpa", "Prevote"],
      "params": [
        {
          "name": "H",
          "typeId": 11
        },
        {
          "name": "N",
          "typeId": 4
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "target_hash",
              "typeId": 11,
              "typeName": "H",
              "docs": []
            },
            {
              "name": "target_number",
              "typeId": 4,
              "typeName": "N",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 84,
      "path": ["sp_finality_grandpa", "app", "Signature"],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 85,
              "typeName": "ed25519::Signature",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 85,
      "path": ["sp_core", "ed25519", "Signature"],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 86,
              "typeName": "[u8; 64]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 86,
      "path": [],
      "params": [],
      "type": {
        "tag": "SizedVec",
        "value": {
          "len": 64,
          "typeParam": 2
        }
      },
      "docs": []
    },
    {
      "id": 87,
      "path": [],
      "params": [],
      "type": {
        "tag": "Tuple",
        "value": {
          "fields": [83, 84]
        }
      },
      "docs": []
    },
    {
      "id": 88,
      "path": ["finality_grandpa", "Equivocation"],
      "params": [
        {
          "name": "Id",
          "typeId": 32
        },
        {
          "name": "V",
          "typeId": 89
        },
        {
          "name": "S",
          "typeId": 84
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "round_number",
              "typeId": 10,
              "typeName": "u64",
              "docs": []
            },
            {
              "name": "identity",
              "typeId": 32,
              "typeName": "Id",
              "docs": []
            },
            {
              "name": "first",
              "typeId": 90,
              "typeName": "(V, S)",
              "docs": []
            },
            {
              "name": "second",
              "typeId": 90,
              "typeName": "(V, S)",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 89,
      "path": ["finality_grandpa", "Precommit"],
      "params": [
        {
          "name": "H",
          "typeId": 11
        },
        {
          "name": "N",
          "typeId": 4
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "target_hash",
              "typeId": 11,
              "typeName": "H",
              "docs": []
            },
            {
              "name": "target_number",
              "typeId": 4,
              "typeName": "N",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 90,
      "path": [],
      "params": [],
      "type": {
        "tag": "Tuple",
        "value": {
          "fields": [89, 84]
        }
      },
      "docs": []
    },
    {
      "id": 91,
      "path": ["sp_core", "Void"],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": []
        }
      },
      "docs": []
    },
    {
      "id": 92,
      "path": ["pallet_grandpa", "pallet", "Error"],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "PauseFailed",
              "fields": [],
              "index": 0,
              "docs": [
                "Attempt to signal GRANDPA pause when the authority set isn't live",
                "(either paused or already pending pause)."
              ]
            },
            {
              "name": "ResumeFailed",
              "fields": [],
              "index": 1,
              "docs": [
                "Attempt to signal GRANDPA resume when the authority set isn't paused",
                "(either live or already pending resume)."
              ]
            },
            {
              "name": "ChangePending",
              "fields": [],
              "index": 2,
              "docs": ["Attempt to signal GRANDPA change with one already pending."]
            },
            {
              "name": "TooSoon",
              "fields": [],
              "index": 3,
              "docs": ["Cannot signal forced change so soon after last."]
            },
            {
              "name": "InvalidKeyOwnershipProof",
              "fields": [],
              "index": 4,
              "docs": ["A key ownership proof provided as part of an equivocation report is invalid."]
            },
            {
              "name": "InvalidEquivocationProof",
              "fields": [],
              "index": 5,
              "docs": ["An equivocation proof provided as part of an equivocation report is invalid."]
            },
            {
              "name": "DuplicateOffenceReport",
              "fields": [],
              "index": 6,
              "docs": ["A given equivocation report is valid but already previously reported."]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 93,
      "path": ["bounded_collections", "weak_bounded_vec", "WeakBoundedVec"],
      "params": [
        {
          "name": "T",
          "typeId": 94
        },
        {
          "name": "S"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 96,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 94,
      "path": ["pallet_balances", "BalanceLock"],
      "params": [
        {
          "name": "Balance",
          "typeId": 6
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "id",
              "typeId": 65,
              "typeName": "LockIdentifier",
              "docs": []
            },
            {
              "name": "amount",
              "typeId": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "reasons",
              "typeId": 95,
              "typeName": "Reasons",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 95,
      "path": ["pallet_balances", "Reasons"],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Fee",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Misc",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "All",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 96,
      "path": [],
      "params": [],
      "type": {
        "tag": "Vec",
        "value": {
          "typeParam": 94
        }
      },
      "docs": []
    },
    {
      "id": 97,
      "path": ["bounded_collections", "bounded_vec", "BoundedVec"],
      "params": [
        {
          "name": "T",
          "typeId": 98
        },
        {
          "name": "S"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 99,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 98,
      "path": ["pallet_balances", "ReserveData"],
      "params": [
        {
          "name": "ReserveIdentifier",
          "typeId": 65
        },
        {
          "name": "Balance",
          "typeId": 6
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "name": "id",
              "typeId": 65,
              "typeName": "ReserveIdentifier",
              "docs": []
            },
            {
              "name": "amount",
              "typeId": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 99,
      "path": [],
      "params": [],
      "type": {
        "tag": "Vec",
        "value": {
          "typeParam": 98
        }
      },
      "docs": []
    },
    {
      "id": 100,
      "path": ["pallet_balances", "pallet", "Call"],
      "params": [
        {
          "name": "T"
        },
        {
          "name": "I"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "transfer",
              "fields": [
                {
                  "name": "dest",
                  "typeId": 101,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "value",
                  "typeId": 104,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Transfer some liquid free balance to another account.",
                "",
                "`transfer` will set the `FreeBalance` of the sender and receiver.",
                "If the sender's account is below the existential deposit as a result",
                "of the transfer, the account will be reaped.",
                "",
                "The dispatch origin for this call must be `Signed` by the transactor.",
                "",
                "## Complexity",
                "- Dependent on arguments but not critical, given proper implementations for input config",
                "  types. See related functions below.",
                "- It contains a limited number of reads and writes internally and no complex",
                "  computation.",
                "",
                "Related functions:",
                "",
                "  - `ensure_can_withdraw` is always called internally but has a bounded complexity.",
                "  - Transferring balances to accounts that did not exist before will cause",
                "    `T::OnNewAccount::on_new_account` to be called.",
                "  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.",
                "  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check",
                "    that the transfer will not kill the origin account."
              ]
            },
            {
              "name": "set_balance",
              "fields": [
                {
                  "name": "who",
                  "typeId": 101,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "new_free",
                  "typeId": 104,
                  "typeName": "T::Balance",
                  "docs": []
                },
                {
                  "name": "new_reserved",
                  "typeId": 104,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Set the balances of a given account.",
                "",
                "This will alter `FreeBalance` and `ReservedBalance` in storage. it will",
                "also alter the total issuance of the system (`TotalIssuance`) appropriately.",
                "If the new free or reserved balance is below the existential deposit,",
                "it will reset the account nonce (`frame_system::AccountNonce`).",
                "",
                "The dispatch origin for this call is `root`."
              ]
            },
            {
              "name": "force_transfer",
              "fields": [
                {
                  "name": "source",
                  "typeId": 101,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "dest",
                  "typeId": 101,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "value",
                  "typeId": 104,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Exactly as `transfer`, except the origin must be root and the source account may be",
                "specified.",
                "## Complexity",
                "- Same as transfer, but additional read and write because the source account is not",
                "  assumed to be in the overlay."
              ]
            },
            {
              "name": "transfer_keep_alive",
              "fields": [
                {
                  "name": "dest",
                  "typeId": 101,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "value",
                  "typeId": 104,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Same as the [`transfer`] call, but with a check that the transfer will not kill the",
                "origin account.",
                "",
                "99% of the time you want [`transfer`] instead.",
                "",
                "[`transfer`]: struct.Pallet.html#method.transfer"
              ]
            },
            {
              "name": "transfer_all",
              "fields": [
                {
                  "name": "dest",
                  "typeId": 101,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "keep_alive",
                  "typeId": 49,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Transfer the entire transferable balance from the caller account.",
                "",
                "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
                "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
                "transferred by this function. To ensure that this function results in a killed account,",
                "you might need to prepare the account by removing any reference counters, storage",
                "deposits, etc...",
                "",
                "The dispatch origin of this call must be Signed.",
                "",
                "- `dest`: The recipient of the transfer.",
                "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
                "  of the funds the account has, causing the sender account to be killed (false), or",
                "  transfer everything except at least the existential deposit, which will guarantee to",
                "  keep the sender account alive (true). ## Complexity",
                "- O(1). Just like transfer, but reading the user's transferable balance first."
              ]
            },
            {
              "name": "force_unreserve",
              "fields": [
                {
                  "name": "who",
                  "typeId": 101,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "amount",
                  "typeId": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": ["Unreserve some balance from a user by force.", "", "Can only be called by ROOT."]
            }
          ]
        }
      },
      "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
    },
    {
      "id": 101,
      "path": ["sp_runtime", "multiaddress", "MultiAddress"],
      "params": [
        {
          "name": "AccountId",
          "typeId": 0
        },
        {
          "name": "AccountIndex",
          "typeId": 39
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Id",
              "fields": [
                {
                  "typeId": 0,
                  "typeName": "AccountId",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Index",
              "fields": [
                {
                  "typeId": 102,
                  "typeName": "AccountIndex",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Raw",
              "fields": [
                {
                  "typeId": 12,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Address32",
              "fields": [
                {
                  "typeId": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "Address20",
              "fields": [
                {
                  "typeId": 103,
                  "typeName": "[u8; 20]",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 102,
      "path": [],
      "params": [],
      "type": {
        "tag": "Compact",
        "value": {
          "typeParam": 39
        }
      },
      "docs": []
    },
    {
      "id": 103,
      "path": [],
      "params": [],
      "type": {
        "tag": "SizedVec",
        "value": {
          "len": 20,
          "typeParam": 2
        }
      },
      "docs": []
    },
    {
      "id": 104,
      "path": [],
      "params": [],
      "type": {
        "tag": "Compact",
        "value": {
          "typeParam": 6
        }
      },
      "docs": []
    },
    {
      "id": 105,
      "path": ["pallet_balances", "pallet", "Error"],
      "params": [
        {
          "name": "T"
        },
        {
          "name": "I"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "VestingBalance",
              "fields": [],
              "index": 0,
              "docs": ["Vesting balance too high to send value"]
            },
            {
              "name": "LiquidityRestrictions",
              "fields": [],
              "index": 1,
              "docs": ["Account liquidity restrictions prevent withdrawal"]
            },
            {
              "name": "InsufficientBalance",
              "fields": [],
              "index": 2,
              "docs": ["Balance too low to send value."]
            },
            {
              "name": "ExistentialDeposit",
              "fields": [],
              "index": 3,
              "docs": ["Value too low to create account due to existential deposit"]
            },
            {
              "name": "KeepAlive",
              "fields": [],
              "index": 4,
              "docs": ["Transfer/payment would kill account"]
            },
            {
              "name": "ExistingVestingSchedule",
              "fields": [],
              "index": 5,
              "docs": ["A vesting schedule already exists for this account"]
            },
            {
              "name": "DeadAccount",
              "fields": [],
              "index": 6,
              "docs": ["Beneficiary account must pre-exist"]
            },
            {
              "name": "TooManyReserves",
              "fields": [],
              "index": 7,
              "docs": ["Number of named reserves exceed MaxReserves"]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 106,
      "path": ["sp_arithmetic", "fixed_point", "FixedU128"],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 6,
              "typeName": "u128",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 107,
      "path": ["pallet_transaction_payment", "Releases"],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "V1Ancient",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "V2",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 108,
      "path": ["pallet_sudo", "pallet", "Call"],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "sudo",
              "fields": [
                {
                  "name": "call",
                  "typeId": 109,
                  "typeName": "Box<<T as Config>::RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Authenticates the sudo key and dispatches a function call with `Root` origin.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "## Complexity",
                "- O(1)."
              ]
            },
            {
              "name": "sudo_unchecked_weight",
              "fields": [
                {
                  "name": "call",
                  "typeId": 109,
                  "typeName": "Box<<T as Config>::RuntimeCall>",
                  "docs": []
                },
                {
                  "name": "weight",
                  "typeId": 8,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Authenticates the sudo key and dispatches a function call with `Root` origin.",
                "This function does not check the weight of the call, and instead allows the",
                "Sudo user to specify the weight of the call.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "## Complexity",
                "- O(1)."
              ]
            },
            {
              "name": "set_key",
              "fields": [
                {
                  "name": "new",
                  "typeId": 101,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo",
                "key.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "## Complexity",
                "- O(1)."
              ]
            },
            {
              "name": "sudo_as",
              "fields": [
                {
                  "name": "who",
                  "typeId": 101,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "call",
                  "typeId": 109,
                  "typeName": "Box<<T as Config>::RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Authenticates the sudo key and dispatches a function call with `Signed` origin from",
                "a given account.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "## Complexity",
                "- O(1)."
              ]
            }
          ]
        }
      },
      "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
    },
    {
      "id": 109,
      "path": ["node_template_runtime", "RuntimeCall"],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "System",
              "fields": [
                {
                  "typeId": 50,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Timestamp",
              "fields": [
                {
                  "typeId": 69,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Grandpa",
              "fields": [
                {
                  "typeId": 79,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Grandpa, Runtime>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "Balances",
              "fields": [
                {
                  "typeId": 100,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "Sudo",
              "fields": [
                {
                  "typeId": 108,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Sudo, Runtime>",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "TemplateModule",
              "fields": [
                {
                  "typeId": 110,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TemplateModule, Runtime>",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 110,
      "path": ["pallet_template", "pallet", "Call"],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "do_something",
              "fields": [
                {
                  "name": "something",
                  "typeId": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "An example dispatchable that takes a singles value as a parameter, writes the value to",
                "storage and emits an event. This function must be dispatched by a signed extrinsic."
              ]
            },
            {
              "name": "cause_error",
              "fields": [],
              "index": 1,
              "docs": ["An example dispatchable that may throw a custom error."]
            }
          ]
        }
      },
      "docs": ["Contains one variant per dispatchable that can be called by an extrinsic."]
    },
    {
      "id": 111,
      "path": ["pallet_sudo", "pallet", "Error"],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "RequireSudo",
              "fields": [],
              "index": 0,
              "docs": ["Sender must be the Sudo account"]
            }
          ]
        }
      },
      "docs": ["Error for the Sudo pallet"]
    },
    {
      "id": 112,
      "path": ["pallet_template", "pallet", "Error"],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "NoneValue",
              "fields": [],
              "index": 0,
              "docs": ["Error names should be descriptive."]
            },
            {
              "name": "StorageOverflow",
              "fields": [],
              "index": 1,
              "docs": ["Errors should have helpful documentation associated with them."]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    },
    {
      "id": 113,
      "path": ["sp_runtime", "generic", "unchecked_extrinsic", "UncheckedExtrinsic"],
      "params": [
        {
          "name": "Address",
          "typeId": 101
        },
        {
          "name": "Call",
          "typeId": 109
        },
        {
          "name": "Signature",
          "typeId": 114
        },
        {
          "name": "Extra",
          "typeId": 118
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 12,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 114,
      "path": ["sp_runtime", "MultiSignature"],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Ed25519",
              "fields": [
                {
                  "typeId": 85,
                  "typeName": "ed25519::Signature",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Sr25519",
              "fields": [
                {
                  "typeId": 115,
                  "typeName": "sr25519::Signature",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Ecdsa",
              "fields": [
                {
                  "typeId": 116,
                  "typeName": "ecdsa::Signature",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 115,
      "path": ["sp_core", "sr25519", "Signature"],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 86,
              "typeName": "[u8; 64]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 116,
      "path": ["sp_core", "ecdsa", "Signature"],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 117,
              "typeName": "[u8; 65]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 117,
      "path": [],
      "params": [],
      "type": {
        "tag": "SizedVec",
        "value": {
          "len": 65,
          "typeParam": 2
        }
      },
      "docs": []
    },
    {
      "id": 118,
      "path": [],
      "params": [],
      "type": {
        "tag": "Tuple",
        "value": {
          "fields": [119, 120, 121, 122, 123, 125, 126, 127]
        }
      },
      "docs": []
    },
    {
      "id": 119,
      "path": ["frame_system", "extensions", "check_non_zero_sender", "CheckNonZeroSender"],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": []
        }
      },
      "docs": []
    },
    {
      "id": 120,
      "path": ["frame_system", "extensions", "check_spec_version", "CheckSpecVersion"],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": []
        }
      },
      "docs": []
    },
    {
      "id": 121,
      "path": ["frame_system", "extensions", "check_tx_version", "CheckTxVersion"],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": []
        }
      },
      "docs": []
    },
    {
      "id": 122,
      "path": ["frame_system", "extensions", "check_genesis", "CheckGenesis"],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": []
        }
      },
      "docs": []
    },
    {
      "id": 123,
      "path": ["frame_system", "extensions", "check_mortality", "CheckMortality"],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 124,
              "typeName": "Era",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 124,
      "path": ["sp_runtime", "generic", "era", "Era"],
      "params": [],
      "type": {
        "tag": "Enum",
        "value": {
          "members": [
            {
              "name": "Immortal",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Mortal1",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Mortal2",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Mortal3",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "Mortal4",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "Mortal5",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "Mortal6",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "Mortal7",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "Mortal8",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            },
            {
              "name": "Mortal9",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 9,
              "docs": []
            },
            {
              "name": "Mortal10",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 10,
              "docs": []
            },
            {
              "name": "Mortal11",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 11,
              "docs": []
            },
            {
              "name": "Mortal12",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 12,
              "docs": []
            },
            {
              "name": "Mortal13",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 13,
              "docs": []
            },
            {
              "name": "Mortal14",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 14,
              "docs": []
            },
            {
              "name": "Mortal15",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 15,
              "docs": []
            },
            {
              "name": "Mortal16",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 16,
              "docs": []
            },
            {
              "name": "Mortal17",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 17,
              "docs": []
            },
            {
              "name": "Mortal18",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 18,
              "docs": []
            },
            {
              "name": "Mortal19",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 19,
              "docs": []
            },
            {
              "name": "Mortal20",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 20,
              "docs": []
            },
            {
              "name": "Mortal21",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 21,
              "docs": []
            },
            {
              "name": "Mortal22",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 22,
              "docs": []
            },
            {
              "name": "Mortal23",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 23,
              "docs": []
            },
            {
              "name": "Mortal24",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 24,
              "docs": []
            },
            {
              "name": "Mortal25",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 25,
              "docs": []
            },
            {
              "name": "Mortal26",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 26,
              "docs": []
            },
            {
              "name": "Mortal27",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 27,
              "docs": []
            },
            {
              "name": "Mortal28",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 28,
              "docs": []
            },
            {
              "name": "Mortal29",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 29,
              "docs": []
            },
            {
              "name": "Mortal30",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 30,
              "docs": []
            },
            {
              "name": "Mortal31",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 31,
              "docs": []
            },
            {
              "name": "Mortal32",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 32,
              "docs": []
            },
            {
              "name": "Mortal33",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 33,
              "docs": []
            },
            {
              "name": "Mortal34",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 34,
              "docs": []
            },
            {
              "name": "Mortal35",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 35,
              "docs": []
            },
            {
              "name": "Mortal36",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 36,
              "docs": []
            },
            {
              "name": "Mortal37",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 37,
              "docs": []
            },
            {
              "name": "Mortal38",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 38,
              "docs": []
            },
            {
              "name": "Mortal39",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 39,
              "docs": []
            },
            {
              "name": "Mortal40",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 40,
              "docs": []
            },
            {
              "name": "Mortal41",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 41,
              "docs": []
            },
            {
              "name": "Mortal42",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 42,
              "docs": []
            },
            {
              "name": "Mortal43",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 43,
              "docs": []
            },
            {
              "name": "Mortal44",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 44,
              "docs": []
            },
            {
              "name": "Mortal45",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 45,
              "docs": []
            },
            {
              "name": "Mortal46",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 46,
              "docs": []
            },
            {
              "name": "Mortal47",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 47,
              "docs": []
            },
            {
              "name": "Mortal48",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 48,
              "docs": []
            },
            {
              "name": "Mortal49",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 49,
              "docs": []
            },
            {
              "name": "Mortal50",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 50,
              "docs": []
            },
            {
              "name": "Mortal51",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 51,
              "docs": []
            },
            {
              "name": "Mortal52",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 52,
              "docs": []
            },
            {
              "name": "Mortal53",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 53,
              "docs": []
            },
            {
              "name": "Mortal54",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 54,
              "docs": []
            },
            {
              "name": "Mortal55",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 55,
              "docs": []
            },
            {
              "name": "Mortal56",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 56,
              "docs": []
            },
            {
              "name": "Mortal57",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 57,
              "docs": []
            },
            {
              "name": "Mortal58",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 58,
              "docs": []
            },
            {
              "name": "Mortal59",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 59,
              "docs": []
            },
            {
              "name": "Mortal60",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 60,
              "docs": []
            },
            {
              "name": "Mortal61",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 61,
              "docs": []
            },
            {
              "name": "Mortal62",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 62,
              "docs": []
            },
            {
              "name": "Mortal63",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 63,
              "docs": []
            },
            {
              "name": "Mortal64",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 64,
              "docs": []
            },
            {
              "name": "Mortal65",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 65,
              "docs": []
            },
            {
              "name": "Mortal66",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 66,
              "docs": []
            },
            {
              "name": "Mortal67",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 67,
              "docs": []
            },
            {
              "name": "Mortal68",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 68,
              "docs": []
            },
            {
              "name": "Mortal69",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 69,
              "docs": []
            },
            {
              "name": "Mortal70",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 70,
              "docs": []
            },
            {
              "name": "Mortal71",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 71,
              "docs": []
            },
            {
              "name": "Mortal72",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 72,
              "docs": []
            },
            {
              "name": "Mortal73",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 73,
              "docs": []
            },
            {
              "name": "Mortal74",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 74,
              "docs": []
            },
            {
              "name": "Mortal75",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 75,
              "docs": []
            },
            {
              "name": "Mortal76",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 76,
              "docs": []
            },
            {
              "name": "Mortal77",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 77,
              "docs": []
            },
            {
              "name": "Mortal78",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 78,
              "docs": []
            },
            {
              "name": "Mortal79",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 79,
              "docs": []
            },
            {
              "name": "Mortal80",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 80,
              "docs": []
            },
            {
              "name": "Mortal81",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 81,
              "docs": []
            },
            {
              "name": "Mortal82",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 82,
              "docs": []
            },
            {
              "name": "Mortal83",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 83,
              "docs": []
            },
            {
              "name": "Mortal84",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 84,
              "docs": []
            },
            {
              "name": "Mortal85",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 85,
              "docs": []
            },
            {
              "name": "Mortal86",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 86,
              "docs": []
            },
            {
              "name": "Mortal87",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 87,
              "docs": []
            },
            {
              "name": "Mortal88",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 88,
              "docs": []
            },
            {
              "name": "Mortal89",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 89,
              "docs": []
            },
            {
              "name": "Mortal90",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 90,
              "docs": []
            },
            {
              "name": "Mortal91",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 91,
              "docs": []
            },
            {
              "name": "Mortal92",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 92,
              "docs": []
            },
            {
              "name": "Mortal93",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 93,
              "docs": []
            },
            {
              "name": "Mortal94",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 94,
              "docs": []
            },
            {
              "name": "Mortal95",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 95,
              "docs": []
            },
            {
              "name": "Mortal96",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 96,
              "docs": []
            },
            {
              "name": "Mortal97",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 97,
              "docs": []
            },
            {
              "name": "Mortal98",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 98,
              "docs": []
            },
            {
              "name": "Mortal99",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 99,
              "docs": []
            },
            {
              "name": "Mortal100",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 100,
              "docs": []
            },
            {
              "name": "Mortal101",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 101,
              "docs": []
            },
            {
              "name": "Mortal102",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 102,
              "docs": []
            },
            {
              "name": "Mortal103",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 103,
              "docs": []
            },
            {
              "name": "Mortal104",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 104,
              "docs": []
            },
            {
              "name": "Mortal105",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 105,
              "docs": []
            },
            {
              "name": "Mortal106",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 106,
              "docs": []
            },
            {
              "name": "Mortal107",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 107,
              "docs": []
            },
            {
              "name": "Mortal108",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 108,
              "docs": []
            },
            {
              "name": "Mortal109",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 109,
              "docs": []
            },
            {
              "name": "Mortal110",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 110,
              "docs": []
            },
            {
              "name": "Mortal111",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 111,
              "docs": []
            },
            {
              "name": "Mortal112",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 112,
              "docs": []
            },
            {
              "name": "Mortal113",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 113,
              "docs": []
            },
            {
              "name": "Mortal114",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 114,
              "docs": []
            },
            {
              "name": "Mortal115",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 115,
              "docs": []
            },
            {
              "name": "Mortal116",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 116,
              "docs": []
            },
            {
              "name": "Mortal117",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 117,
              "docs": []
            },
            {
              "name": "Mortal118",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 118,
              "docs": []
            },
            {
              "name": "Mortal119",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 119,
              "docs": []
            },
            {
              "name": "Mortal120",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 120,
              "docs": []
            },
            {
              "name": "Mortal121",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 121,
              "docs": []
            },
            {
              "name": "Mortal122",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 122,
              "docs": []
            },
            {
              "name": "Mortal123",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 123,
              "docs": []
            },
            {
              "name": "Mortal124",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 124,
              "docs": []
            },
            {
              "name": "Mortal125",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 125,
              "docs": []
            },
            {
              "name": "Mortal126",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 126,
              "docs": []
            },
            {
              "name": "Mortal127",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 127,
              "docs": []
            },
            {
              "name": "Mortal128",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 128,
              "docs": []
            },
            {
              "name": "Mortal129",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 129,
              "docs": []
            },
            {
              "name": "Mortal130",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 130,
              "docs": []
            },
            {
              "name": "Mortal131",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 131,
              "docs": []
            },
            {
              "name": "Mortal132",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 132,
              "docs": []
            },
            {
              "name": "Mortal133",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 133,
              "docs": []
            },
            {
              "name": "Mortal134",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 134,
              "docs": []
            },
            {
              "name": "Mortal135",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 135,
              "docs": []
            },
            {
              "name": "Mortal136",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 136,
              "docs": []
            },
            {
              "name": "Mortal137",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 137,
              "docs": []
            },
            {
              "name": "Mortal138",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 138,
              "docs": []
            },
            {
              "name": "Mortal139",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 139,
              "docs": []
            },
            {
              "name": "Mortal140",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 140,
              "docs": []
            },
            {
              "name": "Mortal141",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 141,
              "docs": []
            },
            {
              "name": "Mortal142",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 142,
              "docs": []
            },
            {
              "name": "Mortal143",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 143,
              "docs": []
            },
            {
              "name": "Mortal144",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 144,
              "docs": []
            },
            {
              "name": "Mortal145",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 145,
              "docs": []
            },
            {
              "name": "Mortal146",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 146,
              "docs": []
            },
            {
              "name": "Mortal147",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 147,
              "docs": []
            },
            {
              "name": "Mortal148",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 148,
              "docs": []
            },
            {
              "name": "Mortal149",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 149,
              "docs": []
            },
            {
              "name": "Mortal150",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 150,
              "docs": []
            },
            {
              "name": "Mortal151",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 151,
              "docs": []
            },
            {
              "name": "Mortal152",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 152,
              "docs": []
            },
            {
              "name": "Mortal153",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 153,
              "docs": []
            },
            {
              "name": "Mortal154",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 154,
              "docs": []
            },
            {
              "name": "Mortal155",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 155,
              "docs": []
            },
            {
              "name": "Mortal156",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 156,
              "docs": []
            },
            {
              "name": "Mortal157",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 157,
              "docs": []
            },
            {
              "name": "Mortal158",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 158,
              "docs": []
            },
            {
              "name": "Mortal159",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 159,
              "docs": []
            },
            {
              "name": "Mortal160",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 160,
              "docs": []
            },
            {
              "name": "Mortal161",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 161,
              "docs": []
            },
            {
              "name": "Mortal162",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 162,
              "docs": []
            },
            {
              "name": "Mortal163",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 163,
              "docs": []
            },
            {
              "name": "Mortal164",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 164,
              "docs": []
            },
            {
              "name": "Mortal165",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 165,
              "docs": []
            },
            {
              "name": "Mortal166",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 166,
              "docs": []
            },
            {
              "name": "Mortal167",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 167,
              "docs": []
            },
            {
              "name": "Mortal168",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 168,
              "docs": []
            },
            {
              "name": "Mortal169",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 169,
              "docs": []
            },
            {
              "name": "Mortal170",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 170,
              "docs": []
            },
            {
              "name": "Mortal171",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 171,
              "docs": []
            },
            {
              "name": "Mortal172",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 172,
              "docs": []
            },
            {
              "name": "Mortal173",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 173,
              "docs": []
            },
            {
              "name": "Mortal174",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 174,
              "docs": []
            },
            {
              "name": "Mortal175",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 175,
              "docs": []
            },
            {
              "name": "Mortal176",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 176,
              "docs": []
            },
            {
              "name": "Mortal177",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 177,
              "docs": []
            },
            {
              "name": "Mortal178",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 178,
              "docs": []
            },
            {
              "name": "Mortal179",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 179,
              "docs": []
            },
            {
              "name": "Mortal180",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 180,
              "docs": []
            },
            {
              "name": "Mortal181",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 181,
              "docs": []
            },
            {
              "name": "Mortal182",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 182,
              "docs": []
            },
            {
              "name": "Mortal183",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 183,
              "docs": []
            },
            {
              "name": "Mortal184",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 184,
              "docs": []
            },
            {
              "name": "Mortal185",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 185,
              "docs": []
            },
            {
              "name": "Mortal186",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 186,
              "docs": []
            },
            {
              "name": "Mortal187",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 187,
              "docs": []
            },
            {
              "name": "Mortal188",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 188,
              "docs": []
            },
            {
              "name": "Mortal189",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 189,
              "docs": []
            },
            {
              "name": "Mortal190",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 190,
              "docs": []
            },
            {
              "name": "Mortal191",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 191,
              "docs": []
            },
            {
              "name": "Mortal192",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 192,
              "docs": []
            },
            {
              "name": "Mortal193",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 193,
              "docs": []
            },
            {
              "name": "Mortal194",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 194,
              "docs": []
            },
            {
              "name": "Mortal195",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 195,
              "docs": []
            },
            {
              "name": "Mortal196",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 196,
              "docs": []
            },
            {
              "name": "Mortal197",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 197,
              "docs": []
            },
            {
              "name": "Mortal198",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 198,
              "docs": []
            },
            {
              "name": "Mortal199",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 199,
              "docs": []
            },
            {
              "name": "Mortal200",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 200,
              "docs": []
            },
            {
              "name": "Mortal201",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 201,
              "docs": []
            },
            {
              "name": "Mortal202",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 202,
              "docs": []
            },
            {
              "name": "Mortal203",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 203,
              "docs": []
            },
            {
              "name": "Mortal204",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 204,
              "docs": []
            },
            {
              "name": "Mortal205",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 205,
              "docs": []
            },
            {
              "name": "Mortal206",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 206,
              "docs": []
            },
            {
              "name": "Mortal207",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 207,
              "docs": []
            },
            {
              "name": "Mortal208",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 208,
              "docs": []
            },
            {
              "name": "Mortal209",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 209,
              "docs": []
            },
            {
              "name": "Mortal210",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 210,
              "docs": []
            },
            {
              "name": "Mortal211",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 211,
              "docs": []
            },
            {
              "name": "Mortal212",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 212,
              "docs": []
            },
            {
              "name": "Mortal213",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 213,
              "docs": []
            },
            {
              "name": "Mortal214",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 214,
              "docs": []
            },
            {
              "name": "Mortal215",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 215,
              "docs": []
            },
            {
              "name": "Mortal216",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 216,
              "docs": []
            },
            {
              "name": "Mortal217",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 217,
              "docs": []
            },
            {
              "name": "Mortal218",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 218,
              "docs": []
            },
            {
              "name": "Mortal219",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 219,
              "docs": []
            },
            {
              "name": "Mortal220",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 220,
              "docs": []
            },
            {
              "name": "Mortal221",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 221,
              "docs": []
            },
            {
              "name": "Mortal222",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 222,
              "docs": []
            },
            {
              "name": "Mortal223",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 223,
              "docs": []
            },
            {
              "name": "Mortal224",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 224,
              "docs": []
            },
            {
              "name": "Mortal225",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 225,
              "docs": []
            },
            {
              "name": "Mortal226",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 226,
              "docs": []
            },
            {
              "name": "Mortal227",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 227,
              "docs": []
            },
            {
              "name": "Mortal228",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 228,
              "docs": []
            },
            {
              "name": "Mortal229",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 229,
              "docs": []
            },
            {
              "name": "Mortal230",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 230,
              "docs": []
            },
            {
              "name": "Mortal231",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 231,
              "docs": []
            },
            {
              "name": "Mortal232",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 232,
              "docs": []
            },
            {
              "name": "Mortal233",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 233,
              "docs": []
            },
            {
              "name": "Mortal234",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 234,
              "docs": []
            },
            {
              "name": "Mortal235",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 235,
              "docs": []
            },
            {
              "name": "Mortal236",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 236,
              "docs": []
            },
            {
              "name": "Mortal237",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 237,
              "docs": []
            },
            {
              "name": "Mortal238",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 238,
              "docs": []
            },
            {
              "name": "Mortal239",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 239,
              "docs": []
            },
            {
              "name": "Mortal240",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 240,
              "docs": []
            },
            {
              "name": "Mortal241",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 241,
              "docs": []
            },
            {
              "name": "Mortal242",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 242,
              "docs": []
            },
            {
              "name": "Mortal243",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 243,
              "docs": []
            },
            {
              "name": "Mortal244",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 244,
              "docs": []
            },
            {
              "name": "Mortal245",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 245,
              "docs": []
            },
            {
              "name": "Mortal246",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 246,
              "docs": []
            },
            {
              "name": "Mortal247",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 247,
              "docs": []
            },
            {
              "name": "Mortal248",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 248,
              "docs": []
            },
            {
              "name": "Mortal249",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 249,
              "docs": []
            },
            {
              "name": "Mortal250",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 250,
              "docs": []
            },
            {
              "name": "Mortal251",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 251,
              "docs": []
            },
            {
              "name": "Mortal252",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 252,
              "docs": []
            },
            {
              "name": "Mortal253",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 253,
              "docs": []
            },
            {
              "name": "Mortal254",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 254,
              "docs": []
            },
            {
              "name": "Mortal255",
              "fields": [
                {
                  "typeId": 2,
                  "docs": []
                }
              ],
              "index": 255,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 125,
      "path": ["frame_system", "extensions", "check_nonce", "CheckNonce"],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 47,
              "typeName": "T::Index",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 126,
      "path": ["frame_system", "extensions", "check_weight", "CheckWeight"],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": []
        }
      },
      "docs": []
    },
    {
      "id": 127,
      "path": ["pallet_transaction_payment", "ChargeTransactionPayment"],
      "params": [
        {
          "name": "T"
        }
      ],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": [
            {
              "typeId": 104,
              "typeName": "BalanceOf<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    },
    {
      "id": 128,
      "path": ["node_template_runtime", "Runtime"],
      "params": [],
      "type": {
        "tag": "Struct",
        "value": {
          "fields": []
        }
      },
      "docs": []
    }
  ],
  "pallets": [
    {
      "name": "System",
      "storage": {
        "prefix": "System",
        "entries": [
          {
            "name": "Account",
            "modifier": "Default",
            "type": {
              "tag": "Map",
              "value": {
                "hashers": ["blake2_128Concat"],
                "key": 0,
                "value": 3
              }
            },
            "default": {
              "0": 0,
              "1": 0,
              "2": 0,
              "3": 0,
              "4": 0,
              "5": 0,
              "6": 0,
              "7": 0,
              "8": 0,
              "9": 0,
              "10": 0,
              "11": 0,
              "12": 0,
              "13": 0,
              "14": 0,
              "15": 0,
              "16": 0,
              "17": 0,
              "18": 0,
              "19": 0,
              "20": 0,
              "21": 0,
              "22": 0,
              "23": 0,
              "24": 0,
              "25": 0,
              "26": 0,
              "27": 0,
              "28": 0,
              "29": 0,
              "30": 0,
              "31": 0,
              "32": 0,
              "33": 0,
              "34": 0,
              "35": 0,
              "36": 0,
              "37": 0,
              "38": 0,
              "39": 0,
              "40": 0,
              "41": 0,
              "42": 0,
              "43": 0,
              "44": 0,
              "45": 0,
              "46": 0,
              "47": 0,
              "48": 0,
              "49": 0,
              "50": 0,
              "51": 0,
              "52": 0,
              "53": 0,
              "54": 0,
              "55": 0,
              "56": 0,
              "57": 0,
              "58": 0,
              "59": 0,
              "60": 0,
              "61": 0,
              "62": 0,
              "63": 0,
              "64": 0,
              "65": 0,
              "66": 0,
              "67": 0,
              "68": 0,
              "69": 0,
              "70": 0,
              "71": 0,
              "72": 0,
              "73": 0,
              "74": 0,
              "75": 0,
              "76": 0,
              "77": 0,
              "78": 0,
              "79": 0
            },
            "docs": [" The full account information for a particular account ID."]
          },
          {
            "name": "ExtrinsicCount",
            "modifier": "Optional",
            "type": {
              "tag": "Plain",
              "value": {
                "value": 4
              }
            },
            "default": {
              "0": 0
            },
            "docs": [" Total extrinsics count for the current block."]
          },
          {
            "name": "BlockWeight",
            "modifier": "Default",
            "type": {
              "tag": "Plain",
              "value": {
                "value": 7
              }
            },
            "default": {
              "0": 0,
              "1": 0,
              "2": 0,
              "3": 0,
              "4": 0,
              "5": 0
            },
            "docs": [" The current weight for the block."]
          },
          {
            "name": "AllExtrinsicsLen",
            "modifier": "Optional",
            "type": {
              "tag": "Plain",
              "value": {
                "value": 4
              }
            },
            "default": {
              "0": 0
            },
            "docs": [" Total length (in bytes) for all extrinsics put together, for the current block."]
          },
          {
            "name": "BlockHash",
            "modifier": "Default",
            "type": {
              "tag": "Map",
              "value": {
                "hashers": ["twox64Concat"],
                "key": 4,
                "value": 11
              }
            },
            "default": {
              "0": 0,
              "1": 0,
              "2": 0,
              "3": 0,
              "4": 0,
              "5": 0,
              "6": 0,
              "7": 0,
              "8": 0,
              "9": 0,
              "10": 0,
              "11": 0,
              "12": 0,
              "13": 0,
              "14": 0,
              "15": 0,
              "16": 0,
              "17": 0,
              "18": 0,
              "19": 0,
              "20": 0,
              "21": 0,
              "22": 0,
              "23": 0,
              "24": 0,
              "25": 0,
              "26": 0,
              "27": 0,
              "28": 0,
              "29": 0,
              "30": 0,
              "31": 0
            },
            "docs": [" Map of block numbers to block hashes."]
          },
          {
            "name": "ExtrinsicData",
            "modifier": "Default",
            "type": {
              "tag": "Map",
              "value": {
                "hashers": ["twox64Concat"],
                "key": 4,
                "value": 12
              }
            },
            "default": {
              "0": 0
            },
            "docs": [" Extrinsics data for the current block (maps an extrinsic's index to its data)."]
          },
          {
            "name": "Number",
            "modifier": "Default",
            "type": {
              "tag": "Plain",
              "value": {
                "value": 4
              }
            },
            "default": {
              "0": 0,
              "1": 0,
              "2": 0,
              "3": 0
            },
            "docs": [" The current block number being processed. Set by `execute_block`."]
          },
          {
            "name": "ParentHash",
            "modifier": "Default",
            "type": {
              "tag": "Plain",
              "value": {
                "value": 11
              }
            },
            "default": {
              "0": 0,
              "1": 0,
              "2": 0,
              "3": 0,
              "4": 0,
              "5": 0,
              "6": 0,
              "7": 0,
              "8": 0,
              "9": 0,
              "10": 0,
              "11": 0,
              "12": 0,
              "13": 0,
              "14": 0,
              "15": 0,
              "16": 0,
              "17": 0,
              "18": 0,
              "19": 0,
              "20": 0,
              "21": 0,
              "22": 0,
              "23": 0,
              "24": 0,
              "25": 0,
              "26": 0,
              "27": 0,
              "28": 0,
              "29": 0,
              "30": 0,
              "31": 0
            },
            "docs": [" Hash of the previous block."]
          },
          {
            "name": "Digest",
            "modifier": "Default",
            "type": {
              "tag": "Plain",
              "value": {
                "value": 13
              }
            },
            "default": {
              "0": 0
            },
            "docs": [" Digest of the current block, also part of the block header."]
          },
          {
            "name": "Events",
            "modifier": "Default",
            "type": {
              "tag": "Plain",
              "value": {
                "value": 17
              }
            },
            "default": {
              "0": 0
            },
            "docs": [
              " Events deposited for the current block.",
              "",
              " NOTE: The item is unbound and should therefore never be read on chain.",
              " It could otherwise inflate the PoV size of a block.",
              "",
              " Events have a large in-memory size. Box the events to not go out-of-memory",
              " just in case someone still reads them from within the runtime."
            ]
          },
          {
            "name": "EventCount",
            "modifier": "Default",
            "type": {
              "tag": "Plain",
              "value": {
                "value": 4
              }
            },
            "default": {
              "0": 0,
              "1": 0,
              "2": 0,
              "3": 0
            },
            "docs": [" The number of events in the `Events<T>` list."]
          },
          {
            "name": "EventTopics",
            "modifier": "Default",
            "type": {
              "tag": "Map",
              "value": {
                "hashers": ["blake2_128Concat"],
                "key": 11,
                "value": 44
              }
            },
            "default": {
              "0": 0
            },
            "docs": [
              " Mapping between a topic (represented by T::Hash) and a vector of indexes",
              " of events in the `<Events<T>>` list.",
              "",
              " All topic vectors have deterministic storage locations depending on the topic. This",
              " allows light-clients to leverage the changes trie storage tracking mechanism and",
              " in case of changes fetch the list of events of interest.",
              "",
              " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just",
              " the `EventIndex` then in case if the topic has the same contents on the next block",
              " no notification will be triggered thus the event might be lost."
            ]
          },
          {
            "name": "LastRuntimeUpgrade",
            "modifier": "Optional",
            "type": {
              "tag": "Plain",
              "value": {
                "value": 46
              }
            },
            "default": {
              "0": 0
            },
            "docs": [" Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."]
          },
          {
            "name": "UpgradedToU32RefCount",
            "modifier": "Default",
            "type": {
              "tag": "Plain",
              "value": {
                "value": 49
              }
            },
            "default": {
              "0": 0
            },
            "docs": [" True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."]
          },
          {
            "name": "UpgradedToTripleRefCount",
            "modifier": "Default",
            "type": {
              "tag": "Plain",
              "value": {
                "value": 49
              }
            },
            "default": {
              "0": 0
            },
            "docs": [
              " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
              " (default) if not."
            ]
          },
          {
            "name": "ExecutionPhase",
            "modifier": "Optional",
            "type": {
              "tag": "Plain",
              "value": {
                "value": 42
              }
            },
            "default": {
              "0": 0
            },
            "docs": [" The execution phase of the block."]
          }
        ]
      },
      "calls": 50,
      "event": 20,
      "constants": [
        {
          "name": "BlockWeights",
          "typeId": 54,
          "value": {
            "0": 98,
            "1": 79,
            "2": 215,
            "3": 90,
            "4": 0,
            "5": 11,
            "6": 0,
            "7": 32,
            "8": 74,
            "9": 169,
            "10": 209,
            "11": 1,
            "12": 19,
            "13": 255,
            "14": 255,
            "15": 255,
            "16": 255,
            "17": 255,
            "18": 255,
            "19": 255,
            "20": 255,
            "21": 2,
            "22": 192,
            "23": 205,
            "24": 23,
            "25": 0,
            "26": 1,
            "27": 11,
            "28": 0,
            "29": 88,
            "30": 22,
            "31": 168,
            "32": 46,
            "33": 1,
            "34": 19,
            "35": 102,
            "36": 102,
            "37": 102,
            "38": 102,
            "39": 102,
            "40": 102,
            "41": 102,
            "42": 166,
            "43": 1,
            "44": 11,
            "45": 0,
            "46": 152,
            "47": 247,
            "48": 62,
            "49": 93,
            "50": 1,
            "51": 19,
            "52": 255,
            "53": 255,
            "54": 255,
            "55": 255,
            "56": 255,
            "57": 255,
            "58": 255,
            "59": 191,
            "60": 1,
            "61": 0,
            "62": 0,
            "63": 2,
            "64": 192,
            "65": 205,
            "66": 23,
            "67": 0,
            "68": 1,
            "69": 11,
            "70": 0,
            "71": 224,
            "72": 104,
            "73": 18,
            "74": 163,
            "75": 1,
            "76": 19,
            "77": 102,
            "78": 102,
            "79": 102,
            "80": 102,
            "81": 102,
            "82": 102,
            "83": 102,
            "84": 230,
            "85": 1,
            "86": 11,
            "87": 0,
            "88": 32,
            "89": 74,
            "90": 169,
            "91": 209,
            "92": 1,
            "93": 19,
            "94": 255,
            "95": 255,
            "96": 255,
            "97": 255,
            "98": 255,
            "99": 255,
            "100": 255,
            "101": 255,
            "102": 1,
            "103": 7,
            "104": 0,
            "105": 136,
            "106": 82,
            "107": 106,
            "108": 116,
            "109": 19,
            "110": 0,
            "111": 0,
            "112": 0,
            "113": 0,
            "114": 0,
            "115": 0,
            "116": 0,
            "117": 64,
            "118": 2,
            "119": 192,
            "120": 205,
            "121": 23,
            "122": 0,
            "123": 0,
            "124": 0,
            "125": 0
          },
          "docs": [" Block & extrinsics weights: base values and limits."]
        },
        {
          "name": "BlockLength",
          "typeId": 58,
          "value": {
            "0": 0,
            "1": 0,
            "2": 60,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 80,
            "7": 0,
            "8": 0,
            "9": 0,
            "10": 80,
            "11": 0
          },
          "docs": [" The maximum length of a block (in bytes)."]
        },
        {
          "name": "BlockHashCount",
          "typeId": 4,
          "value": {
            "0": 96,
            "1": 9,
            "2": 0,
            "3": 0
          },
          "docs": [" Maximum number of block number to block hash mappings to keep (oldest pruned first)."]
        },
        {
          "name": "DbWeight",
          "typeId": 60,
          "value": {
            "0": 64,
            "1": 120,
            "2": 125,
            "3": 1,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0,
            "9": 225,
            "10": 245,
            "11": 5,
            "12": 0,
            "13": 0,
            "14": 0,
            "15": 0
          },
          "docs": [" The weight of runtime database operations the runtime can invoke."]
        },
        {
          "name": "Version",
          "typeId": 61,
          "value": {
            "0": 52,
            "1": 110,
            "2": 111,
            "3": 100,
            "4": 101,
            "5": 45,
            "6": 116,
            "7": 101,
            "8": 109,
            "9": 112,
            "10": 108,
            "11": 97,
            "12": 116,
            "13": 101,
            "14": 52,
            "15": 110,
            "16": 111,
            "17": 100,
            "18": 101,
            "19": 45,
            "20": 116,
            "21": 101,
            "22": 109,
            "23": 112,
            "24": 108,
            "25": 97,
            "26": 116,
            "27": 101,
            "28": 1,
            "29": 0,
            "30": 0,
            "31": 0,
            "32": 100,
            "33": 0,
            "34": 0,
            "35": 0,
            "36": 1,
            "37": 0,
            "38": 0,
            "39": 0,
            "40": 44,
            "41": 223,
            "42": 106,
            "43": 203,
            "44": 104,
            "45": 153,
            "46": 7,
            "47": 96,
            "48": 155,
            "49": 4,
            "50": 0,
            "51": 0,
            "52": 0,
            "53": 55,
            "54": 227,
            "55": 151,
            "56": 252,
            "57": 124,
            "58": 145,
            "59": 245,
            "60": 228,
            "61": 1,
            "62": 0,
            "63": 0,
            "64": 0,
            "65": 64,
            "66": 254,
            "67": 58,
            "68": 212,
            "69": 1,
            "70": 248,
            "71": 149,
            "72": 154,
            "73": 6,
            "74": 0,
            "75": 0,
            "76": 0,
            "77": 210,
            "78": 188,
            "79": 152,
            "80": 151,
            "81": 238,
            "82": 208,
            "83": 143,
            "84": 21,
            "85": 3,
            "86": 0,
            "87": 0,
            "88": 0,
            "89": 247,
            "90": 139,
            "91": 39,
            "92": 139,
            "93": 229,
            "94": 63,
            "95": 69,
            "96": 76,
            "97": 2,
            "98": 0,
            "99": 0,
            "100": 0,
            "101": 221,
            "102": 113,
            "103": 141,
            "104": 92,
            "105": 197,
            "106": 50,
            "107": 98,
            "108": 212,
            "109": 1,
            "110": 0,
            "111": 0,
            "112": 0,
            "113": 171,
            "114": 60,
            "115": 5,
            "116": 114,
            "117": 41,
            "118": 31,
            "119": 235,
            "120": 139,
            "121": 1,
            "122": 0,
            "123": 0,
            "124": 0,
            "125": 237,
            "126": 153,
            "127": 197,
            "128": 172,
            "129": 178,
            "130": 94,
            "131": 237,
            "132": 245,
            "133": 3,
            "134": 0,
            "135": 0,
            "136": 0,
            "137": 188,
            "138": 157,
            "139": 137,
            "140": 144,
            "141": 79,
            "142": 91,
            "143": 146,
            "144": 63,
            "145": 1,
            "146": 0,
            "147": 0,
            "148": 0,
            "149": 55,
            "150": 200,
            "151": 187,
            "152": 19,
            "153": 80,
            "154": 169,
            "155": 162,
            "156": 168,
            "157": 3,
            "158": 0,
            "159": 0,
            "160": 0,
            "161": 243,
            "162": 255,
            "163": 20,
            "164": 213,
            "165": 171,
            "166": 82,
            "167": 112,
            "168": 89,
            "169": 3,
            "170": 0,
            "171": 0,
            "172": 0,
            "173": 1,
            "174": 0,
            "175": 0,
            "176": 0,
            "177": 1
          },
          "docs": [" Get the chain's current version."]
        },
        {
          "name": "SS58Prefix",
          "typeId": 66,
          "value": {
            "0": 42,
            "1": 0
          },
          "docs": [
            " The designated SS58 prefix of this chain.",
            "",
            " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
            " that the runtime should know about the prefix in order to make use of it as",
            " an identifier of the chain."
          ]
        }
      ],
      "error": 67,
      "index": 0
    },
    {
      "name": "RandomnessCollectiveFlip",
      "storage": {
        "prefix": "RandomnessCollectiveFlip",
        "entries": [
          {
            "name": "RandomMaterial",
            "modifier": "Default",
            "type": {
              "tag": "Plain",
              "value": {
                "value": 68
              }
            },
            "default": {
              "0": 0
            },
            "docs": [
              " Series of block headers from the last 81 blocks that acts as random seed material. This",
              " is arranged as a ring buffer with `block_number % 81` being the index into the `Vec` of",
              " the oldest hash."
            ]
          }
        ]
      },
      "constants": [],
      "index": 1
    },
    {
      "name": "Timestamp",
      "storage": {
        "prefix": "Timestamp",
        "entries": [
          {
            "name": "Now",
            "modifier": "Default",
            "type": {
              "tag": "Plain",
              "value": {
                "value": 10
              }
            },
            "default": {
              "0": 0,
              "1": 0,
              "2": 0,
              "3": 0,
              "4": 0,
              "5": 0,
              "6": 0,
              "7": 0
            },
            "docs": [" Current time for the current block."]
          },
          {
            "name": "DidUpdate",
            "modifier": "Default",
            "type": {
              "tag": "Plain",
              "value": {
                "value": 49
              }
            },
            "default": {
              "0": 0
            },
            "docs": [" Did the timestamp get updated in this block?"]
          }
        ]
      },
      "calls": 69,
      "constants": [
        {
          "name": "MinimumPeriod",
          "typeId": 10,
          "value": {
            "0": 184,
            "1": 11,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0
          },
          "docs": [
            " The minimum period between blocks. Beware that this is different to the *expected*",
            " period that the block production apparatus provides. Your chosen consensus system will",
            " generally work with this to determine a sensible block time. e.g. For Aura, it will be",
            " double this period on default settings."
          ]
        }
      ],
      "index": 2
    },
    {
      "name": "Aura",
      "storage": {
        "prefix": "Aura",
        "entries": [
          {
            "name": "Authorities",
            "modifier": "Default",
            "type": {
              "tag": "Plain",
              "value": {
                "value": 70
              }
            },
            "default": {
              "0": 0
            },
            "docs": [" The current authority set."]
          },
          {
            "name": "CurrentSlot",
            "modifier": "Default",
            "type": {
              "tag": "Plain",
              "value": {
                "value": 74
              }
            },
            "default": {
              "0": 0,
              "1": 0,
              "2": 0,
              "3": 0,
              "4": 0,
              "5": 0,
              "6": 0,
              "7": 0
            },
            "docs": [" The current slot of this block.", "", " This will be set in `on_initialize`."]
          }
        ]
      },
      "constants": [],
      "index": 3
    },
    {
      "name": "Grandpa",
      "storage": {
        "prefix": "Grandpa",
        "entries": [
          {
            "name": "State",
            "modifier": "Default",
            "type": {
              "tag": "Plain",
              "value": {
                "value": 75
              }
            },
            "default": {
              "0": 0
            },
            "docs": [" State of the current authority set."]
          },
          {
            "name": "PendingChange",
            "modifier": "Optional",
            "type": {
              "tag": "Plain",
              "value": {
                "value": 76
              }
            },
            "default": {
              "0": 0
            },
            "docs": [" Pending change: (signaled at, scheduled change)."]
          },
          {
            "name": "NextForced",
            "modifier": "Optional",
            "type": {
              "tag": "Plain",
              "value": {
                "value": 4
              }
            },
            "default": {
              "0": 0
            },
            "docs": [" next block number where we can force a change."]
          },
          {
            "name": "Stalled",
            "modifier": "Optional",
            "type": {
              "tag": "Plain",
              "value": {
                "value": 45
              }
            },
            "default": {
              "0": 0
            },
            "docs": [" `true` if we are currently stalled."]
          },
          {
            "name": "CurrentSetId",
            "modifier": "Default",
            "type": {
              "tag": "Plain",
              "value": {
                "value": 10
              }
            },
            "default": {
              "0": 0,
              "1": 0,
              "2": 0,
              "3": 0,
              "4": 0,
              "5": 0,
              "6": 0,
              "7": 0
            },
            "docs": [
              " The number of changes (both in terms of keys and underlying economic responsibilities)",
              " in the \"set\" of Grandpa validators from genesis."
            ]
          },
          {
            "name": "SetIdSession",
            "modifier": "Optional",
            "type": {
              "tag": "Map",
              "value": {
                "hashers": ["twox64Concat"],
                "key": 10,
                "value": 4
              }
            },
            "default": {
              "0": 0
            },
            "docs": [
              " A mapping from grandpa set ID to the index of the *most recent* session for which its",
              " members were responsible.",
              "",
              " This is only used for validating equivocation proofs. An equivocation proof must",
              " contains a key-ownership proof for a given session, therefore we need a way to tie",
              " together sessions and GRANDPA set ids, i.e. we need to validate that a validator",
              " was the owner of a given key on a given session, and what the active set ID was",
              " during that session.",
              "",
              " TWOX-NOTE: `SetId` is not under user control."
            ]
          }
        ]
      },
      "calls": 79,
      "event": 29,
      "constants": [
        {
          "name": "MaxAuthorities",
          "typeId": 4,
          "value": {
            "0": 32,
            "1": 0,
            "2": 0,
            "3": 0
          },
          "docs": [" Max Authorities in use"]
        },
        {
          "name": "MaxSetIdSessionEntries",
          "typeId": 10,
          "value": {
            "0": 0,
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0
          },
          "docs": [
            " The maximum number of entries to keep in the set id to session index mapping.",
            "",
            " Since the `SetIdSession` map is only used for validating equivocations this",
            " value should relate to the bonding duration of whatever staking system is",
            " being used (if any). If equivocation handling is not enabled then this value",
            " can be zero."
          ]
        }
      ],
      "error": 92,
      "index": 4
    },
    {
      "name": "Balances",
      "storage": {
        "prefix": "Balances",
        "entries": [
          {
            "name": "TotalIssuance",
            "modifier": "Default",
            "type": {
              "tag": "Plain",
              "value": {
                "value": 6
              }
            },
            "default": {
              "0": 0,
              "1": 0,
              "2": 0,
              "3": 0,
              "4": 0,
              "5": 0,
              "6": 0,
              "7": 0,
              "8": 0,
              "9": 0,
              "10": 0,
              "11": 0,
              "12": 0,
              "13": 0,
              "14": 0,
              "15": 0
            },
            "docs": [" The total units issued in the system."]
          },
          {
            "name": "InactiveIssuance",
            "modifier": "Default",
            "type": {
              "tag": "Plain",
              "value": {
                "value": 6
              }
            },
            "default": {
              "0": 0,
              "1": 0,
              "2": 0,
              "3": 0,
              "4": 0,
              "5": 0,
              "6": 0,
              "7": 0,
              "8": 0,
              "9": 0,
              "10": 0,
              "11": 0,
              "12": 0,
              "13": 0,
              "14": 0,
              "15": 0
            },
            "docs": [" The total units of outstanding deactivated balance in the system."]
          },
          {
            "name": "Account",
            "modifier": "Default",
            "type": {
              "tag": "Map",
              "value": {
                "hashers": ["blake2_128Concat"],
                "key": 0,
                "value": 5
              }
            },
            "default": {
              "0": 0,
              "1": 0,
              "2": 0,
              "3": 0,
              "4": 0,
              "5": 0,
              "6": 0,
              "7": 0,
              "8": 0,
              "9": 0,
              "10": 0,
              "11": 0,
              "12": 0,
              "13": 0,
              "14": 0,
              "15": 0,
              "16": 0,
              "17": 0,
              "18": 0,
              "19": 0,
              "20": 0,
              "21": 0,
              "22": 0,
              "23": 0,
              "24": 0,
              "25": 0,
              "26": 0,
              "27": 0,
              "28": 0,
              "29": 0,
              "30": 0,
              "31": 0,
              "32": 0,
              "33": 0,
              "34": 0,
              "35": 0,
              "36": 0,
              "37": 0,
              "38": 0,
              "39": 0,
              "40": 0,
              "41": 0,
              "42": 0,
              "43": 0,
              "44": 0,
              "45": 0,
              "46": 0,
              "47": 0,
              "48": 0,
              "49": 0,
              "50": 0,
              "51": 0,
              "52": 0,
              "53": 0,
              "54": 0,
              "55": 0,
              "56": 0,
              "57": 0,
              "58": 0,
              "59": 0,
              "60": 0,
              "61": 0,
              "62": 0,
              "63": 0
            },
            "docs": [
              " The Balances pallet example of storing the balance of an account.",
              "",
              " # Example",
              "",
              " ```nocompile",
              "  impl pallet_balances::Config for Runtime {",
              "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>",
              "  }",
              " ```",
              "",
              " You can also store the balance of an account in the `System` pallet.",
              "",
              " # Example",
              "",
              " ```nocompile",
              "  impl pallet_balances::Config for Runtime {",
              "   type AccountStore = System",
              "  }",
              " ```",
              "",
              " But this comes with tradeoffs, storing account balances in the system pallet stores",
              " `frame_system` data alongside the account data contrary to storing account balances in the",
              " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
              " NOTE: This is only used in the case that this pallet is used to store balances."
            ]
          },
          {
            "name": "Locks",
            "modifier": "Default",
            "type": {
              "tag": "Map",
              "value": {
                "hashers": ["blake2_128Concat"],
                "key": 0,
                "value": 93
              }
            },
            "default": {
              "0": 0
            },
            "docs": [
              " Any liquidity locks on some account balances.",
              " NOTE: Should only be accessed when setting, changing and freeing a lock."
            ]
          },
          {
            "name": "Reserves",
            "modifier": "Default",
            "type": {
              "tag": "Map",
              "value": {
                "hashers": ["blake2_128Concat"],
                "key": 0,
                "value": 97
              }
            },
            "default": {
              "0": 0
            },
            "docs": [" Named reserves on some account balances."]
          }
        ]
      },
      "calls": 100,
      "event": 34,
      "constants": [
        {
          "name": "ExistentialDeposit",
          "typeId": 6,
          "value": {
            "0": 244,
            "1": 1,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0,
            "9": 0,
            "10": 0,
            "11": 0,
            "12": 0,
            "13": 0,
            "14": 0,
            "15": 0
          },
          "docs": [" The minimum amount required to keep an account open."]
        },
        {
          "name": "MaxLocks",
          "typeId": 4,
          "value": {
            "0": 50,
            "1": 0,
            "2": 0,
            "3": 0
          },
          "docs": [
            " The maximum number of locks that should exist on an account.",
            " Not strictly enforced, but used for weight estimation."
          ]
        },
        {
          "name": "MaxReserves",
          "typeId": 4,
          "value": {
            "0": 0,
            "1": 0,
            "2": 0,
            "3": 0
          },
          "docs": [" The maximum number of named reserves that can exist on an account."]
        }
      ],
      "error": 105,
      "index": 5
    },
    {
      "name": "TransactionPayment",
      "storage": {
        "prefix": "TransactionPayment",
        "entries": [
          {
            "name": "NextFeeMultiplier",
            "modifier": "Default",
            "type": {
              "tag": "Plain",
              "value": {
                "value": 106
              }
            },
            "default": {
              "0": 0,
              "1": 0,
              "2": 100,
              "3": 167,
              "4": 179,
              "5": 182,
              "6": 224,
              "7": 13,
              "8": 0,
              "9": 0,
              "10": 0,
              "11": 0,
              "12": 0,
              "13": 0,
              "14": 0,
              "15": 0
            },
            "docs": []
          },
          {
            "name": "StorageVersion",
            "modifier": "Default",
            "type": {
              "tag": "Plain",
              "value": {
                "value": 107
              }
            },
            "default": {
              "0": 0
            },
            "docs": []
          }
        ]
      },
      "event": 36,
      "constants": [
        {
          "name": "OperationalFeeMultiplier",
          "typeId": 2,
          "value": {
            "0": 5
          },
          "docs": [
            " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
            " `priority`",
            "",
            " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later",
            " added to a tip component in regular `priority` calculations.",
            " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
            " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
            "",
            " ```rust,ignore",
            " // For `Normal`",
            " let priority = priority_calc(tip);",
            "",
            " // For `Operational`",
            " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
            " let priority = priority_calc(tip + virtual_tip);",
            " ```",
            "",
            " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
            " sent with the transaction. So, not only does the transaction get a priority bump based",
            " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
            " transactions."
          ]
        }
      ],
      "index": 6
    },
    {
      "name": "Sudo",
      "storage": {
        "prefix": "Sudo",
        "entries": [
          {
            "name": "Key",
            "modifier": "Optional",
            "type": {
              "tag": "Plain",
              "value": {
                "value": 0
              }
            },
            "default": {
              "0": 0
            },
            "docs": [" The `AccountId` of the sudo key."]
          }
        ]
      },
      "calls": 108,
      "event": 37,
      "constants": [],
      "error": 111,
      "index": 7
    },
    {
      "name": "TemplateModule",
      "storage": {
        "prefix": "TemplateModule",
        "entries": [
          {
            "name": "Something",
            "modifier": "Optional",
            "type": {
              "tag": "Plain",
              "value": {
                "value": 4
              }
            },
            "default": {
              "0": 0
            },
            "docs": []
          }
        ]
      },
      "calls": 110,
      "event": 41,
      "constants": [],
      "error": 112,
      "index": 8
    }
  ],
  "extrinsic": {
    "typeId": 113,
    "version": 4,
    "signedExtensions": [
      {
        "ident": "CheckNonZeroSender",
        "typeId": 119,
        "additionalSigned": 39
      },
      {
        "ident": "CheckSpecVersion",
        "typeId": 120,
        "additionalSigned": 4
      },
      {
        "ident": "CheckTxVersion",
        "typeId": 121,
        "additionalSigned": 4
      },
      {
        "ident": "CheckGenesis",
        "typeId": 122,
        "additionalSigned": 11
      },
      {
        "ident": "CheckMortality",
        "typeId": 123,
        "additionalSigned": 11
      },
      {
        "ident": "CheckNonce",
        "typeId": 125,
        "additionalSigned": 39
      },
      {
        "ident": "CheckWeight",
        "typeId": 126,
        "additionalSigned": 39
      },
      {
        "ident": "ChargeTransactionPayment",
        "typeId": 127,
        "additionalSigned": 39
      }
    ]
  },
  "runtimeType": 128
}
